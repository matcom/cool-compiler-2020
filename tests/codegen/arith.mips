
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:38 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
A2I:   .asciiz    "A2I"
# Function END
A:   .asciiz    "A"
# Function END
B:   .asciiz    "B"
# Function END
D:   .asciiz    "D"
# Function END
E:   .asciiz    "E"
# Function END
C:   .asciiz    "C"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, function_in_int_at_IO, dummy, function_type_name_at_Object, dummy, dummy, dummy, function_abort_at_Object, function_out_string_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, function_out_int_at_IO, dummy, dummy
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, function_concat_at_String, dummy, dummy, dummy, function_length_at_String, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, function_substr_at_String, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type A2I ****
A2I_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_i2a_aux_at_A2I, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, dummy, function_abort_at_Object, dummy, function_c2i_at_A2I, function_a2i_aux_at_A2I, function_i2a_at_A2I, function_i2c_at_A2I, dummy, dummy, dummy, dummy, function_a2i_at_A2I
# Function END
# 


#  **** Type RECORD for type A2I ****
A2I_start: 
   A2I_vtable_pointer:   .word    A2I_vtable
   # Function END
A2I_end: 
# 


#  **** VTABLE for type A ****
A_vtable:   .word    dummy, function_method4_at_A, function_value_at_A, dummy, dummy, dummy, dummy, dummy, dummy, function_method2_at_A, dummy, function_method3_at_A, function_method1_at_A, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, function_method5_at_A, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_set_var_at_A, dummy
# Function END
# 


#  **** Type RECORD for type A ****
A_start: 
   A_vtable_pointer:   .word    A_vtable
   # Function END
A_end: 
# 


#  **** VTABLE for type B ****
B_vtable:   .word    dummy, function_method4_at_A, function_value_at_A, dummy, dummy, dummy, dummy, dummy, dummy, function_method2_at_A, dummy, function_method3_at_A, function_method1_at_A, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, function_method5_at_B, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_set_var_at_A, dummy
# Function END
# 


#  **** Type RECORD for type B ****
B_start: 
   B_vtable_pointer:   .word    B_vtable
   # Function END
B_end: 
# 


#  **** VTABLE for type D ****
D_vtable:   .word    function_method7_at_D, function_method4_at_A, function_value_at_A, dummy, dummy, dummy, dummy, dummy, dummy, function_method2_at_A, dummy, function_method3_at_A, function_method1_at_A, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, function_method5_at_B, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_set_var_at_A, dummy
# Function END
# 


#  **** Type RECORD for type D ****
D_start: 
   D_vtable_pointer:   .word    D_vtable
   # Function END
D_end: 
# 


#  **** VTABLE for type E ****
E_vtable:   .word    function_method7_at_D, function_method4_at_A, function_value_at_A, dummy, dummy, function_method6_at_E, dummy, dummy, dummy, function_method2_at_A, dummy, function_method3_at_A, function_method1_at_A, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, function_method5_at_B, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_set_var_at_A, dummy
# Function END
# 


#  **** Type RECORD for type E ****
E_start: 
   E_vtable_pointer:   .word    E_vtable
   # Function END
E_end: 
# 


#  **** VTABLE for type C ****
C_vtable:   .word    dummy, function_method4_at_A, function_value_at_A, dummy, dummy, function_method6_at_C, dummy, dummy, dummy, function_method2_at_A, dummy, function_method3_at_A, function_method1_at_A, dummy, function_copy_at_Object, dummy, dummy, function_type_name_at_Object, dummy, dummy, function_method5_at_C, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_set_var_at_A, dummy
# Function END
# 


#  **** Type RECORD for type C ****
C_start: 
   C_vtable_pointer:   .word    C_vtable
   # Function END
C_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    dummy, dummy, dummy, function_menu_at_Main, function_get_int_at_Main, dummy, dummy, function_in_string_at_IO, dummy, dummy, dummy, dummy, dummy, function_class_type_at_Main, function_copy_at_Object, function_in_int_at_IO, function_prompt_at_Main, function_type_name_at_Object, function_print_at_Main, function_is_even_at_Main, dummy, function_abort_at_Object, function_out_string_at_IO, dummy, dummy, dummy, dummy, dummy, function_main_at_Main, function_out_int_at_IO, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 1, 1, 2, 3, 4, 3, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1
A2I__TDT:   .word    -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1
A__TDT:   .word    -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 2, -1
B__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 1, -1
D__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1
E__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1
C__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "0"
# 


data_5:   .asciiz    "1"
# 


data_6:   .asciiz    "2"
# 


data_7:   .asciiz    "3"
# 


data_8:   .asciiz    "4"
# 


data_9:   .asciiz    "5"
# 


data_10:   .asciiz    "6"
# 


data_11:   .asciiz    "7"
# 


data_12:   .asciiz    "8"
# 


data_13:   .asciiz    "9"
# 


data_14:   .asciiz    "0"
# 


data_15:   .asciiz    "1"
# 


data_16:   .asciiz    "2"
# 


data_17:   .asciiz    "3"
# 


data_18:   .asciiz    "4"
# 


data_19:   .asciiz    "5"
# 


data_20:   .asciiz    "6"
# 


data_21:   .asciiz    "7"
# 


data_22:   .asciiz    "8"
# 


data_23:   .asciiz    "9"
# 


data_24:   .asciiz    ""
# 


data_25:   .asciiz    "-"
# 


data_26:   .asciiz    "+"
# 


data_27:   .asciiz    "0"
# 


data_28:   .asciiz    "-"
# 


data_29:   .asciiz    ""
# 


data_30:   .asciiz    "\n\tTo add a number to "
# 


data_31:   .asciiz    "...enter a:\n"
# 


data_32:   .asciiz    "\tTo negate "
# 


data_33:   .asciiz    "...enter b:\n"
# 


data_34:   .asciiz    "\tTo find the difference between "
# 


data_35:   .asciiz    "and another number...enter c:\n"
# 


data_36:   .asciiz    "\tTo find the factorial of "
# 


data_37:   .asciiz    "...enter d:\n"
# 


data_38:   .asciiz    "\tTo square "
# 


data_39:   .asciiz    "...enter e:\n"
# 


data_40:   .asciiz    "\tTo cube "
# 


data_41:   .asciiz    "...enter f:\n"
# 


data_42:   .asciiz    "\tTo find out if "
# 


data_43:   .asciiz    "is a multiple of 3...enter g:\n"
# 


data_44:   .asciiz    "\tTo divide "
# 


data_45:   .asciiz    "by 8...enter h:\n"
# 


data_46:   .asciiz    "\tTo get a new number...enter j:\n"
# 


data_47:   .asciiz    "\tTo quit...enter q:\n\n"
# 


data_48:   .asciiz    "\n"
# 


data_49:   .asciiz    "Please enter a number...  "
# 


data_50:   .asciiz    "Class type is now A\n"
# 


data_51:   .asciiz    "Class type is now B\n"
# 


data_52:   .asciiz    "Class type is now C\n"
# 


data_53:   .asciiz    "Class type is now D\n"
# 


data_54:   .asciiz    "Class type is now E\n"
# 


data_55:   .asciiz    "Oooops\n"
# 


data_56:   .asciiz    " "
# 


data_57:   .asciiz    "number "
# 


data_58:   .asciiz    "is even!\n"
# 


data_59:   .asciiz    "is odd!\n"
# 


data_60:   .asciiz    "a"
# 


data_61:   .asciiz    "b"
# 


data_62:   .asciiz    "Oooops\n"
# 


data_63:   .asciiz    "c"
# 


data_64:   .asciiz    "d"
# 


data_65:   .asciiz    "e"
# 


data_66:   .asciiz    "f"
# 


data_67:   .asciiz    "g"
# 


data_68:   .asciiz    "number "
# 


data_69:   .asciiz    "is divisible by 3.\n"
# 


data_70:   .asciiz    "number "
# 


data_71:   .asciiz    "is not divisible by 3.\n"
# 


data_72:   .asciiz    "h"
# 


data_73:   .asciiz    "number "
# 


data_74:   .asciiz    "is equal to "
# 


data_75:   .asciiz    "times 8 with a remainder of "
# 


data_76:   .asciiz    "\n"
# 


data_77:   .asciiz    "j"
# 


data_78:   .asciiz    "q"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f201b9bf640>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 28 bytes of memory
   li $a0, 28
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 44
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__char__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__avar__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__a_var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__flag__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 112($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_c2i_at_A2I implementation.
# @Params:
# 	0($fp) = param_c2i_at_A2I_char_0
function_c2i_at_A2I: 
   # Allocate stack frame for function function_c2i_at_A2I.
   subu $sp, $sp, 264
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 264
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_4
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_3
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_3
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_3
   # IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_FALSE_3
   # IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_FALSE_3
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_3
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_6
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_6
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_6
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_7
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_7
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_4
   # GOTO label_FALSE_3
   j label_FALSE_3
   label_COMPARE_BY_VALUE_7: 
      # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
      # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_4
      # GOTO label_FALSE_3
      j label_FALSE_3
      label_COMPARE_STRING_6: 
         # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_CONTINUE_8
         # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_CONTINUE_8
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_8
         # GOTO label_FALSE_3
         j label_FALSE_3
         label_CONTINUE_8: 
            # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_9: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_10
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_9
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_10: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
                  # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_4
                  label_FALSE_3: 
                     # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_5
j label_END_5
label_TRUE_4: 
   # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_5: 
# LOCAL local_c2i_at_A2I_internal_0 --> -4($fp)
# LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_FALSEIF_1
# IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_FALSEIF_1
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_1
# LOCAL local_c2i_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -24($fp)
# LOCAL local_c2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_c2i_at_A2I_internal_5 --> -24($fp)
# local_c2i_at_A2I_internal_1 = local_c2i_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_2
j label_ENDIF_2
label_FALSEIF_1: 
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_5
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -44($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_13
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_13
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_13
   # IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_FALSE_13
   # IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_FALSE_13
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_13
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_STRING_16
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_STRING_16
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_16
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_17
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_17
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -44($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_14
   # GOTO label_FALSE_13
   j label_FALSE_13
   label_COMPARE_BY_VALUE_17: 
      # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
      lw $a0, 0($fp)
      lw $a1, -44($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
      # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_14
      # GOTO label_FALSE_13
      j label_FALSE_13
      label_COMPARE_STRING_16: 
         # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -44($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_CONTINUE_18
         # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_CONTINUE_18
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_18
         # GOTO label_FALSE_13
         j label_FALSE_13
         label_CONTINUE_18: 
            # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -44($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_19: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_20
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_19
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_20: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
                  # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_14
                  label_FALSE_13: 
                     # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_15
j label_END_15
label_TRUE_14: 
   # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_15: 
# LOCAL local_c2i_at_A2I_internal_6 --> -28($fp)
# LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_FALSEIF_11
# IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_FALSEIF_11
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_11
# LOCAL local_c2i_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -48($fp)
# LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
# LOCAL local_c2i_at_A2I_internal_11 --> -48($fp)
# local_c2i_at_A2I_internal_7 = local_c2i_at_A2I_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_12
j label_ENDIF_12
label_FALSEIF_11: 
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_6
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_23
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_23
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_23
   # IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_FALSE_23
   # IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_FALSE_23
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_23
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_STRING_26
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_STRING_26
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_STRING_26
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_27
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_27
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
   lw $t0, -64($fp)
   beq $t0, 0, label_TRUE_24
   # GOTO label_FALSE_23
   j label_FALSE_23
   label_COMPARE_BY_VALUE_27: 
      # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
      lw $a0, 0($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -64($fp)
      # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
      # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
      lw $t0, -64($fp)
      beq $t0, 0, label_TRUE_24
      # GOTO label_FALSE_23
      j label_FALSE_23
      label_COMPARE_STRING_26: 
         # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -64($fp)
         # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_CONTINUE_28
         # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_CONTINUE_28
         lw $t0, -64($fp)
         beq $t0, 0, label_CONTINUE_28
         # GOTO label_FALSE_23
         j label_FALSE_23
         label_CONTINUE_28: 
            # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_29: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_30
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_29
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_30: 
                  # Store result
                  sw $a2, -64($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
                  # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
                  lw $t0, -64($fp)
                  beq $t0, 0, label_TRUE_24
                  label_FALSE_23: 
                     # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -60($fp)
                     # GOTO label_END_25
j label_END_25
label_TRUE_24: 
   # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_END_25: 
# LOCAL local_c2i_at_A2I_internal_12 --> -52($fp)
# LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
# Obtain value from -60($fp)
lw $v0, -60($fp)
lw $v0, 12($v0)
sw $v0, -52($fp)
# IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_FALSEIF_21
# IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_FALSEIF_21
lw $t0, -52($fp)
beq $t0, 0, label_FALSEIF_21
# LOCAL local_c2i_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 2
sw $t0, 12($v0)
sw $v0, -72($fp)
# LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
# LOCAL local_c2i_at_A2I_internal_17 --> -72($fp)
# local_c2i_at_A2I_internal_13 = local_c2i_at_A2I_internal_17
lw $t0, -72($fp)
sw $t0, -56($fp)
# GOTO label_ENDIF_22
j label_ENDIF_22
label_FALSEIF_21: 
   # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_7
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -92($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_33
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_33
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_33
   # IF_ZERO local_c2i_at_A2I_internal_22 GOTO label_FALSE_33
   # IF_ZERO local_c2i_at_A2I_internal_22 GOTO label_FALSE_33
   lw $t0, -92($fp)
   beq $t0, 0, label_FALSE_33
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_STRING_36
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_STRING_36
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_STRING_36
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_37
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_37
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -92($fp)
   sub $a0, $a0, $a1
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
   lw $t0, -88($fp)
   beq $t0, 0, label_TRUE_34
   # GOTO label_FALSE_33
   j label_FALSE_33
   label_COMPARE_BY_VALUE_37: 
      # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
      lw $a0, 0($fp)
      lw $a1, -92($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -88($fp)
      # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
      # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
      lw $t0, -88($fp)
      beq $t0, 0, label_TRUE_34
      # GOTO label_FALSE_33
      j label_FALSE_33
      label_COMPARE_STRING_36: 
         # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -92($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -88($fp)
         # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_CONTINUE_38
         # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_CONTINUE_38
         lw $t0, -88($fp)
         beq $t0, 0, label_CONTINUE_38
         # GOTO label_FALSE_33
         j label_FALSE_33
         label_CONTINUE_38: 
            # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -92($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_39: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_40
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_39
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_40: 
                  # Store result
                  sw $a2, -88($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
                  # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
                  lw $t0, -88($fp)
                  beq $t0, 0, label_TRUE_34
                  label_FALSE_33: 
                     # LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -84($fp)
                     # GOTO label_END_35
j label_END_35
label_TRUE_34: 
   # LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   label_END_35: 
# LOCAL local_c2i_at_A2I_internal_18 --> -76($fp)
# LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
# Obtain value from -84($fp)
lw $v0, -84($fp)
lw $v0, 12($v0)
sw $v0, -76($fp)
# IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_FALSEIF_31
# IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_FALSEIF_31
lw $t0, -76($fp)
beq $t0, 0, label_FALSEIF_31
# LOCAL local_c2i_at_A2I_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 3
sw $t0, 12($v0)
sw $v0, -96($fp)
# LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
# LOCAL local_c2i_at_A2I_internal_23 --> -96($fp)
# local_c2i_at_A2I_internal_19 = local_c2i_at_A2I_internal_23
lw $t0, -96($fp)
sw $t0, -80($fp)
# GOTO label_ENDIF_32
j label_ENDIF_32
label_FALSEIF_31: 
   # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_8
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -116($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_43
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_43
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_43
   # IF_ZERO local_c2i_at_A2I_internal_28 GOTO label_FALSE_43
   # IF_ZERO local_c2i_at_A2I_internal_28 GOTO label_FALSE_43
   lw $t0, -116($fp)
   beq $t0, 0, label_FALSE_43
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_STRING_46
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_STRING_46
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_STRING_46
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -116($fp)
   sub $a0, $a0, $a1
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
   lw $t0, -112($fp)
   beq $t0, 0, label_TRUE_44
   # GOTO label_FALSE_43
   j label_FALSE_43
   label_COMPARE_BY_VALUE_47: 
      # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
      lw $a0, 0($fp)
      lw $a1, -116($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -112($fp)
      # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
      # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
      lw $t0, -112($fp)
      beq $t0, 0, label_TRUE_44
      # GOTO label_FALSE_43
      j label_FALSE_43
      label_COMPARE_STRING_46: 
         # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -116($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -112($fp)
         # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_CONTINUE_48
         # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_CONTINUE_48
         lw $t0, -112($fp)
         beq $t0, 0, label_CONTINUE_48
         # GOTO label_FALSE_43
         j label_FALSE_43
         label_CONTINUE_48: 
            # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -116($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_49: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_50
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_49
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_50: 
                  # Store result
                  sw $a2, -112($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
                  # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
                  lw $t0, -112($fp)
                  beq $t0, 0, label_TRUE_44
                  label_FALSE_43: 
                     # LOCAL local_c2i_at_A2I_internal_26 --> -108($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -108($fp)
                     # GOTO label_END_45
j label_END_45
label_TRUE_44: 
   # LOCAL local_c2i_at_A2I_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -108($fp)
   label_END_45: 
# LOCAL local_c2i_at_A2I_internal_24 --> -100($fp)
# LOCAL local_c2i_at_A2I_internal_26 --> -108($fp)
# Obtain value from -108($fp)
lw $v0, -108($fp)
lw $v0, 12($v0)
sw $v0, -100($fp)
# IF_ZERO local_c2i_at_A2I_internal_24 GOTO label_FALSEIF_41
# IF_ZERO local_c2i_at_A2I_internal_24 GOTO label_FALSEIF_41
lw $t0, -100($fp)
beq $t0, 0, label_FALSEIF_41
# LOCAL local_c2i_at_A2I_internal_29 --> -120($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -120($fp)
# LOCAL local_c2i_at_A2I_internal_25 --> -104($fp)
# LOCAL local_c2i_at_A2I_internal_29 --> -120($fp)
# local_c2i_at_A2I_internal_25 = local_c2i_at_A2I_internal_29
lw $t0, -120($fp)
sw $t0, -104($fp)
# GOTO label_ENDIF_42
j label_ENDIF_42
label_FALSEIF_41: 
   # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_9
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -140($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_53
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_53
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_53
   # IF_ZERO local_c2i_at_A2I_internal_34 GOTO label_FALSE_53
   # IF_ZERO local_c2i_at_A2I_internal_34 GOTO label_FALSE_53
   lw $t0, -140($fp)
   beq $t0, 0, label_FALSE_53
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_STRING_56
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_STRING_56
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_STRING_56
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_57
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_57
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -140($fp)
   sub $a0, $a0, $a1
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
   lw $t0, -136($fp)
   beq $t0, 0, label_TRUE_54
   # GOTO label_FALSE_53
   j label_FALSE_53
   label_COMPARE_BY_VALUE_57: 
      # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
      lw $a0, 0($fp)
      lw $a1, -140($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -136($fp)
      # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
      # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
      lw $t0, -136($fp)
      beq $t0, 0, label_TRUE_54
      # GOTO label_FALSE_53
      j label_FALSE_53
      label_COMPARE_STRING_56: 
         # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -140($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -136($fp)
         # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_CONTINUE_58
         # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_CONTINUE_58
         lw $t0, -136($fp)
         beq $t0, 0, label_CONTINUE_58
         # GOTO label_FALSE_53
         j label_FALSE_53
         label_CONTINUE_58: 
            # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -140($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_59: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_60
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_59
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_60: 
                  # Store result
                  sw $a2, -136($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
                  # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
                  lw $t0, -136($fp)
                  beq $t0, 0, label_TRUE_54
                  label_FALSE_53: 
                     # LOCAL local_c2i_at_A2I_internal_32 --> -132($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -132($fp)
                     # GOTO label_END_55
j label_END_55
label_TRUE_54: 
   # LOCAL local_c2i_at_A2I_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -132($fp)
   label_END_55: 
# LOCAL local_c2i_at_A2I_internal_30 --> -124($fp)
# LOCAL local_c2i_at_A2I_internal_32 --> -132($fp)
# Obtain value from -132($fp)
lw $v0, -132($fp)
lw $v0, 12($v0)
sw $v0, -124($fp)
# IF_ZERO local_c2i_at_A2I_internal_30 GOTO label_FALSEIF_51
# IF_ZERO local_c2i_at_A2I_internal_30 GOTO label_FALSEIF_51
lw $t0, -124($fp)
beq $t0, 0, label_FALSEIF_51
# LOCAL local_c2i_at_A2I_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -144($fp)
# LOCAL local_c2i_at_A2I_internal_31 --> -128($fp)
# LOCAL local_c2i_at_A2I_internal_35 --> -144($fp)
# local_c2i_at_A2I_internal_31 = local_c2i_at_A2I_internal_35
lw $t0, -144($fp)
sw $t0, -128($fp)
# GOTO label_ENDIF_52
j label_ENDIF_52
label_FALSEIF_51: 
   # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_10
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -164($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_63
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_63
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_63
   # IF_ZERO local_c2i_at_A2I_internal_40 GOTO label_FALSE_63
   # IF_ZERO local_c2i_at_A2I_internal_40 GOTO label_FALSE_63
   lw $t0, -164($fp)
   beq $t0, 0, label_FALSE_63
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_STRING_66
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_STRING_66
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_STRING_66
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_67
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_67
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -164($fp)
   sub $a0, $a0, $a1
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
   lw $t0, -160($fp)
   beq $t0, 0, label_TRUE_64
   # GOTO label_FALSE_63
   j label_FALSE_63
   label_COMPARE_BY_VALUE_67: 
      # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
      lw $a0, 0($fp)
      lw $a1, -164($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -160($fp)
      # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
      # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
      lw $t0, -160($fp)
      beq $t0, 0, label_TRUE_64
      # GOTO label_FALSE_63
      j label_FALSE_63
      label_COMPARE_STRING_66: 
         # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -164($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -160($fp)
         # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_CONTINUE_68
         # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_CONTINUE_68
         lw $t0, -160($fp)
         beq $t0, 0, label_CONTINUE_68
         # GOTO label_FALSE_63
         j label_FALSE_63
         label_CONTINUE_68: 
            # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -164($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_69: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_70
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_69
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_70: 
                  # Store result
                  sw $a2, -160($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
                  # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
                  lw $t0, -160($fp)
                  beq $t0, 0, label_TRUE_64
                  label_FALSE_63: 
                     # LOCAL local_c2i_at_A2I_internal_38 --> -156($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -156($fp)
                     # GOTO label_END_65
j label_END_65
label_TRUE_64: 
   # LOCAL local_c2i_at_A2I_internal_38 --> -156($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -156($fp)
   label_END_65: 
# LOCAL local_c2i_at_A2I_internal_36 --> -148($fp)
# LOCAL local_c2i_at_A2I_internal_38 --> -156($fp)
# Obtain value from -156($fp)
lw $v0, -156($fp)
lw $v0, 12($v0)
sw $v0, -148($fp)
# IF_ZERO local_c2i_at_A2I_internal_36 GOTO label_FALSEIF_61
# IF_ZERO local_c2i_at_A2I_internal_36 GOTO label_FALSEIF_61
lw $t0, -148($fp)
beq $t0, 0, label_FALSEIF_61
# LOCAL local_c2i_at_A2I_internal_41 --> -168($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 6
sw $t0, 12($v0)
sw $v0, -168($fp)
# LOCAL local_c2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_c2i_at_A2I_internal_41 --> -168($fp)
# local_c2i_at_A2I_internal_37 = local_c2i_at_A2I_internal_41
lw $t0, -168($fp)
sw $t0, -152($fp)
# GOTO label_ENDIF_62
j label_ENDIF_62
label_FALSEIF_61: 
   # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_11
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -188($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_73
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_73
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_73
   # IF_ZERO local_c2i_at_A2I_internal_46 GOTO label_FALSE_73
   # IF_ZERO local_c2i_at_A2I_internal_46 GOTO label_FALSE_73
   lw $t0, -188($fp)
   beq $t0, 0, label_FALSE_73
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_STRING_76
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_STRING_76
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_STRING_76
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_77
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_77
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -188($fp)
   sub $a0, $a0, $a1
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
   lw $t0, -184($fp)
   beq $t0, 0, label_TRUE_74
   # GOTO label_FALSE_73
   j label_FALSE_73
   label_COMPARE_BY_VALUE_77: 
      # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
      lw $a0, 0($fp)
      lw $a1, -188($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -184($fp)
      # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
      # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
      lw $t0, -184($fp)
      beq $t0, 0, label_TRUE_74
      # GOTO label_FALSE_73
      j label_FALSE_73
      label_COMPARE_STRING_76: 
         # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -188($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -184($fp)
         # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_CONTINUE_78
         # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_CONTINUE_78
         lw $t0, -184($fp)
         beq $t0, 0, label_CONTINUE_78
         # GOTO label_FALSE_73
         j label_FALSE_73
         label_CONTINUE_78: 
            # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -188($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_79: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_80
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_79
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_80: 
                  # Store result
                  sw $a2, -184($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
                  # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
                  lw $t0, -184($fp)
                  beq $t0, 0, label_TRUE_74
                  label_FALSE_73: 
                     # LOCAL local_c2i_at_A2I_internal_44 --> -180($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -180($fp)
                     # GOTO label_END_75
j label_END_75
label_TRUE_74: 
   # LOCAL local_c2i_at_A2I_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -180($fp)
   label_END_75: 
# LOCAL local_c2i_at_A2I_internal_42 --> -172($fp)
# LOCAL local_c2i_at_A2I_internal_44 --> -180($fp)
# Obtain value from -180($fp)
lw $v0, -180($fp)
lw $v0, 12($v0)
sw $v0, -172($fp)
# IF_ZERO local_c2i_at_A2I_internal_42 GOTO label_FALSEIF_71
# IF_ZERO local_c2i_at_A2I_internal_42 GOTO label_FALSEIF_71
lw $t0, -172($fp)
beq $t0, 0, label_FALSEIF_71
# LOCAL local_c2i_at_A2I_internal_47 --> -192($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 7
sw $t0, 12($v0)
sw $v0, -192($fp)
# LOCAL local_c2i_at_A2I_internal_43 --> -176($fp)
# LOCAL local_c2i_at_A2I_internal_47 --> -192($fp)
# local_c2i_at_A2I_internal_43 = local_c2i_at_A2I_internal_47
lw $t0, -192($fp)
sw $t0, -176($fp)
# GOTO label_ENDIF_72
j label_ENDIF_72
label_FALSEIF_71: 
   # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_12
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -212($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_83
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_83
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_83
   # IF_ZERO local_c2i_at_A2I_internal_52 GOTO label_FALSE_83
   # IF_ZERO local_c2i_at_A2I_internal_52 GOTO label_FALSE_83
   lw $t0, -212($fp)
   beq $t0, 0, label_FALSE_83
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_STRING_86
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_STRING_86
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_STRING_86
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_87
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_87
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -212($fp)
   sub $a0, $a0, $a1
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
   lw $t0, -208($fp)
   beq $t0, 0, label_TRUE_84
   # GOTO label_FALSE_83
   j label_FALSE_83
   label_COMPARE_BY_VALUE_87: 
      # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
      lw $a0, 0($fp)
      lw $a1, -212($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -208($fp)
      # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
      # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
      lw $t0, -208($fp)
      beq $t0, 0, label_TRUE_84
      # GOTO label_FALSE_83
      j label_FALSE_83
      label_COMPARE_STRING_86: 
         # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -212($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -208($fp)
         # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_CONTINUE_88
         # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_CONTINUE_88
         lw $t0, -208($fp)
         beq $t0, 0, label_CONTINUE_88
         # GOTO label_FALSE_83
         j label_FALSE_83
         label_CONTINUE_88: 
            # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -212($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_89: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_90
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_89
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_90: 
                  # Store result
                  sw $a2, -208($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
                  # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
                  lw $t0, -208($fp)
                  beq $t0, 0, label_TRUE_84
                  label_FALSE_83: 
                     # LOCAL local_c2i_at_A2I_internal_50 --> -204($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -204($fp)
                     # GOTO label_END_85
j label_END_85
label_TRUE_84: 
   # LOCAL local_c2i_at_A2I_internal_50 --> -204($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -204($fp)
   label_END_85: 
# LOCAL local_c2i_at_A2I_internal_48 --> -196($fp)
# LOCAL local_c2i_at_A2I_internal_50 --> -204($fp)
# Obtain value from -204($fp)
lw $v0, -204($fp)
lw $v0, 12($v0)
sw $v0, -196($fp)
# IF_ZERO local_c2i_at_A2I_internal_48 GOTO label_FALSEIF_81
# IF_ZERO local_c2i_at_A2I_internal_48 GOTO label_FALSEIF_81
lw $t0, -196($fp)
beq $t0, 0, label_FALSEIF_81
# LOCAL local_c2i_at_A2I_internal_53 --> -216($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 8
sw $t0, 12($v0)
sw $v0, -216($fp)
# LOCAL local_c2i_at_A2I_internal_49 --> -200($fp)
# LOCAL local_c2i_at_A2I_internal_53 --> -216($fp)
# local_c2i_at_A2I_internal_49 = local_c2i_at_A2I_internal_53
lw $t0, -216($fp)
sw $t0, -200($fp)
# GOTO label_ENDIF_82
j label_ENDIF_82
label_FALSEIF_81: 
   # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_13
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -236($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_93
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_93
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_93
   # IF_ZERO local_c2i_at_A2I_internal_58 GOTO label_FALSE_93
   # IF_ZERO local_c2i_at_A2I_internal_58 GOTO label_FALSE_93
   lw $t0, -236($fp)
   beq $t0, 0, label_FALSE_93
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_STRING_96
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_STRING_96
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_STRING_96
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_97
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_97
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -236($fp)
   sub $a0, $a0, $a1
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
   lw $t0, -232($fp)
   beq $t0, 0, label_TRUE_94
   # GOTO label_FALSE_93
   j label_FALSE_93
   label_COMPARE_BY_VALUE_97: 
      # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
      lw $a0, 0($fp)
      lw $a1, -236($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -232($fp)
      # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
      # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
      lw $t0, -232($fp)
      beq $t0, 0, label_TRUE_94
      # GOTO label_FALSE_93
      j label_FALSE_93
      label_COMPARE_STRING_96: 
         # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -236($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -232($fp)
         # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_CONTINUE_98
         # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_CONTINUE_98
         lw $t0, -232($fp)
         beq $t0, 0, label_CONTINUE_98
         # GOTO label_FALSE_93
         j label_FALSE_93
         label_CONTINUE_98: 
            # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -236($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_99: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_100
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_99
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_100: 
                  # Store result
                  sw $a2, -232($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
                  # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
                  lw $t0, -232($fp)
                  beq $t0, 0, label_TRUE_94
                  label_FALSE_93: 
                     # LOCAL local_c2i_at_A2I_internal_56 --> -228($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -228($fp)
                     # GOTO label_END_95
j label_END_95
label_TRUE_94: 
   # LOCAL local_c2i_at_A2I_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -228($fp)
   label_END_95: 
# LOCAL local_c2i_at_A2I_internal_54 --> -220($fp)
# LOCAL local_c2i_at_A2I_internal_56 --> -228($fp)
# Obtain value from -228($fp)
lw $v0, -228($fp)
lw $v0, 12($v0)
sw $v0, -220($fp)
# IF_ZERO local_c2i_at_A2I_internal_54 GOTO label_FALSEIF_91
# IF_ZERO local_c2i_at_A2I_internal_54 GOTO label_FALSEIF_91
lw $t0, -220($fp)
beq $t0, 0, label_FALSEIF_91
# LOCAL local_c2i_at_A2I_internal_59 --> -240($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 9
sw $t0, 12($v0)
sw $v0, -240($fp)
# LOCAL local_c2i_at_A2I_internal_55 --> -224($fp)
# LOCAL local_c2i_at_A2I_internal_59 --> -240($fp)
# local_c2i_at_A2I_internal_55 = local_c2i_at_A2I_internal_59
lw $t0, -240($fp)
sw $t0, -224($fp)
# GOTO label_ENDIF_92
j label_ENDIF_92
label_FALSEIF_91: 
   # LOCAL local_c2i_at_A2I_internal_62 --> -252($fp)
   # local_c2i_at_A2I_internal_62 = SELF
   sw $s1, -252($fp)
   # LOCAL local_c2i_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_c2i_at_A2I_internal_62 --> -252($fp)
   # local_c2i_at_A2I_internal_60 = local_c2i_at_A2I_internal_62
   lw $t0, -252($fp)
   sw $t0, -244($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_c2i_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_c2i_at_A2I_internal_61 --> -248($fp)
   # local_c2i_at_A2I_internal_61 = VCALL local_c2i_at_A2I_internal_60 abort
   # Save new self pointer in $s1
   lw $s1, -244($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 84($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -248($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_c2i_at_A2I_internal_63 --> -256($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -256($fp)
   # LOCAL local_c2i_at_A2I_internal_55 --> -224($fp)
   # LOCAL local_c2i_at_A2I_internal_63 --> -256($fp)
   # local_c2i_at_A2I_internal_55 = local_c2i_at_A2I_internal_63
   lw $t0, -256($fp)
   sw $t0, -224($fp)
   label_ENDIF_92: 
# LOCAL local_c2i_at_A2I_internal_49 --> -200($fp)
# LOCAL local_c2i_at_A2I_internal_55 --> -224($fp)
# local_c2i_at_A2I_internal_49 = local_c2i_at_A2I_internal_55
lw $t0, -224($fp)
sw $t0, -200($fp)
label_ENDIF_82: 
# LOCAL local_c2i_at_A2I_internal_43 --> -176($fp)
# LOCAL local_c2i_at_A2I_internal_49 --> -200($fp)
# local_c2i_at_A2I_internal_43 = local_c2i_at_A2I_internal_49
lw $t0, -200($fp)
sw $t0, -176($fp)
label_ENDIF_72: 
# LOCAL local_c2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_c2i_at_A2I_internal_43 --> -176($fp)
# local_c2i_at_A2I_internal_37 = local_c2i_at_A2I_internal_43
lw $t0, -176($fp)
sw $t0, -152($fp)
label_ENDIF_62: 
# LOCAL local_c2i_at_A2I_internal_31 --> -128($fp)
# LOCAL local_c2i_at_A2I_internal_37 --> -152($fp)
# local_c2i_at_A2I_internal_31 = local_c2i_at_A2I_internal_37
lw $t0, -152($fp)
sw $t0, -128($fp)
label_ENDIF_52: 
# LOCAL local_c2i_at_A2I_internal_25 --> -104($fp)
# LOCAL local_c2i_at_A2I_internal_31 --> -128($fp)
# local_c2i_at_A2I_internal_25 = local_c2i_at_A2I_internal_31
lw $t0, -128($fp)
sw $t0, -104($fp)
label_ENDIF_42: 
# LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
# LOCAL local_c2i_at_A2I_internal_25 --> -104($fp)
# local_c2i_at_A2I_internal_19 = local_c2i_at_A2I_internal_25
lw $t0, -104($fp)
sw $t0, -80($fp)
label_ENDIF_32: 
# LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
# LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
# local_c2i_at_A2I_internal_13 = local_c2i_at_A2I_internal_19
lw $t0, -80($fp)
sw $t0, -56($fp)
label_ENDIF_22: 
# LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
# LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
# local_c2i_at_A2I_internal_7 = local_c2i_at_A2I_internal_13
lw $t0, -56($fp)
sw $t0, -32($fp)
label_ENDIF_12: 
# LOCAL local_c2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
# local_c2i_at_A2I_internal_1 = local_c2i_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_2: 
# RETURN local_c2i_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_c2i_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 264
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_i2c_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2c_at_A2I_i_0
function_i2c_at_A2I: 
   # Allocate stack frame for function function_i2c_at_A2I.
   subu $sp, $sp, 264
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 264
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_103
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_103
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_103
   # IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_FALSE_103
   # IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_FALSE_103
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_103
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_STRING_106
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_STRING_106
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_106
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_107
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_107
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_104
   # GOTO label_FALSE_103
   j label_FALSE_103
   label_COMPARE_BY_VALUE_107: 
      # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
      # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_104
      # GOTO label_FALSE_103
      j label_FALSE_103
      label_COMPARE_STRING_106: 
         # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_CONTINUE_108
         # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_CONTINUE_108
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_108
         # GOTO label_FALSE_103
         j label_FALSE_103
         label_CONTINUE_108: 
            # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_109: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_110
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_109
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_110: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
                  # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_104
                  label_FALSE_103: 
                     # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_105
j label_END_105
label_TRUE_104: 
   # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_105: 
# LOCAL local_i2c_at_A2I_internal_0 --> -4($fp)
# LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_FALSEIF_101
# IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_FALSEIF_101
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_101
# LOCAL local_i2c_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_14
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_i2c_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2c_at_A2I_internal_5 --> -24($fp)
# local_i2c_at_A2I_internal_1 = local_i2c_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_102
j label_ENDIF_102
label_FALSEIF_101: 
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_113
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_113
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_113
   # IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_FALSE_113
   # IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_FALSE_113
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_113
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_STRING_116
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_STRING_116
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_116
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_117
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_117
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -44($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_114
   # GOTO label_FALSE_113
   j label_FALSE_113
   label_COMPARE_BY_VALUE_117: 
      # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
      lw $a0, 0($fp)
      lw $a1, -44($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
      # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_114
      # GOTO label_FALSE_113
      j label_FALSE_113
      label_COMPARE_STRING_116: 
         # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -44($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_CONTINUE_118
         # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_CONTINUE_118
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_118
         # GOTO label_FALSE_113
         j label_FALSE_113
         label_CONTINUE_118: 
            # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -44($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_119: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_120
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_119
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_120: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
                  # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_114
                  label_FALSE_113: 
                     # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_115
j label_END_115
label_TRUE_114: 
   # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_115: 
# LOCAL local_i2c_at_A2I_internal_6 --> -28($fp)
# LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_FALSEIF_111
# IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_FALSEIF_111
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_111
# LOCAL local_i2c_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_15
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -48($fp)
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# LOCAL local_i2c_at_A2I_internal_11 --> -48($fp)
# local_i2c_at_A2I_internal_7 = local_i2c_at_A2I_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_112
j label_ENDIF_112
label_FALSEIF_111: 
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -68($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_123
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_123
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_123
   # IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_FALSE_123
   # IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_FALSE_123
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_123
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_STRING_126
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_STRING_126
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_STRING_126
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_127
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_127
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
   lw $t0, -64($fp)
   beq $t0, 0, label_TRUE_124
   # GOTO label_FALSE_123
   j label_FALSE_123
   label_COMPARE_BY_VALUE_127: 
      # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
      lw $a0, 0($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -64($fp)
      # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
      # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
      lw $t0, -64($fp)
      beq $t0, 0, label_TRUE_124
      # GOTO label_FALSE_123
      j label_FALSE_123
      label_COMPARE_STRING_126: 
         # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -64($fp)
         # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_CONTINUE_128
         # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_CONTINUE_128
         lw $t0, -64($fp)
         beq $t0, 0, label_CONTINUE_128
         # GOTO label_FALSE_123
         j label_FALSE_123
         label_CONTINUE_128: 
            # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_129: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_130
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_129
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_130: 
                  # Store result
                  sw $a2, -64($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
                  # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
                  lw $t0, -64($fp)
                  beq $t0, 0, label_TRUE_124
                  label_FALSE_123: 
                     # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -60($fp)
                     # GOTO label_END_125
j label_END_125
label_TRUE_124: 
   # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_END_125: 
# LOCAL local_i2c_at_A2I_internal_12 --> -52($fp)
# LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
# Obtain value from -60($fp)
lw $v0, -60($fp)
lw $v0, 12($v0)
sw $v0, -52($fp)
# IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_FALSEIF_121
# IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_FALSEIF_121
lw $t0, -52($fp)
beq $t0, 0, label_FALSEIF_121
# LOCAL local_i2c_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_16
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -72($fp)
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# LOCAL local_i2c_at_A2I_internal_17 --> -72($fp)
# local_i2c_at_A2I_internal_13 = local_i2c_at_A2I_internal_17
lw $t0, -72($fp)
sw $t0, -56($fp)
# GOTO label_ENDIF_122
j label_ENDIF_122
label_FALSEIF_121: 
   # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 3
   sw $t0, 12($v0)
   sw $v0, -92($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_133
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_133
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_133
   # IF_ZERO local_i2c_at_A2I_internal_22 GOTO label_FALSE_133
   # IF_ZERO local_i2c_at_A2I_internal_22 GOTO label_FALSE_133
   lw $t0, -92($fp)
   beq $t0, 0, label_FALSE_133
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_STRING_136
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_STRING_136
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_STRING_136
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_137
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_137
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -92($fp)
   sub $a0, $a0, $a1
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
   lw $t0, -88($fp)
   beq $t0, 0, label_TRUE_134
   # GOTO label_FALSE_133
   j label_FALSE_133
   label_COMPARE_BY_VALUE_137: 
      # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
      lw $a0, 0($fp)
      lw $a1, -92($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -88($fp)
      # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
      # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
      lw $t0, -88($fp)
      beq $t0, 0, label_TRUE_134
      # GOTO label_FALSE_133
      j label_FALSE_133
      label_COMPARE_STRING_136: 
         # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -92($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -88($fp)
         # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_CONTINUE_138
         # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_CONTINUE_138
         lw $t0, -88($fp)
         beq $t0, 0, label_CONTINUE_138
         # GOTO label_FALSE_133
         j label_FALSE_133
         label_CONTINUE_138: 
            # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -92($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_139: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_140
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_139
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_140: 
                  # Store result
                  sw $a2, -88($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
                  # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
                  lw $t0, -88($fp)
                  beq $t0, 0, label_TRUE_134
                  label_FALSE_133: 
                     # LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -84($fp)
                     # GOTO label_END_135
j label_END_135
label_TRUE_134: 
   # LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   label_END_135: 
# LOCAL local_i2c_at_A2I_internal_18 --> -76($fp)
# LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
# Obtain value from -84($fp)
lw $v0, -84($fp)
lw $v0, 12($v0)
sw $v0, -76($fp)
# IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_FALSEIF_131
# IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_FALSEIF_131
lw $t0, -76($fp)
beq $t0, 0, label_FALSEIF_131
# LOCAL local_i2c_at_A2I_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_17
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -96($fp)
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# LOCAL local_i2c_at_A2I_internal_23 --> -96($fp)
# local_i2c_at_A2I_internal_19 = local_i2c_at_A2I_internal_23
lw $t0, -96($fp)
sw $t0, -80($fp)
# GOTO label_ENDIF_132
j label_ENDIF_132
label_FALSEIF_131: 
   # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 4
   sw $t0, 12($v0)
   sw $v0, -116($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_143
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_143
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_143
   # IF_ZERO local_i2c_at_A2I_internal_28 GOTO label_FALSE_143
   # IF_ZERO local_i2c_at_A2I_internal_28 GOTO label_FALSE_143
   lw $t0, -116($fp)
   beq $t0, 0, label_FALSE_143
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_STRING_146
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_STRING_146
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_STRING_146
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_147
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_147
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -116($fp)
   sub $a0, $a0, $a1
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
   lw $t0, -112($fp)
   beq $t0, 0, label_TRUE_144
   # GOTO label_FALSE_143
   j label_FALSE_143
   label_COMPARE_BY_VALUE_147: 
      # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
      lw $a0, 0($fp)
      lw $a1, -116($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -112($fp)
      # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
      # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
      lw $t0, -112($fp)
      beq $t0, 0, label_TRUE_144
      # GOTO label_FALSE_143
      j label_FALSE_143
      label_COMPARE_STRING_146: 
         # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -116($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -112($fp)
         # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_CONTINUE_148
         # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_CONTINUE_148
         lw $t0, -112($fp)
         beq $t0, 0, label_CONTINUE_148
         # GOTO label_FALSE_143
         j label_FALSE_143
         label_CONTINUE_148: 
            # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -116($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_149: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_150
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_149
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_150: 
                  # Store result
                  sw $a2, -112($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
                  # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
                  lw $t0, -112($fp)
                  beq $t0, 0, label_TRUE_144
                  label_FALSE_143: 
                     # LOCAL local_i2c_at_A2I_internal_26 --> -108($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -108($fp)
                     # GOTO label_END_145
j label_END_145
label_TRUE_144: 
   # LOCAL local_i2c_at_A2I_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -108($fp)
   label_END_145: 
# LOCAL local_i2c_at_A2I_internal_24 --> -100($fp)
# LOCAL local_i2c_at_A2I_internal_26 --> -108($fp)
# Obtain value from -108($fp)
lw $v0, -108($fp)
lw $v0, 12($v0)
sw $v0, -100($fp)
# IF_ZERO local_i2c_at_A2I_internal_24 GOTO label_FALSEIF_141
# IF_ZERO local_i2c_at_A2I_internal_24 GOTO label_FALSEIF_141
lw $t0, -100($fp)
beq $t0, 0, label_FALSEIF_141
# LOCAL local_i2c_at_A2I_internal_29 --> -120($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_18
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -120($fp)
# LOCAL local_i2c_at_A2I_internal_25 --> -104($fp)
# LOCAL local_i2c_at_A2I_internal_29 --> -120($fp)
# local_i2c_at_A2I_internal_25 = local_i2c_at_A2I_internal_29
lw $t0, -120($fp)
sw $t0, -104($fp)
# GOTO label_ENDIF_142
j label_ENDIF_142
label_FALSEIF_141: 
   # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 5
   sw $t0, 12($v0)
   sw $v0, -140($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_153
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_153
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_153
   # IF_ZERO local_i2c_at_A2I_internal_34 GOTO label_FALSE_153
   # IF_ZERO local_i2c_at_A2I_internal_34 GOTO label_FALSE_153
   lw $t0, -140($fp)
   beq $t0, 0, label_FALSE_153
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_STRING_156
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_STRING_156
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_STRING_156
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_157
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_157
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -140($fp)
   sub $a0, $a0, $a1
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
   lw $t0, -136($fp)
   beq $t0, 0, label_TRUE_154
   # GOTO label_FALSE_153
   j label_FALSE_153
   label_COMPARE_BY_VALUE_157: 
      # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
      lw $a0, 0($fp)
      lw $a1, -140($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -136($fp)
      # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
      # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
      lw $t0, -136($fp)
      beq $t0, 0, label_TRUE_154
      # GOTO label_FALSE_153
      j label_FALSE_153
      label_COMPARE_STRING_156: 
         # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -140($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -136($fp)
         # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_CONTINUE_158
         # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_CONTINUE_158
         lw $t0, -136($fp)
         beq $t0, 0, label_CONTINUE_158
         # GOTO label_FALSE_153
         j label_FALSE_153
         label_CONTINUE_158: 
            # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -140($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_159: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_160
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_159
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_160: 
                  # Store result
                  sw $a2, -136($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
                  # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
                  lw $t0, -136($fp)
                  beq $t0, 0, label_TRUE_154
                  label_FALSE_153: 
                     # LOCAL local_i2c_at_A2I_internal_32 --> -132($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -132($fp)
                     # GOTO label_END_155
j label_END_155
label_TRUE_154: 
   # LOCAL local_i2c_at_A2I_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -132($fp)
   label_END_155: 
# LOCAL local_i2c_at_A2I_internal_30 --> -124($fp)
# LOCAL local_i2c_at_A2I_internal_32 --> -132($fp)
# Obtain value from -132($fp)
lw $v0, -132($fp)
lw $v0, 12($v0)
sw $v0, -124($fp)
# IF_ZERO local_i2c_at_A2I_internal_30 GOTO label_FALSEIF_151
# IF_ZERO local_i2c_at_A2I_internal_30 GOTO label_FALSEIF_151
lw $t0, -124($fp)
beq $t0, 0, label_FALSEIF_151
# LOCAL local_i2c_at_A2I_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_19
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -144($fp)
# LOCAL local_i2c_at_A2I_internal_31 --> -128($fp)
# LOCAL local_i2c_at_A2I_internal_35 --> -144($fp)
# local_i2c_at_A2I_internal_31 = local_i2c_at_A2I_internal_35
lw $t0, -144($fp)
sw $t0, -128($fp)
# GOTO label_ENDIF_152
j label_ENDIF_152
label_FALSEIF_151: 
   # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 6
   sw $t0, 12($v0)
   sw $v0, -164($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_163
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_163
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_163
   # IF_ZERO local_i2c_at_A2I_internal_40 GOTO label_FALSE_163
   # IF_ZERO local_i2c_at_A2I_internal_40 GOTO label_FALSE_163
   lw $t0, -164($fp)
   beq $t0, 0, label_FALSE_163
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_STRING_166
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_STRING_166
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_STRING_166
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_167
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_167
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -164($fp)
   sub $a0, $a0, $a1
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
   lw $t0, -160($fp)
   beq $t0, 0, label_TRUE_164
   # GOTO label_FALSE_163
   j label_FALSE_163
   label_COMPARE_BY_VALUE_167: 
      # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
      lw $a0, 0($fp)
      lw $a1, -164($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -160($fp)
      # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
      # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
      lw $t0, -160($fp)
      beq $t0, 0, label_TRUE_164
      # GOTO label_FALSE_163
      j label_FALSE_163
      label_COMPARE_STRING_166: 
         # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -164($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -160($fp)
         # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_CONTINUE_168
         # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_CONTINUE_168
         lw $t0, -160($fp)
         beq $t0, 0, label_CONTINUE_168
         # GOTO label_FALSE_163
         j label_FALSE_163
         label_CONTINUE_168: 
            # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -164($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_169: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_170
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_169
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_170: 
                  # Store result
                  sw $a2, -160($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
                  # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
                  lw $t0, -160($fp)
                  beq $t0, 0, label_TRUE_164
                  label_FALSE_163: 
                     # LOCAL local_i2c_at_A2I_internal_38 --> -156($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -156($fp)
                     # GOTO label_END_165
j label_END_165
label_TRUE_164: 
   # LOCAL local_i2c_at_A2I_internal_38 --> -156($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -156($fp)
   label_END_165: 
# LOCAL local_i2c_at_A2I_internal_36 --> -148($fp)
# LOCAL local_i2c_at_A2I_internal_38 --> -156($fp)
# Obtain value from -156($fp)
lw $v0, -156($fp)
lw $v0, 12($v0)
sw $v0, -148($fp)
# IF_ZERO local_i2c_at_A2I_internal_36 GOTO label_FALSEIF_161
# IF_ZERO local_i2c_at_A2I_internal_36 GOTO label_FALSEIF_161
lw $t0, -148($fp)
beq $t0, 0, label_FALSEIF_161
# LOCAL local_i2c_at_A2I_internal_41 --> -168($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_20
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -168($fp)
# LOCAL local_i2c_at_A2I_internal_37 --> -152($fp)
# LOCAL local_i2c_at_A2I_internal_41 --> -168($fp)
# local_i2c_at_A2I_internal_37 = local_i2c_at_A2I_internal_41
lw $t0, -168($fp)
sw $t0, -152($fp)
# GOTO label_ENDIF_162
j label_ENDIF_162
label_FALSEIF_161: 
   # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 7
   sw $t0, 12($v0)
   sw $v0, -188($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_173
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_173
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_173
   # IF_ZERO local_i2c_at_A2I_internal_46 GOTO label_FALSE_173
   # IF_ZERO local_i2c_at_A2I_internal_46 GOTO label_FALSE_173
   lw $t0, -188($fp)
   beq $t0, 0, label_FALSE_173
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_STRING_176
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_STRING_176
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_STRING_176
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_177
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_177
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -188($fp)
   sub $a0, $a0, $a1
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
   lw $t0, -184($fp)
   beq $t0, 0, label_TRUE_174
   # GOTO label_FALSE_173
   j label_FALSE_173
   label_COMPARE_BY_VALUE_177: 
      # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
      lw $a0, 0($fp)
      lw $a1, -188($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -184($fp)
      # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
      # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
      lw $t0, -184($fp)
      beq $t0, 0, label_TRUE_174
      # GOTO label_FALSE_173
      j label_FALSE_173
      label_COMPARE_STRING_176: 
         # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -188($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -184($fp)
         # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_CONTINUE_178
         # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_CONTINUE_178
         lw $t0, -184($fp)
         beq $t0, 0, label_CONTINUE_178
         # GOTO label_FALSE_173
         j label_FALSE_173
         label_CONTINUE_178: 
            # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -188($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_179: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_180
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_179
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_180: 
                  # Store result
                  sw $a2, -184($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
                  # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
                  lw $t0, -184($fp)
                  beq $t0, 0, label_TRUE_174
                  label_FALSE_173: 
                     # LOCAL local_i2c_at_A2I_internal_44 --> -180($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -180($fp)
                     # GOTO label_END_175
j label_END_175
label_TRUE_174: 
   # LOCAL local_i2c_at_A2I_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -180($fp)
   label_END_175: 
# LOCAL local_i2c_at_A2I_internal_42 --> -172($fp)
# LOCAL local_i2c_at_A2I_internal_44 --> -180($fp)
# Obtain value from -180($fp)
lw $v0, -180($fp)
lw $v0, 12($v0)
sw $v0, -172($fp)
# IF_ZERO local_i2c_at_A2I_internal_42 GOTO label_FALSEIF_171
# IF_ZERO local_i2c_at_A2I_internal_42 GOTO label_FALSEIF_171
lw $t0, -172($fp)
beq $t0, 0, label_FALSEIF_171
# LOCAL local_i2c_at_A2I_internal_47 --> -192($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_21
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -192($fp)
# LOCAL local_i2c_at_A2I_internal_43 --> -176($fp)
# LOCAL local_i2c_at_A2I_internal_47 --> -192($fp)
# local_i2c_at_A2I_internal_43 = local_i2c_at_A2I_internal_47
lw $t0, -192($fp)
sw $t0, -176($fp)
# GOTO label_ENDIF_172
j label_ENDIF_172
label_FALSEIF_171: 
   # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 8
   sw $t0, 12($v0)
   sw $v0, -212($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_183
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_183
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_183
   # IF_ZERO local_i2c_at_A2I_internal_52 GOTO label_FALSE_183
   # IF_ZERO local_i2c_at_A2I_internal_52 GOTO label_FALSE_183
   lw $t0, -212($fp)
   beq $t0, 0, label_FALSE_183
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_STRING_186
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_STRING_186
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_STRING_186
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_187
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_187
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -212($fp)
   sub $a0, $a0, $a1
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
   lw $t0, -208($fp)
   beq $t0, 0, label_TRUE_184
   # GOTO label_FALSE_183
   j label_FALSE_183
   label_COMPARE_BY_VALUE_187: 
      # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
      lw $a0, 0($fp)
      lw $a1, -212($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -208($fp)
      # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
      # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
      lw $t0, -208($fp)
      beq $t0, 0, label_TRUE_184
      # GOTO label_FALSE_183
      j label_FALSE_183
      label_COMPARE_STRING_186: 
         # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -212($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -208($fp)
         # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_CONTINUE_188
         # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_CONTINUE_188
         lw $t0, -208($fp)
         beq $t0, 0, label_CONTINUE_188
         # GOTO label_FALSE_183
         j label_FALSE_183
         label_CONTINUE_188: 
            # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -212($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_189: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_190
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_189
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_190: 
                  # Store result
                  sw $a2, -208($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
                  # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
                  lw $t0, -208($fp)
                  beq $t0, 0, label_TRUE_184
                  label_FALSE_183: 
                     # LOCAL local_i2c_at_A2I_internal_50 --> -204($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -204($fp)
                     # GOTO label_END_185
j label_END_185
label_TRUE_184: 
   # LOCAL local_i2c_at_A2I_internal_50 --> -204($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -204($fp)
   label_END_185: 
# LOCAL local_i2c_at_A2I_internal_48 --> -196($fp)
# LOCAL local_i2c_at_A2I_internal_50 --> -204($fp)
# Obtain value from -204($fp)
lw $v0, -204($fp)
lw $v0, 12($v0)
sw $v0, -196($fp)
# IF_ZERO local_i2c_at_A2I_internal_48 GOTO label_FALSEIF_181
# IF_ZERO local_i2c_at_A2I_internal_48 GOTO label_FALSEIF_181
lw $t0, -196($fp)
beq $t0, 0, label_FALSEIF_181
# LOCAL local_i2c_at_A2I_internal_53 --> -216($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_22
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -216($fp)
# LOCAL local_i2c_at_A2I_internal_49 --> -200($fp)
# LOCAL local_i2c_at_A2I_internal_53 --> -216($fp)
# local_i2c_at_A2I_internal_49 = local_i2c_at_A2I_internal_53
lw $t0, -216($fp)
sw $t0, -200($fp)
# GOTO label_ENDIF_182
j label_ENDIF_182
label_FALSEIF_181: 
   # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 9
   sw $t0, 12($v0)
   sw $v0, -236($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_193
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_193
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_193
   # IF_ZERO local_i2c_at_A2I_internal_58 GOTO label_FALSE_193
   # IF_ZERO local_i2c_at_A2I_internal_58 GOTO label_FALSE_193
   lw $t0, -236($fp)
   beq $t0, 0, label_FALSE_193
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_STRING_196
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_STRING_196
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_STRING_196
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_197
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_197
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -236($fp)
   sub $a0, $a0, $a1
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
   lw $t0, -232($fp)
   beq $t0, 0, label_TRUE_194
   # GOTO label_FALSE_193
   j label_FALSE_193
   label_COMPARE_BY_VALUE_197: 
      # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
      lw $a0, 0($fp)
      lw $a1, -236($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -232($fp)
      # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
      # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
      lw $t0, -232($fp)
      beq $t0, 0, label_TRUE_194
      # GOTO label_FALSE_193
      j label_FALSE_193
      label_COMPARE_STRING_196: 
         # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -236($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -232($fp)
         # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_CONTINUE_198
         # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_CONTINUE_198
         lw $t0, -232($fp)
         beq $t0, 0, label_CONTINUE_198
         # GOTO label_FALSE_193
         j label_FALSE_193
         label_CONTINUE_198: 
            # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -236($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_199: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_200
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_199
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_200: 
                  # Store result
                  sw $a2, -232($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
                  # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
                  lw $t0, -232($fp)
                  beq $t0, 0, label_TRUE_194
                  label_FALSE_193: 
                     # LOCAL local_i2c_at_A2I_internal_56 --> -228($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -228($fp)
                     # GOTO label_END_195
j label_END_195
label_TRUE_194: 
   # LOCAL local_i2c_at_A2I_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -228($fp)
   label_END_195: 
# LOCAL local_i2c_at_A2I_internal_54 --> -220($fp)
# LOCAL local_i2c_at_A2I_internal_56 --> -228($fp)
# Obtain value from -228($fp)
lw $v0, -228($fp)
lw $v0, 12($v0)
sw $v0, -220($fp)
# IF_ZERO local_i2c_at_A2I_internal_54 GOTO label_FALSEIF_191
# IF_ZERO local_i2c_at_A2I_internal_54 GOTO label_FALSEIF_191
lw $t0, -220($fp)
beq $t0, 0, label_FALSEIF_191
# LOCAL local_i2c_at_A2I_internal_59 --> -240($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_23
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -240($fp)
# LOCAL local_i2c_at_A2I_internal_55 --> -224($fp)
# LOCAL local_i2c_at_A2I_internal_59 --> -240($fp)
# local_i2c_at_A2I_internal_55 = local_i2c_at_A2I_internal_59
lw $t0, -240($fp)
sw $t0, -224($fp)
# GOTO label_ENDIF_192
j label_ENDIF_192
label_FALSEIF_191: 
   # LOCAL local_i2c_at_A2I_internal_62 --> -252($fp)
   # local_i2c_at_A2I_internal_62 = SELF
   sw $s1, -252($fp)
   # LOCAL local_i2c_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_i2c_at_A2I_internal_62 --> -252($fp)
   # local_i2c_at_A2I_internal_60 = local_i2c_at_A2I_internal_62
   lw $t0, -252($fp)
   sw $t0, -244($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2c_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_i2c_at_A2I_internal_61 --> -248($fp)
   # local_i2c_at_A2I_internal_61 = VCALL local_i2c_at_A2I_internal_60 abort
   # Save new self pointer in $s1
   lw $s1, -244($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 84($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -248($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2c_at_A2I_internal_63 --> -256($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_24
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -256($fp)
   # LOCAL local_i2c_at_A2I_internal_55 --> -224($fp)
   # LOCAL local_i2c_at_A2I_internal_63 --> -256($fp)
   # local_i2c_at_A2I_internal_55 = local_i2c_at_A2I_internal_63
   lw $t0, -256($fp)
   sw $t0, -224($fp)
   label_ENDIF_192: 
# LOCAL local_i2c_at_A2I_internal_49 --> -200($fp)
# LOCAL local_i2c_at_A2I_internal_55 --> -224($fp)
# local_i2c_at_A2I_internal_49 = local_i2c_at_A2I_internal_55
lw $t0, -224($fp)
sw $t0, -200($fp)
label_ENDIF_182: 
# LOCAL local_i2c_at_A2I_internal_43 --> -176($fp)
# LOCAL local_i2c_at_A2I_internal_49 --> -200($fp)
# local_i2c_at_A2I_internal_43 = local_i2c_at_A2I_internal_49
lw $t0, -200($fp)
sw $t0, -176($fp)
label_ENDIF_172: 
# LOCAL local_i2c_at_A2I_internal_37 --> -152($fp)
# LOCAL local_i2c_at_A2I_internal_43 --> -176($fp)
# local_i2c_at_A2I_internal_37 = local_i2c_at_A2I_internal_43
lw $t0, -176($fp)
sw $t0, -152($fp)
label_ENDIF_162: 
# LOCAL local_i2c_at_A2I_internal_31 --> -128($fp)
# LOCAL local_i2c_at_A2I_internal_37 --> -152($fp)
# local_i2c_at_A2I_internal_31 = local_i2c_at_A2I_internal_37
lw $t0, -152($fp)
sw $t0, -128($fp)
label_ENDIF_152: 
# LOCAL local_i2c_at_A2I_internal_25 --> -104($fp)
# LOCAL local_i2c_at_A2I_internal_31 --> -128($fp)
# local_i2c_at_A2I_internal_25 = local_i2c_at_A2I_internal_31
lw $t0, -128($fp)
sw $t0, -104($fp)
label_ENDIF_142: 
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# LOCAL local_i2c_at_A2I_internal_25 --> -104($fp)
# local_i2c_at_A2I_internal_19 = local_i2c_at_A2I_internal_25
lw $t0, -104($fp)
sw $t0, -80($fp)
label_ENDIF_132: 
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# local_i2c_at_A2I_internal_13 = local_i2c_at_A2I_internal_19
lw $t0, -80($fp)
sw $t0, -56($fp)
label_ENDIF_122: 
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# local_i2c_at_A2I_internal_7 = local_i2c_at_A2I_internal_13
lw $t0, -56($fp)
sw $t0, -32($fp)
label_ENDIF_112: 
# LOCAL local_i2c_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# local_i2c_at_A2I_internal_1 = local_i2c_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_102: 
# RETURN local_i2c_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_i2c_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 264
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_at_A2I implementation.
# @Params:
# 	0($fp) = param_a2i_at_A2I_s_0
function_a2i_at_A2I: 
   # Allocate stack frame for function function_a2i_at_A2I.
   subu $sp, $sp, 208
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 208
   # LOCAL local_a2i_at_A2I_internal_4 --> -20($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_4 = PARAM param_a2i_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_4 --> -20($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # local_a2i_at_A2I_internal_5 = VCALL local_a2i_at_A2I_internal_4 length
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # IF_ZERO local_a2i_at_A2I_internal_5 GOTO label_FALSE_203
   # IF_ZERO local_a2i_at_A2I_internal_5 GOTO label_FALSE_203
   lw $t0, -24($fp)
   beq $t0, 0, label_FALSE_203
   # IF_ZERO local_a2i_at_A2I_internal_6 GOTO label_FALSE_203
   # IF_ZERO local_a2i_at_A2I_internal_6 GOTO label_FALSE_203
   lw $t0, -28($fp)
   beq $t0, 0, label_FALSE_203
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # Comparing -24($fp) type with String
   la $v0, String
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_206
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_206
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_206
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Bool
   la $v0, Bool
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_207
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Int
   la $v0, Int
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_207
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
   # Load pointers and SUB
   lw $a0, -24($fp)
   lw $a1, -28($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_204
   # GOTO label_FALSE_203
   j label_FALSE_203
   label_COMPARE_BY_VALUE_207: 
      # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
      # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
      # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
      lw $a0, -24($fp)
      lw $a1, -28($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
      # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_204
      # GOTO label_FALSE_203
      j label_FALSE_203
      label_COMPARE_STRING_206: 
         # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
         # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
         # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
         # Load strings for comparison
         lw $v0, -24($fp)
         lw $v1, -28($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_CONTINUE_208
         # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_CONTINUE_208
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_208
         # GOTO label_FALSE_203
         j label_FALSE_203
         label_CONTINUE_208: 
            # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
            # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
            # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -24($fp)
            lw $v1, -28($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_209: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_210
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_209
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_210: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
                  # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_204
                  label_FALSE_203: 
                     # LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_205
j label_END_205
label_TRUE_204: 
   # LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_205: 
# LOCAL local_a2i_at_A2I_internal_0 --> -4($fp)
# LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_FALSEIF_201
# IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_FALSEIF_201
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_201
# LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -32($fp)
# LOCAL local_a2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
# local_a2i_at_A2I_internal_1 = local_a2i_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_202
j label_ENDIF_202
label_FALSEIF_201: 
   # LOCAL local_a2i_at_A2I_internal_12 --> -52($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_12 = PARAM param_a2i_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   # ARG local_a2i_at_A2I_internal_14
   # LOCAL local_a2i_at_A2I_internal_14 --> -60($fp)
   lw $t0, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -64($fp)
   # ARG local_a2i_at_A2I_internal_15
   # LOCAL local_a2i_at_A2I_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_12 --> -52($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # local_a2i_at_A2I_internal_13 = VCALL local_a2i_at_A2I_internal_12 substr
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 108($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_25
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # IF_ZERO local_a2i_at_A2I_internal_13 GOTO label_FALSE_213
   # IF_ZERO local_a2i_at_A2I_internal_13 GOTO label_FALSE_213
   lw $t0, -56($fp)
   beq $t0, 0, label_FALSE_213
   # IF_ZERO local_a2i_at_A2I_internal_16 GOTO label_FALSE_213
   # IF_ZERO local_a2i_at_A2I_internal_16 GOTO label_FALSE_213
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_213
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # Comparing -56($fp) type with String
   la $v0, String
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_STRING_216
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_STRING_216
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_STRING_216
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Bool
   la $v0, Bool
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_217
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Int
   la $v0, Int
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_217
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, -56($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
   lw $t0, -48($fp)
   beq $t0, 0, label_TRUE_214
   # GOTO label_FALSE_213
   j label_FALSE_213
   label_COMPARE_BY_VALUE_217: 
      # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
      # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
      # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
      lw $a0, -56($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -48($fp)
      # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
      # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
      lw $t0, -48($fp)
      beq $t0, 0, label_TRUE_214
      # GOTO label_FALSE_213
      j label_FALSE_213
      label_COMPARE_STRING_216: 
         # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
         # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
         # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, -56($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -48($fp)
         # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_CONTINUE_218
         # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_CONTINUE_218
         lw $t0, -48($fp)
         beq $t0, 0, label_CONTINUE_218
         # GOTO label_FALSE_213
         j label_FALSE_213
         label_CONTINUE_218: 
            # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
            # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
            # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -56($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_219: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_220
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_219
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_220: 
                  # Store result
                  sw $a2, -48($fp)
                  # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
                  # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
                  lw $t0, -48($fp)
                  beq $t0, 0, label_TRUE_214
                  label_FALSE_213: 
                     # LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -44($fp)
                     # GOTO label_END_215
j label_END_215
label_TRUE_214: 
   # LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   label_END_215: 
# LOCAL local_a2i_at_A2I_internal_8 --> -36($fp)
# LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
# Obtain value from -44($fp)
lw $v0, -44($fp)
lw $v0, 12($v0)
sw $v0, -36($fp)
# IF_ZERO local_a2i_at_A2I_internal_8 GOTO label_FALSEIF_211
# IF_ZERO local_a2i_at_A2I_internal_8 GOTO label_FALSEIF_211
lw $t0, -36($fp)
beq $t0, 0, label_FALSEIF_211
# LOCAL local_a2i_at_A2I_internal_20 --> -84($fp)
# local_a2i_at_A2I_internal_20 = SELF
sw $s1, -84($fp)
# LOCAL local_a2i_at_A2I_internal_18 --> -76($fp)
# LOCAL local_a2i_at_A2I_internal_20 --> -84($fp)
# local_a2i_at_A2I_internal_18 = local_a2i_at_A2I_internal_20
lw $t0, -84($fp)
sw $t0, -76($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_21 --> -88($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_21 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -96($fp)
# ARG local_a2i_at_A2I_internal_23
# LOCAL local_a2i_at_A2I_internal_23 --> -96($fp)
lw $t0, -96($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_25 --> -104($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_25 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -104($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_25 --> -104($fp)
# LOCAL local_a2i_at_A2I_internal_26 --> -108($fp)
# local_a2i_at_A2I_internal_26 = VCALL local_a2i_at_A2I_internal_25 length
# Save new self pointer in $s1
lw $s1, -104($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 40($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -108($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_27 --> -112($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -112($fp)
# LOCAL local_a2i_at_A2I_internal_24 --> -100($fp)
# LOCAL local_a2i_at_A2I_internal_26 --> -108($fp)
# LOCAL local_a2i_at_A2I_internal_27 --> -112($fp)
# local_a2i_at_A2I_internal_24 = local_a2i_at_A2I_internal_26 - local_a2i_at_A2I_internal_27
lw $t1, -108($fp)
lw $t0, 12($t1)
lw $t1, -112($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -100($fp)
# ARG local_a2i_at_A2I_internal_24
# LOCAL local_a2i_at_A2I_internal_24 --> -100($fp)
lw $t0, -100($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_21 --> -88($fp)
# LOCAL local_a2i_at_A2I_internal_22 --> -92($fp)
# local_a2i_at_A2I_internal_22 = VCALL local_a2i_at_A2I_internal_21 substr
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 108($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_A2I_internal_22
# LOCAL local_a2i_at_A2I_internal_22 --> -92($fp)
lw $t0, -92($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_18 --> -76($fp)
# LOCAL local_a2i_at_A2I_internal_19 --> -80($fp)
# local_a2i_at_A2I_internal_19 = VCALL local_a2i_at_A2I_internal_18 a2i_aux
# Save new self pointer in $s1
lw $s1, -76($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 96($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -80($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# LOCAL local_a2i_at_A2I_internal_19 --> -80($fp)
lw $t0, -80($fp)
lw $t0, 12($t0)
not $t0, $t0
add $t0, $t0, 1
sw $t0, -72($fp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
lw $t0, -72($fp)
sw $t0, 12($v0)
sw $v0, -72($fp)
# LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# local_a2i_at_A2I_internal_9 = local_a2i_at_A2I_internal_17
lw $t0, -72($fp)
sw $t0, -40($fp)
# GOTO label_ENDIF_212
j label_ENDIF_212
label_FALSEIF_211: 
   # LOCAL local_a2i_at_A2I_internal_32 --> -132($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_32 = PARAM param_a2i_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -132($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -140($fp)
   # ARG local_a2i_at_A2I_internal_34
   # LOCAL local_a2i_at_A2I_internal_34 --> -140($fp)
   lw $t0, -140($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_35 --> -144($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -144($fp)
   # ARG local_a2i_at_A2I_internal_35
   # LOCAL local_a2i_at_A2I_internal_35 --> -144($fp)
   lw $t0, -144($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_32 --> -132($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # local_a2i_at_A2I_internal_33 = VCALL local_a2i_at_A2I_internal_32 substr
   # Save new self pointer in $s1
   lw $s1, -132($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 108($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -136($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_26
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -148($fp)
   # IF_ZERO local_a2i_at_A2I_internal_33 GOTO label_FALSE_223
   # IF_ZERO local_a2i_at_A2I_internal_33 GOTO label_FALSE_223
   lw $t0, -136($fp)
   beq $t0, 0, label_FALSE_223
   # IF_ZERO local_a2i_at_A2I_internal_36 GOTO label_FALSE_223
   # IF_ZERO local_a2i_at_A2I_internal_36 GOTO label_FALSE_223
   lw $t0, -148($fp)
   beq $t0, 0, label_FALSE_223
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # Comparing -136($fp) type with String
   la $v0, String
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_STRING_226
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_STRING_226
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_STRING_226
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # Comparing -136($fp) type with Bool
   la $v0, Bool
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_227
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # Comparing -136($fp) type with Int
   la $v0, Int
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_227
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
   # Load pointers and SUB
   lw $a0, -136($fp)
   lw $a1, -148($fp)
   sub $a0, $a0, $a1
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
   lw $t0, -128($fp)
   beq $t0, 0, label_TRUE_224
   # GOTO label_FALSE_223
   j label_FALSE_223
   label_COMPARE_BY_VALUE_227: 
      # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
      # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
      # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
      lw $a0, -136($fp)
      lw $a1, -148($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -128($fp)
      # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
      # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
      lw $t0, -128($fp)
      beq $t0, 0, label_TRUE_224
      # GOTO label_FALSE_223
      j label_FALSE_223
      label_COMPARE_STRING_226: 
         # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
         # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
         # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
         # Load strings for comparison
         lw $v0, -136($fp)
         lw $v1, -148($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -128($fp)
         # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_CONTINUE_228
         # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_CONTINUE_228
         lw $t0, -128($fp)
         beq $t0, 0, label_CONTINUE_228
         # GOTO label_FALSE_223
         j label_FALSE_223
         label_CONTINUE_228: 
            # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
            # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
            # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -136($fp)
            lw $v1, -148($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_229: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_230
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_229
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_230: 
                  # Store result
                  sw $a2, -128($fp)
                  # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
                  # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
                  lw $t0, -128($fp)
                  beq $t0, 0, label_TRUE_224
                  label_FALSE_223: 
                     # LOCAL local_a2i_at_A2I_internal_30 --> -124($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -124($fp)
                     # GOTO label_END_225
j label_END_225
label_TRUE_224: 
   # LOCAL local_a2i_at_A2I_internal_30 --> -124($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -124($fp)
   label_END_225: 
# LOCAL local_a2i_at_A2I_internal_28 --> -116($fp)
# LOCAL local_a2i_at_A2I_internal_30 --> -124($fp)
# Obtain value from -124($fp)
lw $v0, -124($fp)
lw $v0, 12($v0)
sw $v0, -116($fp)
# IF_ZERO local_a2i_at_A2I_internal_28 GOTO label_FALSEIF_221
# IF_ZERO local_a2i_at_A2I_internal_28 GOTO label_FALSEIF_221
lw $t0, -116($fp)
beq $t0, 0, label_FALSEIF_221
# LOCAL local_a2i_at_A2I_internal_39 --> -160($fp)
# local_a2i_at_A2I_internal_39 = SELF
sw $s1, -160($fp)
# LOCAL local_a2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_a2i_at_A2I_internal_39 --> -160($fp)
# local_a2i_at_A2I_internal_37 = local_a2i_at_A2I_internal_39
lw $t0, -160($fp)
sw $t0, -152($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_40 --> -164($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_40 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -164($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_42 --> -172($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -172($fp)
# ARG local_a2i_at_A2I_internal_42
# LOCAL local_a2i_at_A2I_internal_42 --> -172($fp)
lw $t0, -172($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_44 --> -180($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_44 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -180($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_44 --> -180($fp)
# LOCAL local_a2i_at_A2I_internal_45 --> -184($fp)
# local_a2i_at_A2I_internal_45 = VCALL local_a2i_at_A2I_internal_44 length
# Save new self pointer in $s1
lw $s1, -180($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 40($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -184($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_46 --> -188($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -188($fp)
# LOCAL local_a2i_at_A2I_internal_43 --> -176($fp)
# LOCAL local_a2i_at_A2I_internal_45 --> -184($fp)
# LOCAL local_a2i_at_A2I_internal_46 --> -188($fp)
# local_a2i_at_A2I_internal_43 = local_a2i_at_A2I_internal_45 - local_a2i_at_A2I_internal_46
lw $t1, -184($fp)
lw $t0, 12($t1)
lw $t1, -188($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -176($fp)
# ARG local_a2i_at_A2I_internal_43
# LOCAL local_a2i_at_A2I_internal_43 --> -176($fp)
lw $t0, -176($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_40 --> -164($fp)
# LOCAL local_a2i_at_A2I_internal_41 --> -168($fp)
# local_a2i_at_A2I_internal_41 = VCALL local_a2i_at_A2I_internal_40 substr
# Save new self pointer in $s1
lw $s1, -164($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 108($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -168($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_A2I_internal_41
# LOCAL local_a2i_at_A2I_internal_41 --> -168($fp)
lw $t0, -168($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_a2i_at_A2I_internal_38 --> -156($fp)
# local_a2i_at_A2I_internal_38 = VCALL local_a2i_at_A2I_internal_37 a2i_aux
# Save new self pointer in $s1
lw $s1, -152($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 96($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -156($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_29 --> -120($fp)
# LOCAL local_a2i_at_A2I_internal_38 --> -156($fp)
# local_a2i_at_A2I_internal_29 = local_a2i_at_A2I_internal_38
lw $t0, -156($fp)
sw $t0, -120($fp)
# GOTO label_ENDIF_222
j label_ENDIF_222
label_FALSEIF_221: 
   # LOCAL local_a2i_at_A2I_internal_49 --> -200($fp)
   # local_a2i_at_A2I_internal_49 = SELF
   sw $s1, -200($fp)
   # LOCAL local_a2i_at_A2I_internal_47 --> -192($fp)
   # LOCAL local_a2i_at_A2I_internal_49 --> -200($fp)
   # local_a2i_at_A2I_internal_47 = local_a2i_at_A2I_internal_49
   lw $t0, -200($fp)
   sw $t0, -192($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_a2i_at_A2I_s_0
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_47 --> -192($fp)
   # LOCAL local_a2i_at_A2I_internal_48 --> -196($fp)
   # local_a2i_at_A2I_internal_48 = VCALL local_a2i_at_A2I_internal_47 a2i_aux
   # Save new self pointer in $s1
   lw $s1, -192($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 96($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -196($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_29 --> -120($fp)
   # LOCAL local_a2i_at_A2I_internal_48 --> -196($fp)
   # local_a2i_at_A2I_internal_29 = local_a2i_at_A2I_internal_48
   lw $t0, -196($fp)
   sw $t0, -120($fp)
   label_ENDIF_222: 
# LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
# LOCAL local_a2i_at_A2I_internal_29 --> -120($fp)
# local_a2i_at_A2I_internal_9 = local_a2i_at_A2I_internal_29
lw $t0, -120($fp)
sw $t0, -40($fp)
label_ENDIF_212: 
# LOCAL local_a2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
# local_a2i_at_A2I_internal_1 = local_a2i_at_A2I_internal_9
lw $t0, -40($fp)
sw $t0, -8($fp)
label_ENDIF_202: 
# RETURN local_a2i_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_a2i_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 208
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_aux_at_A2I implementation.
# @Params:
# 	0($fp) = param_a2i_aux_at_A2I_s_0
function_a2i_aux_at_A2I: 
   # Allocate stack frame for function function_a2i_aux_at_A2I.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_1 --> -8($fp)
   # local_a2i_aux_at_A2I_int_0 = local_a2i_aux_at_A2I_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_a2i_aux_at_A2I_j_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_a2i_aux_at_A2I_s_0 --> 0($fp)
   # local_a2i_aux_at_A2I_internal_3 = PARAM param_a2i_aux_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_aux_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_4 --> -20($fp)
   # local_a2i_aux_at_A2I_internal_4 = VCALL local_a2i_aux_at_A2I_internal_3 length
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_aux_at_A2I_j_2 --> -12($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_4 --> -20($fp)
   # local_a2i_aux_at_A2I_j_2 = local_a2i_aux_at_A2I_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_6 --> -28($fp)
   # local_a2i_aux_at_A2I_i_5 = local_a2i_aux_at_A2I_internal_6
   lw $t0, -28($fp)
   sw $t0, -24($fp)
   label_WHILE_231: 
      # LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
      # LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
      # LOCAL local_a2i_aux_at_A2I_j_2 --> -12($fp)
      lw $a0, -24($fp)
      lw $a1, -12($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -36($fp)
      # IF_GREATER_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      # IF_GREATER_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      lw $t0, -36($fp)
      bgt $t0, 0, label_FALSE_233
      # IF_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      # IF_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      lw $t0, -36($fp)
      beq $t0, 0, label_FALSE_233
      # LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -36($fp)
      # GOTO label_END_234
j label_END_234
label_FALSE_233: 
   # LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_234: 
# LOCAL local_a2i_aux_at_A2I_internal_7 --> -32($fp)
# LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_a2i_aux_at_A2I_internal_7 GOTO label_WHILE_END_232
# IF_ZERO local_a2i_aux_at_A2I_internal_7 GOTO label_WHILE_END_232
lw $t0, -32($fp)
beq $t0, 0, label_WHILE_END_232
# LOCAL local_a2i_aux_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 10
sw $t0, 12($v0)
sw $v0, -48($fp)
# LOCAL local_a2i_aux_at_A2I_internal_10 --> -44($fp)
# LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_11 --> -48($fp)
# local_a2i_aux_at_A2I_internal_10 = local_a2i_aux_at_A2I_int_0 * local_a2i_aux_at_A2I_internal_11
lw $t1, -4($fp)
lw $t0, 12($t1)
lw $t1, -48($fp)
lw $t2, 12($t1)
mul $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -44($fp)
# LOCAL local_a2i_aux_at_A2I_internal_14 --> -60($fp)
# local_a2i_aux_at_A2I_internal_14 = SELF
sw $s1, -60($fp)
# LOCAL local_a2i_aux_at_A2I_internal_12 --> -52($fp)
# LOCAL local_a2i_aux_at_A2I_internal_14 --> -60($fp)
# local_a2i_aux_at_A2I_internal_12 = local_a2i_aux_at_A2I_internal_14
lw $t0, -60($fp)
sw $t0, -52($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_15 --> -64($fp)
# PARAM param_a2i_aux_at_A2I_s_0 --> 0($fp)
# local_a2i_aux_at_A2I_internal_15 = PARAM param_a2i_aux_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -64($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_a2i_aux_at_A2I_i_5
# LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
lw $t0, -24($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -72($fp)
# ARG local_a2i_aux_at_A2I_internal_17
# LOCAL local_a2i_aux_at_A2I_internal_17 --> -72($fp)
lw $t0, -72($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_15 --> -64($fp)
# LOCAL local_a2i_aux_at_A2I_internal_16 --> -68($fp)
# local_a2i_aux_at_A2I_internal_16 = VCALL local_a2i_aux_at_A2I_internal_15 substr
# Save new self pointer in $s1
lw $s1, -64($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 108($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -68($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_aux_at_A2I_internal_16
# LOCAL local_a2i_aux_at_A2I_internal_16 --> -68($fp)
lw $t0, -68($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_12 --> -52($fp)
# LOCAL local_a2i_aux_at_A2I_internal_13 --> -56($fp)
# local_a2i_aux_at_A2I_internal_13 = VCALL local_a2i_aux_at_A2I_internal_12 c2i
# Save new self pointer in $s1
lw $s1, -52($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 92($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -56($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_aux_at_A2I_internal_9 --> -40($fp)
# LOCAL local_a2i_aux_at_A2I_internal_10 --> -44($fp)
# LOCAL local_a2i_aux_at_A2I_internal_13 --> -56($fp)
# local_a2i_aux_at_A2I_internal_9 = local_a2i_aux_at_A2I_internal_10 + local_a2i_aux_at_A2I_internal_13
lw $t1, -44($fp)
lw $t0, 12($t1)
lw $t1, -56($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -40($fp)
# LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_9 --> -40($fp)
# local_a2i_aux_at_A2I_int_0 = local_a2i_aux_at_A2I_internal_9
lw $t0, -40($fp)
sw $t0, -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_19 --> -80($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -80($fp)
# LOCAL local_a2i_aux_at_A2I_internal_18 --> -76($fp)
# LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_A2I_internal_19 --> -80($fp)
# local_a2i_aux_at_A2I_internal_18 = local_a2i_aux_at_A2I_i_5 + local_a2i_aux_at_A2I_internal_19
lw $t1, -24($fp)
lw $t0, 12($t1)
lw $t1, -80($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -76($fp)
# LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_A2I_internal_18 --> -76($fp)
# local_a2i_aux_at_A2I_i_5 = local_a2i_aux_at_A2I_internal_18
lw $t0, -76($fp)
sw $t0, -24($fp)
# GOTO label_WHILE_231
j label_WHILE_231
label_WHILE_END_232: 
   # RETURN local_a2i_aux_at_A2I_int_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_a2i_aux_at_A2I.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 88
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_i2a_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2a_at_A2I_i_0
function_i2a_at_A2I: 
   # Allocate stack frame for function function_i2a_at_A2I.
   subu $sp, $sp, 96
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 96
   # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_i2a_at_A2I_i_0 GOTO label_FALSE_237
   # IF_ZERO param_i2a_at_A2I_i_0 GOTO label_FALSE_237
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_237
   # IF_ZERO local_i2a_at_A2I_internal_4 GOTO label_FALSE_237
   # IF_ZERO local_i2a_at_A2I_internal_4 GOTO label_FALSE_237
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_237
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_STRING_240
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_STRING_240
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_240
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_241
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_241
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_238
   # GOTO label_FALSE_237
   j label_FALSE_237
   label_COMPARE_BY_VALUE_241: 
      # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
      # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
      # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_238
      # GOTO label_FALSE_237
      j label_FALSE_237
      label_COMPARE_STRING_240: 
         # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
         # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_CONTINUE_242
         # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_CONTINUE_242
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_242
         # GOTO label_FALSE_237
         j label_FALSE_237
         label_CONTINUE_242: 
            # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
            # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_243: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_244
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_243
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_244: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
                  # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_238
                  label_FALSE_237: 
                     # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_239
j label_END_239
label_TRUE_238: 
   # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_239: 
# LOCAL local_i2a_at_A2I_internal_0 --> -4($fp)
# LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_FALSEIF_235
# IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_FALSEIF_235
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_235
# LOCAL local_i2a_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_27
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_i2a_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2a_at_A2I_internal_5 --> -24($fp)
# local_i2a_at_A2I_internal_1 = local_i2a_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_236
j label_ENDIF_236
label_FALSEIF_235: 
   # LOCAL local_i2a_at_A2I_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # LOCAL local_i2a_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   lw $a0, -40($fp)
   lw $a1, 0($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -36($fp)
   # IF_GREATER_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   # IF_GREATER_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   lw $t0, -36($fp)
   bgt $t0, 0, label_FALSE_247
   # IF_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   # IF_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   lw $t0, -36($fp)
   beq $t0, 0, label_FALSE_247
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   # GOTO label_END_248
j label_END_248
label_FALSE_247: 
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_248: 
# LOCAL local_i2a_at_A2I_internal_6 --> -28($fp)
# LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_i2a_at_A2I_internal_6 GOTO label_FALSEIF_245
# IF_ZERO local_i2a_at_A2I_internal_6 GOTO label_FALSEIF_245
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_245
# LOCAL local_i2a_at_A2I_internal_12 --> -52($fp)
# local_i2a_at_A2I_internal_12 = SELF
sw $s1, -52($fp)
# LOCAL local_i2a_at_A2I_internal_10 --> -44($fp)
# LOCAL local_i2a_at_A2I_internal_12 --> -52($fp)
# local_i2a_at_A2I_internal_10 = local_i2a_at_A2I_internal_12
lw $t0, -52($fp)
sw $t0, -44($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_i2a_at_A2I_i_0
# PARAM param_i2a_at_A2I_i_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_i2a_at_A2I_internal_10 --> -44($fp)
# LOCAL local_i2a_at_A2I_internal_11 --> -48($fp)
# local_i2a_at_A2I_internal_11 = VCALL local_i2a_at_A2I_internal_10 i2a_aux
# Save new self pointer in $s1
lw $s1, -44($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 32($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -48($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
# LOCAL local_i2a_at_A2I_internal_11 --> -48($fp)
# local_i2a_at_A2I_internal_7 = local_i2a_at_A2I_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_246
j label_ENDIF_246
label_FALSEIF_245: 
   # LOCAL local_i2a_at_A2I_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_28
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -64($fp)
   # LOCAL local_i2a_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_i2a_at_A2I_internal_15 --> -64($fp)
   # local_i2a_at_A2I_internal_13 = local_i2a_at_A2I_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_18 --> -76($fp)
   # local_i2a_at_A2I_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_i2a_at_A2I_internal_16 --> -68($fp)
   # LOCAL local_i2a_at_A2I_internal_18 --> -76($fp)
   # local_i2a_at_A2I_internal_16 = local_i2a_at_A2I_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_21 --> -88($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -88($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_i2a_at_A2I_internal_21 --> -88($fp)
   lw $t0, -88($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -84($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -84($fp)
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   # LOCAL local_i2a_at_A2I_internal_19 --> -80($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # local_i2a_at_A2I_internal_19 = PARAM param_i2a_at_A2I_i_0 * local_i2a_at_A2I_internal_20
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -84($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # ARG local_i2a_at_A2I_internal_19
   # LOCAL local_i2a_at_A2I_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_16 --> -68($fp)
   # LOCAL local_i2a_at_A2I_internal_17 --> -72($fp)
   # local_i2a_at_A2I_internal_17 = VCALL local_i2a_at_A2I_internal_16 i2a_aux
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 32($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_i2a_at_A2I_internal_17
   # LOCAL local_i2a_at_A2I_internal_17 --> -72($fp)
   lw $t0, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_i2a_at_A2I_internal_14 --> -60($fp)
   # local_i2a_at_A2I_internal_14 = VCALL local_i2a_at_A2I_internal_13 concat
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 24($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
   # LOCAL local_i2a_at_A2I_internal_14 --> -60($fp)
   # local_i2a_at_A2I_internal_7 = local_i2a_at_A2I_internal_14
   lw $t0, -60($fp)
   sw $t0, -32($fp)
   label_ENDIF_246: 
# LOCAL local_i2a_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
# local_i2a_at_A2I_internal_1 = local_i2a_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_236: 
# RETURN local_i2a_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_i2a_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 96
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_i2a_aux_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2a_aux_at_A2I_i_0
function_i2a_aux_at_A2I: 
   # Allocate stack frame for function function_i2a_aux_at_A2I.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_i2a_aux_at_A2I_i_0 GOTO label_FALSE_251
   # IF_ZERO param_i2a_aux_at_A2I_i_0 GOTO label_FALSE_251
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_251
   # IF_ZERO local_i2a_aux_at_A2I_internal_4 GOTO label_FALSE_251
   # IF_ZERO local_i2a_aux_at_A2I_internal_4 GOTO label_FALSE_251
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_251
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_STRING_254
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_STRING_254
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_254
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_255
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_255
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_252
   # GOTO label_FALSE_251
   j label_FALSE_251
   label_COMPARE_BY_VALUE_255: 
      # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
      # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
      # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_252
      # GOTO label_FALSE_251
      j label_FALSE_251
      label_COMPARE_STRING_254: 
         # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
         # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_CONTINUE_256
         # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_CONTINUE_256
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_256
         # GOTO label_FALSE_251
         j label_FALSE_251
         label_CONTINUE_256: 
            # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
            # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_257: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_258
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_257
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_258: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
                  # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_252
                  label_FALSE_251: 
                     # LOCAL local_i2a_aux_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_253
j label_END_253
label_TRUE_252: 
   # LOCAL local_i2a_aux_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_253: 
# LOCAL local_i2a_aux_at_A2I_internal_0 --> -4($fp)
# LOCAL local_i2a_aux_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_FALSEIF_249
# IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_FALSEIF_249
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_249
# LOCAL local_i2a_aux_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_29
sw $t0, 12($v0)
li $t0, 0
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_i2a_aux_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2a_aux_at_A2I_internal_5 --> -24($fp)
# local_i2a_aux_at_A2I_internal_1 = local_i2a_aux_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_250
j label_ENDIF_250
label_FALSEIF_249: 
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 10
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_7 --> -32($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_8 --> -36($fp)
   # local_i2a_aux_at_A2I_internal_7 = PARAM param_i2a_aux_at_A2I_i_0 / local_i2a_aux_at_A2I_internal_8
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -36($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -32($fp)
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_7 --> -32($fp)
   # local_i2a_aux_at_A2I_next_6 = local_i2a_aux_at_A2I_internal_7
   lw $t0, -32($fp)
   sw $t0, -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_13 --> -56($fp)
   # local_i2a_aux_at_A2I_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_13 --> -56($fp)
   # local_i2a_aux_at_A2I_internal_11 = local_i2a_aux_at_A2I_internal_13
   lw $t0, -56($fp)
   sw $t0, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_i2a_aux_at_A2I_next_6
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   lw $t0, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_12 --> -52($fp)
   # local_i2a_aux_at_A2I_internal_12 = VCALL local_i2a_aux_at_A2I_internal_11 i2a_aux
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 32($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_aux_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_12 --> -52($fp)
   # local_i2a_aux_at_A2I_internal_9 = local_i2a_aux_at_A2I_internal_12
   lw $t0, -52($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_16 --> -68($fp)
   # local_i2a_aux_at_A2I_internal_16 = SELF
   sw $s1, -68($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_14 --> -60($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_16 --> -68($fp)
   # local_i2a_aux_at_A2I_internal_14 = local_i2a_aux_at_A2I_internal_16
   lw $t0, -68($fp)
   sw $t0, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 10
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_18 --> -76($fp)
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_19 --> -80($fp)
   # local_i2a_aux_at_A2I_internal_18 = local_i2a_aux_at_A2I_next_6 * local_i2a_aux_at_A2I_internal_19
   lw $t1, -28($fp)
   lw $t0, 12($t1)
   lw $t1, -80($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_17 --> -72($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_18 --> -76($fp)
   # local_i2a_aux_at_A2I_internal_17 = PARAM param_i2a_aux_at_A2I_i_0 - local_i2a_aux_at_A2I_internal_18
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -76($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   # ARG local_i2a_aux_at_A2I_internal_17
   # LOCAL local_i2a_aux_at_A2I_internal_17 --> -72($fp)
   lw $t0, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_14 --> -60($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_15 --> -64($fp)
   # local_i2a_aux_at_A2I_internal_15 = VCALL local_i2a_aux_at_A2I_internal_14 i2c
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_i2a_aux_at_A2I_internal_15
   # LOCAL local_i2a_aux_at_A2I_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_10 --> -44($fp)
   # local_i2a_aux_at_A2I_internal_10 = VCALL local_i2a_aux_at_A2I_internal_9 concat
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 24($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_aux_at_A2I_internal_1 --> -8($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_10 --> -44($fp)
   # local_i2a_aux_at_A2I_internal_1 = local_i2a_aux_at_A2I_internal_10
   lw $t0, -44($fp)
   sw $t0, -8($fp)
   label_ENDIF_250: 
# RETURN local_i2a_aux_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_i2a_aux_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 88
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# __A__attrib__var__init implementation.
# @Params:
__A__attrib__var__init: 
   # Allocate stack frame for function __A__attrib__var__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ib__var__init_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_ib__var__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __A__attrib__var__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_value_at_A implementation.
# @Params:
function_value_at_A: 
   # Allocate stack frame for function function_value_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_value_at_A_internal_0 = GETATTRIBUTE var A
   # LOCAL local_value_at_A_internal_0 --> -4($fp)
   lw $t0, 12($s1)
   sw $t0, -4($fp)
   # RETURN local_value_at_A_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_value_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_set_var_at_A implementation.
# @Params:
# 	0($fp) = param_set_var_at_A_num_0
function_set_var_at_A: 
   # Allocate stack frame for function function_set_var_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_set_var_at_A_num_0 --> 0($fp)
   lw $t0, 0($fp)
   sw $t0, 12($s1)
   # LOCAL local_set_var_at_A_internal_0 --> -4($fp)
   # local_set_var_at_A_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_set_var_at_A_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_set_var_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method1_at_A implementation.
# @Params:
# 	0($fp) = param_method1_at_A_num_0
function_method1_at_A: 
   # Allocate stack frame for function function_method1_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method1_at_A_internal_0 --> -4($fp)
   # local_method1_at_A_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_method1_at_A_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_method1_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method2_at_A implementation.
# @Params:
# 	0($fp) = param_method2_at_A_num1_0
# 	4($fp) = param_method2_at_A_num2_1
function_method2_at_A: 
   # Allocate stack frame for function function_method2_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method2_at_A_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method2_at_A_internal_1 --> -8($fp)
   # PARAM param_method2_at_A_num1_0 --> 4($fp)
   # PARAM param_method2_at_A_num2_1 --> 0($fp)
   # local_method2_at_A_internal_1 = PARAM param_method2_at_A_num1_0 + PARAM param_method2_at_A_num2_1
   lw $t1, 4($fp)
   lw $t0, 12($t1)
   lw $t1, 0($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method2_at_A_x_0 --> -4($fp)
   # LOCAL local_method2_at_A_internal_1 --> -8($fp)
   # local_method2_at_A_x_0 = local_method2_at_A_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method2_at_A_internal_4 --> -20($fp)
   # local_method2_at_A_internal_4 = ALLOCATE B
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, B
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, B_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 28
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -20($fp)
   # LOCAL local_method2_at_A_internal_2 --> -12($fp)
   # LOCAL local_method2_at_A_internal_4 --> -20($fp)
   # local_method2_at_A_internal_2 = local_method2_at_A_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method2_at_A_x_0
   # LOCAL local_method2_at_A_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method2_at_A_internal_2 --> -12($fp)
   # LOCAL local_method2_at_A_internal_3 --> -16($fp)
   # local_method2_at_A_internal_3 = VCALL local_method2_at_A_internal_2 set_var
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method2_at_A_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_method2_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# function_method3_at_A implementation.
# @Params:
# 	0($fp) = param_method3_at_A_num_0
function_method3_at_A: 
   # Allocate stack frame for function function_method3_at_A.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method3_at_A_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method3_at_A_internal_1 --> -8($fp)
   # PARAM param_method3_at_A_num_0 --> 0($fp)
   lw $t0, 0($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -8($fp)
   # LOCAL local_method3_at_A_internal_1 --> -8($fp)
   # LOCAL local_method3_at_A_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -8($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method3_at_A_x_0 --> -4($fp)
   # LOCAL local_method3_at_A_internal_1 --> -8($fp)
   # local_method3_at_A_x_0 = local_method3_at_A_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method3_at_A_internal_4 --> -20($fp)
   # local_method3_at_A_internal_4 = ALLOCATE C
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, C
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, C_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 40
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -20($fp)
   # LOCAL local_method3_at_A_internal_2 --> -12($fp)
   # LOCAL local_method3_at_A_internal_4 --> -20($fp)
   # local_method3_at_A_internal_2 = local_method3_at_A_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method3_at_A_x_0
   # LOCAL local_method3_at_A_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method3_at_A_internal_2 --> -12($fp)
   # LOCAL local_method3_at_A_internal_3 --> -16($fp)
   # local_method3_at_A_internal_3 = VCALL local_method3_at_A_internal_2 set_var
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method3_at_A_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_method3_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method4_at_A implementation.
# @Params:
# 	0($fp) = param_method4_at_A_num1_0
# 	4($fp) = param_method4_at_A_num2_1
function_method4_at_A: 
   # Allocate stack frame for function function_method4_at_A.
   subu $sp, $sp, 60
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 60
   # LOCAL local_method4_at_A_internal_2 --> -12($fp)
   # PARAM param_method4_at_A_num2_1 --> 0($fp)
   # PARAM param_method4_at_A_num1_0 --> 4($fp)
   lw $a0, 0($fp)
   lw $a1, 4($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_method4_at_A_internal_2 GOTO label_FALSE_261
   # IF_GREATER_ZERO local_method4_at_A_internal_2 GOTO label_FALSE_261
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_261
   # IF_ZERO local_method4_at_A_internal_2 GOTO label_FALSE_261
   # IF_ZERO local_method4_at_A_internal_2 GOTO label_FALSE_261
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_261
   # LOCAL local_method4_at_A_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_262
j label_END_262
label_FALSE_261: 
   # LOCAL local_method4_at_A_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_262: 
# LOCAL local_method4_at_A_internal_0 --> -4($fp)
# LOCAL local_method4_at_A_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_method4_at_A_internal_0 GOTO label_FALSEIF_259
# IF_ZERO local_method4_at_A_internal_0 GOTO label_FALSEIF_259
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_259
# LOCAL local_method4_at_A_x_3 --> -16($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -16($fp)
# LOCAL local_method4_at_A_internal_4 --> -20($fp)
# PARAM param_method4_at_A_num1_0 --> 4($fp)
# PARAM param_method4_at_A_num2_1 --> 0($fp)
# local_method4_at_A_internal_4 = PARAM param_method4_at_A_num1_0 - PARAM param_method4_at_A_num2_1
lw $t1, 4($fp)
lw $t0, 12($t1)
lw $t1, 0($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -20($fp)
# LOCAL local_method4_at_A_x_3 --> -16($fp)
# LOCAL local_method4_at_A_internal_4 --> -20($fp)
# local_method4_at_A_x_3 = local_method4_at_A_internal_4
lw $t0, -20($fp)
sw $t0, -16($fp)
# LOCAL local_method4_at_A_internal_7 --> -32($fp)
# local_method4_at_A_internal_7 = ALLOCATE D
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, D
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, D_start
sw $t0, 4($v0)
# Load type offset
li $t0, 32
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -32($fp)
# LOCAL local_method4_at_A_internal_5 --> -24($fp)
# LOCAL local_method4_at_A_internal_7 --> -32($fp)
# local_method4_at_A_internal_5 = local_method4_at_A_internal_7
lw $t0, -32($fp)
sw $t0, -24($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_method4_at_A_x_3
# LOCAL local_method4_at_A_x_3 --> -16($fp)
lw $t0, -16($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_method4_at_A_internal_5 --> -24($fp)
# LOCAL local_method4_at_A_internal_6 --> -28($fp)
# local_method4_at_A_internal_6 = VCALL local_method4_at_A_internal_5 set_var
# Save new self pointer in $s1
lw $s1, -24($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 120($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -28($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_method4_at_A_internal_1 --> -8($fp)
# LOCAL local_method4_at_A_internal_6 --> -28($fp)
# local_method4_at_A_internal_1 = local_method4_at_A_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_260
j label_ENDIF_260
label_FALSEIF_259: 
   # LOCAL local_method4_at_A_x_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   # LOCAL local_method4_at_A_internal_9 --> -40($fp)
   # PARAM param_method4_at_A_num2_1 --> 0($fp)
   # PARAM param_method4_at_A_num1_0 --> 4($fp)
   # local_method4_at_A_internal_9 = PARAM param_method4_at_A_num2_1 - PARAM param_method4_at_A_num1_0
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, 4($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   # LOCAL local_method4_at_A_x_8 --> -36($fp)
   # LOCAL local_method4_at_A_internal_9 --> -40($fp)
   # local_method4_at_A_x_8 = local_method4_at_A_internal_9
   lw $t0, -40($fp)
   sw $t0, -36($fp)
   # LOCAL local_method4_at_A_internal_12 --> -52($fp)
   # local_method4_at_A_internal_12 = ALLOCATE D
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, D
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, D_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 32
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -52($fp)
   # LOCAL local_method4_at_A_internal_10 --> -44($fp)
   # LOCAL local_method4_at_A_internal_12 --> -52($fp)
   # local_method4_at_A_internal_10 = local_method4_at_A_internal_12
   lw $t0, -52($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method4_at_A_x_8
   # LOCAL local_method4_at_A_x_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method4_at_A_internal_10 --> -44($fp)
   # LOCAL local_method4_at_A_internal_11 --> -48($fp)
   # local_method4_at_A_internal_11 = VCALL local_method4_at_A_internal_10 set_var
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_method4_at_A_internal_1 --> -8($fp)
   # LOCAL local_method4_at_A_internal_11 --> -48($fp)
   # local_method4_at_A_internal_1 = local_method4_at_A_internal_11
   lw $t0, -48($fp)
   sw $t0, -8($fp)
   label_ENDIF_260: 
# RETURN local_method4_at_A_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_method4_at_A.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 60
# Deallocate function args
addu $sp, $sp, 8
jr $ra
# Function END


# function_method5_at_A implementation.
# @Params:
# 	0($fp) = param_method5_at_A_num_0
function_method5_at_A: 
   # Allocate stack frame for function function_method5_at_A.
   subu $sp, $sp, 56
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 56
   # LOCAL local_method5_at_A_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method5_at_A_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method5_at_A_x_0 --> -4($fp)
   # LOCAL local_method5_at_A_internal_1 --> -8($fp)
   # local_method5_at_A_x_0 = local_method5_at_A_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method5_at_A_y_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_method5_at_A_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_method5_at_A_y_2 --> -12($fp)
   # LOCAL local_method5_at_A_internal_3 --> -16($fp)
   # local_method5_at_A_y_2 = local_method5_at_A_internal_3
   lw $t0, -16($fp)
   sw $t0, -12($fp)
   label_WHILE_263: 
      # LOCAL local_method5_at_A_internal_5 --> -24($fp)
      # LOCAL local_method5_at_A_y_2 --> -12($fp)
      # PARAM param_method5_at_A_num_0 --> 0($fp)
      lw $a0, -12($fp)
      lw $a1, 0($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -24($fp)
      # IF_GREATER_ZERO local_method5_at_A_internal_5 GOTO label_FALSE_265
      # IF_GREATER_ZERO local_method5_at_A_internal_5 GOTO label_FALSE_265
      lw $t0, -24($fp)
      bgt $t0, 0, label_FALSE_265
      # LOCAL local_method5_at_A_internal_5 --> -24($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -24($fp)
      # GOTO label_END_266
j label_END_266
label_FALSE_265: 
   # LOCAL local_method5_at_A_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   label_END_266: 
# LOCAL local_method5_at_A_internal_4 --> -20($fp)
# LOCAL local_method5_at_A_internal_5 --> -24($fp)
# Obtain value from -24($fp)
lw $v0, -24($fp)
lw $v0, 12($v0)
sw $v0, -20($fp)
# IF_ZERO local_method5_at_A_internal_4 GOTO label_WHILE_END_264
# IF_ZERO local_method5_at_A_internal_4 GOTO label_WHILE_END_264
lw $t0, -20($fp)
beq $t0, 0, label_WHILE_END_264
# LOCAL local_method5_at_A_internal_6 --> -28($fp)
# LOCAL local_method5_at_A_x_0 --> -4($fp)
# LOCAL local_method5_at_A_y_2 --> -12($fp)
# local_method5_at_A_internal_6 = local_method5_at_A_x_0 * local_method5_at_A_y_2
lw $t1, -4($fp)
lw $t0, 12($t1)
lw $t1, -12($fp)
lw $t2, 12($t1)
mul $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -28($fp)
# LOCAL local_method5_at_A_x_0 --> -4($fp)
# LOCAL local_method5_at_A_internal_6 --> -28($fp)
# local_method5_at_A_x_0 = local_method5_at_A_internal_6
lw $t0, -28($fp)
sw $t0, -4($fp)
# LOCAL local_method5_at_A_internal_8 --> -36($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -36($fp)
# LOCAL local_method5_at_A_internal_7 --> -32($fp)
# LOCAL local_method5_at_A_y_2 --> -12($fp)
# LOCAL local_method5_at_A_internal_8 --> -36($fp)
# local_method5_at_A_internal_7 = local_method5_at_A_y_2 + local_method5_at_A_internal_8
lw $t1, -12($fp)
lw $t0, 12($t1)
lw $t1, -36($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -32($fp)
# LOCAL local_method5_at_A_y_2 --> -12($fp)
# LOCAL local_method5_at_A_internal_7 --> -32($fp)
# local_method5_at_A_y_2 = local_method5_at_A_internal_7
lw $t0, -32($fp)
sw $t0, -12($fp)
# GOTO label_WHILE_263
j label_WHILE_263
label_WHILE_END_264: 
   # LOCAL local_method5_at_A_internal_11 --> -48($fp)
   # local_method5_at_A_internal_11 = ALLOCATE E
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, E
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, E_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 36
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -48($fp)
   # LOCAL local_method5_at_A_internal_9 --> -40($fp)
   # LOCAL local_method5_at_A_internal_11 --> -48($fp)
   # local_method5_at_A_internal_9 = local_method5_at_A_internal_11
   lw $t0, -48($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method5_at_A_x_0
   # LOCAL local_method5_at_A_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method5_at_A_internal_9 --> -40($fp)
   # LOCAL local_method5_at_A_internal_10 --> -44($fp)
   # local_method5_at_A_internal_10 = VCALL local_method5_at_A_internal_9 set_var
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method5_at_A_internal_10
   lw $v0, -44($fp)
   # Deallocate stack frame for function function_method5_at_A.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 56
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method5_at_B implementation.
# @Params:
# 	0($fp) = param_method5_at_B_num_0
function_method5_at_B: 
   # Allocate stack frame for function function_method5_at_B.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method5_at_B_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method5_at_B_internal_1 --> -8($fp)
   # PARAM param_method5_at_B_num_0 --> 0($fp)
   # PARAM param_method5_at_B_num_0 --> 0($fp)
   # local_method5_at_B_internal_1 = PARAM param_method5_at_B_num_0 * PARAM param_method5_at_B_num_0
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, 0($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method5_at_B_x_0 --> -4($fp)
   # LOCAL local_method5_at_B_internal_1 --> -8($fp)
   # local_method5_at_B_x_0 = local_method5_at_B_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method5_at_B_internal_4 --> -20($fp)
   # local_method5_at_B_internal_4 = ALLOCATE E
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, E
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, E_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 36
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -20($fp)
   # LOCAL local_method5_at_B_internal_2 --> -12($fp)
   # LOCAL local_method5_at_B_internal_4 --> -20($fp)
   # local_method5_at_B_internal_2 = local_method5_at_B_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method5_at_B_x_0
   # LOCAL local_method5_at_B_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method5_at_B_internal_2 --> -12($fp)
   # LOCAL local_method5_at_B_internal_3 --> -16($fp)
   # local_method5_at_B_internal_3 = VCALL local_method5_at_B_internal_2 set_var
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method5_at_B_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_method5_at_B.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method7_at_D implementation.
# @Params:
# 	0($fp) = param_method7_at_D_num_0
function_method7_at_D: 
   # Allocate stack frame for function function_method7_at_D.
   subu $sp, $sp, 136
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 136
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # PARAM param_method7_at_D_num_0 --> 0($fp)
   # local_method7_at_D_x_0 = PARAM param_method7_at_D_num_0
   lw $t0, 0($fp)
   sw $t0, -4($fp)
   # LOCAL local_method7_at_D_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_method7_at_D_internal_3 --> -16($fp)
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # LOCAL local_method7_at_D_internal_4 --> -20($fp)
   lw $a0, -4($fp)
   lw $a1, -20($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_GREATER_ZERO local_method7_at_D_internal_3 GOTO label_FALSE_269
   # IF_GREATER_ZERO local_method7_at_D_internal_3 GOTO label_FALSE_269
   lw $t0, -16($fp)
   bgt $t0, 0, label_FALSE_269
   # IF_ZERO local_method7_at_D_internal_3 GOTO label_FALSE_269
   # IF_ZERO local_method7_at_D_internal_3 GOTO label_FALSE_269
   lw $t0, -16($fp)
   beq $t0, 0, label_FALSE_269
   # LOCAL local_method7_at_D_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # GOTO label_END_270
j label_END_270
label_FALSE_269: 
   # LOCAL local_method7_at_D_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   label_END_270: 
# LOCAL local_method7_at_D_internal_1 --> -8($fp)
# LOCAL local_method7_at_D_internal_3 --> -16($fp)
# Obtain value from -16($fp)
lw $v0, -16($fp)
lw $v0, 12($v0)
sw $v0, -8($fp)
# IF_ZERO local_method7_at_D_internal_1 GOTO label_FALSEIF_267
# IF_ZERO local_method7_at_D_internal_1 GOTO label_FALSEIF_267
lw $t0, -8($fp)
beq $t0, 0, label_FALSEIF_267
# LOCAL local_method7_at_D_internal_7 --> -32($fp)
# local_method7_at_D_internal_7 = SELF
sw $s1, -32($fp)
# LOCAL local_method7_at_D_internal_5 --> -24($fp)
# LOCAL local_method7_at_D_internal_7 --> -32($fp)
# local_method7_at_D_internal_5 = local_method7_at_D_internal_7
lw $t0, -32($fp)
sw $t0, -24($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_method7_at_D_internal_8 --> -36($fp)
# LOCAL local_method7_at_D_x_0 --> -4($fp)
lw $t0, -4($fp)
lw $t0, 12($t0)
not $t0, $t0
add $t0, $t0, 1
sw $t0, -36($fp)
# LOCAL local_method7_at_D_internal_8 --> -36($fp)
# LOCAL local_method7_at_D_internal_8 --> -36($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
lw $t0, -36($fp)
sw $t0, 12($v0)
sw $v0, -36($fp)
# ARG local_method7_at_D_internal_8
# LOCAL local_method7_at_D_internal_8 --> -36($fp)
lw $t0, -36($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_method7_at_D_internal_5 --> -24($fp)
# LOCAL local_method7_at_D_internal_6 --> -28($fp)
# local_method7_at_D_internal_6 = VCALL local_method7_at_D_internal_5 method7
# Save new self pointer in $s1
lw $s1, -24($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 0($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -28($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_method7_at_D_internal_2 --> -12($fp)
# LOCAL local_method7_at_D_internal_6 --> -28($fp)
# local_method7_at_D_internal_2 = local_method7_at_D_internal_6
lw $t0, -28($fp)
sw $t0, -12($fp)
# GOTO label_ENDIF_268
j label_ENDIF_268
label_FALSEIF_267: 
   # LOCAL local_method7_at_D_internal_13 --> -56($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -56($fp)
   # IF_ZERO local_method7_at_D_internal_13 GOTO label_FALSE_273
   # IF_ZERO local_method7_at_D_internal_13 GOTO label_FALSE_273
   lw $t0, -56($fp)
   beq $t0, 0, label_FALSE_273
   # IF_ZERO local_method7_at_D_x_0 GOTO label_FALSE_273
   # IF_ZERO local_method7_at_D_x_0 GOTO label_FALSE_273
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_273
   # LOCAL local_method7_at_D_internal_12 --> -52($fp)
   # LOCAL local_method7_at_D_internal_13 --> -56($fp)
   # Comparing -56($fp) type with String
   la $v0, String
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_COMPARE_STRING_276
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_COMPARE_STRING_276
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_STRING_276
   # LOCAL local_method7_at_D_internal_12 --> -52($fp)
   # LOCAL local_method7_at_D_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Bool
   la $v0, Bool
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_COMPARE_BY_VALUE_277
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_COMPARE_BY_VALUE_277
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_277
   # LOCAL local_method7_at_D_internal_12 --> -52($fp)
   # LOCAL local_method7_at_D_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Int
   la $v0, Int
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_COMPARE_BY_VALUE_277
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_COMPARE_BY_VALUE_277
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_277
   # LOCAL local_method7_at_D_internal_12 --> -52($fp)
   # LOCAL local_method7_at_D_internal_13 --> -56($fp)
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # Load pointers and SUB
   lw $a0, -56($fp)
   lw $a1, -4($fp)
   sub $a0, $a0, $a1
   sw $a0, -52($fp)
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_TRUE_274
   # IF_ZERO local_method7_at_D_internal_12 GOTO label_TRUE_274
   lw $t0, -52($fp)
   beq $t0, 0, label_TRUE_274
   # GOTO label_FALSE_273
   j label_FALSE_273
   label_COMPARE_BY_VALUE_277: 
      # LOCAL local_method7_at_D_internal_12 --> -52($fp)
      # LOCAL local_method7_at_D_internal_13 --> -56($fp)
      # LOCAL local_method7_at_D_x_0 --> -4($fp)
      lw $a0, -56($fp)
      lw $a1, -4($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -52($fp)
      # IF_ZERO local_method7_at_D_internal_12 GOTO label_TRUE_274
      # IF_ZERO local_method7_at_D_internal_12 GOTO label_TRUE_274
      lw $t0, -52($fp)
      beq $t0, 0, label_TRUE_274
      # GOTO label_FALSE_273
      j label_FALSE_273
      label_COMPARE_STRING_276: 
         # LOCAL local_method7_at_D_internal_12 --> -52($fp)
         # LOCAL local_method7_at_D_internal_13 --> -56($fp)
         # LOCAL local_method7_at_D_x_0 --> -4($fp)
         # Load strings for comparison
         lw $v0, -56($fp)
         lw $v1, -4($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -52($fp)
         # IF_ZERO local_method7_at_D_internal_12 GOTO label_CONTINUE_278
         # IF_ZERO local_method7_at_D_internal_12 GOTO label_CONTINUE_278
         lw $t0, -52($fp)
         beq $t0, 0, label_CONTINUE_278
         # GOTO label_FALSE_273
         j label_FALSE_273
         label_CONTINUE_278: 
            # LOCAL local_method7_at_D_internal_12 --> -52($fp)
            # LOCAL local_method7_at_D_internal_13 --> -56($fp)
            # LOCAL local_method7_at_D_x_0 --> -4($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -56($fp)
            lw $v1, -4($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_279: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_280
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_279
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_280: 
                  # Store result
                  sw $a2, -52($fp)
                  # IF_ZERO local_method7_at_D_internal_12 GOTO label_TRUE_274
                  # IF_ZERO local_method7_at_D_internal_12 GOTO label_TRUE_274
                  lw $t0, -52($fp)
                  beq $t0, 0, label_TRUE_274
                  label_FALSE_273: 
                     # LOCAL local_method7_at_D_internal_11 --> -48($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -48($fp)
                     # GOTO label_END_275
j label_END_275
label_TRUE_274: 
   # LOCAL local_method7_at_D_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   label_END_275: 
# LOCAL local_method7_at_D_internal_9 --> -40($fp)
# LOCAL local_method7_at_D_internal_11 --> -48($fp)
# Obtain value from -48($fp)
lw $v0, -48($fp)
lw $v0, 12($v0)
sw $v0, -40($fp)
# IF_ZERO local_method7_at_D_internal_9 GOTO label_FALSEIF_271
# IF_ZERO local_method7_at_D_internal_9 GOTO label_FALSEIF_271
lw $t0, -40($fp)
beq $t0, 0, label_FALSEIF_271
# LOCAL local_method7_at_D_internal_14 --> -60($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -60($fp)
# LOCAL local_method7_at_D_internal_10 --> -44($fp)
# LOCAL local_method7_at_D_internal_14 --> -60($fp)
# local_method7_at_D_internal_10 = local_method7_at_D_internal_14
lw $t0, -60($fp)
sw $t0, -44($fp)
# GOTO label_ENDIF_272
j label_ENDIF_272
label_FALSEIF_271: 
   # LOCAL local_method7_at_D_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # IF_ZERO local_method7_at_D_internal_19 GOTO label_FALSE_283
   # IF_ZERO local_method7_at_D_internal_19 GOTO label_FALSE_283
   lw $t0, -80($fp)
   beq $t0, 0, label_FALSE_283
   # IF_ZERO local_method7_at_D_x_0 GOTO label_FALSE_283
   # IF_ZERO local_method7_at_D_x_0 GOTO label_FALSE_283
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_283
   # LOCAL local_method7_at_D_internal_18 --> -76($fp)
   # LOCAL local_method7_at_D_internal_19 --> -80($fp)
   # Comparing -80($fp) type with String
   la $v0, String
   lw $a0, -80($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -76($fp)
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_COMPARE_STRING_286
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_COMPARE_STRING_286
   lw $t0, -76($fp)
   beq $t0, 0, label_COMPARE_STRING_286
   # LOCAL local_method7_at_D_internal_18 --> -76($fp)
   # LOCAL local_method7_at_D_internal_19 --> -80($fp)
   # Comparing -80($fp) type with Bool
   la $v0, Bool
   lw $a0, -80($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -76($fp)
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_COMPARE_BY_VALUE_287
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_COMPARE_BY_VALUE_287
   lw $t0, -76($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_287
   # LOCAL local_method7_at_D_internal_18 --> -76($fp)
   # LOCAL local_method7_at_D_internal_19 --> -80($fp)
   # Comparing -80($fp) type with Int
   la $v0, Int
   lw $a0, -80($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -76($fp)
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_COMPARE_BY_VALUE_287
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_COMPARE_BY_VALUE_287
   lw $t0, -76($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_287
   # LOCAL local_method7_at_D_internal_18 --> -76($fp)
   # LOCAL local_method7_at_D_internal_19 --> -80($fp)
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # Load pointers and SUB
   lw $a0, -80($fp)
   lw $a1, -4($fp)
   sub $a0, $a0, $a1
   sw $a0, -76($fp)
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_TRUE_284
   # IF_ZERO local_method7_at_D_internal_18 GOTO label_TRUE_284
   lw $t0, -76($fp)
   beq $t0, 0, label_TRUE_284
   # GOTO label_FALSE_283
   j label_FALSE_283
   label_COMPARE_BY_VALUE_287: 
      # LOCAL local_method7_at_D_internal_18 --> -76($fp)
      # LOCAL local_method7_at_D_internal_19 --> -80($fp)
      # LOCAL local_method7_at_D_x_0 --> -4($fp)
      lw $a0, -80($fp)
      lw $a1, -4($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -76($fp)
      # IF_ZERO local_method7_at_D_internal_18 GOTO label_TRUE_284
      # IF_ZERO local_method7_at_D_internal_18 GOTO label_TRUE_284
      lw $t0, -76($fp)
      beq $t0, 0, label_TRUE_284
      # GOTO label_FALSE_283
      j label_FALSE_283
      label_COMPARE_STRING_286: 
         # LOCAL local_method7_at_D_internal_18 --> -76($fp)
         # LOCAL local_method7_at_D_internal_19 --> -80($fp)
         # LOCAL local_method7_at_D_x_0 --> -4($fp)
         # Load strings for comparison
         lw $v0, -80($fp)
         lw $v1, -4($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -76($fp)
         # IF_ZERO local_method7_at_D_internal_18 GOTO label_CONTINUE_288
         # IF_ZERO local_method7_at_D_internal_18 GOTO label_CONTINUE_288
         lw $t0, -76($fp)
         beq $t0, 0, label_CONTINUE_288
         # GOTO label_FALSE_283
         j label_FALSE_283
         label_CONTINUE_288: 
            # LOCAL local_method7_at_D_internal_18 --> -76($fp)
            # LOCAL local_method7_at_D_internal_19 --> -80($fp)
            # LOCAL local_method7_at_D_x_0 --> -4($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -80($fp)
            lw $v1, -4($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_289: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_290
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_289
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_290: 
                  # Store result
                  sw $a2, -76($fp)
                  # IF_ZERO local_method7_at_D_internal_18 GOTO label_TRUE_284
                  # IF_ZERO local_method7_at_D_internal_18 GOTO label_TRUE_284
                  lw $t0, -76($fp)
                  beq $t0, 0, label_TRUE_284
                  label_FALSE_283: 
                     # LOCAL local_method7_at_D_internal_17 --> -72($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -72($fp)
                     # GOTO label_END_285
j label_END_285
label_TRUE_284: 
   # LOCAL local_method7_at_D_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   label_END_285: 
# LOCAL local_method7_at_D_internal_15 --> -64($fp)
# LOCAL local_method7_at_D_internal_17 --> -72($fp)
# Obtain value from -72($fp)
lw $v0, -72($fp)
lw $v0, 12($v0)
sw $v0, -64($fp)
# IF_ZERO local_method7_at_D_internal_15 GOTO label_FALSEIF_281
# IF_ZERO local_method7_at_D_internal_15 GOTO label_FALSEIF_281
lw $t0, -64($fp)
beq $t0, 0, label_FALSEIF_281
# LOCAL local_method7_at_D_internal_20 --> -84($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -84($fp)
# LOCAL local_method7_at_D_internal_16 --> -68($fp)
# LOCAL local_method7_at_D_internal_20 --> -84($fp)
# local_method7_at_D_internal_16 = local_method7_at_D_internal_20
lw $t0, -84($fp)
sw $t0, -68($fp)
# GOTO label_ENDIF_282
j label_ENDIF_282
label_FALSEIF_281: 
   # LOCAL local_method7_at_D_internal_25 --> -104($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -104($fp)
   # IF_ZERO local_method7_at_D_internal_25 GOTO label_FALSE_293
   # IF_ZERO local_method7_at_D_internal_25 GOTO label_FALSE_293
   lw $t0, -104($fp)
   beq $t0, 0, label_FALSE_293
   # IF_ZERO local_method7_at_D_x_0 GOTO label_FALSE_293
   # IF_ZERO local_method7_at_D_x_0 GOTO label_FALSE_293
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_293
   # LOCAL local_method7_at_D_internal_24 --> -100($fp)
   # LOCAL local_method7_at_D_internal_25 --> -104($fp)
   # Comparing -104($fp) type with String
   la $v0, String
   lw $a0, -104($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -100($fp)
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_COMPARE_STRING_296
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_COMPARE_STRING_296
   lw $t0, -100($fp)
   beq $t0, 0, label_COMPARE_STRING_296
   # LOCAL local_method7_at_D_internal_24 --> -100($fp)
   # LOCAL local_method7_at_D_internal_25 --> -104($fp)
   # Comparing -104($fp) type with Bool
   la $v0, Bool
   lw $a0, -104($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -100($fp)
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_COMPARE_BY_VALUE_297
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_COMPARE_BY_VALUE_297
   lw $t0, -100($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_297
   # LOCAL local_method7_at_D_internal_24 --> -100($fp)
   # LOCAL local_method7_at_D_internal_25 --> -104($fp)
   # Comparing -104($fp) type with Int
   la $v0, Int
   lw $a0, -104($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -100($fp)
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_COMPARE_BY_VALUE_297
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_COMPARE_BY_VALUE_297
   lw $t0, -100($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_297
   # LOCAL local_method7_at_D_internal_24 --> -100($fp)
   # LOCAL local_method7_at_D_internal_25 --> -104($fp)
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # Load pointers and SUB
   lw $a0, -104($fp)
   lw $a1, -4($fp)
   sub $a0, $a0, $a1
   sw $a0, -100($fp)
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_TRUE_294
   # IF_ZERO local_method7_at_D_internal_24 GOTO label_TRUE_294
   lw $t0, -100($fp)
   beq $t0, 0, label_TRUE_294
   # GOTO label_FALSE_293
   j label_FALSE_293
   label_COMPARE_BY_VALUE_297: 
      # LOCAL local_method7_at_D_internal_24 --> -100($fp)
      # LOCAL local_method7_at_D_internal_25 --> -104($fp)
      # LOCAL local_method7_at_D_x_0 --> -4($fp)
      lw $a0, -104($fp)
      lw $a1, -4($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -100($fp)
      # IF_ZERO local_method7_at_D_internal_24 GOTO label_TRUE_294
      # IF_ZERO local_method7_at_D_internal_24 GOTO label_TRUE_294
      lw $t0, -100($fp)
      beq $t0, 0, label_TRUE_294
      # GOTO label_FALSE_293
      j label_FALSE_293
      label_COMPARE_STRING_296: 
         # LOCAL local_method7_at_D_internal_24 --> -100($fp)
         # LOCAL local_method7_at_D_internal_25 --> -104($fp)
         # LOCAL local_method7_at_D_x_0 --> -4($fp)
         # Load strings for comparison
         lw $v0, -104($fp)
         lw $v1, -4($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -100($fp)
         # IF_ZERO local_method7_at_D_internal_24 GOTO label_CONTINUE_298
         # IF_ZERO local_method7_at_D_internal_24 GOTO label_CONTINUE_298
         lw $t0, -100($fp)
         beq $t0, 0, label_CONTINUE_298
         # GOTO label_FALSE_293
         j label_FALSE_293
         label_CONTINUE_298: 
            # LOCAL local_method7_at_D_internal_24 --> -100($fp)
            # LOCAL local_method7_at_D_internal_25 --> -104($fp)
            # LOCAL local_method7_at_D_x_0 --> -4($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -104($fp)
            lw $v1, -4($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_299: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_300
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_299
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_300: 
                  # Store result
                  sw $a2, -100($fp)
                  # IF_ZERO local_method7_at_D_internal_24 GOTO label_TRUE_294
                  # IF_ZERO local_method7_at_D_internal_24 GOTO label_TRUE_294
                  lw $t0, -100($fp)
                  beq $t0, 0, label_TRUE_294
                  label_FALSE_293: 
                     # LOCAL local_method7_at_D_internal_23 --> -96($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -96($fp)
                     # GOTO label_END_295
j label_END_295
label_TRUE_294: 
   # LOCAL local_method7_at_D_internal_23 --> -96($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -96($fp)
   label_END_295: 
# LOCAL local_method7_at_D_internal_21 --> -88($fp)
# LOCAL local_method7_at_D_internal_23 --> -96($fp)
# Obtain value from -96($fp)
lw $v0, -96($fp)
lw $v0, 12($v0)
sw $v0, -88($fp)
# IF_ZERO local_method7_at_D_internal_21 GOTO label_FALSEIF_291
# IF_ZERO local_method7_at_D_internal_21 GOTO label_FALSEIF_291
lw $t0, -88($fp)
beq $t0, 0, label_FALSEIF_291
# LOCAL local_method7_at_D_internal_26 --> -108($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -108($fp)
# LOCAL local_method7_at_D_internal_22 --> -92($fp)
# LOCAL local_method7_at_D_internal_26 --> -108($fp)
# local_method7_at_D_internal_22 = local_method7_at_D_internal_26
lw $t0, -108($fp)
sw $t0, -92($fp)
# GOTO label_ENDIF_292
j label_ENDIF_292
label_FALSEIF_291: 
   # LOCAL local_method7_at_D_internal_29 --> -120($fp)
   # local_method7_at_D_internal_29 = SELF
   sw $s1, -120($fp)
   # LOCAL local_method7_at_D_internal_27 --> -112($fp)
   # LOCAL local_method7_at_D_internal_29 --> -120($fp)
   # local_method7_at_D_internal_27 = local_method7_at_D_internal_29
   lw $t0, -120($fp)
   sw $t0, -112($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_method7_at_D_internal_31 --> -128($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 3
   sw $t0, 12($v0)
   sw $v0, -128($fp)
   # LOCAL local_method7_at_D_internal_30 --> -124($fp)
   # LOCAL local_method7_at_D_x_0 --> -4($fp)
   # LOCAL local_method7_at_D_internal_31 --> -128($fp)
   # local_method7_at_D_internal_30 = local_method7_at_D_x_0 - local_method7_at_D_internal_31
   lw $t1, -4($fp)
   lw $t0, 12($t1)
   lw $t1, -128($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -124($fp)
   # ARG local_method7_at_D_internal_30
   # LOCAL local_method7_at_D_internal_30 --> -124($fp)
   lw $t0, -124($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method7_at_D_internal_27 --> -112($fp)
   # LOCAL local_method7_at_D_internal_28 --> -116($fp)
   # local_method7_at_D_internal_28 = VCALL local_method7_at_D_internal_27 method7
   # Save new self pointer in $s1
   lw $s1, -112($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 0($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -116($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_method7_at_D_internal_22 --> -92($fp)
   # LOCAL local_method7_at_D_internal_28 --> -116($fp)
   # local_method7_at_D_internal_22 = local_method7_at_D_internal_28
   lw $t0, -116($fp)
   sw $t0, -92($fp)
   label_ENDIF_292: 
# LOCAL local_method7_at_D_internal_16 --> -68($fp)
# LOCAL local_method7_at_D_internal_22 --> -92($fp)
# local_method7_at_D_internal_16 = local_method7_at_D_internal_22
lw $t0, -92($fp)
sw $t0, -68($fp)
label_ENDIF_282: 
# LOCAL local_method7_at_D_internal_10 --> -44($fp)
# LOCAL local_method7_at_D_internal_16 --> -68($fp)
# local_method7_at_D_internal_10 = local_method7_at_D_internal_16
lw $t0, -68($fp)
sw $t0, -44($fp)
label_ENDIF_272: 
# LOCAL local_method7_at_D_internal_2 --> -12($fp)
# LOCAL local_method7_at_D_internal_10 --> -44($fp)
# local_method7_at_D_internal_2 = local_method7_at_D_internal_10
lw $t0, -44($fp)
sw $t0, -12($fp)
label_ENDIF_268: 
# RETURN local_method7_at_D_internal_2
lw $v0, -12($fp)
# Deallocate stack frame for function function_method7_at_D.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 136
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_method6_at_E implementation.
# @Params:
# 	0($fp) = param_method6_at_E_num_0
function_method6_at_E: 
   # Allocate stack frame for function function_method6_at_E.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method6_at_E_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method6_at_E_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 8
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_method6_at_E_internal_1 --> -8($fp)
   # PARAM param_method6_at_E_num_0 --> 0($fp)
   # LOCAL local_method6_at_E_internal_2 --> -12($fp)
   # local_method6_at_E_internal_1 = PARAM param_method6_at_E_num_0 / local_method6_at_E_internal_2
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -12($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method6_at_E_x_0 --> -4($fp)
   # LOCAL local_method6_at_E_internal_1 --> -8($fp)
   # local_method6_at_E_x_0 = local_method6_at_E_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method6_at_E_internal_5 --> -24($fp)
   # local_method6_at_E_internal_5 = ALLOCATE A
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -24($fp)
   # LOCAL local_method6_at_E_internal_3 --> -16($fp)
   # LOCAL local_method6_at_E_internal_5 --> -24($fp)
   # local_method6_at_E_internal_3 = local_method6_at_E_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method6_at_E_x_0
   # LOCAL local_method6_at_E_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method6_at_E_internal_3 --> -16($fp)
   # LOCAL local_method6_at_E_internal_4 --> -20($fp)
   # local_method6_at_E_internal_4 = VCALL local_method6_at_E_internal_3 set_var
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method6_at_E_internal_4
   lw $v0, -20($fp)
   # Deallocate stack frame for function function_method6_at_E.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method6_at_C implementation.
# @Params:
# 	0($fp) = param_method6_at_C_num_0
function_method6_at_C: 
   # Allocate stack frame for function function_method6_at_C.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method6_at_C_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method6_at_C_internal_1 --> -8($fp)
   # PARAM param_method6_at_C_num_0 --> 0($fp)
   lw $t0, 0($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -8($fp)
   # LOCAL local_method6_at_C_internal_1 --> -8($fp)
   # LOCAL local_method6_at_C_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -8($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method6_at_C_x_0 --> -4($fp)
   # LOCAL local_method6_at_C_internal_1 --> -8($fp)
   # local_method6_at_C_x_0 = local_method6_at_C_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method6_at_C_internal_4 --> -20($fp)
   # local_method6_at_C_internal_4 = ALLOCATE A
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -20($fp)
   # LOCAL local_method6_at_C_internal_2 --> -12($fp)
   # LOCAL local_method6_at_C_internal_4 --> -20($fp)
   # local_method6_at_C_internal_2 = local_method6_at_C_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method6_at_C_x_0
   # LOCAL local_method6_at_C_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method6_at_C_internal_2 --> -12($fp)
   # LOCAL local_method6_at_C_internal_3 --> -16($fp)
   # local_method6_at_C_internal_3 = VCALL local_method6_at_C_internal_2 set_var
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method6_at_C_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_method6_at_C.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_method5_at_C implementation.
# @Params:
# 	0($fp) = param_method5_at_C_num_0
function_method5_at_C: 
   # Allocate stack frame for function function_method5_at_C.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_method5_at_C_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_method5_at_C_internal_2 --> -12($fp)
   # PARAM param_method5_at_C_num_0 --> 0($fp)
   # PARAM param_method5_at_C_num_0 --> 0($fp)
   # local_method5_at_C_internal_2 = PARAM param_method5_at_C_num_0 * PARAM param_method5_at_C_num_0
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, 0($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_method5_at_C_internal_1 --> -8($fp)
   # LOCAL local_method5_at_C_internal_2 --> -12($fp)
   # PARAM param_method5_at_C_num_0 --> 0($fp)
   # local_method5_at_C_internal_1 = local_method5_at_C_internal_2 * PARAM param_method5_at_C_num_0
   lw $t1, -12($fp)
   lw $t0, 12($t1)
   lw $t1, 0($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_method5_at_C_x_0 --> -4($fp)
   # LOCAL local_method5_at_C_internal_1 --> -8($fp)
   # local_method5_at_C_x_0 = local_method5_at_C_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_method5_at_C_internal_5 --> -24($fp)
   # local_method5_at_C_internal_5 = ALLOCATE E
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, E
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, E_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 36
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -24($fp)
   # LOCAL local_method5_at_C_internal_3 --> -16($fp)
   # LOCAL local_method5_at_C_internal_5 --> -24($fp)
   # local_method5_at_C_internal_3 = local_method5_at_C_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_method5_at_C_x_0
   # LOCAL local_method5_at_C_x_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_method5_at_C_internal_3 --> -16($fp)
   # LOCAL local_method5_at_C_internal_4 --> -20($fp)
   # local_method5_at_C_internal_4 = VCALL local_method5_at_C_internal_3 set_var
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 120($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_method5_at_C_internal_4
   lw $v0, -20($fp)
   # Deallocate stack frame for function function_method5_at_C.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# __Main__attrib__char__init implementation.
# @Params:
__Main__attrib__char__init: 
   # Allocate stack frame for function __Main__attrib__char__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__char__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_ttrib__char__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Main__attrib__char__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__avar__init implementation.
# @Params:
__Main__attrib__avar__init: 
   # Allocate stack frame for function __Main__attrib__avar__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__avar__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__a_var__init implementation.
# @Params:
__Main__attrib__a_var__init: 
   # Allocate stack frame for function __Main__attrib__a_var__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__a_var__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__flag__init implementation.
# @Params:
__Main__attrib__flag__init: 
   # Allocate stack frame for function __Main__attrib__flag__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__flag__init_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_ttrib__flag__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Main__attrib__flag__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_menu_at_Main implementation.
# @Params:
function_menu_at_Main: 
   # Allocate stack frame for function function_menu_at_Main.
   subu $sp, $sp, 436
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 436
   # LOCAL local_menu_at_Main_internal_2 --> -12($fp)
   # local_menu_at_Main_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_menu_at_Main_internal_0 --> -4($fp)
   # LOCAL local_menu_at_Main_internal_2 --> -12($fp)
   # local_menu_at_Main_internal_0 = local_menu_at_Main_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_30
   sw $t0, 12($v0)
   li $t0, 22
   sw $t0, 16($v0)
   sw $v0, -16($fp)
   # ARG local_menu_at_Main_internal_3
   # LOCAL local_menu_at_Main_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_0 --> -4($fp)
   # LOCAL local_menu_at_Main_internal_1 --> -8($fp)
   # local_menu_at_Main_internal_1 = VCALL local_menu_at_Main_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_6 --> -28($fp)
   # local_menu_at_Main_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_menu_at_Main_internal_4 --> -20($fp)
   # LOCAL local_menu_at_Main_internal_6 --> -28($fp)
   # local_menu_at_Main_internal_4 = local_menu_at_Main_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_7 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_7 --> -32($fp)
   lw $t0, 16($s1)
   sw $t0, -32($fp)
   # ARG local_menu_at_Main_internal_7
   # LOCAL local_menu_at_Main_internal_7 --> -32($fp)
   lw $t0, -32($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_4 --> -20($fp)
   # LOCAL local_menu_at_Main_internal_5 --> -24($fp)
   # local_menu_at_Main_internal_5 = VCALL local_menu_at_Main_internal_4 print
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_10 --> -44($fp)
   # local_menu_at_Main_internal_10 = SELF
   sw $s1, -44($fp)
   # LOCAL local_menu_at_Main_internal_8 --> -36($fp)
   # LOCAL local_menu_at_Main_internal_10 --> -44($fp)
   # local_menu_at_Main_internal_8 = local_menu_at_Main_internal_10
   lw $t0, -44($fp)
   sw $t0, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_31
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -48($fp)
   # ARG local_menu_at_Main_internal_11
   # LOCAL local_menu_at_Main_internal_11 --> -48($fp)
   lw $t0, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_8 --> -36($fp)
   # LOCAL local_menu_at_Main_internal_9 --> -40($fp)
   # local_menu_at_Main_internal_9 = VCALL local_menu_at_Main_internal_8 out_string
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_14 --> -60($fp)
   # local_menu_at_Main_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_menu_at_Main_internal_12 --> -52($fp)
   # LOCAL local_menu_at_Main_internal_14 --> -60($fp)
   # local_menu_at_Main_internal_12 = local_menu_at_Main_internal_14
   lw $t0, -60($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_32
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -64($fp)
   # ARG local_menu_at_Main_internal_15
   # LOCAL local_menu_at_Main_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_12 --> -52($fp)
   # LOCAL local_menu_at_Main_internal_13 --> -56($fp)
   # local_menu_at_Main_internal_13 = VCALL local_menu_at_Main_internal_12 out_string
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_18 --> -76($fp)
   # local_menu_at_Main_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_menu_at_Main_internal_16 --> -68($fp)
   # LOCAL local_menu_at_Main_internal_18 --> -76($fp)
   # local_menu_at_Main_internal_16 = local_menu_at_Main_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_19 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_19 --> -80($fp)
   lw $t0, 16($s1)
   sw $t0, -80($fp)
   # ARG local_menu_at_Main_internal_19
   # LOCAL local_menu_at_Main_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_16 --> -68($fp)
   # LOCAL local_menu_at_Main_internal_17 --> -72($fp)
   # local_menu_at_Main_internal_17 = VCALL local_menu_at_Main_internal_16 print
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_22 --> -92($fp)
   # local_menu_at_Main_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_menu_at_Main_internal_20 --> -84($fp)
   # LOCAL local_menu_at_Main_internal_22 --> -92($fp)
   # local_menu_at_Main_internal_20 = local_menu_at_Main_internal_22
   lw $t0, -92($fp)
   sw $t0, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_23 --> -96($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_33
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -96($fp)
   # ARG local_menu_at_Main_internal_23
   # LOCAL local_menu_at_Main_internal_23 --> -96($fp)
   lw $t0, -96($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_20 --> -84($fp)
   # LOCAL local_menu_at_Main_internal_21 --> -88($fp)
   # local_menu_at_Main_internal_21 = VCALL local_menu_at_Main_internal_20 out_string
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_26 --> -108($fp)
   # local_menu_at_Main_internal_26 = SELF
   sw $s1, -108($fp)
   # LOCAL local_menu_at_Main_internal_24 --> -100($fp)
   # LOCAL local_menu_at_Main_internal_26 --> -108($fp)
   # local_menu_at_Main_internal_24 = local_menu_at_Main_internal_26
   lw $t0, -108($fp)
   sw $t0, -100($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_27 --> -112($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_34
   sw $t0, 12($v0)
   li $t0, 33
   sw $t0, 16($v0)
   sw $v0, -112($fp)
   # ARG local_menu_at_Main_internal_27
   # LOCAL local_menu_at_Main_internal_27 --> -112($fp)
   lw $t0, -112($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_24 --> -100($fp)
   # LOCAL local_menu_at_Main_internal_25 --> -104($fp)
   # local_menu_at_Main_internal_25 = VCALL local_menu_at_Main_internal_24 out_string
   # Save new self pointer in $s1
   lw $s1, -100($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -104($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_30 --> -124($fp)
   # local_menu_at_Main_internal_30 = SELF
   sw $s1, -124($fp)
   # LOCAL local_menu_at_Main_internal_28 --> -116($fp)
   # LOCAL local_menu_at_Main_internal_30 --> -124($fp)
   # local_menu_at_Main_internal_28 = local_menu_at_Main_internal_30
   lw $t0, -124($fp)
   sw $t0, -116($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_31 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_31 --> -128($fp)
   lw $t0, 16($s1)
   sw $t0, -128($fp)
   # ARG local_menu_at_Main_internal_31
   # LOCAL local_menu_at_Main_internal_31 --> -128($fp)
   lw $t0, -128($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_28 --> -116($fp)
   # LOCAL local_menu_at_Main_internal_29 --> -120($fp)
   # local_menu_at_Main_internal_29 = VCALL local_menu_at_Main_internal_28 print
   # Save new self pointer in $s1
   lw $s1, -116($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -120($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_34 --> -140($fp)
   # local_menu_at_Main_internal_34 = SELF
   sw $s1, -140($fp)
   # LOCAL local_menu_at_Main_internal_32 --> -132($fp)
   # LOCAL local_menu_at_Main_internal_34 --> -140($fp)
   # local_menu_at_Main_internal_32 = local_menu_at_Main_internal_34
   lw $t0, -140($fp)
   sw $t0, -132($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_35 --> -144($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_35
   sw $t0, 12($v0)
   li $t0, 30
   sw $t0, 16($v0)
   sw $v0, -144($fp)
   # ARG local_menu_at_Main_internal_35
   # LOCAL local_menu_at_Main_internal_35 --> -144($fp)
   lw $t0, -144($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_32 --> -132($fp)
   # LOCAL local_menu_at_Main_internal_33 --> -136($fp)
   # local_menu_at_Main_internal_33 = VCALL local_menu_at_Main_internal_32 out_string
   # Save new self pointer in $s1
   lw $s1, -132($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -136($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_38 --> -156($fp)
   # local_menu_at_Main_internal_38 = SELF
   sw $s1, -156($fp)
   # LOCAL local_menu_at_Main_internal_36 --> -148($fp)
   # LOCAL local_menu_at_Main_internal_38 --> -156($fp)
   # local_menu_at_Main_internal_36 = local_menu_at_Main_internal_38
   lw $t0, -156($fp)
   sw $t0, -148($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_39 --> -160($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_36
   sw $t0, 12($v0)
   li $t0, 27
   sw $t0, 16($v0)
   sw $v0, -160($fp)
   # ARG local_menu_at_Main_internal_39
   # LOCAL local_menu_at_Main_internal_39 --> -160($fp)
   lw $t0, -160($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_36 --> -148($fp)
   # LOCAL local_menu_at_Main_internal_37 --> -152($fp)
   # local_menu_at_Main_internal_37 = VCALL local_menu_at_Main_internal_36 out_string
   # Save new self pointer in $s1
   lw $s1, -148($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -152($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_42 --> -172($fp)
   # local_menu_at_Main_internal_42 = SELF
   sw $s1, -172($fp)
   # LOCAL local_menu_at_Main_internal_40 --> -164($fp)
   # LOCAL local_menu_at_Main_internal_42 --> -172($fp)
   # local_menu_at_Main_internal_40 = local_menu_at_Main_internal_42
   lw $t0, -172($fp)
   sw $t0, -164($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_43 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_43 --> -176($fp)
   lw $t0, 16($s1)
   sw $t0, -176($fp)
   # ARG local_menu_at_Main_internal_43
   # LOCAL local_menu_at_Main_internal_43 --> -176($fp)
   lw $t0, -176($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_40 --> -164($fp)
   # LOCAL local_menu_at_Main_internal_41 --> -168($fp)
   # local_menu_at_Main_internal_41 = VCALL local_menu_at_Main_internal_40 print
   # Save new self pointer in $s1
   lw $s1, -164($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -168($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_46 --> -188($fp)
   # local_menu_at_Main_internal_46 = SELF
   sw $s1, -188($fp)
   # LOCAL local_menu_at_Main_internal_44 --> -180($fp)
   # LOCAL local_menu_at_Main_internal_46 --> -188($fp)
   # local_menu_at_Main_internal_44 = local_menu_at_Main_internal_46
   lw $t0, -188($fp)
   sw $t0, -180($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_47 --> -192($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_37
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -192($fp)
   # ARG local_menu_at_Main_internal_47
   # LOCAL local_menu_at_Main_internal_47 --> -192($fp)
   lw $t0, -192($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_44 --> -180($fp)
   # LOCAL local_menu_at_Main_internal_45 --> -184($fp)
   # local_menu_at_Main_internal_45 = VCALL local_menu_at_Main_internal_44 out_string
   # Save new self pointer in $s1
   lw $s1, -180($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -184($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_50 --> -204($fp)
   # local_menu_at_Main_internal_50 = SELF
   sw $s1, -204($fp)
   # LOCAL local_menu_at_Main_internal_48 --> -196($fp)
   # LOCAL local_menu_at_Main_internal_50 --> -204($fp)
   # local_menu_at_Main_internal_48 = local_menu_at_Main_internal_50
   lw $t0, -204($fp)
   sw $t0, -196($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_51 --> -208($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_38
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -208($fp)
   # ARG local_menu_at_Main_internal_51
   # LOCAL local_menu_at_Main_internal_51 --> -208($fp)
   lw $t0, -208($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_48 --> -196($fp)
   # LOCAL local_menu_at_Main_internal_49 --> -200($fp)
   # local_menu_at_Main_internal_49 = VCALL local_menu_at_Main_internal_48 out_string
   # Save new self pointer in $s1
   lw $s1, -196($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -200($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_54 --> -220($fp)
   # local_menu_at_Main_internal_54 = SELF
   sw $s1, -220($fp)
   # LOCAL local_menu_at_Main_internal_52 --> -212($fp)
   # LOCAL local_menu_at_Main_internal_54 --> -220($fp)
   # local_menu_at_Main_internal_52 = local_menu_at_Main_internal_54
   lw $t0, -220($fp)
   sw $t0, -212($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_55 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_55 --> -224($fp)
   lw $t0, 16($s1)
   sw $t0, -224($fp)
   # ARG local_menu_at_Main_internal_55
   # LOCAL local_menu_at_Main_internal_55 --> -224($fp)
   lw $t0, -224($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_52 --> -212($fp)
   # LOCAL local_menu_at_Main_internal_53 --> -216($fp)
   # local_menu_at_Main_internal_53 = VCALL local_menu_at_Main_internal_52 print
   # Save new self pointer in $s1
   lw $s1, -212($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -216($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_58 --> -236($fp)
   # local_menu_at_Main_internal_58 = SELF
   sw $s1, -236($fp)
   # LOCAL local_menu_at_Main_internal_56 --> -228($fp)
   # LOCAL local_menu_at_Main_internal_58 --> -236($fp)
   # local_menu_at_Main_internal_56 = local_menu_at_Main_internal_58
   lw $t0, -236($fp)
   sw $t0, -228($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_59 --> -240($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_39
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -240($fp)
   # ARG local_menu_at_Main_internal_59
   # LOCAL local_menu_at_Main_internal_59 --> -240($fp)
   lw $t0, -240($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_56 --> -228($fp)
   # LOCAL local_menu_at_Main_internal_57 --> -232($fp)
   # local_menu_at_Main_internal_57 = VCALL local_menu_at_Main_internal_56 out_string
   # Save new self pointer in $s1
   lw $s1, -228($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -232($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_62 --> -252($fp)
   # local_menu_at_Main_internal_62 = SELF
   sw $s1, -252($fp)
   # LOCAL local_menu_at_Main_internal_60 --> -244($fp)
   # LOCAL local_menu_at_Main_internal_62 --> -252($fp)
   # local_menu_at_Main_internal_60 = local_menu_at_Main_internal_62
   lw $t0, -252($fp)
   sw $t0, -244($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_63 --> -256($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_40
   sw $t0, 12($v0)
   li $t0, 10
   sw $t0, 16($v0)
   sw $v0, -256($fp)
   # ARG local_menu_at_Main_internal_63
   # LOCAL local_menu_at_Main_internal_63 --> -256($fp)
   lw $t0, -256($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_60 --> -244($fp)
   # LOCAL local_menu_at_Main_internal_61 --> -248($fp)
   # local_menu_at_Main_internal_61 = VCALL local_menu_at_Main_internal_60 out_string
   # Save new self pointer in $s1
   lw $s1, -244($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -248($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_66 --> -268($fp)
   # local_menu_at_Main_internal_66 = SELF
   sw $s1, -268($fp)
   # LOCAL local_menu_at_Main_internal_64 --> -260($fp)
   # LOCAL local_menu_at_Main_internal_66 --> -268($fp)
   # local_menu_at_Main_internal_64 = local_menu_at_Main_internal_66
   lw $t0, -268($fp)
   sw $t0, -260($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_67 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_67 --> -272($fp)
   lw $t0, 16($s1)
   sw $t0, -272($fp)
   # ARG local_menu_at_Main_internal_67
   # LOCAL local_menu_at_Main_internal_67 --> -272($fp)
   lw $t0, -272($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_64 --> -260($fp)
   # LOCAL local_menu_at_Main_internal_65 --> -264($fp)
   # local_menu_at_Main_internal_65 = VCALL local_menu_at_Main_internal_64 print
   # Save new self pointer in $s1
   lw $s1, -260($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -264($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_70 --> -284($fp)
   # local_menu_at_Main_internal_70 = SELF
   sw $s1, -284($fp)
   # LOCAL local_menu_at_Main_internal_68 --> -276($fp)
   # LOCAL local_menu_at_Main_internal_70 --> -284($fp)
   # local_menu_at_Main_internal_68 = local_menu_at_Main_internal_70
   lw $t0, -284($fp)
   sw $t0, -276($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_71 --> -288($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_41
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -288($fp)
   # ARG local_menu_at_Main_internal_71
   # LOCAL local_menu_at_Main_internal_71 --> -288($fp)
   lw $t0, -288($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_68 --> -276($fp)
   # LOCAL local_menu_at_Main_internal_69 --> -280($fp)
   # local_menu_at_Main_internal_69 = VCALL local_menu_at_Main_internal_68 out_string
   # Save new self pointer in $s1
   lw $s1, -276($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -280($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_74 --> -300($fp)
   # local_menu_at_Main_internal_74 = SELF
   sw $s1, -300($fp)
   # LOCAL local_menu_at_Main_internal_72 --> -292($fp)
   # LOCAL local_menu_at_Main_internal_74 --> -300($fp)
   # local_menu_at_Main_internal_72 = local_menu_at_Main_internal_74
   lw $t0, -300($fp)
   sw $t0, -292($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_75 --> -304($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_42
   sw $t0, 12($v0)
   li $t0, 17
   sw $t0, 16($v0)
   sw $v0, -304($fp)
   # ARG local_menu_at_Main_internal_75
   # LOCAL local_menu_at_Main_internal_75 --> -304($fp)
   lw $t0, -304($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_72 --> -292($fp)
   # LOCAL local_menu_at_Main_internal_73 --> -296($fp)
   # local_menu_at_Main_internal_73 = VCALL local_menu_at_Main_internal_72 out_string
   # Save new self pointer in $s1
   lw $s1, -292($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -296($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_78 --> -316($fp)
   # local_menu_at_Main_internal_78 = SELF
   sw $s1, -316($fp)
   # LOCAL local_menu_at_Main_internal_76 --> -308($fp)
   # LOCAL local_menu_at_Main_internal_78 --> -316($fp)
   # local_menu_at_Main_internal_76 = local_menu_at_Main_internal_78
   lw $t0, -316($fp)
   sw $t0, -308($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_79 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_79 --> -320($fp)
   lw $t0, 16($s1)
   sw $t0, -320($fp)
   # ARG local_menu_at_Main_internal_79
   # LOCAL local_menu_at_Main_internal_79 --> -320($fp)
   lw $t0, -320($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_76 --> -308($fp)
   # LOCAL local_menu_at_Main_internal_77 --> -312($fp)
   # local_menu_at_Main_internal_77 = VCALL local_menu_at_Main_internal_76 print
   # Save new self pointer in $s1
   lw $s1, -308($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -312($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_82 --> -332($fp)
   # local_menu_at_Main_internal_82 = SELF
   sw $s1, -332($fp)
   # LOCAL local_menu_at_Main_internal_80 --> -324($fp)
   # LOCAL local_menu_at_Main_internal_82 --> -332($fp)
   # local_menu_at_Main_internal_80 = local_menu_at_Main_internal_82
   lw $t0, -332($fp)
   sw $t0, -324($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_83 --> -336($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_43
   sw $t0, 12($v0)
   li $t0, 30
   sw $t0, 16($v0)
   sw $v0, -336($fp)
   # ARG local_menu_at_Main_internal_83
   # LOCAL local_menu_at_Main_internal_83 --> -336($fp)
   lw $t0, -336($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_80 --> -324($fp)
   # LOCAL local_menu_at_Main_internal_81 --> -328($fp)
   # local_menu_at_Main_internal_81 = VCALL local_menu_at_Main_internal_80 out_string
   # Save new self pointer in $s1
   lw $s1, -324($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -328($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_86 --> -348($fp)
   # local_menu_at_Main_internal_86 = SELF
   sw $s1, -348($fp)
   # LOCAL local_menu_at_Main_internal_84 --> -340($fp)
   # LOCAL local_menu_at_Main_internal_86 --> -348($fp)
   # local_menu_at_Main_internal_84 = local_menu_at_Main_internal_86
   lw $t0, -348($fp)
   sw $t0, -340($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_87 --> -352($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_44
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -352($fp)
   # ARG local_menu_at_Main_internal_87
   # LOCAL local_menu_at_Main_internal_87 --> -352($fp)
   lw $t0, -352($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_84 --> -340($fp)
   # LOCAL local_menu_at_Main_internal_85 --> -344($fp)
   # local_menu_at_Main_internal_85 = VCALL local_menu_at_Main_internal_84 out_string
   # Save new self pointer in $s1
   lw $s1, -340($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -344($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_90 --> -364($fp)
   # local_menu_at_Main_internal_90 = SELF
   sw $s1, -364($fp)
   # LOCAL local_menu_at_Main_internal_88 --> -356($fp)
   # LOCAL local_menu_at_Main_internal_90 --> -364($fp)
   # local_menu_at_Main_internal_88 = local_menu_at_Main_internal_90
   lw $t0, -364($fp)
   sw $t0, -356($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_menu_at_Main_internal_91 = GETATTRIBUTE avar Main
   # LOCAL local_menu_at_Main_internal_91 --> -368($fp)
   lw $t0, 16($s1)
   sw $t0, -368($fp)
   # ARG local_menu_at_Main_internal_91
   # LOCAL local_menu_at_Main_internal_91 --> -368($fp)
   lw $t0, -368($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_88 --> -356($fp)
   # LOCAL local_menu_at_Main_internal_89 --> -360($fp)
   # local_menu_at_Main_internal_89 = VCALL local_menu_at_Main_internal_88 print
   # Save new self pointer in $s1
   lw $s1, -356($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -360($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_94 --> -380($fp)
   # local_menu_at_Main_internal_94 = SELF
   sw $s1, -380($fp)
   # LOCAL local_menu_at_Main_internal_92 --> -372($fp)
   # LOCAL local_menu_at_Main_internal_94 --> -380($fp)
   # local_menu_at_Main_internal_92 = local_menu_at_Main_internal_94
   lw $t0, -380($fp)
   sw $t0, -372($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_95 --> -384($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_45
   sw $t0, 12($v0)
   li $t0, 16
   sw $t0, 16($v0)
   sw $v0, -384($fp)
   # ARG local_menu_at_Main_internal_95
   # LOCAL local_menu_at_Main_internal_95 --> -384($fp)
   lw $t0, -384($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_92 --> -372($fp)
   # LOCAL local_menu_at_Main_internal_93 --> -376($fp)
   # local_menu_at_Main_internal_93 = VCALL local_menu_at_Main_internal_92 out_string
   # Save new self pointer in $s1
   lw $s1, -372($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -376($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_98 --> -396($fp)
   # local_menu_at_Main_internal_98 = SELF
   sw $s1, -396($fp)
   # LOCAL local_menu_at_Main_internal_96 --> -388($fp)
   # LOCAL local_menu_at_Main_internal_98 --> -396($fp)
   # local_menu_at_Main_internal_96 = local_menu_at_Main_internal_98
   lw $t0, -396($fp)
   sw $t0, -388($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_99 --> -400($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_46
   sw $t0, 12($v0)
   li $t0, 33
   sw $t0, 16($v0)
   sw $v0, -400($fp)
   # ARG local_menu_at_Main_internal_99
   # LOCAL local_menu_at_Main_internal_99 --> -400($fp)
   lw $t0, -400($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_96 --> -388($fp)
   # LOCAL local_menu_at_Main_internal_97 --> -392($fp)
   # local_menu_at_Main_internal_97 = VCALL local_menu_at_Main_internal_96 out_string
   # Save new self pointer in $s1
   lw $s1, -388($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -392($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_102 --> -412($fp)
   # local_menu_at_Main_internal_102 = SELF
   sw $s1, -412($fp)
   # LOCAL local_menu_at_Main_internal_100 --> -404($fp)
   # LOCAL local_menu_at_Main_internal_102 --> -412($fp)
   # local_menu_at_Main_internal_100 = local_menu_at_Main_internal_102
   lw $t0, -412($fp)
   sw $t0, -404($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_103 --> -416($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_47
   sw $t0, 12($v0)
   li $t0, 22
   sw $t0, 16($v0)
   sw $v0, -416($fp)
   # ARG local_menu_at_Main_internal_103
   # LOCAL local_menu_at_Main_internal_103 --> -416($fp)
   lw $t0, -416($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_menu_at_Main_internal_100 --> -404($fp)
   # LOCAL local_menu_at_Main_internal_101 --> -408($fp)
   # local_menu_at_Main_internal_101 = VCALL local_menu_at_Main_internal_100 out_string
   # Save new self pointer in $s1
   lw $s1, -404($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -408($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_menu_at_Main_internal_106 --> -428($fp)
   # local_menu_at_Main_internal_106 = SELF
   sw $s1, -428($fp)
   # LOCAL local_menu_at_Main_internal_104 --> -420($fp)
   # LOCAL local_menu_at_Main_internal_106 --> -428($fp)
   # local_menu_at_Main_internal_104 = local_menu_at_Main_internal_106
   lw $t0, -428($fp)
   sw $t0, -420($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_menu_at_Main_internal_104 --> -420($fp)
   # LOCAL local_menu_at_Main_internal_105 --> -424($fp)
   # local_menu_at_Main_internal_105 = VCALL local_menu_at_Main_internal_104 in_string
   # Save new self pointer in $s1
   lw $s1, -420($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -424($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_menu_at_Main_internal_105
   lw $v0, -424($fp)
   # Deallocate stack frame for function function_menu_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 436
   jr $ra
   # Function END


# function_prompt_at_Main implementation.
# @Params:
function_prompt_at_Main: 
   # Allocate stack frame for function function_prompt_at_Main.
   subu $sp, $sp, 52
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 52
   # LOCAL local_prompt_at_Main_internal_2 --> -12($fp)
   # local_prompt_at_Main_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_prompt_at_Main_internal_0 --> -4($fp)
   # LOCAL local_prompt_at_Main_internal_2 --> -12($fp)
   # local_prompt_at_Main_internal_0 = local_prompt_at_Main_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_48
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -16($fp)
   # ARG local_prompt_at_Main_internal_3
   # LOCAL local_prompt_at_Main_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt_at_Main_internal_0 --> -4($fp)
   # LOCAL local_prompt_at_Main_internal_1 --> -8($fp)
   # local_prompt_at_Main_internal_1 = VCALL local_prompt_at_Main_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_Main_internal_6 --> -28($fp)
   # local_prompt_at_Main_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_prompt_at_Main_internal_4 --> -20($fp)
   # LOCAL local_prompt_at_Main_internal_6 --> -28($fp)
   # local_prompt_at_Main_internal_4 = local_prompt_at_Main_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_Main_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_49
   sw $t0, 12($v0)
   li $t0, 26
   sw $t0, 16($v0)
   sw $v0, -32($fp)
   # ARG local_prompt_at_Main_internal_7
   # LOCAL local_prompt_at_Main_internal_7 --> -32($fp)
   lw $t0, -32($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt_at_Main_internal_4 --> -20($fp)
   # LOCAL local_prompt_at_Main_internal_5 --> -24($fp)
   # local_prompt_at_Main_internal_5 = VCALL local_prompt_at_Main_internal_4 out_string
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_Main_internal_10 --> -44($fp)
   # local_prompt_at_Main_internal_10 = SELF
   sw $s1, -44($fp)
   # LOCAL local_prompt_at_Main_internal_8 --> -36($fp)
   # LOCAL local_prompt_at_Main_internal_10 --> -44($fp)
   # local_prompt_at_Main_internal_8 = local_prompt_at_Main_internal_10
   lw $t0, -44($fp)
   sw $t0, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_Main_internal_8 --> -36($fp)
   # LOCAL local_prompt_at_Main_internal_9 --> -40($fp)
   # local_prompt_at_Main_internal_9 = VCALL local_prompt_at_Main_internal_8 in_string
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_prompt_at_Main_internal_9
   lw $v0, -40($fp)
   # Deallocate stack frame for function function_prompt_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 52
   jr $ra
   # Function END


# function_get_int_at_Main implementation.
# @Params:
function_get_int_at_Main: 
   # Allocate stack frame for function function_get_int_at_Main.
   subu $sp, $sp, 40
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 40
   # LOCAL local_get_int_at_Main_z_0 --> -4($fp)
   # local_get_int_at_Main_z_0 = 0
   li $t0, 0
   sw $t0, -4($fp)
   # LOCAL local_get_int_at_Main_internal_1 --> -8($fp)
   # local_get_int_at_Main_internal_1 = ALLOCATE A2I
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A2I
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A2I_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # LOCAL local_get_int_at_Main_z_0 --> -4($fp)
   # LOCAL local_get_int_at_Main_internal_1 --> -8($fp)
   # local_get_int_at_Main_z_0 = local_get_int_at_Main_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_get_int_at_Main_s_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -12($fp)
   # LOCAL local_get_int_at_Main_internal_5 --> -24($fp)
   # local_get_int_at_Main_internal_5 = SELF
   sw $s1, -24($fp)
   # LOCAL local_get_int_at_Main_internal_3 --> -16($fp)
   # LOCAL local_get_int_at_Main_internal_5 --> -24($fp)
   # local_get_int_at_Main_internal_3 = local_get_int_at_Main_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_get_int_at_Main_internal_3 --> -16($fp)
   # LOCAL local_get_int_at_Main_internal_4 --> -20($fp)
   # local_get_int_at_Main_internal_4 = VCALL local_get_int_at_Main_internal_3 prompt
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 64($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_get_int_at_Main_s_2 --> -12($fp)
   # LOCAL local_get_int_at_Main_internal_4 --> -20($fp)
   # local_get_int_at_Main_s_2 = local_get_int_at_Main_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # LOCAL local_get_int_at_Main_internal_6 --> -28($fp)
   # LOCAL local_get_int_at_Main_z_0 --> -4($fp)
   # local_get_int_at_Main_internal_6 = local_get_int_at_Main_z_0
   lw $t0, -4($fp)
   sw $t0, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_get_int_at_Main_s_2
   # LOCAL local_get_int_at_Main_s_2 --> -12($fp)
   lw $t0, -12($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_get_int_at_Main_internal_6 --> -28($fp)
   # LOCAL local_get_int_at_Main_internal_7 --> -32($fp)
   # local_get_int_at_Main_internal_7 = VCALL local_get_int_at_Main_internal_6 a2i
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 124($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_get_int_at_Main_internal_7
   lw $v0, -32($fp)
   # Deallocate stack frame for function function_get_int_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 40
   jr $ra
   # Function END


# function_is_even_at_Main implementation.
# @Params:
# 	0($fp) = param_is_even_at_Main_num_0
function_is_even_at_Main: 
   # Allocate stack frame for function function_is_even_at_Main.
   subu $sp, $sp, 112
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 112
   # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
   # PARAM param_is_even_at_Main_num_0 --> 0($fp)
   # local_is_even_at_Main_x_0 = PARAM param_is_even_at_Main_num_0
   lw $t0, 0($fp)
   sw $t0, -4($fp)
   # LOCAL local_is_even_at_Main_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_is_even_at_Main_internal_3 --> -16($fp)
   # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
   # LOCAL local_is_even_at_Main_internal_4 --> -20($fp)
   lw $a0, -4($fp)
   lw $a1, -20($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_GREATER_ZERO local_is_even_at_Main_internal_3 GOTO label_FALSE_303
   # IF_GREATER_ZERO local_is_even_at_Main_internal_3 GOTO label_FALSE_303
   lw $t0, -16($fp)
   bgt $t0, 0, label_FALSE_303
   # IF_ZERO local_is_even_at_Main_internal_3 GOTO label_FALSE_303
   # IF_ZERO local_is_even_at_Main_internal_3 GOTO label_FALSE_303
   lw $t0, -16($fp)
   beq $t0, 0, label_FALSE_303
   # LOCAL local_is_even_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # GOTO label_END_304
j label_END_304
label_FALSE_303: 
   # LOCAL local_is_even_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   label_END_304: 
# LOCAL local_is_even_at_Main_internal_1 --> -8($fp)
# LOCAL local_is_even_at_Main_internal_3 --> -16($fp)
# Obtain value from -16($fp)
lw $v0, -16($fp)
lw $v0, 12($v0)
sw $v0, -8($fp)
# IF_ZERO local_is_even_at_Main_internal_1 GOTO label_FALSEIF_301
# IF_ZERO local_is_even_at_Main_internal_1 GOTO label_FALSEIF_301
lw $t0, -8($fp)
beq $t0, 0, label_FALSEIF_301
# LOCAL local_is_even_at_Main_internal_7 --> -32($fp)
# local_is_even_at_Main_internal_7 = SELF
sw $s1, -32($fp)
# LOCAL local_is_even_at_Main_internal_5 --> -24($fp)
# LOCAL local_is_even_at_Main_internal_7 --> -32($fp)
# local_is_even_at_Main_internal_5 = local_is_even_at_Main_internal_7
lw $t0, -32($fp)
sw $t0, -24($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_is_even_at_Main_internal_8 --> -36($fp)
# LOCAL local_is_even_at_Main_x_0 --> -4($fp)
lw $t0, -4($fp)
lw $t0, 12($t0)
not $t0, $t0
add $t0, $t0, 1
sw $t0, -36($fp)
# LOCAL local_is_even_at_Main_internal_8 --> -36($fp)
# LOCAL local_is_even_at_Main_internal_8 --> -36($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
lw $t0, -36($fp)
sw $t0, 12($v0)
sw $v0, -36($fp)
# ARG local_is_even_at_Main_internal_8
# LOCAL local_is_even_at_Main_internal_8 --> -36($fp)
lw $t0, -36($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_is_even_at_Main_internal_5 --> -24($fp)
# LOCAL local_is_even_at_Main_internal_6 --> -28($fp)
# local_is_even_at_Main_internal_6 = VCALL local_is_even_at_Main_internal_5 is_even
# Save new self pointer in $s1
lw $s1, -24($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 76($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -28($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_is_even_at_Main_internal_2 --> -12($fp)
# LOCAL local_is_even_at_Main_internal_6 --> -28($fp)
# local_is_even_at_Main_internal_2 = local_is_even_at_Main_internal_6
lw $t0, -28($fp)
sw $t0, -12($fp)
# GOTO label_ENDIF_302
j label_ENDIF_302
label_FALSEIF_301: 
   # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -56($fp)
   # IF_ZERO local_is_even_at_Main_internal_13 GOTO label_FALSE_307
   # IF_ZERO local_is_even_at_Main_internal_13 GOTO label_FALSE_307
   lw $t0, -56($fp)
   beq $t0, 0, label_FALSE_307
   # IF_ZERO local_is_even_at_Main_x_0 GOTO label_FALSE_307
   # IF_ZERO local_is_even_at_Main_x_0 GOTO label_FALSE_307
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_307
   # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
   # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
   # Comparing -56($fp) type with String
   la $v0, String
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_COMPARE_STRING_310
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_COMPARE_STRING_310
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_STRING_310
   # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
   # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Bool
   la $v0, Bool
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_COMPARE_BY_VALUE_311
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_COMPARE_BY_VALUE_311
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_311
   # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
   # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Int
   la $v0, Int
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_COMPARE_BY_VALUE_311
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_COMPARE_BY_VALUE_311
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_311
   # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
   # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
   # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
   # Load pointers and SUB
   lw $a0, -56($fp)
   lw $a1, -4($fp)
   sub $a0, $a0, $a1
   sw $a0, -52($fp)
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_TRUE_308
   # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_TRUE_308
   lw $t0, -52($fp)
   beq $t0, 0, label_TRUE_308
   # GOTO label_FALSE_307
   j label_FALSE_307
   label_COMPARE_BY_VALUE_311: 
      # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
      # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
      # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
      lw $a0, -56($fp)
      lw $a1, -4($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -52($fp)
      # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_TRUE_308
      # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_TRUE_308
      lw $t0, -52($fp)
      beq $t0, 0, label_TRUE_308
      # GOTO label_FALSE_307
      j label_FALSE_307
      label_COMPARE_STRING_310: 
         # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
         # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
         # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
         # Load strings for comparison
         lw $v0, -56($fp)
         lw $v1, -4($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -52($fp)
         # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_CONTINUE_312
         # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_CONTINUE_312
         lw $t0, -52($fp)
         beq $t0, 0, label_CONTINUE_312
         # GOTO label_FALSE_307
         j label_FALSE_307
         label_CONTINUE_312: 
            # LOCAL local_is_even_at_Main_internal_12 --> -52($fp)
            # LOCAL local_is_even_at_Main_internal_13 --> -56($fp)
            # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -56($fp)
            lw $v1, -4($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_313: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_314
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_313
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_314: 
                  # Store result
                  sw $a2, -52($fp)
                  # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_TRUE_308
                  # IF_ZERO local_is_even_at_Main_internal_12 GOTO label_TRUE_308
                  lw $t0, -52($fp)
                  beq $t0, 0, label_TRUE_308
                  label_FALSE_307: 
                     # LOCAL local_is_even_at_Main_internal_11 --> -48($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -48($fp)
                     # GOTO label_END_309
j label_END_309
label_TRUE_308: 
   # LOCAL local_is_even_at_Main_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   label_END_309: 
# LOCAL local_is_even_at_Main_internal_9 --> -40($fp)
# LOCAL local_is_even_at_Main_internal_11 --> -48($fp)
# Obtain value from -48($fp)
lw $v0, -48($fp)
lw $v0, 12($v0)
sw $v0, -40($fp)
# IF_ZERO local_is_even_at_Main_internal_9 GOTO label_FALSEIF_305
# IF_ZERO local_is_even_at_Main_internal_9 GOTO label_FALSEIF_305
lw $t0, -40($fp)
beq $t0, 0, label_FALSEIF_305
# LOCAL local_is_even_at_Main_internal_14 --> -60($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -60($fp)
# LOCAL local_is_even_at_Main_internal_10 --> -44($fp)
# LOCAL local_is_even_at_Main_internal_14 --> -60($fp)
# local_is_even_at_Main_internal_10 = local_is_even_at_Main_internal_14
lw $t0, -60($fp)
sw $t0, -44($fp)
# GOTO label_ENDIF_306
j label_ENDIF_306
label_FALSEIF_305: 
   # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # IF_ZERO local_is_even_at_Main_internal_19 GOTO label_FALSE_317
   # IF_ZERO local_is_even_at_Main_internal_19 GOTO label_FALSE_317
   lw $t0, -80($fp)
   beq $t0, 0, label_FALSE_317
   # IF_ZERO local_is_even_at_Main_x_0 GOTO label_FALSE_317
   # IF_ZERO local_is_even_at_Main_x_0 GOTO label_FALSE_317
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_317
   # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
   # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
   # Comparing -80($fp) type with String
   la $v0, String
   lw $a0, -80($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -76($fp)
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_COMPARE_STRING_320
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_COMPARE_STRING_320
   lw $t0, -76($fp)
   beq $t0, 0, label_COMPARE_STRING_320
   # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
   # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
   # Comparing -80($fp) type with Bool
   la $v0, Bool
   lw $a0, -80($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -76($fp)
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_COMPARE_BY_VALUE_321
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_COMPARE_BY_VALUE_321
   lw $t0, -76($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_321
   # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
   # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
   # Comparing -80($fp) type with Int
   la $v0, Int
   lw $a0, -80($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -76($fp)
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_COMPARE_BY_VALUE_321
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_COMPARE_BY_VALUE_321
   lw $t0, -76($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_321
   # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
   # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
   # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
   # Load pointers and SUB
   lw $a0, -80($fp)
   lw $a1, -4($fp)
   sub $a0, $a0, $a1
   sw $a0, -76($fp)
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_TRUE_318
   # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_TRUE_318
   lw $t0, -76($fp)
   beq $t0, 0, label_TRUE_318
   # GOTO label_FALSE_317
   j label_FALSE_317
   label_COMPARE_BY_VALUE_321: 
      # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
      # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
      # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
      lw $a0, -80($fp)
      lw $a1, -4($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -76($fp)
      # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_TRUE_318
      # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_TRUE_318
      lw $t0, -76($fp)
      beq $t0, 0, label_TRUE_318
      # GOTO label_FALSE_317
      j label_FALSE_317
      label_COMPARE_STRING_320: 
         # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
         # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
         # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
         # Load strings for comparison
         lw $v0, -80($fp)
         lw $v1, -4($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -76($fp)
         # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_CONTINUE_322
         # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_CONTINUE_322
         lw $t0, -76($fp)
         beq $t0, 0, label_CONTINUE_322
         # GOTO label_FALSE_317
         j label_FALSE_317
         label_CONTINUE_322: 
            # LOCAL local_is_even_at_Main_internal_18 --> -76($fp)
            # LOCAL local_is_even_at_Main_internal_19 --> -80($fp)
            # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -80($fp)
            lw $v1, -4($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_323: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_324
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_323
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_324: 
                  # Store result
                  sw $a2, -76($fp)
                  # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_TRUE_318
                  # IF_ZERO local_is_even_at_Main_internal_18 GOTO label_TRUE_318
                  lw $t0, -76($fp)
                  beq $t0, 0, label_TRUE_318
                  label_FALSE_317: 
                     # LOCAL local_is_even_at_Main_internal_17 --> -72($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -72($fp)
                     # GOTO label_END_319
j label_END_319
label_TRUE_318: 
   # LOCAL local_is_even_at_Main_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   label_END_319: 
# LOCAL local_is_even_at_Main_internal_15 --> -64($fp)
# LOCAL local_is_even_at_Main_internal_17 --> -72($fp)
# Obtain value from -72($fp)
lw $v0, -72($fp)
lw $v0, 12($v0)
sw $v0, -64($fp)
# IF_ZERO local_is_even_at_Main_internal_15 GOTO label_FALSEIF_315
# IF_ZERO local_is_even_at_Main_internal_15 GOTO label_FALSEIF_315
lw $t0, -64($fp)
beq $t0, 0, label_FALSEIF_315
# LOCAL local_is_even_at_Main_internal_20 --> -84($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -84($fp)
# LOCAL local_is_even_at_Main_internal_16 --> -68($fp)
# LOCAL local_is_even_at_Main_internal_20 --> -84($fp)
# local_is_even_at_Main_internal_16 = local_is_even_at_Main_internal_20
lw $t0, -84($fp)
sw $t0, -68($fp)
# GOTO label_ENDIF_316
j label_ENDIF_316
label_FALSEIF_315: 
   # LOCAL local_is_even_at_Main_internal_23 --> -96($fp)
   # local_is_even_at_Main_internal_23 = SELF
   sw $s1, -96($fp)
   # LOCAL local_is_even_at_Main_internal_21 --> -88($fp)
   # LOCAL local_is_even_at_Main_internal_23 --> -96($fp)
   # local_is_even_at_Main_internal_21 = local_is_even_at_Main_internal_23
   lw $t0, -96($fp)
   sw $t0, -88($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_is_even_at_Main_internal_25 --> -104($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -104($fp)
   # LOCAL local_is_even_at_Main_internal_24 --> -100($fp)
   # LOCAL local_is_even_at_Main_x_0 --> -4($fp)
   # LOCAL local_is_even_at_Main_internal_25 --> -104($fp)
   # local_is_even_at_Main_internal_24 = local_is_even_at_Main_x_0 - local_is_even_at_Main_internal_25
   lw $t1, -4($fp)
   lw $t0, 12($t1)
   lw $t1, -104($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -100($fp)
   # ARG local_is_even_at_Main_internal_24
   # LOCAL local_is_even_at_Main_internal_24 --> -100($fp)
   lw $t0, -100($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_is_even_at_Main_internal_21 --> -88($fp)
   # LOCAL local_is_even_at_Main_internal_22 --> -92($fp)
   # local_is_even_at_Main_internal_22 = VCALL local_is_even_at_Main_internal_21 is_even
   # Save new self pointer in $s1
   lw $s1, -88($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 76($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -92($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_is_even_at_Main_internal_16 --> -68($fp)
   # LOCAL local_is_even_at_Main_internal_22 --> -92($fp)
   # local_is_even_at_Main_internal_16 = local_is_even_at_Main_internal_22
   lw $t0, -92($fp)
   sw $t0, -68($fp)
   label_ENDIF_316: 
# LOCAL local_is_even_at_Main_internal_10 --> -44($fp)
# LOCAL local_is_even_at_Main_internal_16 --> -68($fp)
# local_is_even_at_Main_internal_10 = local_is_even_at_Main_internal_16
lw $t0, -68($fp)
sw $t0, -44($fp)
label_ENDIF_306: 
# LOCAL local_is_even_at_Main_internal_2 --> -12($fp)
# LOCAL local_is_even_at_Main_internal_10 --> -44($fp)
# local_is_even_at_Main_internal_2 = local_is_even_at_Main_internal_10
lw $t0, -44($fp)
sw $t0, -12($fp)
label_ENDIF_302: 
# RETURN local_is_even_at_Main_internal_2
lw $v0, -12($fp)
# Deallocate stack frame for function function_is_even_at_Main.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 112
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_class_type_at_Main implementation.
# @Params:
# 	0($fp) = param_class_type_at_Main_var_0
function_class_type_at_Main: 
   # Allocate stack frame for function function_class_type_at_Main.
   subu $sp, $sp, 148
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 148
   # PARAM param_class_type_at_Main_var_0 --> 0($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # local_class_type_at_Main_internal_0 = TYPEOF param_class_type_at_Main_var_0
   lw $t0, 0($fp)
   # Load pointer to type offset
   lw $t1, 8($t0)
   sw $t1, -4($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # local_class_type_at_Main_internal_3 = 15
   li $t0, 15
   sw $t0, -16($fp)
   # local_class_type_at_Main_internal_4 = TYPE_DISTANCE A <cil.nodes.LocalNode object at 0x7f201b93c0a0>
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # Load TDT pointer to type A
   la $t0, A__TDT
   lw $t1, -4($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -20($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # Update min if 8 < 9
   lw $t0, -20($fp)
   lw $t1, -16($fp)
   bgtu $t0, $t1, label_Not_min0_325
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # local_class_type_at_Main_internal_3 = local_class_type_at_Main_internal_4
   lw $t0, -20($fp)
   sw $t0, -16($fp)
   label_Not_min0_325: 
      # local_class_type_at_Main_internal_4 = TYPE_DISTANCE B <cil.nodes.LocalNode object at 0x7f201b93c0a0>
      # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
      # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
      # Load TDT pointer to type B
      la $t0, B__TDT
      lw $t1, -4($fp)
      addu $t0, $t0, $t1
      # Save distance
      lw $t1, 0($t0)
      sw $t1, -20($fp)
      # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
      # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
      # Update min if 8 < 9
      lw $t0, -20($fp)
      lw $t1, -16($fp)
      bgtu $t0, $t1, label_Not_min1_326
      # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
      # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
      # local_class_type_at_Main_internal_3 = local_class_type_at_Main_internal_4
      lw $t0, -20($fp)
      sw $t0, -16($fp)
      label_Not_min1_326: 
         # local_class_type_at_Main_internal_4 = TYPE_DISTANCE C <cil.nodes.LocalNode object at 0x7f201b93c0a0>
         # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
         # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
         # Load TDT pointer to type C
         la $t0, C__TDT
         lw $t1, -4($fp)
         addu $t0, $t0, $t1
         # Save distance
         lw $t1, 0($t0)
         sw $t1, -20($fp)
         # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
         # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
         # Update min if 8 < 9
         lw $t0, -20($fp)
         lw $t1, -16($fp)
         bgtu $t0, $t1, label_Not_min2_327
         # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
         # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
         # local_class_type_at_Main_internal_3 = local_class_type_at_Main_internal_4
         lw $t0, -20($fp)
         sw $t0, -16($fp)
         label_Not_min2_327: 
            # local_class_type_at_Main_internal_4 = TYPE_DISTANCE D <cil.nodes.LocalNode object at 0x7f201b93c0a0>
            # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
            # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
            # Load TDT pointer to type D
            la $t0, D__TDT
            lw $t1, -4($fp)
            addu $t0, $t0, $t1
            # Save distance
            lw $t1, 0($t0)
            sw $t1, -20($fp)
            # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
            # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
            # Update min if 8 < 9
            lw $t0, -20($fp)
            lw $t1, -16($fp)
            bgtu $t0, $t1, label_Not_min3_328
            # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
            # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
            # local_class_type_at_Main_internal_3 = local_class_type_at_Main_internal_4
            lw $t0, -20($fp)
            sw $t0, -16($fp)
            label_Not_min3_328: 
               # local_class_type_at_Main_internal_4 = TYPE_DISTANCE E <cil.nodes.LocalNode object at 0x7f201b93c0a0>
               # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
               # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
               # Load TDT pointer to type E
               la $t0, E__TDT
               lw $t1, -4($fp)
               addu $t0, $t0, $t1
               # Save distance
               lw $t1, 0($t0)
               sw $t1, -20($fp)
               # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
               # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
               # Update min if 8 < 9
               lw $t0, -20($fp)
               lw $t1, -16($fp)
               bgtu $t0, $t1, label_Not_min4_329
               # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
               # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
               # local_class_type_at_Main_internal_3 = local_class_type_at_Main_internal_4
               lw $t0, -20($fp)
               sw $t0, -16($fp)
               label_Not_min4_329: 
                  # local_class_type_at_Main_internal_4 = TYPE_DISTANCE Object <cil.nodes.LocalNode object at 0x7f201b93c0a0>
                  # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                  # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
                  # Load TDT pointer to type Object
                  la $t0, Object__TDT
                  lw $t1, -4($fp)
                  addu $t0, $t0, $t1
                  # Save distance
                  lw $t1, 0($t0)
                  sw $t1, -20($fp)
                  # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                  # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
                  # Update min if 8 < 9
                  lw $t0, -20($fp)
                  lw $t1, -16($fp)
                  bgtu $t0, $t1, label_Not_min5_330
                  # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
                  # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                  # local_class_type_at_Main_internal_3 = local_class_type_at_Main_internal_4
                  lw $t0, -20($fp)
                  sw $t0, -16($fp)
                  label_Not_min5_330: 
                     # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                     # local_class_type_at_Main_internal_4 = 15
                     li $t0, 15
                     sw $t0, -20($fp)
                     # LOCAL local_class_type_at_Main_internal_1 --> -8($fp)
                     # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                     # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
                     # Load pointers and SUB
                     lw $a0, -20($fp)
                     lw $a1, -16($fp)
                     sub $a0, $a0, $a1
                     sw $a0, -8($fp)
                     # IF_ZERO local_class_type_at_Main_internal_1 GOTO label_ERROR_331
                     # IF_ZERO local_class_type_at_Main_internal_1 GOTO label_ERROR_331
                     lw $t0, -8($fp)
                     beq $t0, 0, label_ERROR_331
                     # local_class_type_at_Main_internal_4 = TYPE_DISTANCE A <cil.nodes.LocalNode object at 0x7f201b93c0a0>
                     # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                     # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
                     # Load TDT pointer to type A
                     la $t0, A__TDT
                     lw $t1, -4($fp)
                     addu $t0, $t0, $t1
                     # Save distance
                     lw $t1, 0($t0)
                     sw $t1, -20($fp)
                     # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
                     # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
                     # Update min if 8 < 9
                     lw $t0, -20($fp)
                     lw $t1, -16($fp)
                     bgtu $t0, $t1, label_NEXT0_333
                     # LOCAL local_class_type_at_Main_a_5 --> -24($fp)
                     # PARAM param_class_type_at_Main_var_0 --> 0($fp)
                     # local_class_type_at_Main_a_5 = PARAM param_class_type_at_Main_var_0
                     lw $t0, 0($fp)
                     sw $t0, -24($fp)
                     # LOCAL local_class_type_at_Main_internal_8 --> -36($fp)
                     # local_class_type_at_Main_internal_8 = SELF
                     sw $s1, -36($fp)
                     # LOCAL local_class_type_at_Main_internal_6 --> -28($fp)
                     # LOCAL local_class_type_at_Main_internal_8 --> -36($fp)
                     # local_class_type_at_Main_internal_6 = local_class_type_at_Main_internal_8
                     lw $t0, -36($fp)
                     sw $t0, -28($fp)
                     # Push register s1 into stack
                     subu $sp, $sp, 4
                     sw $s1, 0($sp)
                     # LOCAL local_class_type_at_Main_internal_9 --> -40($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, data_50
                     sw $t0, 12($v0)
                     li $t0, 20
                     sw $t0, 16($v0)
                     sw $v0, -40($fp)
                     # ARG local_class_type_at_Main_internal_9
                     # LOCAL local_class_type_at_Main_internal_9 --> -40($fp)
                     lw $t0, -40($fp)
                     # Push arg into stack
                     subu $sp, $sp, 4
                     sw $t0, 0($sp)
                     # LOCAL local_class_type_at_Main_internal_6 --> -28($fp)
                     # LOCAL local_class_type_at_Main_internal_7 --> -32($fp)
                     # local_class_type_at_Main_internal_7 = VCALL local_class_type_at_Main_internal_6 out_string
                     # Save new self pointer in $s1
                     lw $s1, -28($fp)
                     # Get pointer to type
                     lw $t0, 4($s1)
                     # Get pointer to type's VTABLE
                     lw $t0, 0($t0)
                     # Get pointer to function address
                     lw $t0, 88($t0)
                     # Call function. Result is on $v0
                     jalr $t0
                     sw $v0, -32($fp)
                     # Pop 4 bytes from stack into register s1
                     lw $s1, 0($sp)
                     addu $sp, $sp, 4
                     # LOCAL local_class_type_at_Main_internal_2 --> -12($fp)
                     # LOCAL local_class_type_at_Main_internal_7 --> -32($fp)
                     # local_class_type_at_Main_internal_2 = local_class_type_at_Main_internal_7
                     lw $t0, -32($fp)
                     sw $t0, -12($fp)
                     # GOTO label_END_332
j label_END_332
label_NEXT0_333: 
   # local_class_type_at_Main_internal_4 = TYPE_DISTANCE B <cil.nodes.LocalNode object at 0x7f201b93c0a0>
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # Load TDT pointer to type B
   la $t0, B__TDT
   lw $t1, -4($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -20($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # Update min if 8 < 9
   lw $t0, -20($fp)
   lw $t1, -16($fp)
   bgtu $t0, $t1, label_NEXT1_334
   # LOCAL local_class_type_at_Main_b_10 --> -44($fp)
   # PARAM param_class_type_at_Main_var_0 --> 0($fp)
   # local_class_type_at_Main_b_10 = PARAM param_class_type_at_Main_var_0
   lw $t0, 0($fp)
   sw $t0, -44($fp)
   # LOCAL local_class_type_at_Main_internal_13 --> -56($fp)
   # local_class_type_at_Main_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_class_type_at_Main_internal_11 --> -48($fp)
   # LOCAL local_class_type_at_Main_internal_13 --> -56($fp)
   # local_class_type_at_Main_internal_11 = local_class_type_at_Main_internal_13
   lw $t0, -56($fp)
   sw $t0, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_class_type_at_Main_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_51
   sw $t0, 12($v0)
   li $t0, 20
   sw $t0, 16($v0)
   sw $v0, -60($fp)
   # ARG local_class_type_at_Main_internal_14
   # LOCAL local_class_type_at_Main_internal_14 --> -60($fp)
   lw $t0, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_class_type_at_Main_internal_11 --> -48($fp)
   # LOCAL local_class_type_at_Main_internal_12 --> -52($fp)
   # local_class_type_at_Main_internal_12 = VCALL local_class_type_at_Main_internal_11 out_string
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_class_type_at_Main_internal_2 --> -12($fp)
   # LOCAL local_class_type_at_Main_internal_12 --> -52($fp)
   # local_class_type_at_Main_internal_2 = local_class_type_at_Main_internal_12
   lw $t0, -52($fp)
   sw $t0, -12($fp)
   # GOTO label_END_332
j label_END_332
label_NEXT1_334: 
   # local_class_type_at_Main_internal_4 = TYPE_DISTANCE C <cil.nodes.LocalNode object at 0x7f201b93c0a0>
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # Load TDT pointer to type C
   la $t0, C__TDT
   lw $t1, -4($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -20($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # Update min if 8 < 9
   lw $t0, -20($fp)
   lw $t1, -16($fp)
   bgtu $t0, $t1, label_NEXT2_335
   # LOCAL local_class_type_at_Main_c_15 --> -64($fp)
   # PARAM param_class_type_at_Main_var_0 --> 0($fp)
   # local_class_type_at_Main_c_15 = PARAM param_class_type_at_Main_var_0
   lw $t0, 0($fp)
   sw $t0, -64($fp)
   # LOCAL local_class_type_at_Main_internal_18 --> -76($fp)
   # local_class_type_at_Main_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_class_type_at_Main_internal_16 --> -68($fp)
   # LOCAL local_class_type_at_Main_internal_18 --> -76($fp)
   # local_class_type_at_Main_internal_16 = local_class_type_at_Main_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_class_type_at_Main_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_52
   sw $t0, 12($v0)
   li $t0, 20
   sw $t0, 16($v0)
   sw $v0, -80($fp)
   # ARG local_class_type_at_Main_internal_19
   # LOCAL local_class_type_at_Main_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_class_type_at_Main_internal_16 --> -68($fp)
   # LOCAL local_class_type_at_Main_internal_17 --> -72($fp)
   # local_class_type_at_Main_internal_17 = VCALL local_class_type_at_Main_internal_16 out_string
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_class_type_at_Main_internal_2 --> -12($fp)
   # LOCAL local_class_type_at_Main_internal_17 --> -72($fp)
   # local_class_type_at_Main_internal_2 = local_class_type_at_Main_internal_17
   lw $t0, -72($fp)
   sw $t0, -12($fp)
   # GOTO label_END_332
j label_END_332
label_NEXT2_335: 
   # local_class_type_at_Main_internal_4 = TYPE_DISTANCE D <cil.nodes.LocalNode object at 0x7f201b93c0a0>
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # Load TDT pointer to type D
   la $t0, D__TDT
   lw $t1, -4($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -20($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # Update min if 8 < 9
   lw $t0, -20($fp)
   lw $t1, -16($fp)
   bgtu $t0, $t1, label_NEXT3_336
   # LOCAL local_class_type_at_Main_d_20 --> -84($fp)
   # PARAM param_class_type_at_Main_var_0 --> 0($fp)
   # local_class_type_at_Main_d_20 = PARAM param_class_type_at_Main_var_0
   lw $t0, 0($fp)
   sw $t0, -84($fp)
   # LOCAL local_class_type_at_Main_internal_23 --> -96($fp)
   # local_class_type_at_Main_internal_23 = SELF
   sw $s1, -96($fp)
   # LOCAL local_class_type_at_Main_internal_21 --> -88($fp)
   # LOCAL local_class_type_at_Main_internal_23 --> -96($fp)
   # local_class_type_at_Main_internal_21 = local_class_type_at_Main_internal_23
   lw $t0, -96($fp)
   sw $t0, -88($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_class_type_at_Main_internal_24 --> -100($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_53
   sw $t0, 12($v0)
   li $t0, 20
   sw $t0, 16($v0)
   sw $v0, -100($fp)
   # ARG local_class_type_at_Main_internal_24
   # LOCAL local_class_type_at_Main_internal_24 --> -100($fp)
   lw $t0, -100($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_class_type_at_Main_internal_21 --> -88($fp)
   # LOCAL local_class_type_at_Main_internal_22 --> -92($fp)
   # local_class_type_at_Main_internal_22 = VCALL local_class_type_at_Main_internal_21 out_string
   # Save new self pointer in $s1
   lw $s1, -88($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -92($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_class_type_at_Main_internal_2 --> -12($fp)
   # LOCAL local_class_type_at_Main_internal_22 --> -92($fp)
   # local_class_type_at_Main_internal_2 = local_class_type_at_Main_internal_22
   lw $t0, -92($fp)
   sw $t0, -12($fp)
   # GOTO label_END_332
j label_END_332
label_NEXT3_336: 
   # local_class_type_at_Main_internal_4 = TYPE_DISTANCE E <cil.nodes.LocalNode object at 0x7f201b93c0a0>
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # Load TDT pointer to type E
   la $t0, E__TDT
   lw $t1, -4($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -20($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # Update min if 8 < 9
   lw $t0, -20($fp)
   lw $t1, -16($fp)
   bgtu $t0, $t1, label_NEXT4_337
   # LOCAL local_class_type_at_Main_e_25 --> -104($fp)
   # PARAM param_class_type_at_Main_var_0 --> 0($fp)
   # local_class_type_at_Main_e_25 = PARAM param_class_type_at_Main_var_0
   lw $t0, 0($fp)
   sw $t0, -104($fp)
   # LOCAL local_class_type_at_Main_internal_28 --> -116($fp)
   # local_class_type_at_Main_internal_28 = SELF
   sw $s1, -116($fp)
   # LOCAL local_class_type_at_Main_internal_26 --> -108($fp)
   # LOCAL local_class_type_at_Main_internal_28 --> -116($fp)
   # local_class_type_at_Main_internal_26 = local_class_type_at_Main_internal_28
   lw $t0, -116($fp)
   sw $t0, -108($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_class_type_at_Main_internal_29 --> -120($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_54
   sw $t0, 12($v0)
   li $t0, 20
   sw $t0, 16($v0)
   sw $v0, -120($fp)
   # ARG local_class_type_at_Main_internal_29
   # LOCAL local_class_type_at_Main_internal_29 --> -120($fp)
   lw $t0, -120($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_class_type_at_Main_internal_26 --> -108($fp)
   # LOCAL local_class_type_at_Main_internal_27 --> -112($fp)
   # local_class_type_at_Main_internal_27 = VCALL local_class_type_at_Main_internal_26 out_string
   # Save new self pointer in $s1
   lw $s1, -108($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -112($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_class_type_at_Main_internal_2 --> -12($fp)
   # LOCAL local_class_type_at_Main_internal_27 --> -112($fp)
   # local_class_type_at_Main_internal_2 = local_class_type_at_Main_internal_27
   lw $t0, -112($fp)
   sw $t0, -12($fp)
   # GOTO label_END_332
j label_END_332
label_NEXT4_337: 
   # local_class_type_at_Main_internal_4 = TYPE_DISTANCE Object <cil.nodes.LocalNode object at 0x7f201b93c0a0>
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_0 --> -4($fp)
   # Load TDT pointer to type Object
   la $t0, Object__TDT
   lw $t1, -4($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -20($fp)
   # LOCAL local_class_type_at_Main_internal_4 --> -20($fp)
   # LOCAL local_class_type_at_Main_internal_3 --> -16($fp)
   # Update min if 8 < 9
   lw $t0, -20($fp)
   lw $t1, -16($fp)
   bgtu $t0, $t1, label_NEXT5_338
   # LOCAL local_class_type_at_Main_o_30 --> -124($fp)
   # PARAM param_class_type_at_Main_var_0 --> 0($fp)
   # local_class_type_at_Main_o_30 = PARAM param_class_type_at_Main_var_0
   lw $t0, 0($fp)
   sw $t0, -124($fp)
   # LOCAL local_class_type_at_Main_internal_33 --> -136($fp)
   # local_class_type_at_Main_internal_33 = SELF
   sw $s1, -136($fp)
   # LOCAL local_class_type_at_Main_internal_31 --> -128($fp)
   # LOCAL local_class_type_at_Main_internal_33 --> -136($fp)
   # local_class_type_at_Main_internal_31 = local_class_type_at_Main_internal_33
   lw $t0, -136($fp)
   sw $t0, -128($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_class_type_at_Main_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_55
   sw $t0, 12($v0)
   li $t0, 7
   sw $t0, 16($v0)
   sw $v0, -140($fp)
   # ARG local_class_type_at_Main_internal_34
   # LOCAL local_class_type_at_Main_internal_34 --> -140($fp)
   lw $t0, -140($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_class_type_at_Main_internal_31 --> -128($fp)
   # LOCAL local_class_type_at_Main_internal_32 --> -132($fp)
   # local_class_type_at_Main_internal_32 = VCALL local_class_type_at_Main_internal_31 out_string
   # Save new self pointer in $s1
   lw $s1, -128($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -132($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_class_type_at_Main_internal_2 --> -12($fp)
   # LOCAL local_class_type_at_Main_internal_32 --> -132($fp)
   # local_class_type_at_Main_internal_2 = local_class_type_at_Main_internal_32
   lw $t0, -132($fp)
   sw $t0, -12($fp)
   # GOTO label_END_332
j label_END_332
label_NEXT5_338: 
   label_ERROR_331: 
      # PARAM param_class_type_at_Main_var_0 --> 0($fp)
      lw $t0, 0($s1)
      sw $t0, 0($fp)
      # PARAM param_class_type_at_Main_var_0 --> 0($fp)
      la $a0, data_1
      li $v0, 4
      syscall
      lw $a0, 0($fp)
      li $v0, 4
      syscall
      la $a0, data_2
      li $v0, 4
      syscall
      li $v0, 10
      syscall
      label_END_332: 
# RETURN local_class_type_at_Main_internal_2
lw $v0, -12($fp)
# Deallocate stack frame for function function_class_type_at_Main.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 148
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_print_at_Main implementation.
# @Params:
# 	0($fp) = param_print_at_Main_var_0
function_print_at_Main: 
   # Allocate stack frame for function function_print_at_Main.
   subu $sp, $sp, 60
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 60
   # LOCAL local_print_at_Main_z_0 --> -4($fp)
   # local_print_at_Main_z_0 = 0
   li $t0, 0
   sw $t0, -4($fp)
   # LOCAL local_print_at_Main_internal_1 --> -8($fp)
   # local_print_at_Main_internal_1 = ALLOCATE A2I
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A2I
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A2I_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # LOCAL local_print_at_Main_z_0 --> -4($fp)
   # LOCAL local_print_at_Main_internal_1 --> -8($fp)
   # local_print_at_Main_z_0 = local_print_at_Main_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_print_at_Main_internal_4 --> -20($fp)
   # local_print_at_Main_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_print_at_Main_internal_2 --> -12($fp)
   # LOCAL local_print_at_Main_internal_4 --> -20($fp)
   # local_print_at_Main_internal_2 = local_print_at_Main_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Main_internal_5 --> -24($fp)
   # LOCAL local_print_at_Main_z_0 --> -4($fp)
   # local_print_at_Main_internal_5 = local_print_at_Main_z_0
   lw $t0, -4($fp)
   sw $t0, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Main_internal_7 --> -32($fp)
   # PARAM param_print_at_Main_var_0 --> 0($fp)
   # local_print_at_Main_internal_7 = PARAM param_print_at_Main_var_0
   lw $t0, 0($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Main_internal_7 --> -32($fp)
   # LOCAL local_print_at_Main_internal_8 --> -36($fp)
   # local_print_at_Main_internal_8 = VCALL local_print_at_Main_internal_7 value
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_print_at_Main_internal_8
   # LOCAL local_print_at_Main_internal_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Main_internal_5 --> -24($fp)
   # LOCAL local_print_at_Main_internal_6 --> -28($fp)
   # local_print_at_Main_internal_6 = VCALL local_print_at_Main_internal_5 i2a
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 100($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_print_at_Main_internal_6
   # LOCAL local_print_at_Main_internal_6 --> -28($fp)
   lw $t0, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Main_internal_2 --> -12($fp)
   # LOCAL local_print_at_Main_internal_3 --> -16($fp)
   # local_print_at_Main_internal_3 = VCALL local_print_at_Main_internal_2 out_string
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Main_internal_11 --> -48($fp)
   # local_print_at_Main_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_print_at_Main_internal_9 --> -40($fp)
   # LOCAL local_print_at_Main_internal_11 --> -48($fp)
   # local_print_at_Main_internal_9 = local_print_at_Main_internal_11
   lw $t0, -48($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Main_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_56
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -52($fp)
   # ARG local_print_at_Main_internal_12
   # LOCAL local_print_at_Main_internal_12 --> -52($fp)
   lw $t0, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Main_internal_9 --> -40($fp)
   # LOCAL local_print_at_Main_internal_10 --> -44($fp)
   # local_print_at_Main_internal_10 = VCALL local_print_at_Main_internal_9 out_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_Main_internal_10
   lw $v0, -44($fp)
   # Deallocate stack frame for function function_print_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 60
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 1008
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 1008
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # local_main_at_Main_internal_0 = ALLOCATE A
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # 
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   lw $t0, -4($fp)
   sw $t0, 16($s1)
   label_WHILE_339: 
      # local_main_at_Main_internal_2 = GETATTRIBUTE flag Main
      # LOCAL local_main_at_Main_internal_2 --> -12($fp)
      lw $t0, 24($s1)
      sw $t0, -12($fp)
      # LOCAL local_main_at_Main_internal_1 --> -8($fp)
      # LOCAL local_main_at_Main_internal_2 --> -12($fp)
      # Obtain value from -12($fp)
      lw $v0, -12($fp)
      lw $v0, 12($v0)
      sw $v0, -8($fp)
      # IF_ZERO local_main_at_Main_internal_1 GOTO label_WHILE_END_340
      # IF_ZERO local_main_at_Main_internal_1 GOTO label_WHILE_END_340
      lw $t0, -8($fp)
      beq $t0, 0, label_WHILE_END_340
      # LOCAL local_main_at_Main_internal_5 --> -24($fp)
      # local_main_at_Main_internal_5 = SELF
      sw $s1, -24($fp)
      # LOCAL local_main_at_Main_internal_3 --> -16($fp)
      # LOCAL local_main_at_Main_internal_5 --> -24($fp)
      # local_main_at_Main_internal_3 = local_main_at_Main_internal_5
      lw $t0, -24($fp)
      sw $t0, -16($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_6 --> -28($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, data_57
      sw $t0, 12($v0)
      li $t0, 7
      sw $t0, 16($v0)
      sw $v0, -28($fp)
      # ARG local_main_at_Main_internal_6
      # LOCAL local_main_at_Main_internal_6 --> -28($fp)
      lw $t0, -28($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_main_at_Main_internal_3 --> -16($fp)
      # LOCAL local_main_at_Main_internal_4 --> -20($fp)
      # local_main_at_Main_internal_4 = VCALL local_main_at_Main_internal_3 out_string
      # Save new self pointer in $s1
      lw $s1, -16($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 88($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -20($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_internal_9 --> -40($fp)
      # local_main_at_Main_internal_9 = SELF
      sw $s1, -40($fp)
      # LOCAL local_main_at_Main_internal_7 --> -32($fp)
      # LOCAL local_main_at_Main_internal_9 --> -40($fp)
      # local_main_at_Main_internal_7 = local_main_at_Main_internal_9
      lw $t0, -40($fp)
      sw $t0, -32($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # local_main_at_Main_internal_10 = GETATTRIBUTE avar Main
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      lw $t0, 16($s1)
      sw $t0, -44($fp)
      # ARG local_main_at_Main_internal_10
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      lw $t0, -44($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_main_at_Main_internal_7 --> -32($fp)
      # LOCAL local_main_at_Main_internal_8 --> -36($fp)
      # local_main_at_Main_internal_8 = VCALL local_main_at_Main_internal_7 print
      # Save new self pointer in $s1
      lw $s1, -32($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 72($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -36($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      # local_main_at_Main_internal_15 = SELF
      sw $s1, -64($fp)
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      # local_main_at_Main_internal_13 = local_main_at_Main_internal_15
      lw $t0, -64($fp)
      sw $t0, -56($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # local_main_at_Main_internal_18 = GETATTRIBUTE avar Main
      # LOCAL local_main_at_Main_internal_18 --> -76($fp)
      lw $t0, 16($s1)
      sw $t0, -76($fp)
      # LOCAL local_main_at_Main_internal_16 --> -68($fp)
      # LOCAL local_main_at_Main_internal_18 --> -76($fp)
      # local_main_at_Main_internal_16 = local_main_at_Main_internal_18
      lw $t0, -76($fp)
      sw $t0, -68($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_16 --> -68($fp)
      # LOCAL local_main_at_Main_internal_17 --> -72($fp)
      # local_main_at_Main_internal_17 = VCALL local_main_at_Main_internal_16 value
      # Save new self pointer in $s1
      lw $s1, -68($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 8($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -72($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # ARG local_main_at_Main_internal_17
      # LOCAL local_main_at_Main_internal_17 --> -72($fp)
      lw $t0, -72($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # local_main_at_Main_internal_14 = VCALL local_main_at_Main_internal_13 is_even
      # Save new self pointer in $s1
      lw $s1, -56($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 76($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -60($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # Obtain value from -60($fp)
      lw $v0, -60($fp)
      lw $v0, 12($v0)
      sw $v0, -48($fp)
      # IF_ZERO local_main_at_Main_internal_11 GOTO label_FALSEIF_341
      # IF_ZERO local_main_at_Main_internal_11 GOTO label_FALSEIF_341
      lw $t0, -48($fp)
      beq $t0, 0, label_FALSEIF_341
      # LOCAL local_main_at_Main_internal_21 --> -88($fp)
      # local_main_at_Main_internal_21 = SELF
      sw $s1, -88($fp)
      # LOCAL local_main_at_Main_internal_19 --> -80($fp)
      # LOCAL local_main_at_Main_internal_21 --> -88($fp)
      # local_main_at_Main_internal_19 = local_main_at_Main_internal_21
      lw $t0, -88($fp)
      sw $t0, -80($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_22 --> -92($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, data_58
      sw $t0, 12($v0)
      li $t0, 9
      sw $t0, 16($v0)
      sw $v0, -92($fp)
      # ARG local_main_at_Main_internal_22
      # LOCAL local_main_at_Main_internal_22 --> -92($fp)
      lw $t0, -92($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_main_at_Main_internal_19 --> -80($fp)
      # LOCAL local_main_at_Main_internal_20 --> -84($fp)
      # local_main_at_Main_internal_20 = VCALL local_main_at_Main_internal_19 out_string
      # Save new self pointer in $s1
      lw $s1, -80($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 88($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -84($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_internal_12 --> -52($fp)
      # LOCAL local_main_at_Main_internal_20 --> -84($fp)
      # local_main_at_Main_internal_12 = local_main_at_Main_internal_20
      lw $t0, -84($fp)
      sw $t0, -52($fp)
      # GOTO label_ENDIF_342
j label_ENDIF_342
label_FALSEIF_341: 
   # LOCAL local_main_at_Main_internal_25 --> -104($fp)
   # local_main_at_Main_internal_25 = SELF
   sw $s1, -104($fp)
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   # LOCAL local_main_at_Main_internal_25 --> -104($fp)
   # local_main_at_Main_internal_23 = local_main_at_Main_internal_25
   lw $t0, -104($fp)
   sw $t0, -96($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_59
   sw $t0, 12($v0)
   li $t0, 8
   sw $t0, 16($v0)
   sw $v0, -108($fp)
   # ARG local_main_at_Main_internal_26
   # LOCAL local_main_at_Main_internal_26 --> -108($fp)
   lw $t0, -108($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   # LOCAL local_main_at_Main_internal_24 --> -100($fp)
   # local_main_at_Main_internal_24 = VCALL local_main_at_Main_internal_23 out_string
   # Save new self pointer in $s1
   lw $s1, -96($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -100($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_24 --> -100($fp)
   # local_main_at_Main_internal_12 = local_main_at_Main_internal_24
   lw $t0, -100($fp)
   sw $t0, -52($fp)
   label_ENDIF_342: 
# LOCAL local_main_at_Main_internal_29 --> -120($fp)
# local_main_at_Main_internal_29 = SELF
sw $s1, -120($fp)
# LOCAL local_main_at_Main_internal_27 --> -112($fp)
# LOCAL local_main_at_Main_internal_29 --> -120($fp)
# local_main_at_Main_internal_27 = local_main_at_Main_internal_29
lw $t0, -120($fp)
sw $t0, -112($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_30 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_30 --> -124($fp)
lw $t0, 16($s1)
sw $t0, -124($fp)
# ARG local_main_at_Main_internal_30
# LOCAL local_main_at_Main_internal_30 --> -124($fp)
lw $t0, -124($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_27 --> -112($fp)
# LOCAL local_main_at_Main_internal_28 --> -116($fp)
# local_main_at_Main_internal_28 = VCALL local_main_at_Main_internal_27 class_type
# Save new self pointer in $s1
lw $s1, -112($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 52($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -116($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_33 --> -136($fp)
# local_main_at_Main_internal_33 = SELF
sw $s1, -136($fp)
# LOCAL local_main_at_Main_internal_31 --> -128($fp)
# LOCAL local_main_at_Main_internal_33 --> -136($fp)
# local_main_at_Main_internal_31 = local_main_at_Main_internal_33
lw $t0, -136($fp)
sw $t0, -128($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_31 --> -128($fp)
# LOCAL local_main_at_Main_internal_32 --> -132($fp)
# local_main_at_Main_internal_32 = VCALL local_main_at_Main_internal_31 menu
# Save new self pointer in $s1
lw $s1, -128($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 12($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -132($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_32 --> -132($fp)
lw $t0, -132($fp)
sw $t0, 12($s1)
# local_main_at_Main_internal_38 = GETATTRIBUTE char Main
# LOCAL local_main_at_Main_internal_38 --> -156($fp)
lw $t0, 12($s1)
sw $t0, -156($fp)
# LOCAL local_main_at_Main_internal_39 --> -160($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_60
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -160($fp)
# IF_ZERO local_main_at_Main_internal_38 GOTO label_FALSE_345
# IF_ZERO local_main_at_Main_internal_38 GOTO label_FALSE_345
lw $t0, -156($fp)
beq $t0, 0, label_FALSE_345
# IF_ZERO local_main_at_Main_internal_39 GOTO label_FALSE_345
# IF_ZERO local_main_at_Main_internal_39 GOTO label_FALSE_345
lw $t0, -160($fp)
beq $t0, 0, label_FALSE_345
# LOCAL local_main_at_Main_internal_37 --> -152($fp)
# LOCAL local_main_at_Main_internal_38 --> -156($fp)
# Comparing -156($fp) type with String
la $v0, String
lw $a0, -156($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -152($fp)
# IF_ZERO local_main_at_Main_internal_37 GOTO label_COMPARE_STRING_348
# IF_ZERO local_main_at_Main_internal_37 GOTO label_COMPARE_STRING_348
lw $t0, -152($fp)
beq $t0, 0, label_COMPARE_STRING_348
# LOCAL local_main_at_Main_internal_37 --> -152($fp)
# LOCAL local_main_at_Main_internal_38 --> -156($fp)
# Comparing -156($fp) type with Bool
la $v0, Bool
lw $a0, -156($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -152($fp)
# IF_ZERO local_main_at_Main_internal_37 GOTO label_COMPARE_BY_VALUE_349
# IF_ZERO local_main_at_Main_internal_37 GOTO label_COMPARE_BY_VALUE_349
lw $t0, -152($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_349
# LOCAL local_main_at_Main_internal_37 --> -152($fp)
# LOCAL local_main_at_Main_internal_38 --> -156($fp)
# Comparing -156($fp) type with Int
la $v0, Int
lw $a0, -156($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -152($fp)
# IF_ZERO local_main_at_Main_internal_37 GOTO label_COMPARE_BY_VALUE_349
# IF_ZERO local_main_at_Main_internal_37 GOTO label_COMPARE_BY_VALUE_349
lw $t0, -152($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_349
# LOCAL local_main_at_Main_internal_37 --> -152($fp)
# LOCAL local_main_at_Main_internal_38 --> -156($fp)
# LOCAL local_main_at_Main_internal_39 --> -160($fp)
# Load pointers and SUB
lw $a0, -156($fp)
lw $a1, -160($fp)
sub $a0, $a0, $a1
sw $a0, -152($fp)
# IF_ZERO local_main_at_Main_internal_37 GOTO label_TRUE_346
# IF_ZERO local_main_at_Main_internal_37 GOTO label_TRUE_346
lw $t0, -152($fp)
beq $t0, 0, label_TRUE_346
# GOTO label_FALSE_345
j label_FALSE_345
label_COMPARE_BY_VALUE_349: 
   # LOCAL local_main_at_Main_internal_37 --> -152($fp)
   # LOCAL local_main_at_Main_internal_38 --> -156($fp)
   # LOCAL local_main_at_Main_internal_39 --> -160($fp)
   lw $a0, -156($fp)
   lw $a1, -160($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -152($fp)
   # IF_ZERO local_main_at_Main_internal_37 GOTO label_TRUE_346
   # IF_ZERO local_main_at_Main_internal_37 GOTO label_TRUE_346
   lw $t0, -152($fp)
   beq $t0, 0, label_TRUE_346
   # GOTO label_FALSE_345
   j label_FALSE_345
   label_COMPARE_STRING_348: 
      # LOCAL local_main_at_Main_internal_37 --> -152($fp)
      # LOCAL local_main_at_Main_internal_38 --> -156($fp)
      # LOCAL local_main_at_Main_internal_39 --> -160($fp)
      # Load strings for comparison
      lw $v0, -156($fp)
      lw $v1, -160($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -152($fp)
      # IF_ZERO local_main_at_Main_internal_37 GOTO label_CONTINUE_350
      # IF_ZERO local_main_at_Main_internal_37 GOTO label_CONTINUE_350
      lw $t0, -152($fp)
      beq $t0, 0, label_CONTINUE_350
      # GOTO label_FALSE_345
      j label_FALSE_345
      label_CONTINUE_350: 
         # LOCAL local_main_at_Main_internal_37 --> -152($fp)
         # LOCAL local_main_at_Main_internal_38 --> -156($fp)
         # LOCAL local_main_at_Main_internal_39 --> -160($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -156($fp)
         lw $v1, -160($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_351: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_352
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_351
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_352: 
               # Store result
               sw $a2, -152($fp)
               # IF_ZERO local_main_at_Main_internal_37 GOTO label_TRUE_346
               # IF_ZERO local_main_at_Main_internal_37 GOTO label_TRUE_346
               lw $t0, -152($fp)
               beq $t0, 0, label_TRUE_346
               label_FALSE_345: 
                  # LOCAL local_main_at_Main_internal_36 --> -148($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -148($fp)
                  # GOTO label_END_347
j label_END_347
label_TRUE_346: 
   # LOCAL local_main_at_Main_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -148($fp)
   label_END_347: 
# LOCAL local_main_at_Main_internal_34 --> -140($fp)
# LOCAL local_main_at_Main_internal_36 --> -148($fp)
# Obtain value from -148($fp)
lw $v0, -148($fp)
lw $v0, 12($v0)
sw $v0, -140($fp)
# IF_ZERO local_main_at_Main_internal_34 GOTO label_FALSEIF_343
# IF_ZERO local_main_at_Main_internal_34 GOTO label_FALSEIF_343
lw $t0, -140($fp)
beq $t0, 0, label_FALSEIF_343
# LOCAL local_main_at_Main_internal_42 --> -172($fp)
# local_main_at_Main_internal_42 = ALLOCATE A
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, A
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, A_start
sw $t0, 4($v0)
# Load type offset
li $t0, 24
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -172($fp)
# LOCAL local_main_at_Main_internal_40 --> -164($fp)
# LOCAL local_main_at_Main_internal_42 --> -172($fp)
# local_main_at_Main_internal_40 = local_main_at_Main_internal_42
lw $t0, -172($fp)
sw $t0, -164($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_45 --> -184($fp)
# local_main_at_Main_internal_45 = SELF
sw $s1, -184($fp)
# LOCAL local_main_at_Main_internal_43 --> -176($fp)
# LOCAL local_main_at_Main_internal_45 --> -184($fp)
# local_main_at_Main_internal_43 = local_main_at_Main_internal_45
lw $t0, -184($fp)
sw $t0, -176($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_43 --> -176($fp)
# LOCAL local_main_at_Main_internal_44 --> -180($fp)
# local_main_at_Main_internal_44 = VCALL local_main_at_Main_internal_43 get_int
# Save new self pointer in $s1
lw $s1, -176($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 16($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -180($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_44
# LOCAL local_main_at_Main_internal_44 --> -180($fp)
lw $t0, -180($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_40 --> -164($fp)
# LOCAL local_main_at_Main_internal_41 --> -168($fp)
# local_main_at_Main_internal_41 = VCALL local_main_at_Main_internal_40 set_var
# Save new self pointer in $s1
lw $s1, -164($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 120($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -168($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_41 --> -168($fp)
lw $t0, -168($fp)
sw $t0, 20($s1)
# LOCAL local_main_at_Main_internal_48 --> -196($fp)
# local_main_at_Main_internal_48 = ALLOCATE B
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, B
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, B_start
sw $t0, 4($v0)
# Load type offset
li $t0, 28
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -196($fp)
# LOCAL local_main_at_Main_internal_46 --> -188($fp)
# LOCAL local_main_at_Main_internal_48 --> -196($fp)
# local_main_at_Main_internal_46 = local_main_at_Main_internal_48
lw $t0, -196($fp)
sw $t0, -188($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_51 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_51 --> -208($fp)
lw $t0, 16($s1)
sw $t0, -208($fp)
# LOCAL local_main_at_Main_internal_49 --> -200($fp)
# LOCAL local_main_at_Main_internal_51 --> -208($fp)
# local_main_at_Main_internal_49 = local_main_at_Main_internal_51
lw $t0, -208($fp)
sw $t0, -200($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_49 --> -200($fp)
# LOCAL local_main_at_Main_internal_50 --> -204($fp)
# local_main_at_Main_internal_50 = VCALL local_main_at_Main_internal_49 value
# Save new self pointer in $s1
lw $s1, -200($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -204($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_50
# LOCAL local_main_at_Main_internal_50 --> -204($fp)
lw $t0, -204($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# local_main_at_Main_internal_54 = GETATTRIBUTE a_var Main
# LOCAL local_main_at_Main_internal_54 --> -220($fp)
lw $t0, 20($s1)
sw $t0, -220($fp)
# LOCAL local_main_at_Main_internal_52 --> -212($fp)
# LOCAL local_main_at_Main_internal_54 --> -220($fp)
# local_main_at_Main_internal_52 = local_main_at_Main_internal_54
lw $t0, -220($fp)
sw $t0, -212($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_52 --> -212($fp)
# LOCAL local_main_at_Main_internal_53 --> -216($fp)
# local_main_at_Main_internal_53 = VCALL local_main_at_Main_internal_52 value
# Save new self pointer in $s1
lw $s1, -212($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -216($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_53
# LOCAL local_main_at_Main_internal_53 --> -216($fp)
lw $t0, -216($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_46 --> -188($fp)
# LOCAL local_main_at_Main_internal_47 --> -192($fp)
# local_main_at_Main_internal_47 = VCALL local_main_at_Main_internal_46 method2
# Save new self pointer in $s1
lw $s1, -188($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 36($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -192($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_47 --> -192($fp)
lw $t0, -192($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_35 --> -144($fp)
# local_main_at_Main_internal_35 = 
# GOTO label_ENDIF_344
j label_ENDIF_344
label_FALSEIF_343: 
   # local_main_at_Main_internal_59 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_59 --> -240($fp)
   lw $t0, 12($s1)
   sw $t0, -240($fp)
   # LOCAL local_main_at_Main_internal_60 --> -244($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_61
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -244($fp)
   # IF_ZERO local_main_at_Main_internal_59 GOTO label_FALSE_355
   # IF_ZERO local_main_at_Main_internal_59 GOTO label_FALSE_355
   lw $t0, -240($fp)
   beq $t0, 0, label_FALSE_355
   # IF_ZERO local_main_at_Main_internal_60 GOTO label_FALSE_355
   # IF_ZERO local_main_at_Main_internal_60 GOTO label_FALSE_355
   lw $t0, -244($fp)
   beq $t0, 0, label_FALSE_355
   # LOCAL local_main_at_Main_internal_58 --> -236($fp)
   # LOCAL local_main_at_Main_internal_59 --> -240($fp)
   # Comparing -240($fp) type with String
   la $v0, String
   lw $a0, -240($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -236($fp)
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_COMPARE_STRING_358
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_COMPARE_STRING_358
   lw $t0, -236($fp)
   beq $t0, 0, label_COMPARE_STRING_358
   # LOCAL local_main_at_Main_internal_58 --> -236($fp)
   # LOCAL local_main_at_Main_internal_59 --> -240($fp)
   # Comparing -240($fp) type with Bool
   la $v0, Bool
   lw $a0, -240($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -236($fp)
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_COMPARE_BY_VALUE_359
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_COMPARE_BY_VALUE_359
   lw $t0, -236($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_359
   # LOCAL local_main_at_Main_internal_58 --> -236($fp)
   # LOCAL local_main_at_Main_internal_59 --> -240($fp)
   # Comparing -240($fp) type with Int
   la $v0, Int
   lw $a0, -240($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -236($fp)
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_COMPARE_BY_VALUE_359
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_COMPARE_BY_VALUE_359
   lw $t0, -236($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_359
   # LOCAL local_main_at_Main_internal_58 --> -236($fp)
   # LOCAL local_main_at_Main_internal_59 --> -240($fp)
   # LOCAL local_main_at_Main_internal_60 --> -244($fp)
   # Load pointers and SUB
   lw $a0, -240($fp)
   lw $a1, -244($fp)
   sub $a0, $a0, $a1
   sw $a0, -236($fp)
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_TRUE_356
   # IF_ZERO local_main_at_Main_internal_58 GOTO label_TRUE_356
   lw $t0, -236($fp)
   beq $t0, 0, label_TRUE_356
   # GOTO label_FALSE_355
   j label_FALSE_355
   label_COMPARE_BY_VALUE_359: 
      # LOCAL local_main_at_Main_internal_58 --> -236($fp)
      # LOCAL local_main_at_Main_internal_59 --> -240($fp)
      # LOCAL local_main_at_Main_internal_60 --> -244($fp)
      lw $a0, -240($fp)
      lw $a1, -244($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -236($fp)
      # IF_ZERO local_main_at_Main_internal_58 GOTO label_TRUE_356
      # IF_ZERO local_main_at_Main_internal_58 GOTO label_TRUE_356
      lw $t0, -236($fp)
      beq $t0, 0, label_TRUE_356
      # GOTO label_FALSE_355
      j label_FALSE_355
      label_COMPARE_STRING_358: 
         # LOCAL local_main_at_Main_internal_58 --> -236($fp)
         # LOCAL local_main_at_Main_internal_59 --> -240($fp)
         # LOCAL local_main_at_Main_internal_60 --> -244($fp)
         # Load strings for comparison
         lw $v0, -240($fp)
         lw $v1, -244($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -236($fp)
         # IF_ZERO local_main_at_Main_internal_58 GOTO label_CONTINUE_360
         # IF_ZERO local_main_at_Main_internal_58 GOTO label_CONTINUE_360
         lw $t0, -236($fp)
         beq $t0, 0, label_CONTINUE_360
         # GOTO label_FALSE_355
         j label_FALSE_355
         label_CONTINUE_360: 
            # LOCAL local_main_at_Main_internal_58 --> -236($fp)
            # LOCAL local_main_at_Main_internal_59 --> -240($fp)
            # LOCAL local_main_at_Main_internal_60 --> -244($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -240($fp)
            lw $v1, -244($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_361: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_362
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_361
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_362: 
                  # Store result
                  sw $a2, -236($fp)
                  # IF_ZERO local_main_at_Main_internal_58 GOTO label_TRUE_356
                  # IF_ZERO local_main_at_Main_internal_58 GOTO label_TRUE_356
                  lw $t0, -236($fp)
                  beq $t0, 0, label_TRUE_356
                  label_FALSE_355: 
                     # LOCAL local_main_at_Main_internal_57 --> -232($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -232($fp)
                     # GOTO label_END_357
j label_END_357
label_TRUE_356: 
   # LOCAL local_main_at_Main_internal_57 --> -232($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -232($fp)
   label_END_357: 
# LOCAL local_main_at_Main_internal_55 --> -224($fp)
# LOCAL local_main_at_Main_internal_57 --> -232($fp)
# Obtain value from -232($fp)
lw $v0, -232($fp)
lw $v0, 12($v0)
sw $v0, -224($fp)
# IF_ZERO local_main_at_Main_internal_55 GOTO label_FALSEIF_353
# IF_ZERO local_main_at_Main_internal_55 GOTO label_FALSEIF_353
lw $t0, -224($fp)
beq $t0, 0, label_FALSEIF_353
# local_main_at_Main_internal_61 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_61 --> -248($fp)
lw $t0, 16($s1)
sw $t0, -248($fp)
# LOCAL local_main_at_Main_internal_61 --> -248($fp)
# LOCAL local_main_at_Main_internal_62 --> -252($fp)
# local_main_at_Main_internal_62 = TYPEOF local_main_at_Main_internal_61
lw $t0, -248($fp)
# Load pointer to type offset
lw $t1, 8($t0)
sw $t1, -252($fp)
# LOCAL local_main_at_Main_internal_65 --> -264($fp)
# local_main_at_Main_internal_65 = 15
li $t0, 15
sw $t0, -264($fp)
# local_main_at_Main_internal_66 = TYPE_DISTANCE C <cil.nodes.LocalNode object at 0x7f201b94ec70>
# LOCAL local_main_at_Main_internal_66 --> -268($fp)
# LOCAL local_main_at_Main_internal_62 --> -252($fp)
# Load TDT pointer to type C
la $t0, C__TDT
lw $t1, -252($fp)
addu $t0, $t0, $t1
# Save distance
lw $t1, 0($t0)
sw $t1, -268($fp)
# LOCAL local_main_at_Main_internal_66 --> -268($fp)
# LOCAL local_main_at_Main_internal_65 --> -264($fp)
# Update min if 8 < 9
lw $t0, -268($fp)
lw $t1, -264($fp)
bgtu $t0, $t1, label_Not_min0_363
# LOCAL local_main_at_Main_internal_65 --> -264($fp)
# LOCAL local_main_at_Main_internal_66 --> -268($fp)
# local_main_at_Main_internal_65 = local_main_at_Main_internal_66
lw $t0, -268($fp)
sw $t0, -264($fp)
label_Not_min0_363: 
   # local_main_at_Main_internal_66 = TYPE_DISTANCE A <cil.nodes.LocalNode object at 0x7f201b94ec70>
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # LOCAL local_main_at_Main_internal_62 --> -252($fp)
   # Load TDT pointer to type A
   la $t0, A__TDT
   lw $t1, -252($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -268($fp)
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # LOCAL local_main_at_Main_internal_65 --> -264($fp)
   # Update min if 8 < 9
   lw $t0, -268($fp)
   lw $t1, -264($fp)
   bgtu $t0, $t1, label_Not_min1_364
   # LOCAL local_main_at_Main_internal_65 --> -264($fp)
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # local_main_at_Main_internal_65 = local_main_at_Main_internal_66
   lw $t0, -268($fp)
   sw $t0, -264($fp)
   label_Not_min1_364: 
      # local_main_at_Main_internal_66 = TYPE_DISTANCE Object <cil.nodes.LocalNode object at 0x7f201b94ec70>
      # LOCAL local_main_at_Main_internal_66 --> -268($fp)
      # LOCAL local_main_at_Main_internal_62 --> -252($fp)
      # Load TDT pointer to type Object
      la $t0, Object__TDT
      lw $t1, -252($fp)
      addu $t0, $t0, $t1
      # Save distance
      lw $t1, 0($t0)
      sw $t1, -268($fp)
      # LOCAL local_main_at_Main_internal_66 --> -268($fp)
      # LOCAL local_main_at_Main_internal_65 --> -264($fp)
      # Update min if 8 < 9
      lw $t0, -268($fp)
      lw $t1, -264($fp)
      bgtu $t0, $t1, label_Not_min2_365
      # LOCAL local_main_at_Main_internal_65 --> -264($fp)
      # LOCAL local_main_at_Main_internal_66 --> -268($fp)
      # local_main_at_Main_internal_65 = local_main_at_Main_internal_66
      lw $t0, -268($fp)
      sw $t0, -264($fp)
      label_Not_min2_365: 
         # LOCAL local_main_at_Main_internal_66 --> -268($fp)
         # local_main_at_Main_internal_66 = 15
         li $t0, 15
         sw $t0, -268($fp)
         # LOCAL local_main_at_Main_internal_63 --> -256($fp)
         # LOCAL local_main_at_Main_internal_66 --> -268($fp)
         # LOCAL local_main_at_Main_internal_65 --> -264($fp)
         # Load pointers and SUB
         lw $a0, -268($fp)
         lw $a1, -264($fp)
         sub $a0, $a0, $a1
         sw $a0, -256($fp)
         # IF_ZERO local_main_at_Main_internal_63 GOTO label_ERROR_366
         # IF_ZERO local_main_at_Main_internal_63 GOTO label_ERROR_366
         lw $t0, -256($fp)
         beq $t0, 0, label_ERROR_366
         # local_main_at_Main_internal_66 = TYPE_DISTANCE C <cil.nodes.LocalNode object at 0x7f201b94ec70>
         # LOCAL local_main_at_Main_internal_66 --> -268($fp)
         # LOCAL local_main_at_Main_internal_62 --> -252($fp)
         # Load TDT pointer to type C
         la $t0, C__TDT
         lw $t1, -252($fp)
         addu $t0, $t0, $t1
         # Save distance
         lw $t1, 0($t0)
         sw $t1, -268($fp)
         # LOCAL local_main_at_Main_internal_66 --> -268($fp)
         # LOCAL local_main_at_Main_internal_65 --> -264($fp)
         # Update min if 8 < 9
         lw $t0, -268($fp)
         lw $t1, -264($fp)
         bgtu $t0, $t1, label_NEXT0_368
         # LOCAL local_main_at_Main_c_67 --> -272($fp)
         # LOCAL local_main_at_Main_internal_61 --> -248($fp)
         # local_main_at_Main_c_67 = local_main_at_Main_internal_61
         lw $t0, -248($fp)
         sw $t0, -272($fp)
         # LOCAL local_main_at_Main_internal_68 --> -276($fp)
         # LOCAL local_main_at_Main_c_67 --> -272($fp)
         # local_main_at_Main_internal_68 = local_main_at_Main_c_67
         lw $t0, -272($fp)
         sw $t0, -276($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_70 --> -284($fp)
         # LOCAL local_main_at_Main_c_67 --> -272($fp)
         # local_main_at_Main_internal_70 = local_main_at_Main_c_67
         lw $t0, -272($fp)
         sw $t0, -284($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_70 --> -284($fp)
         # LOCAL local_main_at_Main_internal_71 --> -288($fp)
         # local_main_at_Main_internal_71 = VCALL local_main_at_Main_internal_70 value
         # Save new self pointer in $s1
         lw $s1, -284($fp)
         # Get pointer to type
         lw $t0, 4($s1)
         # Get pointer to type's VTABLE
         lw $t0, 0($t0)
         # Get pointer to function address
         lw $t0, 8($t0)
         # Call function. Result is on $v0
         jalr $t0
         sw $v0, -288($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # ARG local_main_at_Main_internal_71
         # LOCAL local_main_at_Main_internal_71 --> -288($fp)
         lw $t0, -288($fp)
         # Push arg into stack
         subu $sp, $sp, 4
         sw $t0, 0($sp)
         # LOCAL local_main_at_Main_internal_68 --> -276($fp)
         # LOCAL local_main_at_Main_internal_69 --> -280($fp)
         # local_main_at_Main_internal_69 = VCALL local_main_at_Main_internal_68 method6
         # Save new self pointer in $s1
         lw $s1, -276($fp)
         # Get pointer to type
         lw $t0, 4($s1)
         # Get pointer to type's VTABLE
         lw $t0, 0($t0)
         # Get pointer to function address
         lw $t0, 20($t0)
         # Call function. Result is on $v0
         jalr $t0
         sw $v0, -280($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # 
         # LOCAL local_main_at_Main_internal_69 --> -280($fp)
         lw $t0, -280($fp)
         sw $t0, 16($s1)
         # LOCAL local_main_at_Main_internal_64 --> -260($fp)
         # local_main_at_Main_internal_64 = 
         # GOTO label_END_367
j label_END_367
label_NEXT0_368: 
   # local_main_at_Main_internal_66 = TYPE_DISTANCE A <cil.nodes.LocalNode object at 0x7f201b94ec70>
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # LOCAL local_main_at_Main_internal_62 --> -252($fp)
   # Load TDT pointer to type A
   la $t0, A__TDT
   lw $t1, -252($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -268($fp)
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # LOCAL local_main_at_Main_internal_65 --> -264($fp)
   # Update min if 8 < 9
   lw $t0, -268($fp)
   lw $t1, -264($fp)
   bgtu $t0, $t1, label_NEXT1_369
   # LOCAL local_main_at_Main_a_72 --> -292($fp)
   # LOCAL local_main_at_Main_internal_61 --> -248($fp)
   # local_main_at_Main_a_72 = local_main_at_Main_internal_61
   lw $t0, -248($fp)
   sw $t0, -292($fp)
   # LOCAL local_main_at_Main_internal_73 --> -296($fp)
   # LOCAL local_main_at_Main_a_72 --> -292($fp)
   # local_main_at_Main_internal_73 = local_main_at_Main_a_72
   lw $t0, -292($fp)
   sw $t0, -296($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_75 --> -304($fp)
   # LOCAL local_main_at_Main_a_72 --> -292($fp)
   # local_main_at_Main_internal_75 = local_main_at_Main_a_72
   lw $t0, -292($fp)
   sw $t0, -304($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_75 --> -304($fp)
   # LOCAL local_main_at_Main_internal_76 --> -308($fp)
   # local_main_at_Main_internal_76 = VCALL local_main_at_Main_internal_75 value
   # Save new self pointer in $s1
   lw $s1, -304($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -308($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_main_at_Main_internal_76
   # LOCAL local_main_at_Main_internal_76 --> -308($fp)
   lw $t0, -308($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_73 --> -296($fp)
   # LOCAL local_main_at_Main_internal_74 --> -300($fp)
   # local_main_at_Main_internal_74 = VCALL local_main_at_Main_internal_73 method3
   # Save new self pointer in $s1
   lw $s1, -296($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -300($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_main_at_Main_internal_74 --> -300($fp)
   lw $t0, -300($fp)
   sw $t0, 16($s1)
   # LOCAL local_main_at_Main_internal_64 --> -260($fp)
   # local_main_at_Main_internal_64 = 
   # GOTO label_END_367
j label_END_367
label_NEXT1_369: 
   # local_main_at_Main_internal_66 = TYPE_DISTANCE Object <cil.nodes.LocalNode object at 0x7f201b94ec70>
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # LOCAL local_main_at_Main_internal_62 --> -252($fp)
   # Load TDT pointer to type Object
   la $t0, Object__TDT
   lw $t1, -252($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -268($fp)
   # LOCAL local_main_at_Main_internal_66 --> -268($fp)
   # LOCAL local_main_at_Main_internal_65 --> -264($fp)
   # Update min if 8 < 9
   lw $t0, -268($fp)
   lw $t1, -264($fp)
   bgtu $t0, $t1, label_NEXT2_370
   # LOCAL local_main_at_Main_o_77 --> -312($fp)
   # LOCAL local_main_at_Main_internal_61 --> -248($fp)
   # local_main_at_Main_o_77 = local_main_at_Main_internal_61
   lw $t0, -248($fp)
   sw $t0, -312($fp)
   # LOCAL local_main_at_Main_internal_80 --> -324($fp)
   # local_main_at_Main_internal_80 = SELF
   sw $s1, -324($fp)
   # LOCAL local_main_at_Main_internal_78 --> -316($fp)
   # LOCAL local_main_at_Main_internal_80 --> -324($fp)
   # local_main_at_Main_internal_78 = local_main_at_Main_internal_80
   lw $t0, -324($fp)
   sw $t0, -316($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_81 --> -328($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_62
   sw $t0, 12($v0)
   li $t0, 7
   sw $t0, 16($v0)
   sw $v0, -328($fp)
   # ARG local_main_at_Main_internal_81
   # LOCAL local_main_at_Main_internal_81 --> -328($fp)
   lw $t0, -328($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_78 --> -316($fp)
   # LOCAL local_main_at_Main_internal_79 --> -320($fp)
   # local_main_at_Main_internal_79 = VCALL local_main_at_Main_internal_78 out_string
   # Save new self pointer in $s1
   lw $s1, -316($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -320($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_84 --> -340($fp)
   # local_main_at_Main_internal_84 = SELF
   sw $s1, -340($fp)
   # LOCAL local_main_at_Main_internal_82 --> -332($fp)
   # LOCAL local_main_at_Main_internal_84 --> -340($fp)
   # local_main_at_Main_internal_82 = local_main_at_Main_internal_84
   lw $t0, -340($fp)
   sw $t0, -332($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_82 --> -332($fp)
   # LOCAL local_main_at_Main_internal_83 --> -336($fp)
   # local_main_at_Main_internal_83 = VCALL local_main_at_Main_internal_82 abort
   # Save new self pointer in $s1
   lw $s1, -332($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 84($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -336($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_85 --> -344($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -344($fp)
   # LOCAL local_main_at_Main_internal_64 --> -260($fp)
   # LOCAL local_main_at_Main_internal_85 --> -344($fp)
   # local_main_at_Main_internal_64 = local_main_at_Main_internal_85
   lw $t0, -344($fp)
   sw $t0, -260($fp)
   # GOTO label_END_367
j label_END_367
label_NEXT2_370: 
   label_ERROR_366: 
      # LOCAL local_main_at_Main_internal_61 --> -248($fp)
      lw $t0, 0($s1)
      sw $t0, -248($fp)
      # LOCAL local_main_at_Main_internal_61 --> -248($fp)
      la $a0, data_1
      li $v0, 4
      syscall
      lw $a0, -248($fp)
      li $v0, 4
      syscall
      la $a0, data_2
      li $v0, 4
      syscall
      li $v0, 10
      syscall
      label_END_367: 
# LOCAL local_main_at_Main_internal_56 --> -228($fp)
# LOCAL local_main_at_Main_internal_64 --> -260($fp)
# local_main_at_Main_internal_56 = local_main_at_Main_internal_64
lw $t0, -260($fp)
sw $t0, -228($fp)
# GOTO label_ENDIF_354
j label_ENDIF_354
label_FALSEIF_353: 
   # local_main_at_Main_internal_90 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_90 --> -364($fp)
   lw $t0, 12($s1)
   sw $t0, -364($fp)
   # LOCAL local_main_at_Main_internal_91 --> -368($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_63
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -368($fp)
   # IF_ZERO local_main_at_Main_internal_90 GOTO label_FALSE_373
   # IF_ZERO local_main_at_Main_internal_90 GOTO label_FALSE_373
   lw $t0, -364($fp)
   beq $t0, 0, label_FALSE_373
   # IF_ZERO local_main_at_Main_internal_91 GOTO label_FALSE_373
   # IF_ZERO local_main_at_Main_internal_91 GOTO label_FALSE_373
   lw $t0, -368($fp)
   beq $t0, 0, label_FALSE_373
   # LOCAL local_main_at_Main_internal_89 --> -360($fp)
   # LOCAL local_main_at_Main_internal_90 --> -364($fp)
   # Comparing -364($fp) type with String
   la $v0, String
   lw $a0, -364($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -360($fp)
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_COMPARE_STRING_376
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_COMPARE_STRING_376
   lw $t0, -360($fp)
   beq $t0, 0, label_COMPARE_STRING_376
   # LOCAL local_main_at_Main_internal_89 --> -360($fp)
   # LOCAL local_main_at_Main_internal_90 --> -364($fp)
   # Comparing -364($fp) type with Bool
   la $v0, Bool
   lw $a0, -364($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -360($fp)
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_COMPARE_BY_VALUE_377
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_COMPARE_BY_VALUE_377
   lw $t0, -360($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_377
   # LOCAL local_main_at_Main_internal_89 --> -360($fp)
   # LOCAL local_main_at_Main_internal_90 --> -364($fp)
   # Comparing -364($fp) type with Int
   la $v0, Int
   lw $a0, -364($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -360($fp)
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_COMPARE_BY_VALUE_377
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_COMPARE_BY_VALUE_377
   lw $t0, -360($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_377
   # LOCAL local_main_at_Main_internal_89 --> -360($fp)
   # LOCAL local_main_at_Main_internal_90 --> -364($fp)
   # LOCAL local_main_at_Main_internal_91 --> -368($fp)
   # Load pointers and SUB
   lw $a0, -364($fp)
   lw $a1, -368($fp)
   sub $a0, $a0, $a1
   sw $a0, -360($fp)
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_TRUE_374
   # IF_ZERO local_main_at_Main_internal_89 GOTO label_TRUE_374
   lw $t0, -360($fp)
   beq $t0, 0, label_TRUE_374
   # GOTO label_FALSE_373
   j label_FALSE_373
   label_COMPARE_BY_VALUE_377: 
      # LOCAL local_main_at_Main_internal_89 --> -360($fp)
      # LOCAL local_main_at_Main_internal_90 --> -364($fp)
      # LOCAL local_main_at_Main_internal_91 --> -368($fp)
      lw $a0, -364($fp)
      lw $a1, -368($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -360($fp)
      # IF_ZERO local_main_at_Main_internal_89 GOTO label_TRUE_374
      # IF_ZERO local_main_at_Main_internal_89 GOTO label_TRUE_374
      lw $t0, -360($fp)
      beq $t0, 0, label_TRUE_374
      # GOTO label_FALSE_373
      j label_FALSE_373
      label_COMPARE_STRING_376: 
         # LOCAL local_main_at_Main_internal_89 --> -360($fp)
         # LOCAL local_main_at_Main_internal_90 --> -364($fp)
         # LOCAL local_main_at_Main_internal_91 --> -368($fp)
         # Load strings for comparison
         lw $v0, -364($fp)
         lw $v1, -368($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -360($fp)
         # IF_ZERO local_main_at_Main_internal_89 GOTO label_CONTINUE_378
         # IF_ZERO local_main_at_Main_internal_89 GOTO label_CONTINUE_378
         lw $t0, -360($fp)
         beq $t0, 0, label_CONTINUE_378
         # GOTO label_FALSE_373
         j label_FALSE_373
         label_CONTINUE_378: 
            # LOCAL local_main_at_Main_internal_89 --> -360($fp)
            # LOCAL local_main_at_Main_internal_90 --> -364($fp)
            # LOCAL local_main_at_Main_internal_91 --> -368($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -364($fp)
            lw $v1, -368($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_379: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_380
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_379
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_380: 
                  # Store result
                  sw $a2, -360($fp)
                  # IF_ZERO local_main_at_Main_internal_89 GOTO label_TRUE_374
                  # IF_ZERO local_main_at_Main_internal_89 GOTO label_TRUE_374
                  lw $t0, -360($fp)
                  beq $t0, 0, label_TRUE_374
                  label_FALSE_373: 
                     # LOCAL local_main_at_Main_internal_88 --> -356($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -356($fp)
                     # GOTO label_END_375
j label_END_375
label_TRUE_374: 
   # LOCAL local_main_at_Main_internal_88 --> -356($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -356($fp)
   label_END_375: 
# LOCAL local_main_at_Main_internal_86 --> -348($fp)
# LOCAL local_main_at_Main_internal_88 --> -356($fp)
# Obtain value from -356($fp)
lw $v0, -356($fp)
lw $v0, 12($v0)
sw $v0, -348($fp)
# IF_ZERO local_main_at_Main_internal_86 GOTO label_FALSEIF_371
# IF_ZERO local_main_at_Main_internal_86 GOTO label_FALSEIF_371
lw $t0, -348($fp)
beq $t0, 0, label_FALSEIF_371
# LOCAL local_main_at_Main_internal_94 --> -380($fp)
# local_main_at_Main_internal_94 = ALLOCATE A
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, A
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, A_start
sw $t0, 4($v0)
# Load type offset
li $t0, 24
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -380($fp)
# LOCAL local_main_at_Main_internal_92 --> -372($fp)
# LOCAL local_main_at_Main_internal_94 --> -380($fp)
# local_main_at_Main_internal_92 = local_main_at_Main_internal_94
lw $t0, -380($fp)
sw $t0, -372($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_97 --> -392($fp)
# local_main_at_Main_internal_97 = SELF
sw $s1, -392($fp)
# LOCAL local_main_at_Main_internal_95 --> -384($fp)
# LOCAL local_main_at_Main_internal_97 --> -392($fp)
# local_main_at_Main_internal_95 = local_main_at_Main_internal_97
lw $t0, -392($fp)
sw $t0, -384($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_95 --> -384($fp)
# LOCAL local_main_at_Main_internal_96 --> -388($fp)
# local_main_at_Main_internal_96 = VCALL local_main_at_Main_internal_95 get_int
# Save new self pointer in $s1
lw $s1, -384($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 16($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -388($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_96
# LOCAL local_main_at_Main_internal_96 --> -388($fp)
lw $t0, -388($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_92 --> -372($fp)
# LOCAL local_main_at_Main_internal_93 --> -376($fp)
# local_main_at_Main_internal_93 = VCALL local_main_at_Main_internal_92 set_var
# Save new self pointer in $s1
lw $s1, -372($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 120($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -376($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_93 --> -376($fp)
lw $t0, -376($fp)
sw $t0, 20($s1)
# LOCAL local_main_at_Main_internal_100 --> -404($fp)
# local_main_at_Main_internal_100 = ALLOCATE D
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, D
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, D_start
sw $t0, 4($v0)
# Load type offset
li $t0, 32
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -404($fp)
# LOCAL local_main_at_Main_internal_98 --> -396($fp)
# LOCAL local_main_at_Main_internal_100 --> -404($fp)
# local_main_at_Main_internal_98 = local_main_at_Main_internal_100
lw $t0, -404($fp)
sw $t0, -396($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_103 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_103 --> -416($fp)
lw $t0, 16($s1)
sw $t0, -416($fp)
# LOCAL local_main_at_Main_internal_101 --> -408($fp)
# LOCAL local_main_at_Main_internal_103 --> -416($fp)
# local_main_at_Main_internal_101 = local_main_at_Main_internal_103
lw $t0, -416($fp)
sw $t0, -408($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_101 --> -408($fp)
# LOCAL local_main_at_Main_internal_102 --> -412($fp)
# local_main_at_Main_internal_102 = VCALL local_main_at_Main_internal_101 value
# Save new self pointer in $s1
lw $s1, -408($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -412($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_102
# LOCAL local_main_at_Main_internal_102 --> -412($fp)
lw $t0, -412($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# local_main_at_Main_internal_106 = GETATTRIBUTE a_var Main
# LOCAL local_main_at_Main_internal_106 --> -428($fp)
lw $t0, 20($s1)
sw $t0, -428($fp)
# LOCAL local_main_at_Main_internal_104 --> -420($fp)
# LOCAL local_main_at_Main_internal_106 --> -428($fp)
# local_main_at_Main_internal_104 = local_main_at_Main_internal_106
lw $t0, -428($fp)
sw $t0, -420($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_104 --> -420($fp)
# LOCAL local_main_at_Main_internal_105 --> -424($fp)
# local_main_at_Main_internal_105 = VCALL local_main_at_Main_internal_104 value
# Save new self pointer in $s1
lw $s1, -420($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -424($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_105
# LOCAL local_main_at_Main_internal_105 --> -424($fp)
lw $t0, -424($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_98 --> -396($fp)
# LOCAL local_main_at_Main_internal_99 --> -400($fp)
# local_main_at_Main_internal_99 = VCALL local_main_at_Main_internal_98 method4
# Save new self pointer in $s1
lw $s1, -396($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 4($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -400($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_99 --> -400($fp)
lw $t0, -400($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_87 --> -352($fp)
# local_main_at_Main_internal_87 = 
# GOTO label_ENDIF_372
j label_ENDIF_372
label_FALSEIF_371: 
   # local_main_at_Main_internal_111 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_111 --> -448($fp)
   lw $t0, 12($s1)
   sw $t0, -448($fp)
   # LOCAL local_main_at_Main_internal_112 --> -452($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_64
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -452($fp)
   # IF_ZERO local_main_at_Main_internal_111 GOTO label_FALSE_383
   # IF_ZERO local_main_at_Main_internal_111 GOTO label_FALSE_383
   lw $t0, -448($fp)
   beq $t0, 0, label_FALSE_383
   # IF_ZERO local_main_at_Main_internal_112 GOTO label_FALSE_383
   # IF_ZERO local_main_at_Main_internal_112 GOTO label_FALSE_383
   lw $t0, -452($fp)
   beq $t0, 0, label_FALSE_383
   # LOCAL local_main_at_Main_internal_110 --> -444($fp)
   # LOCAL local_main_at_Main_internal_111 --> -448($fp)
   # Comparing -448($fp) type with String
   la $v0, String
   lw $a0, -448($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -444($fp)
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_COMPARE_STRING_386
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_COMPARE_STRING_386
   lw $t0, -444($fp)
   beq $t0, 0, label_COMPARE_STRING_386
   # LOCAL local_main_at_Main_internal_110 --> -444($fp)
   # LOCAL local_main_at_Main_internal_111 --> -448($fp)
   # Comparing -448($fp) type with Bool
   la $v0, Bool
   lw $a0, -448($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -444($fp)
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_COMPARE_BY_VALUE_387
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_COMPARE_BY_VALUE_387
   lw $t0, -444($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_387
   # LOCAL local_main_at_Main_internal_110 --> -444($fp)
   # LOCAL local_main_at_Main_internal_111 --> -448($fp)
   # Comparing -448($fp) type with Int
   la $v0, Int
   lw $a0, -448($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -444($fp)
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_COMPARE_BY_VALUE_387
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_COMPARE_BY_VALUE_387
   lw $t0, -444($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_387
   # LOCAL local_main_at_Main_internal_110 --> -444($fp)
   # LOCAL local_main_at_Main_internal_111 --> -448($fp)
   # LOCAL local_main_at_Main_internal_112 --> -452($fp)
   # Load pointers and SUB
   lw $a0, -448($fp)
   lw $a1, -452($fp)
   sub $a0, $a0, $a1
   sw $a0, -444($fp)
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_TRUE_384
   # IF_ZERO local_main_at_Main_internal_110 GOTO label_TRUE_384
   lw $t0, -444($fp)
   beq $t0, 0, label_TRUE_384
   # GOTO label_FALSE_383
   j label_FALSE_383
   label_COMPARE_BY_VALUE_387: 
      # LOCAL local_main_at_Main_internal_110 --> -444($fp)
      # LOCAL local_main_at_Main_internal_111 --> -448($fp)
      # LOCAL local_main_at_Main_internal_112 --> -452($fp)
      lw $a0, -448($fp)
      lw $a1, -452($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -444($fp)
      # IF_ZERO local_main_at_Main_internal_110 GOTO label_TRUE_384
      # IF_ZERO local_main_at_Main_internal_110 GOTO label_TRUE_384
      lw $t0, -444($fp)
      beq $t0, 0, label_TRUE_384
      # GOTO label_FALSE_383
      j label_FALSE_383
      label_COMPARE_STRING_386: 
         # LOCAL local_main_at_Main_internal_110 --> -444($fp)
         # LOCAL local_main_at_Main_internal_111 --> -448($fp)
         # LOCAL local_main_at_Main_internal_112 --> -452($fp)
         # Load strings for comparison
         lw $v0, -448($fp)
         lw $v1, -452($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -444($fp)
         # IF_ZERO local_main_at_Main_internal_110 GOTO label_CONTINUE_388
         # IF_ZERO local_main_at_Main_internal_110 GOTO label_CONTINUE_388
         lw $t0, -444($fp)
         beq $t0, 0, label_CONTINUE_388
         # GOTO label_FALSE_383
         j label_FALSE_383
         label_CONTINUE_388: 
            # LOCAL local_main_at_Main_internal_110 --> -444($fp)
            # LOCAL local_main_at_Main_internal_111 --> -448($fp)
            # LOCAL local_main_at_Main_internal_112 --> -452($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -448($fp)
            lw $v1, -452($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_389: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_390
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_389
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_390: 
                  # Store result
                  sw $a2, -444($fp)
                  # IF_ZERO local_main_at_Main_internal_110 GOTO label_TRUE_384
                  # IF_ZERO local_main_at_Main_internal_110 GOTO label_TRUE_384
                  lw $t0, -444($fp)
                  beq $t0, 0, label_TRUE_384
                  label_FALSE_383: 
                     # LOCAL local_main_at_Main_internal_109 --> -440($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -440($fp)
                     # GOTO label_END_385
j label_END_385
label_TRUE_384: 
   # LOCAL local_main_at_Main_internal_109 --> -440($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -440($fp)
   label_END_385: 
# LOCAL local_main_at_Main_internal_107 --> -432($fp)
# LOCAL local_main_at_Main_internal_109 --> -440($fp)
# Obtain value from -440($fp)
lw $v0, -440($fp)
lw $v0, 12($v0)
sw $v0, -432($fp)
# IF_ZERO local_main_at_Main_internal_107 GOTO label_FALSEIF_381
# IF_ZERO local_main_at_Main_internal_107 GOTO label_FALSEIF_381
lw $t0, -432($fp)
beq $t0, 0, label_FALSEIF_381
# LOCAL local_main_at_Main_internal_114 --> -460($fp)
# local_main_at_Main_internal_114 = ALLOCATE C
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, C
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, C_start
sw $t0, 4($v0)
# Load type offset
li $t0, 40
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -460($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_117 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_117 --> -472($fp)
lw $t0, 16($s1)
sw $t0, -472($fp)
# LOCAL local_main_at_Main_internal_115 --> -464($fp)
# LOCAL local_main_at_Main_internal_117 --> -472($fp)
# local_main_at_Main_internal_115 = local_main_at_Main_internal_117
lw $t0, -472($fp)
sw $t0, -464($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_115 --> -464($fp)
# LOCAL local_main_at_Main_internal_116 --> -468($fp)
# local_main_at_Main_internal_116 = VCALL local_main_at_Main_internal_115 value
# Save new self pointer in $s1
lw $s1, -464($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -468($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_116
# LOCAL local_main_at_Main_internal_116 --> -468($fp)
lw $t0, -468($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# local_main_at_Main_internal_113 = CALL method5
# LOCAL local_main_at_Main_internal_113 --> -456($fp)
# LOCAL local_main_at_Main_internal_114 --> -460($fp)
# Save new self pointer in $s1
lw $s1, -460($fp)
# Get pointer to type's VTABLE
la $t0, A_vtable
# Get pointer to function address
lw $t1, 80($t0)
# Call function. Result is on $v0
jalr $t1
sw $v0, -456($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_113 --> -456($fp)
lw $t0, -456($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_108 --> -436($fp)
# local_main_at_Main_internal_108 = 
# GOTO label_ENDIF_382
j label_ENDIF_382
label_FALSEIF_381: 
   # local_main_at_Main_internal_122 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_122 --> -492($fp)
   lw $t0, 12($s1)
   sw $t0, -492($fp)
   # LOCAL local_main_at_Main_internal_123 --> -496($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_65
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -496($fp)
   # IF_ZERO local_main_at_Main_internal_122 GOTO label_FALSE_393
   # IF_ZERO local_main_at_Main_internal_122 GOTO label_FALSE_393
   lw $t0, -492($fp)
   beq $t0, 0, label_FALSE_393
   # IF_ZERO local_main_at_Main_internal_123 GOTO label_FALSE_393
   # IF_ZERO local_main_at_Main_internal_123 GOTO label_FALSE_393
   lw $t0, -496($fp)
   beq $t0, 0, label_FALSE_393
   # LOCAL local_main_at_Main_internal_121 --> -488($fp)
   # LOCAL local_main_at_Main_internal_122 --> -492($fp)
   # Comparing -492($fp) type with String
   la $v0, String
   lw $a0, -492($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -488($fp)
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_COMPARE_STRING_396
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_COMPARE_STRING_396
   lw $t0, -488($fp)
   beq $t0, 0, label_COMPARE_STRING_396
   # LOCAL local_main_at_Main_internal_121 --> -488($fp)
   # LOCAL local_main_at_Main_internal_122 --> -492($fp)
   # Comparing -492($fp) type with Bool
   la $v0, Bool
   lw $a0, -492($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -488($fp)
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_COMPARE_BY_VALUE_397
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_COMPARE_BY_VALUE_397
   lw $t0, -488($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_397
   # LOCAL local_main_at_Main_internal_121 --> -488($fp)
   # LOCAL local_main_at_Main_internal_122 --> -492($fp)
   # Comparing -492($fp) type with Int
   la $v0, Int
   lw $a0, -492($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -488($fp)
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_COMPARE_BY_VALUE_397
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_COMPARE_BY_VALUE_397
   lw $t0, -488($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_397
   # LOCAL local_main_at_Main_internal_121 --> -488($fp)
   # LOCAL local_main_at_Main_internal_122 --> -492($fp)
   # LOCAL local_main_at_Main_internal_123 --> -496($fp)
   # Load pointers and SUB
   lw $a0, -492($fp)
   lw $a1, -496($fp)
   sub $a0, $a0, $a1
   sw $a0, -488($fp)
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_TRUE_394
   # IF_ZERO local_main_at_Main_internal_121 GOTO label_TRUE_394
   lw $t0, -488($fp)
   beq $t0, 0, label_TRUE_394
   # GOTO label_FALSE_393
   j label_FALSE_393
   label_COMPARE_BY_VALUE_397: 
      # LOCAL local_main_at_Main_internal_121 --> -488($fp)
      # LOCAL local_main_at_Main_internal_122 --> -492($fp)
      # LOCAL local_main_at_Main_internal_123 --> -496($fp)
      lw $a0, -492($fp)
      lw $a1, -496($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -488($fp)
      # IF_ZERO local_main_at_Main_internal_121 GOTO label_TRUE_394
      # IF_ZERO local_main_at_Main_internal_121 GOTO label_TRUE_394
      lw $t0, -488($fp)
      beq $t0, 0, label_TRUE_394
      # GOTO label_FALSE_393
      j label_FALSE_393
      label_COMPARE_STRING_396: 
         # LOCAL local_main_at_Main_internal_121 --> -488($fp)
         # LOCAL local_main_at_Main_internal_122 --> -492($fp)
         # LOCAL local_main_at_Main_internal_123 --> -496($fp)
         # Load strings for comparison
         lw $v0, -492($fp)
         lw $v1, -496($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -488($fp)
         # IF_ZERO local_main_at_Main_internal_121 GOTO label_CONTINUE_398
         # IF_ZERO local_main_at_Main_internal_121 GOTO label_CONTINUE_398
         lw $t0, -488($fp)
         beq $t0, 0, label_CONTINUE_398
         # GOTO label_FALSE_393
         j label_FALSE_393
         label_CONTINUE_398: 
            # LOCAL local_main_at_Main_internal_121 --> -488($fp)
            # LOCAL local_main_at_Main_internal_122 --> -492($fp)
            # LOCAL local_main_at_Main_internal_123 --> -496($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -492($fp)
            lw $v1, -496($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_399: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_400
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_399
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_400: 
                  # Store result
                  sw $a2, -488($fp)
                  # IF_ZERO local_main_at_Main_internal_121 GOTO label_TRUE_394
                  # IF_ZERO local_main_at_Main_internal_121 GOTO label_TRUE_394
                  lw $t0, -488($fp)
                  beq $t0, 0, label_TRUE_394
                  label_FALSE_393: 
                     # LOCAL local_main_at_Main_internal_120 --> -484($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -484($fp)
                     # GOTO label_END_395
j label_END_395
label_TRUE_394: 
   # LOCAL local_main_at_Main_internal_120 --> -484($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -484($fp)
   label_END_395: 
# LOCAL local_main_at_Main_internal_118 --> -476($fp)
# LOCAL local_main_at_Main_internal_120 --> -484($fp)
# Obtain value from -484($fp)
lw $v0, -484($fp)
lw $v0, 12($v0)
sw $v0, -476($fp)
# IF_ZERO local_main_at_Main_internal_118 GOTO label_FALSEIF_391
# IF_ZERO local_main_at_Main_internal_118 GOTO label_FALSEIF_391
lw $t0, -476($fp)
beq $t0, 0, label_FALSEIF_391
# LOCAL local_main_at_Main_internal_125 --> -504($fp)
# local_main_at_Main_internal_125 = ALLOCATE C
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, C
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, C_start
sw $t0, 4($v0)
# Load type offset
li $t0, 40
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -504($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_128 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_128 --> -516($fp)
lw $t0, 16($s1)
sw $t0, -516($fp)
# LOCAL local_main_at_Main_internal_126 --> -508($fp)
# LOCAL local_main_at_Main_internal_128 --> -516($fp)
# local_main_at_Main_internal_126 = local_main_at_Main_internal_128
lw $t0, -516($fp)
sw $t0, -508($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_126 --> -508($fp)
# LOCAL local_main_at_Main_internal_127 --> -512($fp)
# local_main_at_Main_internal_127 = VCALL local_main_at_Main_internal_126 value
# Save new self pointer in $s1
lw $s1, -508($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -512($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_127
# LOCAL local_main_at_Main_internal_127 --> -512($fp)
lw $t0, -512($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# local_main_at_Main_internal_124 = CALL method5
# LOCAL local_main_at_Main_internal_124 --> -500($fp)
# LOCAL local_main_at_Main_internal_125 --> -504($fp)
# Save new self pointer in $s1
lw $s1, -504($fp)
# Get pointer to type's VTABLE
la $t0, B_vtable
# Get pointer to function address
lw $t1, 80($t0)
# Call function. Result is on $v0
jalr $t1
sw $v0, -500($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_124 --> -500($fp)
lw $t0, -500($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_119 --> -480($fp)
# local_main_at_Main_internal_119 = 
# GOTO label_ENDIF_392
j label_ENDIF_392
label_FALSEIF_391: 
   # local_main_at_Main_internal_133 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_133 --> -536($fp)
   lw $t0, 12($s1)
   sw $t0, -536($fp)
   # LOCAL local_main_at_Main_internal_134 --> -540($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_66
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -540($fp)
   # IF_ZERO local_main_at_Main_internal_133 GOTO label_FALSE_403
   # IF_ZERO local_main_at_Main_internal_133 GOTO label_FALSE_403
   lw $t0, -536($fp)
   beq $t0, 0, label_FALSE_403
   # IF_ZERO local_main_at_Main_internal_134 GOTO label_FALSE_403
   # IF_ZERO local_main_at_Main_internal_134 GOTO label_FALSE_403
   lw $t0, -540($fp)
   beq $t0, 0, label_FALSE_403
   # LOCAL local_main_at_Main_internal_132 --> -532($fp)
   # LOCAL local_main_at_Main_internal_133 --> -536($fp)
   # Comparing -536($fp) type with String
   la $v0, String
   lw $a0, -536($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -532($fp)
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_COMPARE_STRING_406
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_COMPARE_STRING_406
   lw $t0, -532($fp)
   beq $t0, 0, label_COMPARE_STRING_406
   # LOCAL local_main_at_Main_internal_132 --> -532($fp)
   # LOCAL local_main_at_Main_internal_133 --> -536($fp)
   # Comparing -536($fp) type with Bool
   la $v0, Bool
   lw $a0, -536($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -532($fp)
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_COMPARE_BY_VALUE_407
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_COMPARE_BY_VALUE_407
   lw $t0, -532($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_407
   # LOCAL local_main_at_Main_internal_132 --> -532($fp)
   # LOCAL local_main_at_Main_internal_133 --> -536($fp)
   # Comparing -536($fp) type with Int
   la $v0, Int
   lw $a0, -536($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -532($fp)
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_COMPARE_BY_VALUE_407
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_COMPARE_BY_VALUE_407
   lw $t0, -532($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_407
   # LOCAL local_main_at_Main_internal_132 --> -532($fp)
   # LOCAL local_main_at_Main_internal_133 --> -536($fp)
   # LOCAL local_main_at_Main_internal_134 --> -540($fp)
   # Load pointers and SUB
   lw $a0, -536($fp)
   lw $a1, -540($fp)
   sub $a0, $a0, $a1
   sw $a0, -532($fp)
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_TRUE_404
   # IF_ZERO local_main_at_Main_internal_132 GOTO label_TRUE_404
   lw $t0, -532($fp)
   beq $t0, 0, label_TRUE_404
   # GOTO label_FALSE_403
   j label_FALSE_403
   label_COMPARE_BY_VALUE_407: 
      # LOCAL local_main_at_Main_internal_132 --> -532($fp)
      # LOCAL local_main_at_Main_internal_133 --> -536($fp)
      # LOCAL local_main_at_Main_internal_134 --> -540($fp)
      lw $a0, -536($fp)
      lw $a1, -540($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -532($fp)
      # IF_ZERO local_main_at_Main_internal_132 GOTO label_TRUE_404
      # IF_ZERO local_main_at_Main_internal_132 GOTO label_TRUE_404
      lw $t0, -532($fp)
      beq $t0, 0, label_TRUE_404
      # GOTO label_FALSE_403
      j label_FALSE_403
      label_COMPARE_STRING_406: 
         # LOCAL local_main_at_Main_internal_132 --> -532($fp)
         # LOCAL local_main_at_Main_internal_133 --> -536($fp)
         # LOCAL local_main_at_Main_internal_134 --> -540($fp)
         # Load strings for comparison
         lw $v0, -536($fp)
         lw $v1, -540($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -532($fp)
         # IF_ZERO local_main_at_Main_internal_132 GOTO label_CONTINUE_408
         # IF_ZERO local_main_at_Main_internal_132 GOTO label_CONTINUE_408
         lw $t0, -532($fp)
         beq $t0, 0, label_CONTINUE_408
         # GOTO label_FALSE_403
         j label_FALSE_403
         label_CONTINUE_408: 
            # LOCAL local_main_at_Main_internal_132 --> -532($fp)
            # LOCAL local_main_at_Main_internal_133 --> -536($fp)
            # LOCAL local_main_at_Main_internal_134 --> -540($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -536($fp)
            lw $v1, -540($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_409: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_410
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_409
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_410: 
                  # Store result
                  sw $a2, -532($fp)
                  # IF_ZERO local_main_at_Main_internal_132 GOTO label_TRUE_404
                  # IF_ZERO local_main_at_Main_internal_132 GOTO label_TRUE_404
                  lw $t0, -532($fp)
                  beq $t0, 0, label_TRUE_404
                  label_FALSE_403: 
                     # LOCAL local_main_at_Main_internal_131 --> -528($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -528($fp)
                     # GOTO label_END_405
j label_END_405
label_TRUE_404: 
   # LOCAL local_main_at_Main_internal_131 --> -528($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -528($fp)
   label_END_405: 
# LOCAL local_main_at_Main_internal_129 --> -520($fp)
# LOCAL local_main_at_Main_internal_131 --> -528($fp)
# Obtain value from -528($fp)
lw $v0, -528($fp)
lw $v0, 12($v0)
sw $v0, -520($fp)
# IF_ZERO local_main_at_Main_internal_129 GOTO label_FALSEIF_401
# IF_ZERO local_main_at_Main_internal_129 GOTO label_FALSEIF_401
lw $t0, -520($fp)
beq $t0, 0, label_FALSEIF_401
# LOCAL local_main_at_Main_internal_136 --> -548($fp)
# local_main_at_Main_internal_136 = ALLOCATE C
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, C
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, C_start
sw $t0, 4($v0)
# Load type offset
li $t0, 40
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -548($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_139 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_139 --> -560($fp)
lw $t0, 16($s1)
sw $t0, -560($fp)
# LOCAL local_main_at_Main_internal_137 --> -552($fp)
# LOCAL local_main_at_Main_internal_139 --> -560($fp)
# local_main_at_Main_internal_137 = local_main_at_Main_internal_139
lw $t0, -560($fp)
sw $t0, -552($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_137 --> -552($fp)
# LOCAL local_main_at_Main_internal_138 --> -556($fp)
# local_main_at_Main_internal_138 = VCALL local_main_at_Main_internal_137 value
# Save new self pointer in $s1
lw $s1, -552($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -556($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_138
# LOCAL local_main_at_Main_internal_138 --> -556($fp)
lw $t0, -556($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# local_main_at_Main_internal_135 = CALL method5
# LOCAL local_main_at_Main_internal_135 --> -544($fp)
# LOCAL local_main_at_Main_internal_136 --> -548($fp)
# Save new self pointer in $s1
lw $s1, -548($fp)
# Get pointer to type's VTABLE
la $t0, C_vtable
# Get pointer to function address
lw $t1, 80($t0)
# Call function. Result is on $v0
jalr $t1
sw $v0, -544($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_internal_135 --> -544($fp)
lw $t0, -544($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_130 --> -524($fp)
# local_main_at_Main_internal_130 = 
# GOTO label_ENDIF_402
j label_ENDIF_402
label_FALSEIF_401: 
   # local_main_at_Main_internal_144 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_144 --> -580($fp)
   lw $t0, 12($s1)
   sw $t0, -580($fp)
   # LOCAL local_main_at_Main_internal_145 --> -584($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_67
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -584($fp)
   # IF_ZERO local_main_at_Main_internal_144 GOTO label_FALSE_413
   # IF_ZERO local_main_at_Main_internal_144 GOTO label_FALSE_413
   lw $t0, -580($fp)
   beq $t0, 0, label_FALSE_413
   # IF_ZERO local_main_at_Main_internal_145 GOTO label_FALSE_413
   # IF_ZERO local_main_at_Main_internal_145 GOTO label_FALSE_413
   lw $t0, -584($fp)
   beq $t0, 0, label_FALSE_413
   # LOCAL local_main_at_Main_internal_143 --> -576($fp)
   # LOCAL local_main_at_Main_internal_144 --> -580($fp)
   # Comparing -580($fp) type with String
   la $v0, String
   lw $a0, -580($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -576($fp)
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_COMPARE_STRING_416
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_COMPARE_STRING_416
   lw $t0, -576($fp)
   beq $t0, 0, label_COMPARE_STRING_416
   # LOCAL local_main_at_Main_internal_143 --> -576($fp)
   # LOCAL local_main_at_Main_internal_144 --> -580($fp)
   # Comparing -580($fp) type with Bool
   la $v0, Bool
   lw $a0, -580($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -576($fp)
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_COMPARE_BY_VALUE_417
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_COMPARE_BY_VALUE_417
   lw $t0, -576($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_417
   # LOCAL local_main_at_Main_internal_143 --> -576($fp)
   # LOCAL local_main_at_Main_internal_144 --> -580($fp)
   # Comparing -580($fp) type with Int
   la $v0, Int
   lw $a0, -580($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -576($fp)
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_COMPARE_BY_VALUE_417
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_COMPARE_BY_VALUE_417
   lw $t0, -576($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_417
   # LOCAL local_main_at_Main_internal_143 --> -576($fp)
   # LOCAL local_main_at_Main_internal_144 --> -580($fp)
   # LOCAL local_main_at_Main_internal_145 --> -584($fp)
   # Load pointers and SUB
   lw $a0, -580($fp)
   lw $a1, -584($fp)
   sub $a0, $a0, $a1
   sw $a0, -576($fp)
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_TRUE_414
   # IF_ZERO local_main_at_Main_internal_143 GOTO label_TRUE_414
   lw $t0, -576($fp)
   beq $t0, 0, label_TRUE_414
   # GOTO label_FALSE_413
   j label_FALSE_413
   label_COMPARE_BY_VALUE_417: 
      # LOCAL local_main_at_Main_internal_143 --> -576($fp)
      # LOCAL local_main_at_Main_internal_144 --> -580($fp)
      # LOCAL local_main_at_Main_internal_145 --> -584($fp)
      lw $a0, -580($fp)
      lw $a1, -584($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -576($fp)
      # IF_ZERO local_main_at_Main_internal_143 GOTO label_TRUE_414
      # IF_ZERO local_main_at_Main_internal_143 GOTO label_TRUE_414
      lw $t0, -576($fp)
      beq $t0, 0, label_TRUE_414
      # GOTO label_FALSE_413
      j label_FALSE_413
      label_COMPARE_STRING_416: 
         # LOCAL local_main_at_Main_internal_143 --> -576($fp)
         # LOCAL local_main_at_Main_internal_144 --> -580($fp)
         # LOCAL local_main_at_Main_internal_145 --> -584($fp)
         # Load strings for comparison
         lw $v0, -580($fp)
         lw $v1, -584($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -576($fp)
         # IF_ZERO local_main_at_Main_internal_143 GOTO label_CONTINUE_418
         # IF_ZERO local_main_at_Main_internal_143 GOTO label_CONTINUE_418
         lw $t0, -576($fp)
         beq $t0, 0, label_CONTINUE_418
         # GOTO label_FALSE_413
         j label_FALSE_413
         label_CONTINUE_418: 
            # LOCAL local_main_at_Main_internal_143 --> -576($fp)
            # LOCAL local_main_at_Main_internal_144 --> -580($fp)
            # LOCAL local_main_at_Main_internal_145 --> -584($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -580($fp)
            lw $v1, -584($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_419: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_420
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_419
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_420: 
                  # Store result
                  sw $a2, -576($fp)
                  # IF_ZERO local_main_at_Main_internal_143 GOTO label_TRUE_414
                  # IF_ZERO local_main_at_Main_internal_143 GOTO label_TRUE_414
                  lw $t0, -576($fp)
                  beq $t0, 0, label_TRUE_414
                  label_FALSE_413: 
                     # LOCAL local_main_at_Main_internal_142 --> -572($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -572($fp)
                     # GOTO label_END_415
j label_END_415
label_TRUE_414: 
   # LOCAL local_main_at_Main_internal_142 --> -572($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -572($fp)
   label_END_415: 
# LOCAL local_main_at_Main_internal_140 --> -564($fp)
# LOCAL local_main_at_Main_internal_142 --> -572($fp)
# Obtain value from -572($fp)
lw $v0, -572($fp)
lw $v0, 12($v0)
sw $v0, -564($fp)
# IF_ZERO local_main_at_Main_internal_140 GOTO label_FALSEIF_411
# IF_ZERO local_main_at_Main_internal_140 GOTO label_FALSEIF_411
lw $t0, -564($fp)
beq $t0, 0, label_FALSEIF_411
# LOCAL local_main_at_Main_internal_150 --> -604($fp)
# local_main_at_Main_internal_150 = ALLOCATE D
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, D
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, D_start
sw $t0, 4($v0)
# Load type offset
li $t0, 32
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -604($fp)
# LOCAL local_main_at_Main_internal_148 --> -596($fp)
# LOCAL local_main_at_Main_internal_150 --> -604($fp)
# local_main_at_Main_internal_148 = local_main_at_Main_internal_150
lw $t0, -604($fp)
sw $t0, -596($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_153 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_153 --> -616($fp)
lw $t0, 16($s1)
sw $t0, -616($fp)
# LOCAL local_main_at_Main_internal_151 --> -608($fp)
# LOCAL local_main_at_Main_internal_153 --> -616($fp)
# local_main_at_Main_internal_151 = local_main_at_Main_internal_153
lw $t0, -616($fp)
sw $t0, -608($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_151 --> -608($fp)
# LOCAL local_main_at_Main_internal_152 --> -612($fp)
# local_main_at_Main_internal_152 = VCALL local_main_at_Main_internal_151 value
# Save new self pointer in $s1
lw $s1, -608($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -612($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_152
# LOCAL local_main_at_Main_internal_152 --> -612($fp)
lw $t0, -612($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_148 --> -596($fp)
# LOCAL local_main_at_Main_internal_149 --> -600($fp)
# local_main_at_Main_internal_149 = VCALL local_main_at_Main_internal_148 method7
# Save new self pointer in $s1
lw $s1, -596($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 0($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -600($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_146 --> -588($fp)
# LOCAL local_main_at_Main_internal_149 --> -600($fp)
# Obtain value from -600($fp)
lw $v0, -600($fp)
lw $v0, 12($v0)
sw $v0, -588($fp)
# IF_ZERO local_main_at_Main_internal_146 GOTO label_FALSEIF_421
# IF_ZERO local_main_at_Main_internal_146 GOTO label_FALSEIF_421
lw $t0, -588($fp)
beq $t0, 0, label_FALSEIF_421
# LOCAL local_main_at_Main_internal_156 --> -628($fp)
# local_main_at_Main_internal_156 = SELF
sw $s1, -628($fp)
# LOCAL local_main_at_Main_internal_154 --> -620($fp)
# LOCAL local_main_at_Main_internal_156 --> -628($fp)
# local_main_at_Main_internal_154 = local_main_at_Main_internal_156
lw $t0, -628($fp)
sw $t0, -620($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_157 --> -632($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_68
sw $t0, 12($v0)
li $t0, 7
sw $t0, 16($v0)
sw $v0, -632($fp)
# ARG local_main_at_Main_internal_157
# LOCAL local_main_at_Main_internal_157 --> -632($fp)
lw $t0, -632($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_154 --> -620($fp)
# LOCAL local_main_at_Main_internal_155 --> -624($fp)
# local_main_at_Main_internal_155 = VCALL local_main_at_Main_internal_154 out_string
# Save new self pointer in $s1
lw $s1, -620($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -624($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_160 --> -644($fp)
# local_main_at_Main_internal_160 = SELF
sw $s1, -644($fp)
# LOCAL local_main_at_Main_internal_158 --> -636($fp)
# LOCAL local_main_at_Main_internal_160 --> -644($fp)
# local_main_at_Main_internal_158 = local_main_at_Main_internal_160
lw $t0, -644($fp)
sw $t0, -636($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_161 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_161 --> -648($fp)
lw $t0, 16($s1)
sw $t0, -648($fp)
# ARG local_main_at_Main_internal_161
# LOCAL local_main_at_Main_internal_161 --> -648($fp)
lw $t0, -648($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_158 --> -636($fp)
# LOCAL local_main_at_Main_internal_159 --> -640($fp)
# local_main_at_Main_internal_159 = VCALL local_main_at_Main_internal_158 print
# Save new self pointer in $s1
lw $s1, -636($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 72($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -640($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_164 --> -660($fp)
# local_main_at_Main_internal_164 = SELF
sw $s1, -660($fp)
# LOCAL local_main_at_Main_internal_162 --> -652($fp)
# LOCAL local_main_at_Main_internal_164 --> -660($fp)
# local_main_at_Main_internal_162 = local_main_at_Main_internal_164
lw $t0, -660($fp)
sw $t0, -652($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_165 --> -664($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_69
sw $t0, 12($v0)
li $t0, 19
sw $t0, 16($v0)
sw $v0, -664($fp)
# ARG local_main_at_Main_internal_165
# LOCAL local_main_at_Main_internal_165 --> -664($fp)
lw $t0, -664($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_162 --> -652($fp)
# LOCAL local_main_at_Main_internal_163 --> -656($fp)
# local_main_at_Main_internal_163 = VCALL local_main_at_Main_internal_162 out_string
# Save new self pointer in $s1
lw $s1, -652($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -656($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_147 --> -592($fp)
# LOCAL local_main_at_Main_internal_163 --> -656($fp)
# local_main_at_Main_internal_147 = local_main_at_Main_internal_163
lw $t0, -656($fp)
sw $t0, -592($fp)
# GOTO label_ENDIF_422
j label_ENDIF_422
label_FALSEIF_421: 
   # LOCAL local_main_at_Main_internal_168 --> -676($fp)
   # local_main_at_Main_internal_168 = SELF
   sw $s1, -676($fp)
   # LOCAL local_main_at_Main_internal_166 --> -668($fp)
   # LOCAL local_main_at_Main_internal_168 --> -676($fp)
   # local_main_at_Main_internal_166 = local_main_at_Main_internal_168
   lw $t0, -676($fp)
   sw $t0, -668($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_169 --> -680($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_70
   sw $t0, 12($v0)
   li $t0, 7
   sw $t0, 16($v0)
   sw $v0, -680($fp)
   # ARG local_main_at_Main_internal_169
   # LOCAL local_main_at_Main_internal_169 --> -680($fp)
   lw $t0, -680($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_166 --> -668($fp)
   # LOCAL local_main_at_Main_internal_167 --> -672($fp)
   # local_main_at_Main_internal_167 = VCALL local_main_at_Main_internal_166 out_string
   # Save new self pointer in $s1
   lw $s1, -668($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -672($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_172 --> -692($fp)
   # local_main_at_Main_internal_172 = SELF
   sw $s1, -692($fp)
   # LOCAL local_main_at_Main_internal_170 --> -684($fp)
   # LOCAL local_main_at_Main_internal_172 --> -692($fp)
   # local_main_at_Main_internal_170 = local_main_at_Main_internal_172
   lw $t0, -692($fp)
   sw $t0, -684($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_main_at_Main_internal_173 = GETATTRIBUTE avar Main
   # LOCAL local_main_at_Main_internal_173 --> -696($fp)
   lw $t0, 16($s1)
   sw $t0, -696($fp)
   # ARG local_main_at_Main_internal_173
   # LOCAL local_main_at_Main_internal_173 --> -696($fp)
   lw $t0, -696($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_170 --> -684($fp)
   # LOCAL local_main_at_Main_internal_171 --> -688($fp)
   # local_main_at_Main_internal_171 = VCALL local_main_at_Main_internal_170 print
   # Save new self pointer in $s1
   lw $s1, -684($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -688($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_176 --> -708($fp)
   # local_main_at_Main_internal_176 = SELF
   sw $s1, -708($fp)
   # LOCAL local_main_at_Main_internal_174 --> -700($fp)
   # LOCAL local_main_at_Main_internal_176 --> -708($fp)
   # local_main_at_Main_internal_174 = local_main_at_Main_internal_176
   lw $t0, -708($fp)
   sw $t0, -700($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_177 --> -712($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_71
   sw $t0, 12($v0)
   li $t0, 23
   sw $t0, 16($v0)
   sw $v0, -712($fp)
   # ARG local_main_at_Main_internal_177
   # LOCAL local_main_at_Main_internal_177 --> -712($fp)
   lw $t0, -712($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_174 --> -700($fp)
   # LOCAL local_main_at_Main_internal_175 --> -704($fp)
   # local_main_at_Main_internal_175 = VCALL local_main_at_Main_internal_174 out_string
   # Save new self pointer in $s1
   lw $s1, -700($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -704($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_147 --> -592($fp)
   # LOCAL local_main_at_Main_internal_175 --> -704($fp)
   # local_main_at_Main_internal_147 = local_main_at_Main_internal_175
   lw $t0, -704($fp)
   sw $t0, -592($fp)
   label_ENDIF_422: 
# LOCAL local_main_at_Main_internal_141 --> -568($fp)
# LOCAL local_main_at_Main_internal_147 --> -592($fp)
# local_main_at_Main_internal_141 = local_main_at_Main_internal_147
lw $t0, -592($fp)
sw $t0, -568($fp)
# GOTO label_ENDIF_412
j label_ENDIF_412
label_FALSEIF_411: 
   # local_main_at_Main_internal_182 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_182 --> -732($fp)
   lw $t0, 12($s1)
   sw $t0, -732($fp)
   # LOCAL local_main_at_Main_internal_183 --> -736($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_72
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -736($fp)
   # IF_ZERO local_main_at_Main_internal_182 GOTO label_FALSE_425
   # IF_ZERO local_main_at_Main_internal_182 GOTO label_FALSE_425
   lw $t0, -732($fp)
   beq $t0, 0, label_FALSE_425
   # IF_ZERO local_main_at_Main_internal_183 GOTO label_FALSE_425
   # IF_ZERO local_main_at_Main_internal_183 GOTO label_FALSE_425
   lw $t0, -736($fp)
   beq $t0, 0, label_FALSE_425
   # LOCAL local_main_at_Main_internal_181 --> -728($fp)
   # LOCAL local_main_at_Main_internal_182 --> -732($fp)
   # Comparing -732($fp) type with String
   la $v0, String
   lw $a0, -732($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -728($fp)
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_COMPARE_STRING_428
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_COMPARE_STRING_428
   lw $t0, -728($fp)
   beq $t0, 0, label_COMPARE_STRING_428
   # LOCAL local_main_at_Main_internal_181 --> -728($fp)
   # LOCAL local_main_at_Main_internal_182 --> -732($fp)
   # Comparing -732($fp) type with Bool
   la $v0, Bool
   lw $a0, -732($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -728($fp)
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_COMPARE_BY_VALUE_429
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_COMPARE_BY_VALUE_429
   lw $t0, -728($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_429
   # LOCAL local_main_at_Main_internal_181 --> -728($fp)
   # LOCAL local_main_at_Main_internal_182 --> -732($fp)
   # Comparing -732($fp) type with Int
   la $v0, Int
   lw $a0, -732($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -728($fp)
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_COMPARE_BY_VALUE_429
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_COMPARE_BY_VALUE_429
   lw $t0, -728($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_429
   # LOCAL local_main_at_Main_internal_181 --> -728($fp)
   # LOCAL local_main_at_Main_internal_182 --> -732($fp)
   # LOCAL local_main_at_Main_internal_183 --> -736($fp)
   # Load pointers and SUB
   lw $a0, -732($fp)
   lw $a1, -736($fp)
   sub $a0, $a0, $a1
   sw $a0, -728($fp)
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_TRUE_426
   # IF_ZERO local_main_at_Main_internal_181 GOTO label_TRUE_426
   lw $t0, -728($fp)
   beq $t0, 0, label_TRUE_426
   # GOTO label_FALSE_425
   j label_FALSE_425
   label_COMPARE_BY_VALUE_429: 
      # LOCAL local_main_at_Main_internal_181 --> -728($fp)
      # LOCAL local_main_at_Main_internal_182 --> -732($fp)
      # LOCAL local_main_at_Main_internal_183 --> -736($fp)
      lw $a0, -732($fp)
      lw $a1, -736($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -728($fp)
      # IF_ZERO local_main_at_Main_internal_181 GOTO label_TRUE_426
      # IF_ZERO local_main_at_Main_internal_181 GOTO label_TRUE_426
      lw $t0, -728($fp)
      beq $t0, 0, label_TRUE_426
      # GOTO label_FALSE_425
      j label_FALSE_425
      label_COMPARE_STRING_428: 
         # LOCAL local_main_at_Main_internal_181 --> -728($fp)
         # LOCAL local_main_at_Main_internal_182 --> -732($fp)
         # LOCAL local_main_at_Main_internal_183 --> -736($fp)
         # Load strings for comparison
         lw $v0, -732($fp)
         lw $v1, -736($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -728($fp)
         # IF_ZERO local_main_at_Main_internal_181 GOTO label_CONTINUE_430
         # IF_ZERO local_main_at_Main_internal_181 GOTO label_CONTINUE_430
         lw $t0, -728($fp)
         beq $t0, 0, label_CONTINUE_430
         # GOTO label_FALSE_425
         j label_FALSE_425
         label_CONTINUE_430: 
            # LOCAL local_main_at_Main_internal_181 --> -728($fp)
            # LOCAL local_main_at_Main_internal_182 --> -732($fp)
            # LOCAL local_main_at_Main_internal_183 --> -736($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -732($fp)
            lw $v1, -736($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_431: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_432
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_431
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_432: 
                  # Store result
                  sw $a2, -728($fp)
                  # IF_ZERO local_main_at_Main_internal_181 GOTO label_TRUE_426
                  # IF_ZERO local_main_at_Main_internal_181 GOTO label_TRUE_426
                  lw $t0, -728($fp)
                  beq $t0, 0, label_TRUE_426
                  label_FALSE_425: 
                     # LOCAL local_main_at_Main_internal_180 --> -724($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -724($fp)
                     # GOTO label_END_427
j label_END_427
label_TRUE_426: 
   # LOCAL local_main_at_Main_internal_180 --> -724($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -724($fp)
   label_END_427: 
# LOCAL local_main_at_Main_internal_178 --> -716($fp)
# LOCAL local_main_at_Main_internal_180 --> -724($fp)
# Obtain value from -724($fp)
lw $v0, -724($fp)
lw $v0, 12($v0)
sw $v0, -716($fp)
# IF_ZERO local_main_at_Main_internal_178 GOTO label_FALSEIF_423
# IF_ZERO local_main_at_Main_internal_178 GOTO label_FALSEIF_423
lw $t0, -716($fp)
beq $t0, 0, label_FALSEIF_423
# LOCAL local_main_at_Main_x_184 --> -740($fp)
# local_main_at_Main_x_184 = 0
li $t0, 0
sw $t0, -740($fp)
# LOCAL local_main_at_Main_internal_187 --> -752($fp)
# local_main_at_Main_internal_187 = ALLOCATE E
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, E
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, E_start
sw $t0, 4($v0)
# Load type offset
li $t0, 36
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -752($fp)
# LOCAL local_main_at_Main_internal_185 --> -744($fp)
# LOCAL local_main_at_Main_internal_187 --> -752($fp)
# local_main_at_Main_internal_185 = local_main_at_Main_internal_187
lw $t0, -752($fp)
sw $t0, -744($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_190 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_190 --> -764($fp)
lw $t0, 16($s1)
sw $t0, -764($fp)
# LOCAL local_main_at_Main_internal_188 --> -756($fp)
# LOCAL local_main_at_Main_internal_190 --> -764($fp)
# local_main_at_Main_internal_188 = local_main_at_Main_internal_190
lw $t0, -764($fp)
sw $t0, -756($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_188 --> -756($fp)
# LOCAL local_main_at_Main_internal_189 --> -760($fp)
# local_main_at_Main_internal_189 = VCALL local_main_at_Main_internal_188 value
# Save new self pointer in $s1
lw $s1, -756($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -760($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_189
# LOCAL local_main_at_Main_internal_189 --> -760($fp)
lw $t0, -760($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_185 --> -744($fp)
# LOCAL local_main_at_Main_internal_186 --> -748($fp)
# local_main_at_Main_internal_186 = VCALL local_main_at_Main_internal_185 method6
# Save new self pointer in $s1
lw $s1, -744($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 20($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -748($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_x_184 --> -740($fp)
# LOCAL local_main_at_Main_internal_186 --> -748($fp)
# local_main_at_Main_x_184 = local_main_at_Main_internal_186
lw $t0, -748($fp)
sw $t0, -740($fp)
# LOCAL local_main_at_Main_r_191 --> -768($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -768($fp)
# local_main_at_Main_internal_195 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_195 --> -784($fp)
lw $t0, 16($s1)
sw $t0, -784($fp)
# LOCAL local_main_at_Main_internal_193 --> -776($fp)
# LOCAL local_main_at_Main_internal_195 --> -784($fp)
# local_main_at_Main_internal_193 = local_main_at_Main_internal_195
lw $t0, -784($fp)
sw $t0, -776($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_193 --> -776($fp)
# LOCAL local_main_at_Main_internal_194 --> -780($fp)
# local_main_at_Main_internal_194 = VCALL local_main_at_Main_internal_193 value
# Save new self pointer in $s1
lw $s1, -776($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -780($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_197 --> -792($fp)
# LOCAL local_main_at_Main_x_184 --> -740($fp)
# local_main_at_Main_internal_197 = local_main_at_Main_x_184
lw $t0, -740($fp)
sw $t0, -792($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_197 --> -792($fp)
# LOCAL local_main_at_Main_internal_198 --> -796($fp)
# local_main_at_Main_internal_198 = VCALL local_main_at_Main_internal_197 value
# Save new self pointer in $s1
lw $s1, -792($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -796($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_199 --> -800($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 8
sw $t0, 12($v0)
sw $v0, -800($fp)
# LOCAL local_main_at_Main_internal_196 --> -788($fp)
# LOCAL local_main_at_Main_internal_198 --> -796($fp)
# LOCAL local_main_at_Main_internal_199 --> -800($fp)
# local_main_at_Main_internal_196 = local_main_at_Main_internal_198 * local_main_at_Main_internal_199
lw $t1, -796($fp)
lw $t0, 12($t1)
lw $t1, -800($fp)
lw $t2, 12($t1)
mul $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -788($fp)
# LOCAL local_main_at_Main_internal_192 --> -772($fp)
# LOCAL local_main_at_Main_internal_194 --> -780($fp)
# LOCAL local_main_at_Main_internal_196 --> -788($fp)
# local_main_at_Main_internal_192 = local_main_at_Main_internal_194 - local_main_at_Main_internal_196
lw $t1, -780($fp)
lw $t0, 12($t1)
lw $t1, -788($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -772($fp)
# LOCAL local_main_at_Main_r_191 --> -768($fp)
# LOCAL local_main_at_Main_internal_192 --> -772($fp)
# local_main_at_Main_r_191 = local_main_at_Main_internal_192
lw $t0, -772($fp)
sw $t0, -768($fp)
# LOCAL local_main_at_Main_internal_202 --> -812($fp)
# local_main_at_Main_internal_202 = SELF
sw $s1, -812($fp)
# LOCAL local_main_at_Main_internal_200 --> -804($fp)
# LOCAL local_main_at_Main_internal_202 --> -812($fp)
# local_main_at_Main_internal_200 = local_main_at_Main_internal_202
lw $t0, -812($fp)
sw $t0, -804($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_203 --> -816($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_73
sw $t0, 12($v0)
li $t0, 7
sw $t0, 16($v0)
sw $v0, -816($fp)
# ARG local_main_at_Main_internal_203
# LOCAL local_main_at_Main_internal_203 --> -816($fp)
lw $t0, -816($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_200 --> -804($fp)
# LOCAL local_main_at_Main_internal_201 --> -808($fp)
# local_main_at_Main_internal_201 = VCALL local_main_at_Main_internal_200 out_string
# Save new self pointer in $s1
lw $s1, -804($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -808($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_206 --> -828($fp)
# local_main_at_Main_internal_206 = SELF
sw $s1, -828($fp)
# LOCAL local_main_at_Main_internal_204 --> -820($fp)
# LOCAL local_main_at_Main_internal_206 --> -828($fp)
# local_main_at_Main_internal_204 = local_main_at_Main_internal_206
lw $t0, -828($fp)
sw $t0, -820($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_main_at_Main_internal_207 = GETATTRIBUTE avar Main
# LOCAL local_main_at_Main_internal_207 --> -832($fp)
lw $t0, 16($s1)
sw $t0, -832($fp)
# ARG local_main_at_Main_internal_207
# LOCAL local_main_at_Main_internal_207 --> -832($fp)
lw $t0, -832($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_204 --> -820($fp)
# LOCAL local_main_at_Main_internal_205 --> -824($fp)
# local_main_at_Main_internal_205 = VCALL local_main_at_Main_internal_204 print
# Save new self pointer in $s1
lw $s1, -820($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 72($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -824($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_210 --> -844($fp)
# local_main_at_Main_internal_210 = SELF
sw $s1, -844($fp)
# LOCAL local_main_at_Main_internal_208 --> -836($fp)
# LOCAL local_main_at_Main_internal_210 --> -844($fp)
# local_main_at_Main_internal_208 = local_main_at_Main_internal_210
lw $t0, -844($fp)
sw $t0, -836($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_211 --> -848($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_74
sw $t0, 12($v0)
li $t0, 12
sw $t0, 16($v0)
sw $v0, -848($fp)
# ARG local_main_at_Main_internal_211
# LOCAL local_main_at_Main_internal_211 --> -848($fp)
lw $t0, -848($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_208 --> -836($fp)
# LOCAL local_main_at_Main_internal_209 --> -840($fp)
# local_main_at_Main_internal_209 = VCALL local_main_at_Main_internal_208 out_string
# Save new self pointer in $s1
lw $s1, -836($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -840($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_214 --> -860($fp)
# local_main_at_Main_internal_214 = SELF
sw $s1, -860($fp)
# LOCAL local_main_at_Main_internal_212 --> -852($fp)
# LOCAL local_main_at_Main_internal_214 --> -860($fp)
# local_main_at_Main_internal_212 = local_main_at_Main_internal_214
lw $t0, -860($fp)
sw $t0, -852($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_main_at_Main_x_184
# LOCAL local_main_at_Main_x_184 --> -740($fp)
lw $t0, -740($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_212 --> -852($fp)
# LOCAL local_main_at_Main_internal_213 --> -856($fp)
# local_main_at_Main_internal_213 = VCALL local_main_at_Main_internal_212 print
# Save new self pointer in $s1
lw $s1, -852($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 72($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -856($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_217 --> -872($fp)
# local_main_at_Main_internal_217 = SELF
sw $s1, -872($fp)
# LOCAL local_main_at_Main_internal_215 --> -864($fp)
# LOCAL local_main_at_Main_internal_217 --> -872($fp)
# local_main_at_Main_internal_215 = local_main_at_Main_internal_217
lw $t0, -872($fp)
sw $t0, -864($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_218 --> -876($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_75
sw $t0, 12($v0)
li $t0, 28
sw $t0, 16($v0)
sw $v0, -876($fp)
# ARG local_main_at_Main_internal_218
# LOCAL local_main_at_Main_internal_218 --> -876($fp)
lw $t0, -876($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_215 --> -864($fp)
# LOCAL local_main_at_Main_internal_216 --> -868($fp)
# local_main_at_Main_internal_216 = VCALL local_main_at_Main_internal_215 out_string
# Save new self pointer in $s1
lw $s1, -864($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -868($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_a_219 --> -880($fp)
# local_main_at_Main_a_219 = 0
li $t0, 0
sw $t0, -880($fp)
# LOCAL local_main_at_Main_internal_220 --> -884($fp)
# local_main_at_Main_internal_220 = ALLOCATE A2I
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, A2I
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 12 bytes of memory
li $a0, 12
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, A2I_start
sw $t0, 4($v0)
# Load type offset
li $t0, 20
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -884($fp)
# LOCAL local_main_at_Main_a_219 --> -880($fp)
# LOCAL local_main_at_Main_internal_220 --> -884($fp)
# local_main_at_Main_a_219 = local_main_at_Main_internal_220
lw $t0, -884($fp)
sw $t0, -880($fp)
# LOCAL local_main_at_Main_internal_223 --> -896($fp)
# local_main_at_Main_internal_223 = SELF
sw $s1, -896($fp)
# LOCAL local_main_at_Main_internal_221 --> -888($fp)
# LOCAL local_main_at_Main_internal_223 --> -896($fp)
# local_main_at_Main_internal_221 = local_main_at_Main_internal_223
lw $t0, -896($fp)
sw $t0, -888($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_224 --> -900($fp)
# LOCAL local_main_at_Main_a_219 --> -880($fp)
# local_main_at_Main_internal_224 = local_main_at_Main_a_219
lw $t0, -880($fp)
sw $t0, -900($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_main_at_Main_r_191
# LOCAL local_main_at_Main_r_191 --> -768($fp)
lw $t0, -768($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_224 --> -900($fp)
# LOCAL local_main_at_Main_internal_225 --> -904($fp)
# local_main_at_Main_internal_225 = VCALL local_main_at_Main_internal_224 i2a
# Save new self pointer in $s1
lw $s1, -900($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 100($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -904($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_main_at_Main_internal_225
# LOCAL local_main_at_Main_internal_225 --> -904($fp)
lw $t0, -904($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_221 --> -888($fp)
# LOCAL local_main_at_Main_internal_222 --> -892($fp)
# local_main_at_Main_internal_222 = VCALL local_main_at_Main_internal_221 out_string
# Save new self pointer in $s1
lw $s1, -888($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -892($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_228 --> -916($fp)
# local_main_at_Main_internal_228 = SELF
sw $s1, -916($fp)
# LOCAL local_main_at_Main_internal_226 --> -908($fp)
# LOCAL local_main_at_Main_internal_228 --> -916($fp)
# local_main_at_Main_internal_226 = local_main_at_Main_internal_228
lw $t0, -916($fp)
sw $t0, -908($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_229 --> -920($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_76
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -920($fp)
# ARG local_main_at_Main_internal_229
# LOCAL local_main_at_Main_internal_229 --> -920($fp)
lw $t0, -920($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_226 --> -908($fp)
# LOCAL local_main_at_Main_internal_227 --> -912($fp)
# local_main_at_Main_internal_227 = VCALL local_main_at_Main_internal_226 out_string
# Save new self pointer in $s1
lw $s1, -908($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 88($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -912($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_main_at_Main_x_184 --> -740($fp)
lw $t0, -740($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_179 --> -720($fp)
# local_main_at_Main_internal_179 = 
# GOTO label_ENDIF_424
j label_ENDIF_424
label_FALSEIF_423: 
   # local_main_at_Main_internal_234 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_234 --> -940($fp)
   lw $t0, 12($s1)
   sw $t0, -940($fp)
   # LOCAL local_main_at_Main_internal_235 --> -944($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_77
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -944($fp)
   # IF_ZERO local_main_at_Main_internal_234 GOTO label_FALSE_435
   # IF_ZERO local_main_at_Main_internal_234 GOTO label_FALSE_435
   lw $t0, -940($fp)
   beq $t0, 0, label_FALSE_435
   # IF_ZERO local_main_at_Main_internal_235 GOTO label_FALSE_435
   # IF_ZERO local_main_at_Main_internal_235 GOTO label_FALSE_435
   lw $t0, -944($fp)
   beq $t0, 0, label_FALSE_435
   # LOCAL local_main_at_Main_internal_233 --> -936($fp)
   # LOCAL local_main_at_Main_internal_234 --> -940($fp)
   # Comparing -940($fp) type with String
   la $v0, String
   lw $a0, -940($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -936($fp)
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_COMPARE_STRING_438
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_COMPARE_STRING_438
   lw $t0, -936($fp)
   beq $t0, 0, label_COMPARE_STRING_438
   # LOCAL local_main_at_Main_internal_233 --> -936($fp)
   # LOCAL local_main_at_Main_internal_234 --> -940($fp)
   # Comparing -940($fp) type with Bool
   la $v0, Bool
   lw $a0, -940($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -936($fp)
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_COMPARE_BY_VALUE_439
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_COMPARE_BY_VALUE_439
   lw $t0, -936($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_439
   # LOCAL local_main_at_Main_internal_233 --> -936($fp)
   # LOCAL local_main_at_Main_internal_234 --> -940($fp)
   # Comparing -940($fp) type with Int
   la $v0, Int
   lw $a0, -940($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -936($fp)
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_COMPARE_BY_VALUE_439
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_COMPARE_BY_VALUE_439
   lw $t0, -936($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_439
   # LOCAL local_main_at_Main_internal_233 --> -936($fp)
   # LOCAL local_main_at_Main_internal_234 --> -940($fp)
   # LOCAL local_main_at_Main_internal_235 --> -944($fp)
   # Load pointers and SUB
   lw $a0, -940($fp)
   lw $a1, -944($fp)
   sub $a0, $a0, $a1
   sw $a0, -936($fp)
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_TRUE_436
   # IF_ZERO local_main_at_Main_internal_233 GOTO label_TRUE_436
   lw $t0, -936($fp)
   beq $t0, 0, label_TRUE_436
   # GOTO label_FALSE_435
   j label_FALSE_435
   label_COMPARE_BY_VALUE_439: 
      # LOCAL local_main_at_Main_internal_233 --> -936($fp)
      # LOCAL local_main_at_Main_internal_234 --> -940($fp)
      # LOCAL local_main_at_Main_internal_235 --> -944($fp)
      lw $a0, -940($fp)
      lw $a1, -944($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -936($fp)
      # IF_ZERO local_main_at_Main_internal_233 GOTO label_TRUE_436
      # IF_ZERO local_main_at_Main_internal_233 GOTO label_TRUE_436
      lw $t0, -936($fp)
      beq $t0, 0, label_TRUE_436
      # GOTO label_FALSE_435
      j label_FALSE_435
      label_COMPARE_STRING_438: 
         # LOCAL local_main_at_Main_internal_233 --> -936($fp)
         # LOCAL local_main_at_Main_internal_234 --> -940($fp)
         # LOCAL local_main_at_Main_internal_235 --> -944($fp)
         # Load strings for comparison
         lw $v0, -940($fp)
         lw $v1, -944($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -936($fp)
         # IF_ZERO local_main_at_Main_internal_233 GOTO label_CONTINUE_440
         # IF_ZERO local_main_at_Main_internal_233 GOTO label_CONTINUE_440
         lw $t0, -936($fp)
         beq $t0, 0, label_CONTINUE_440
         # GOTO label_FALSE_435
         j label_FALSE_435
         label_CONTINUE_440: 
            # LOCAL local_main_at_Main_internal_233 --> -936($fp)
            # LOCAL local_main_at_Main_internal_234 --> -940($fp)
            # LOCAL local_main_at_Main_internal_235 --> -944($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -940($fp)
            lw $v1, -944($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_441: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_442
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_441
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_442: 
                  # Store result
                  sw $a2, -936($fp)
                  # IF_ZERO local_main_at_Main_internal_233 GOTO label_TRUE_436
                  # IF_ZERO local_main_at_Main_internal_233 GOTO label_TRUE_436
                  lw $t0, -936($fp)
                  beq $t0, 0, label_TRUE_436
                  label_FALSE_435: 
                     # LOCAL local_main_at_Main_internal_232 --> -932($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -932($fp)
                     # GOTO label_END_437
j label_END_437
label_TRUE_436: 
   # LOCAL local_main_at_Main_internal_232 --> -932($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -932($fp)
   label_END_437: 
# LOCAL local_main_at_Main_internal_230 --> -924($fp)
# LOCAL local_main_at_Main_internal_232 --> -932($fp)
# Obtain value from -932($fp)
lw $v0, -932($fp)
lw $v0, 12($v0)
sw $v0, -924($fp)
# IF_ZERO local_main_at_Main_internal_230 GOTO label_FALSEIF_433
# IF_ZERO local_main_at_Main_internal_230 GOTO label_FALSEIF_433
lw $t0, -924($fp)
beq $t0, 0, label_FALSEIF_433
# LOCAL local_main_at_Main_internal_236 --> -948($fp)
# local_main_at_Main_internal_236 = ALLOCATE A
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type name
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, A
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, A_start
sw $t0, 4($v0)
# Load type offset
li $t0, 24
sw $t0, 8($v0)
move $t1, $v0
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
move $s1, $v0
# Push register t1 into stack
subu $sp, $sp, 4
sw $t1, 0($sp)
jal __A__attrib__var__init
# Pop 4 bytes from stack into register t1
lw $t1, 0($sp)
addu $sp, $sp, 4
sw $v0, 12($t1)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
sw $t1, -948($fp)
# 
# LOCAL local_main_at_Main_internal_236 --> -948($fp)
lw $t0, -948($fp)
sw $t0, 16($s1)
# LOCAL local_main_at_Main_internal_231 --> -928($fp)
# local_main_at_Main_internal_231 = 
# GOTO label_ENDIF_434
j label_ENDIF_434
label_FALSEIF_433: 
   # local_main_at_Main_internal_241 = GETATTRIBUTE char Main
   # LOCAL local_main_at_Main_internal_241 --> -968($fp)
   lw $t0, 12($s1)
   sw $t0, -968($fp)
   # LOCAL local_main_at_Main_internal_242 --> -972($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_78
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -972($fp)
   # IF_ZERO local_main_at_Main_internal_241 GOTO label_FALSE_445
   # IF_ZERO local_main_at_Main_internal_241 GOTO label_FALSE_445
   lw $t0, -968($fp)
   beq $t0, 0, label_FALSE_445
   # IF_ZERO local_main_at_Main_internal_242 GOTO label_FALSE_445
   # IF_ZERO local_main_at_Main_internal_242 GOTO label_FALSE_445
   lw $t0, -972($fp)
   beq $t0, 0, label_FALSE_445
   # LOCAL local_main_at_Main_internal_240 --> -964($fp)
   # LOCAL local_main_at_Main_internal_241 --> -968($fp)
   # Comparing -968($fp) type with String
   la $v0, String
   lw $a0, -968($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -964($fp)
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_COMPARE_STRING_448
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_COMPARE_STRING_448
   lw $t0, -964($fp)
   beq $t0, 0, label_COMPARE_STRING_448
   # LOCAL local_main_at_Main_internal_240 --> -964($fp)
   # LOCAL local_main_at_Main_internal_241 --> -968($fp)
   # Comparing -968($fp) type with Bool
   la $v0, Bool
   lw $a0, -968($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -964($fp)
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_COMPARE_BY_VALUE_449
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_COMPARE_BY_VALUE_449
   lw $t0, -964($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_449
   # LOCAL local_main_at_Main_internal_240 --> -964($fp)
   # LOCAL local_main_at_Main_internal_241 --> -968($fp)
   # Comparing -968($fp) type with Int
   la $v0, Int
   lw $a0, -968($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -964($fp)
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_COMPARE_BY_VALUE_449
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_COMPARE_BY_VALUE_449
   lw $t0, -964($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_449
   # LOCAL local_main_at_Main_internal_240 --> -964($fp)
   # LOCAL local_main_at_Main_internal_241 --> -968($fp)
   # LOCAL local_main_at_Main_internal_242 --> -972($fp)
   # Load pointers and SUB
   lw $a0, -968($fp)
   lw $a1, -972($fp)
   sub $a0, $a0, $a1
   sw $a0, -964($fp)
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_TRUE_446
   # IF_ZERO local_main_at_Main_internal_240 GOTO label_TRUE_446
   lw $t0, -964($fp)
   beq $t0, 0, label_TRUE_446
   # GOTO label_FALSE_445
   j label_FALSE_445
   label_COMPARE_BY_VALUE_449: 
      # LOCAL local_main_at_Main_internal_240 --> -964($fp)
      # LOCAL local_main_at_Main_internal_241 --> -968($fp)
      # LOCAL local_main_at_Main_internal_242 --> -972($fp)
      lw $a0, -968($fp)
      lw $a1, -972($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -964($fp)
      # IF_ZERO local_main_at_Main_internal_240 GOTO label_TRUE_446
      # IF_ZERO local_main_at_Main_internal_240 GOTO label_TRUE_446
      lw $t0, -964($fp)
      beq $t0, 0, label_TRUE_446
      # GOTO label_FALSE_445
      j label_FALSE_445
      label_COMPARE_STRING_448: 
         # LOCAL local_main_at_Main_internal_240 --> -964($fp)
         # LOCAL local_main_at_Main_internal_241 --> -968($fp)
         # LOCAL local_main_at_Main_internal_242 --> -972($fp)
         # Load strings for comparison
         lw $v0, -968($fp)
         lw $v1, -972($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -964($fp)
         # IF_ZERO local_main_at_Main_internal_240 GOTO label_CONTINUE_450
         # IF_ZERO local_main_at_Main_internal_240 GOTO label_CONTINUE_450
         lw $t0, -964($fp)
         beq $t0, 0, label_CONTINUE_450
         # GOTO label_FALSE_445
         j label_FALSE_445
         label_CONTINUE_450: 
            # LOCAL local_main_at_Main_internal_240 --> -964($fp)
            # LOCAL local_main_at_Main_internal_241 --> -968($fp)
            # LOCAL local_main_at_Main_internal_242 --> -972($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -968($fp)
            lw $v1, -972($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_451: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_452
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_451
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_452: 
                  # Store result
                  sw $a2, -964($fp)
                  # IF_ZERO local_main_at_Main_internal_240 GOTO label_TRUE_446
                  # IF_ZERO local_main_at_Main_internal_240 GOTO label_TRUE_446
                  lw $t0, -964($fp)
                  beq $t0, 0, label_TRUE_446
                  label_FALSE_445: 
                     # LOCAL local_main_at_Main_internal_239 --> -960($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -960($fp)
                     # GOTO label_END_447
j label_END_447
label_TRUE_446: 
   # LOCAL local_main_at_Main_internal_239 --> -960($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -960($fp)
   label_END_447: 
# LOCAL local_main_at_Main_internal_237 --> -952($fp)
# LOCAL local_main_at_Main_internal_239 --> -960($fp)
# Obtain value from -960($fp)
lw $v0, -960($fp)
lw $v0, 12($v0)
sw $v0, -952($fp)
# IF_ZERO local_main_at_Main_internal_237 GOTO label_FALSEIF_443
# IF_ZERO local_main_at_Main_internal_237 GOTO label_FALSEIF_443
lw $t0, -952($fp)
beq $t0, 0, label_FALSEIF_443
# LOCAL local_main_at_Main_internal_243 --> -976($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -976($fp)
# 
# LOCAL local_main_at_Main_internal_243 --> -976($fp)
lw $t0, -976($fp)
sw $t0, 24($s1)
# LOCAL local_main_at_Main_internal_238 --> -956($fp)
# local_main_at_Main_internal_238 = 
# GOTO label_ENDIF_444
j label_ENDIF_444
label_FALSEIF_443: 
   # LOCAL local_main_at_Main_internal_246 --> -988($fp)
   # local_main_at_Main_internal_246 = ALLOCATE A
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __A__attrib__var__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -988($fp)
   # LOCAL local_main_at_Main_internal_244 --> -980($fp)
   # LOCAL local_main_at_Main_internal_246 --> -988($fp)
   # local_main_at_Main_internal_244 = local_main_at_Main_internal_246
   lw $t0, -988($fp)
   sw $t0, -980($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_main_at_Main_internal_249 = GETATTRIBUTE avar Main
   # LOCAL local_main_at_Main_internal_249 --> -1000($fp)
   lw $t0, 16($s1)
   sw $t0, -1000($fp)
   # LOCAL local_main_at_Main_internal_247 --> -992($fp)
   # LOCAL local_main_at_Main_internal_249 --> -1000($fp)
   # local_main_at_Main_internal_247 = local_main_at_Main_internal_249
   lw $t0, -1000($fp)
   sw $t0, -992($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_247 --> -992($fp)
   # LOCAL local_main_at_Main_internal_248 --> -996($fp)
   # local_main_at_Main_internal_248 = VCALL local_main_at_Main_internal_247 value
   # Save new self pointer in $s1
   lw $s1, -992($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -996($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_main_at_Main_internal_248
   # LOCAL local_main_at_Main_internal_248 --> -996($fp)
   lw $t0, -996($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_244 --> -980($fp)
   # LOCAL local_main_at_Main_internal_245 --> -984($fp)
   # local_main_at_Main_internal_245 = VCALL local_main_at_Main_internal_244 method1
   # Save new self pointer in $s1
   lw $s1, -980($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 48($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -984($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_main_at_Main_internal_245 --> -984($fp)
   lw $t0, -984($fp)
   sw $t0, 16($s1)
   # LOCAL local_main_at_Main_internal_238 --> -956($fp)
   # local_main_at_Main_internal_238 = 
   label_ENDIF_444: 
# LOCAL local_main_at_Main_internal_231 --> -928($fp)
# LOCAL local_main_at_Main_internal_238 --> -956($fp)
# local_main_at_Main_internal_231 = local_main_at_Main_internal_238
lw $t0, -956($fp)
sw $t0, -928($fp)
label_ENDIF_434: 
# LOCAL local_main_at_Main_internal_179 --> -720($fp)
# LOCAL local_main_at_Main_internal_231 --> -928($fp)
# local_main_at_Main_internal_179 = local_main_at_Main_internal_231
lw $t0, -928($fp)
sw $t0, -720($fp)
label_ENDIF_424: 
# LOCAL local_main_at_Main_internal_141 --> -568($fp)
# LOCAL local_main_at_Main_internal_179 --> -720($fp)
# local_main_at_Main_internal_141 = local_main_at_Main_internal_179
lw $t0, -720($fp)
sw $t0, -568($fp)
label_ENDIF_412: 
# LOCAL local_main_at_Main_internal_130 --> -524($fp)
# LOCAL local_main_at_Main_internal_141 --> -568($fp)
# local_main_at_Main_internal_130 = local_main_at_Main_internal_141
lw $t0, -568($fp)
sw $t0, -524($fp)
label_ENDIF_402: 
# LOCAL local_main_at_Main_internal_119 --> -480($fp)
# LOCAL local_main_at_Main_internal_130 --> -524($fp)
# local_main_at_Main_internal_119 = local_main_at_Main_internal_130
lw $t0, -524($fp)
sw $t0, -480($fp)
label_ENDIF_392: 
# LOCAL local_main_at_Main_internal_108 --> -436($fp)
# LOCAL local_main_at_Main_internal_119 --> -480($fp)
# local_main_at_Main_internal_108 = local_main_at_Main_internal_119
lw $t0, -480($fp)
sw $t0, -436($fp)
label_ENDIF_382: 
# LOCAL local_main_at_Main_internal_87 --> -352($fp)
# LOCAL local_main_at_Main_internal_108 --> -436($fp)
# local_main_at_Main_internal_87 = local_main_at_Main_internal_108
lw $t0, -436($fp)
sw $t0, -352($fp)
label_ENDIF_372: 
# LOCAL local_main_at_Main_internal_56 --> -228($fp)
# LOCAL local_main_at_Main_internal_87 --> -352($fp)
# local_main_at_Main_internal_56 = local_main_at_Main_internal_87
lw $t0, -352($fp)
sw $t0, -228($fp)
label_ENDIF_354: 
# LOCAL local_main_at_Main_internal_35 --> -144($fp)
# LOCAL local_main_at_Main_internal_56 --> -228($fp)
# local_main_at_Main_internal_35 = local_main_at_Main_internal_56
lw $t0, -228($fp)
sw $t0, -144($fp)
label_ENDIF_344: 
# GOTO label_WHILE_339
j label_WHILE_339
label_WHILE_END_340: 
   # RETURN
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 1008
   jr $ra
   # Function END

