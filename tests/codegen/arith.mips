.text
.globl main
main:
# Save method directions in the methods array
la $v0, methods
la $t9, entry
sw $t9, 0($v0)
la $t9, function_abort_Object
sw $t9, 4($v0)
la $t9, function_type_name_Object
sw $t9, 8($v0)
la $t9, function_copy_Object
sw $t9, 12($v0)
la $t9, function_out_string_IO
sw $t9, 16($v0)
la $t9, function_out_int_IO
sw $t9, 20($v0)
la $t9, function_in_int_IO
sw $t9, 24($v0)
la $t9, function_in_string_IO
sw $t9, 28($v0)
la $t9, function_length_String
sw $t9, 32($v0)
la $t9, function_concat_String
sw $t9, 36($v0)
la $t9, function_substr_String
sw $t9, 40($v0)
la $t9, function_type_name_String
sw $t9, 44($v0)
la $t9, function_copy_String
sw $t9, 48($v0)
la $t9, function_type_name_Int
sw $t9, 52($v0)
la $t9, function_copy_Int
sw $t9, 56($v0)
la $t9, function_type_name_Bool
sw $t9, 60($v0)
la $t9, function_copy_Bool
sw $t9, 64($v0)
la $t9, function_abort_String
sw $t9, 68($v0)
la $t9, function_abort_Int
sw $t9, 72($v0)
la $t9, function_abort_Bool
sw $t9, 76($v0)
la $t9, function_A_A
sw $t9, 80($v0)
la $t9, function_value_A
sw $t9, 84($v0)
la $t9, function_set_var_A
sw $t9, 88($v0)
la $t9, function_method1_A
sw $t9, 92($v0)
la $t9, function_method2_A
sw $t9, 96($v0)
la $t9, function_method3_A
sw $t9, 100($v0)
la $t9, function_method4_A
sw $t9, 104($v0)
la $t9, function_method5_A
sw $t9, 108($v0)
la $t9, function_B_B
sw $t9, 112($v0)
la $t9, function_method5_B
sw $t9, 116($v0)
la $t9, function_C_C
sw $t9, 120($v0)
la $t9, function_method6_C
sw $t9, 124($v0)
la $t9, function_method5_C
sw $t9, 128($v0)
la $t9, function_D_D
sw $t9, 132($v0)
la $t9, function_method7_D
sw $t9, 136($v0)
la $t9, function_E_E
sw $t9, 140($v0)
la $t9, function_method6_E
sw $t9, 144($v0)
la $t9, function_c2i_A2I
sw $t9, 148($v0)
la $t9, function_i2c_A2I
sw $t9, 152($v0)
la $t9, function_a2i_A2I
sw $t9, 156($v0)
la $t9, function_a2i_aux_A2I
sw $t9, 160($v0)
la $t9, function_i2a_A2I
sw $t9, 164($v0)
la $t9, function_i2a_aux_A2I
sw $t9, 168($v0)
la $t9, function_Main_Main
sw $t9, 172($v0)
la $t9, function_menu_Main
sw $t9, 176($v0)
la $t9, function_prompt_Main
sw $t9, 180($v0)
la $t9, function_get_int_Main
sw $t9, 184($v0)
la $t9, function_is_even_Main
sw $t9, 188($v0)
la $t9, function_class_type_Main
sw $t9, 192($v0)
la $t9, function_print_Main
sw $t9, 196($v0)
la $t9, function_main_Main
sw $t9, 200($v0)
# Save types directions in the types array
la $t9, types
# Save space to locate the type info
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_String
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 0($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 28
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_length_String in a0
lw $a0, 32($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_concat_String in a0
lw $a0, 36($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_substr_String in a0
lw $a0, 40($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_abort_String in a0
lw $a0, 68($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_type_name_String in a0
lw $a0, 44($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_copy_String in a0
lw $a0, 48($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Int
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 4($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Int in a0
lw $a0, 72($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Int in a0
lw $a0, 52($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Int in a0
lw $a0, 56($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Object
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 8($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bool
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 12($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Bool in a0
lw $a0, 76($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Bool in a0
lw $a0, 60($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Bool in a0
lw $a0, 64($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_IO
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 16($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_A
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 20($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 48
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_A in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_B
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 24($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 52
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_B in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_C
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 28($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 60
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_C in a0
lw $a0, 128($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_method6_C in a0
lw $a0, 124($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_C_C in a0
lw $a0, 120($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_D
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 32($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 60
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_B in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_method7_D in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_D_D in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_E
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 36($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 68
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_B in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_method7_D in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_D_D in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_method6_E in a0
lw $a0, 144($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
# Save the direction of the method function_E_E in a0
lw $a0, 140($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 64($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_A2I
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 40($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 40
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_c2i_A2I in a0
lw $a0, 148($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_i2c_A2I in a0
lw $a0, 152($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_a2i_A2I in a0
lw $a0, 156($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_a2i_aux_A2I in a0
lw $a0, 160($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_i2a_A2I in a0
lw $a0, 164($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_i2a_aux_A2I in a0
lw $a0, 168($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Main
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 44($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 64
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_menu_Main in a0
lw $a0, 176($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_prompt_Main in a0
lw $a0, 180($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_get_int_Main in a0
lw $a0, 184($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_is_even_Main in a0
lw $a0, 188($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_class_type_Main in a0
lw $a0, 192($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_print_Main in a0
lw $a0, 196($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_main_Main in a0
lw $a0, 200($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_Main_Main in a0
lw $a0, 172($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
sw $v0, 8($t8)
# Copying parents
lw $v0, 0($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 4($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 8($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 12($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 16($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 20($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 24($t9)
lw $t8, 20($t9)
sw $t8, 4($v0)
lw $v0, 28($t9)
lw $t8, 24($t9)
sw $t8, 4($v0)
lw $v0, 32($t9)
lw $t8, 24($t9)
sw $t8, 4($v0)
lw $v0, 36($t9)
lw $t8, 32($t9)
sw $t8, 4($v0)
lw $v0, 40($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 44($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)

entry:
# Gets the params from the stack
move $fp, $sp
# Gets the frame pointer from the stack
# Updates stack pointer pushing local__internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local__internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 28
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Main
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 28
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 44($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
# This function will consume the arguments
jal function_Main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# Static Dispatch of the method main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
li $v0, 0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Object_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_abort_Object_self_0
move $t1, $t0
sw $t1, -4($fp)
# Exiting the program
li $t8, 0
# Printing abort message
li $v0, 4
la $a0, abort_msg
syscall
li $v0, 4
lw $a0, 0($t0)
syscall
li $v0, 4
la $a0, new_line
syscall
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)
sw $t1, -4($fp)

function_type_name_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_type_name_Object_result_0 <- Type of self
lw $t1, 0($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t9, 4($t0)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
move $a0, $t9
syscall
move $t1, $v0
# Loop to copy every field of the previous object
# t8 the register to loop
li $t8, 0
loop_0:
# In t9 is stored the size of the object
bge $t8, $t9, exit_0
lw $a0, ($t0)
sw $a0, ($v0)
addi $v0, $v0, 4
addi $t0, $t0, 4
# Increase loop counter
addi $t8, $t8, 4
j loop_0
exit_0:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_out_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_string_String_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_string_String_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing a string
li $v0, 4
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_out_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value number
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_int_IO_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_int_IO_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing an int
li $v0, 1
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_in_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_int_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Reading a int
li $v0, 5
syscall
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_in_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_string_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t0, $v0
# Reading a string
# Putting buffer in a0
move $a0, $t0
# Putting length of string in a1
li $a1, 356
li $v0, 8
syscall
# Walks to eliminate the newline
move $t9, $t0
start_1:
lb $t8, 0($t9)
beqz $t8, end_1
add $t9, $t9, 1
j start_1
end_1:
addiu $t9, $t9, -1
sb $0, ($t9)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_length_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_length_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
move $t8, $t0
# Determining the length of a string
loop_2:
lb $t9, 0($t8)
beq $t9, $zero, end_2
addi $t8, $t8, 1
j loop_2
end_2:
sub $t1, $t8, $t0
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_concat_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_concat_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -8($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t2
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
# Concatenate second string on result buffer
move $a0, $t1
move $a1, $v0
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_3
# Definition of strcopier
strcopier:
# In a0 is the source and in a1 is the destination
loop_3:
lb $t8, ($a0)
beq $t8, $zero, end_3
addiu $a0, $a0, 1
sb $t8, ($a1)
addiu $a1, $a1, 1
b loop_3
end_3:
move $v0, $a1
jr $ra
finish_3:
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_substr_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value begin
addiu $fp, $fp, 4
# Pops the register with the param value end
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_substr_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
lw $t3, -8($fp)
# Getting the substring of a node
# Move to the first position in the string
li $v0, 0
move $t8, $t3
start_4:
lb $t9, 0($t8)
beqz $t9, error_4
addi $v0, 1
bgt $v0, $t0, end_len_4
addi $t8, 1
j start_4
end_len_4:
# Saving dest to iterate over him
move $v0, $t2
loop_4:
sub $t9, $v0, $t2
beq $t9, $t1, end_4
lb $t9, 0($t8)
beqz $t9, error_4
sb $t9, 0($v0)
addi $t8, $t8, 1
addi $v0, $v0, 1
j loop_4
error_4:
la $a0, index_error
li $v0, 4
move $a0, $t3
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 1
move $a0, $t1
syscall
j .raise
end_4:
sb $0, 0($v0)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_type_name_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_String_result_0 type_String
la $t0, type_String
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t1, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t1
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_5
finish_5:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Int_result_0 type_Int
la $t0, type_Int
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_Int_result_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Bool_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Bool_result_0 type_Bool
la $t0, type_Bool
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_result_Bool_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_result_Bool_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_String_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self string_abort
la $t0, string_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Int_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self int_abort
la $t0, int_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Bool_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self bool_abort
la $t0, bool_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_A_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_A_A_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_A_A_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_value_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_value_A_var_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_value_A_var_0 <- GET self . var
lw $t1, 12($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_set_var_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_set_var_A_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# self . var <- SET num
sw $t0, 12($t1)
lw $t2, -8($fp)
# Moving self to local_set_var_A_internal_0
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_method1_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
lw $t0, -4($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method2_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num1
addiu $fp, $fp, 4
# Pops the register with the param value num2
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method2_A_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_6 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Moving 0 to local_method2_A_x_0
li $t0, 0
sw $t0, -12($fp)
lw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -16($fp)
# local_method2_A_internal_1 <- num1 + num2
add $t3, $t1, $t2
# Moving local_method2_A_internal_1 to local_method2_A_x_0
move $t0, $t3
sw $t0, -12($fp)
lw $t4, -20($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_B
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t4)
# Static Dispatch of the method B
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
sw $t4, -20($fp)
# This function will consume the arguments
jal function_B_B
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# local_method2_A_internal_4 <- Type of local_method2_A_internal_2
lw $t1, 0($t0)
lw $t2, -32($fp)
# Saves in local_method2_A_internal_5 data_0
la $t2, data_0
# local_method2_A_internal_4 <- local_method2_A_internal_4 = local_method2_A_internal_5
move $t8, $t1
move $t9, $t2
loop_6:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_6
beqz $a1, mismatch_6
seq $v0, $a0, $a1
beqz $v0, mismatch_6
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_6
mismatch_6:
li $v0, 0
j end_6
check_6:
bnez $a1, mismatch_6
li $v0, 1
end_6:
move $t1, $v0
# If not local_method2_A_internal_4 goto continue__84
sw $t0, -20($fp)
sw $t1, -28($fp)
sw $t2, -32($fp)
beqz $t1, continue__84
la $a0, dispatch_error
j .raise
continue__84:
lw $t0, -20($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -12($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_method2_A_internal_3 to local_method2_A_internal_6
move $t1, $t0
sw $t1, -36($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_method3_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method3_A_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_6 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method3_A_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method3_A_internal_1 <- ~num
not $t2, $t1
addi $t2, $t2, 1
# Moving local_method3_A_internal_1 to local_method3_A_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t3)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# local_method3_A_internal_4 <- Type of local_method3_A_internal_2
lw $t1, 0($t0)
lw $t2, -28($fp)
# Saves in local_method3_A_internal_5 data_0
la $t2, data_0
# local_method3_A_internal_4 <- local_method3_A_internal_4 = local_method3_A_internal_5
move $t8, $t1
move $t9, $t2
loop_7:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_7
beqz $a1, mismatch_7
seq $v0, $a0, $a1
beqz $v0, mismatch_7
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_7
mismatch_7:
li $v0, 0
j end_7
check_7:
bnez $a1, mismatch_7
li $v0, 1
end_7:
move $t1, $v0
# If not local_method3_A_internal_4 goto continue__111
sw $t0, -16($fp)
sw $t1, -24($fp)
sw $t2, -28($fp)
beqz $t1, continue__111
la $a0, dispatch_error
j .raise
continue__111:
lw $t0, -16($fp)
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_method3_A_internal_3 to local_method3_A_internal_6
move $t1, $t0
sw $t1, -32($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -32($fp)
# Removing all locals from stack
addiu $sp, $sp, 36
jr $ra


function_method4_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num1
addiu $fp, $fp, 4
# Pops the register with the param value num2
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method4_A_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_x_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_x_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_15 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t2, -12($fp)
# local_method4_A_internal_0 <- num2 < num1
slt $t2, $t0, $t1
# If local_method4_A_internal_0 goto true__130
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
bnez $t2, true__130
lw $t0, -20($fp)
# Moving 0 to local_method4_A_x_2
li $t0, 0
sw $t0, -20($fp)
lw $t1, -0($fp)
lw $t2, -4($fp)
lw $t3, -24($fp)
# local_method4_A_internal_3 <- num2 - num1
sub $t3, $t1, $t2
# Moving local_method4_A_internal_3 to local_method4_A_x_2
move $t0, $t3
sw $t0, -20($fp)
lw $t4, -28($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t4)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -0($fp)
sw $t2, -4($fp)
sw $t3, -24($fp)
sw $t4, -28($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# local_method4_A_internal_6 <- Type of local_method4_A_internal_4
lw $t1, 0($t0)
lw $t2, -40($fp)
# Saves in local_method4_A_internal_7 data_0
la $t2, data_0
# local_method4_A_internal_6 <- local_method4_A_internal_6 = local_method4_A_internal_7
move $t8, $t1
move $t9, $t2
loop_8:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_8
beqz $a1, mismatch_8
seq $v0, $a0, $a1
beqz $v0, mismatch_8
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_8
mismatch_8:
li $v0, 0
j end_8
check_8:
bnez $a1, mismatch_8
li $v0, 1
end_8:
move $t1, $v0
# If not local_method4_A_internal_6 goto continue__143
sw $t0, -28($fp)
sw $t1, -36($fp)
sw $t2, -40($fp)
beqz $t1, continue__143
la $a0, dispatch_error
j .raise
continue__143:
lw $t0, -28($fp)
lw $t1, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -20($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -32($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Moving local_method4_A_internal_5 to local_method4_A_internal_8
move $t1, $t0
sw $t1, -44($fp)
lw $t2, -16($fp)
# Moving local_method4_A_internal_8 to local_method4_A_internal_1
move $t2, $t1
sw $t2, -16($fp)
sw $t0, -32($fp)
sw $t1, -44($fp)
sw $t2, -16($fp)
j end__130
true__130:
lw $t0, -48($fp)
# Moving 0 to local_method4_A_x_9
li $t0, 0
sw $t0, -48($fp)
lw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -52($fp)
# local_method4_A_internal_10 <- num1 - num2
sub $t3, $t1, $t2
# Moving local_method4_A_internal_10 to local_method4_A_x_9
move $t0, $t3
sw $t0, -48($fp)
lw $t4, -56($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t4)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -52($fp)
sw $t4, -56($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# local_method4_A_internal_13 <- Type of local_method4_A_internal_11
lw $t1, 0($t0)
lw $t2, -68($fp)
# Saves in local_method4_A_internal_14 data_0
la $t2, data_0
# local_method4_A_internal_13 <- local_method4_A_internal_13 = local_method4_A_internal_14
move $t8, $t1
move $t9, $t2
loop_9:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_9
beqz $a1, mismatch_9
seq $v0, $a0, $a1
beqz $v0, mismatch_9
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_9
mismatch_9:
li $v0, 0
j end_9
check_9:
bnez $a1, mismatch_9
li $v0, 1
end_9:
move $t1, $v0
# If not local_method4_A_internal_13 goto continue__169
sw $t0, -56($fp)
sw $t1, -64($fp)
sw $t2, -68($fp)
beqz $t1, continue__169
la $a0, dispatch_error
j .raise
continue__169:
lw $t0, -56($fp)
lw $t1, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -48($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -60($fp)
sw $t2, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Moving local_method4_A_internal_12 to local_method4_A_internal_15
move $t1, $t0
sw $t1, -72($fp)
lw $t2, -16($fp)
# Moving local_method4_A_internal_15 to local_method4_A_internal_1
move $t2, $t1
sw $t2, -16($fp)
sw $t0, -60($fp)
sw $t1, -72($fp)
sw $t2, -16($fp)
end__130:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 76
jr $ra


function_method5_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method5_A_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_y_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 1 to local_method5_A_x_0
li $t0, 1
sw $t0, -8($fp)
lw $t1, -12($fp)
# Moving 1 to local_method5_A_y_1
li $t1, 1
sw $t1, -12($fp)
lw $t2, -16($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
start__191:
lw $t0, -12($fp)
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_method5_A_internal_3 <- local_method5_A_y_1 <= num
sle $t2, $t0, $t1
# If not local_method5_A_internal_3 goto end__191
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
beqz $t2, end__191
lw $t0, -8($fp)
lw $t1, -12($fp)
lw $t2, -24($fp)
# local_method5_A_internal_4 <- local_method5_A_x_0 * local_method5_A_y_1
mult $t0, $t1
mflo $t2
# Moving local_method5_A_internal_4 to local_method5_A_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -28($fp)
# local_method5_A_internal_5 <- local_method5_A_y_1 + 1
addi $t3, $t1, 1
# Moving local_method5_A_internal_5 to local_method5_A_y_1
move $t1, $t3
sw $t1, -12($fp)
lw $t4, -32($fp)
# Moving local_method5_A_internal_5 to local_method5_A_internal_6
move $t4, $t3
sw $t4, -32($fp)
lw $t5, -16($fp)
# Moving local_method5_A_internal_6 to local_method5_A_internal_2
move $t5, $t4
sw $t5, -16($fp)
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -24($fp)
sw $t3, -28($fp)
sw $t4, -32($fp)
sw $t5, -16($fp)
j start__191
end__191:
lw $t0, -36($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t0)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# local_method5_A_internal_9 <- Type of local_method5_A_internal_7
lw $t1, 0($t0)
lw $t2, -48($fp)
# Saves in local_method5_A_internal_10 data_0
la $t2, data_0
# local_method5_A_internal_9 <- local_method5_A_internal_9 = local_method5_A_internal_10
move $t8, $t1
move $t9, $t2
loop_10:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_10
beqz $a1, mismatch_10
seq $v0, $a0, $a1
beqz $v0, mismatch_10
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_10
mismatch_10:
li $v0, 0
j end_10
check_10:
bnez $a1, mismatch_10
li $v0, 1
end_10:
move $t1, $v0
# If not local_method5_A_internal_9 goto continue__214
sw $t0, -36($fp)
sw $t1, -44($fp)
sw $t2, -48($fp)
beqz $t1, continue__214
la $a0, dispatch_error
j .raise
continue__214:
lw $t0, -36($fp)
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -40($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_method5_A_internal_8 to local_method5_A_internal_11
move $t1, $t0
sw $t1, -52($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -52($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_B_B:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_B_B_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_B_B_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method5_B:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method5_B_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_6 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method5_B_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method5_B_internal_1 <- num * num
mult $t1, $t1
mflo $t2
# Moving local_method5_B_internal_1 to local_method5_B_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t3)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# local_method5_B_internal_4 <- Type of local_method5_B_internal_2
lw $t1, 0($t0)
lw $t2, -28($fp)
# Saves in local_method5_B_internal_5 data_0
la $t2, data_0
# local_method5_B_internal_4 <- local_method5_B_internal_4 = local_method5_B_internal_5
move $t8, $t1
move $t9, $t2
loop_11:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_11
beqz $a1, mismatch_11
seq $v0, $a0, $a1
beqz $v0, mismatch_11
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_11
mismatch_11:
li $v0, 0
j end_11
check_11:
bnez $a1, mismatch_11
li $v0, 1
end_11:
move $t1, $v0
# If not local_method5_B_internal_4 goto continue__247
sw $t0, -16($fp)
sw $t1, -24($fp)
sw $t2, -28($fp)
beqz $t1, continue__247
la $a0, dispatch_error
j .raise
continue__247:
lw $t0, -16($fp)
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_method5_B_internal_3 to local_method5_B_internal_6
move $t1, $t0
sw $t1, -32($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -32($fp)
# Removing all locals from stack
addiu $sp, $sp, 36
jr $ra


function_C_C:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_C_C_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_C_C_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method6_C:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method6_C_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_6 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method6_C_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method6_C_internal_1 <- ~num
not $t2, $t1
addi $t2, $t2, 1
# Moving local_method6_C_internal_1 to local_method6_C_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t3)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# local_method6_C_internal_4 <- Type of local_method6_C_internal_2
lw $t1, 0($t0)
lw $t2, -28($fp)
# Saves in local_method6_C_internal_5 data_0
la $t2, data_0
# local_method6_C_internal_4 <- local_method6_C_internal_4 = local_method6_C_internal_5
move $t8, $t1
move $t9, $t2
loop_12:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_12
beqz $a1, mismatch_12
seq $v0, $a0, $a1
beqz $v0, mismatch_12
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_12
mismatch_12:
li $v0, 0
j end_12
check_12:
bnez $a1, mismatch_12
li $v0, 1
end_12:
move $t1, $v0
# If not local_method6_C_internal_4 goto continue__280
sw $t0, -16($fp)
sw $t1, -24($fp)
sw $t2, -28($fp)
beqz $t1, continue__280
la $a0, dispatch_error
j .raise
continue__280:
lw $t0, -16($fp)
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_method6_C_internal_3 to local_method6_C_internal_6
move $t1, $t0
sw $t1, -32($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -32($fp)
# Removing all locals from stack
addiu $sp, $sp, 36
jr $ra


function_method5_C:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method5_C_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_7 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method5_C_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -16($fp)
# local_method5_C_internal_2 <- num * num
mult $t1, $t1
mflo $t2
lw $t3, -12($fp)
# local_method5_C_internal_1 <- local_method5_C_internal_2 * num
mult $t2, $t1
mflo $t3
# Moving local_method5_C_internal_1 to local_method5_C_x_0
move $t0, $t3
sw $t0, -8($fp)
lw $t4, -20($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t4)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -16($fp)
sw $t3, -12($fp)
sw $t4, -20($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# local_method5_C_internal_5 <- Type of local_method5_C_internal_3
lw $t1, 0($t0)
lw $t2, -32($fp)
# Saves in local_method5_C_internal_6 data_0
la $t2, data_0
# local_method5_C_internal_5 <- local_method5_C_internal_5 = local_method5_C_internal_6
move $t8, $t1
move $t9, $t2
loop_13:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_13
beqz $a1, mismatch_13
seq $v0, $a0, $a1
beqz $v0, mismatch_13
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_13
mismatch_13:
li $v0, 0
j end_13
check_13:
bnez $a1, mismatch_13
li $v0, 1
end_13:
move $t1, $v0
# If not local_method5_C_internal_5 goto continue__309
sw $t0, -20($fp)
sw $t1, -28($fp)
sw $t2, -32($fp)
beqz $t1, continue__309
la $a0, dispatch_error
j .raise
continue__309:
lw $t0, -20($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_method5_C_internal_4 to local_method5_C_internal_7
move $t1, $t0
sw $t1, -36($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_D_D:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_D_D_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_D_D_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method7_D:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method7_D_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_12 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# Moving num to local_method7_D_x_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -12($fp)
# local_method7_D_internal_1 <- local_method7_D_x_0 < 0
li $t9, 0
slt $t2, $t1, $t9
# If local_method7_D_internal_1 goto true__335
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t2, true__335
lw $t0, -8($fp)
lw $t1, -20($fp)
# local_method7_D_internal_3 <- 0 = local_method7_D_x_0
li $t9, 0
seq $t1, $t9, $t0
# If local_method7_D_internal_3 goto true__339
sw $t0, -8($fp)
sw $t1, -20($fp)
bnez $t1, true__339
lw $t0, -8($fp)
lw $t1, -28($fp)
# local_method7_D_internal_5 <- 1 = local_method7_D_x_0
li $t9, 1
seq $t1, $t9, $t0
# If local_method7_D_internal_5 goto true__343
sw $t0, -8($fp)
sw $t1, -28($fp)
bnez $t1, true__343
lw $t0, -8($fp)
lw $t1, -36($fp)
# local_method7_D_internal_7 <- 2 = local_method7_D_x_0
li $t9, 2
seq $t1, $t9, $t0
# If local_method7_D_internal_7 goto true__347
sw $t0, -8($fp)
sw $t1, -36($fp)
bnez $t1, true__347
lw $t0, -8($fp)
lw $t1, -44($fp)
# local_method7_D_internal_9 <- local_method7_D_x_0 - 3
addi $t1, $t0, -3
lw $t2, -4($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method7_D
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -44($fp)
sw $t2, -4($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Moving local_method7_D_internal_10 to local_method7_D_internal_8
move $t1, $t0
sw $t1, -40($fp)
sw $t0, -48($fp)
sw $t1, -40($fp)
j end__347
true__347:
lw $t0, -40($fp)
# Moving 0 to local_method7_D_internal_8
li $t0, 0
sw $t0, -40($fp)
sw $t0, -40($fp)
end__347:
lw $t0, -40($fp)
lw $t1, -32($fp)
# Moving local_method7_D_internal_8 to local_method7_D_internal_6
move $t1, $t0
sw $t1, -32($fp)
sw $t0, -40($fp)
sw $t1, -32($fp)
j end__343
true__343:
lw $t0, -32($fp)
# Moving 0 to local_method7_D_internal_6
li $t0, 0
sw $t0, -32($fp)
sw $t0, -32($fp)
end__343:
lw $t0, -32($fp)
lw $t1, -24($fp)
# Moving local_method7_D_internal_6 to local_method7_D_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -32($fp)
sw $t1, -24($fp)
j end__339
true__339:
lw $t0, -24($fp)
# Moving 1 to local_method7_D_internal_4
li $t0, 1
sw $t0, -24($fp)
sw $t0, -24($fp)
end__339:
lw $t0, -24($fp)
lw $t1, -16($fp)
# Moving local_method7_D_internal_4 to local_method7_D_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -24($fp)
sw $t1, -16($fp)
j end__335
true__335:
lw $t0, -8($fp)
lw $t1, -52($fp)
# local_method7_D_internal_11 <- ~local_method7_D_x_0
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -4($fp)
lw $t3, -56($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method7_D
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -52($fp)
sw $t2, -4($fp)
sw $t3, -56($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# Moving local_method7_D_internal_12 to local_method7_D_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -56($fp)
sw $t1, -16($fp)
end__335:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_E_E:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_E_E_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_E_E_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method6_E:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method6_E_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_6 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method6_E_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method6_E_internal_1 <- num / 8
li $t9, 8
la $a0, zero_error
beqz $t9, .raise
div $t1, $t9
mflo $t2
# Moving local_method6_E_internal_1 to local_method6_E_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t3)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# local_method6_E_internal_4 <- Type of local_method6_E_internal_2
lw $t1, 0($t0)
lw $t2, -28($fp)
# Saves in local_method6_E_internal_5 data_0
la $t2, data_0
# local_method6_E_internal_4 <- local_method6_E_internal_4 = local_method6_E_internal_5
move $t8, $t1
move $t9, $t2
loop_14:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_14
beqz $a1, mismatch_14
seq $v0, $a0, $a1
beqz $v0, mismatch_14
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_14
mismatch_14:
li $v0, 0
j end_14
check_14:
bnez $a1, mismatch_14
li $v0, 1
end_14:
move $t1, $v0
# If not local_method6_E_internal_4 goto continue__402
sw $t0, -16($fp)
sw $t1, -24($fp)
sw $t2, -28($fp)
beqz $t1, continue__402
la $a0, dispatch_error
j .raise
continue__402:
lw $t0, -16($fp)
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_method6_E_internal_3 to local_method6_E_internal_6
move $t1, $t0
sw $t1, -32($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -32($fp)
# Removing all locals from stack
addiu $sp, $sp, 36
jr $ra


function_c2i_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value char
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_c2i_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_31 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Saves in local_c2i_A2I_internal_1 data_1
la $t0, data_1
lw $t1, -0($fp)
lw $t2, -8($fp)
# local_c2i_A2I_internal_0 <- char = local_c2i_A2I_internal_1
move $t8, $t1
move $t9, $t0
loop_15:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_15
beqz $a1, mismatch_15
seq $v0, $a0, $a1
beqz $v0, mismatch_15
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_15
mismatch_15:
li $v0, 0
j end_15
check_15:
bnez $a1, mismatch_15
li $v0, 1
end_15:
move $t2, $v0
# If local_c2i_A2I_internal_0 goto true__423
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
bnez $t2, true__423
lw $t0, -24($fp)
# Saves in local_c2i_A2I_internal_4 data_2
la $t0, data_2
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_c2i_A2I_internal_3 <- char = local_c2i_A2I_internal_4
move $t8, $t1
move $t9, $t0
loop_16:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_16
beqz $a1, mismatch_16
seq $v0, $a0, $a1
beqz $v0, mismatch_16
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_16
mismatch_16:
li $v0, 0
j end_16
check_16:
bnez $a1, mismatch_16
li $v0, 1
end_16:
move $t2, $v0
# If local_c2i_A2I_internal_3 goto true__430
sw $t0, -24($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
bnez $t2, true__430
lw $t0, -36($fp)
# Saves in local_c2i_A2I_internal_7 data_3
la $t0, data_3
lw $t1, -0($fp)
lw $t2, -32($fp)
# local_c2i_A2I_internal_6 <- char = local_c2i_A2I_internal_7
move $t8, $t1
move $t9, $t0
loop_17:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_17
beqz $a1, mismatch_17
seq $v0, $a0, $a1
beqz $v0, mismatch_17
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_17
mismatch_17:
li $v0, 0
j end_17
check_17:
bnez $a1, mismatch_17
li $v0, 1
end_17:
move $t2, $v0
# If local_c2i_A2I_internal_6 goto true__437
sw $t0, -36($fp)
sw $t1, -0($fp)
sw $t2, -32($fp)
bnez $t2, true__437
lw $t0, -48($fp)
# Saves in local_c2i_A2I_internal_10 data_4
la $t0, data_4
lw $t1, -0($fp)
lw $t2, -44($fp)
# local_c2i_A2I_internal_9 <- char = local_c2i_A2I_internal_10
move $t8, $t1
move $t9, $t0
loop_18:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_18
beqz $a1, mismatch_18
seq $v0, $a0, $a1
beqz $v0, mismatch_18
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_18
mismatch_18:
li $v0, 0
j end_18
check_18:
bnez $a1, mismatch_18
li $v0, 1
end_18:
move $t2, $v0
# If local_c2i_A2I_internal_9 goto true__444
sw $t0, -48($fp)
sw $t1, -0($fp)
sw $t2, -44($fp)
bnez $t2, true__444
lw $t0, -60($fp)
# Saves in local_c2i_A2I_internal_13 data_5
la $t0, data_5
lw $t1, -0($fp)
lw $t2, -56($fp)
# local_c2i_A2I_internal_12 <- char = local_c2i_A2I_internal_13
move $t8, $t1
move $t9, $t0
loop_19:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_19
beqz $a1, mismatch_19
seq $v0, $a0, $a1
beqz $v0, mismatch_19
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_19
mismatch_19:
li $v0, 0
j end_19
check_19:
bnez $a1, mismatch_19
li $v0, 1
end_19:
move $t2, $v0
# If local_c2i_A2I_internal_12 goto true__451
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -56($fp)
bnez $t2, true__451
lw $t0, -72($fp)
# Saves in local_c2i_A2I_internal_16 data_6
la $t0, data_6
lw $t1, -0($fp)
lw $t2, -68($fp)
# local_c2i_A2I_internal_15 <- char = local_c2i_A2I_internal_16
move $t8, $t1
move $t9, $t0
loop_20:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_20
beqz $a1, mismatch_20
seq $v0, $a0, $a1
beqz $v0, mismatch_20
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_20
mismatch_20:
li $v0, 0
j end_20
check_20:
bnez $a1, mismatch_20
li $v0, 1
end_20:
move $t2, $v0
# If local_c2i_A2I_internal_15 goto true__458
sw $t0, -72($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
bnez $t2, true__458
lw $t0, -84($fp)
# Saves in local_c2i_A2I_internal_19 data_7
la $t0, data_7
lw $t1, -0($fp)
lw $t2, -80($fp)
# local_c2i_A2I_internal_18 <- char = local_c2i_A2I_internal_19
move $t8, $t1
move $t9, $t0
loop_21:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_21
beqz $a1, mismatch_21
seq $v0, $a0, $a1
beqz $v0, mismatch_21
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_21
mismatch_21:
li $v0, 0
j end_21
check_21:
bnez $a1, mismatch_21
li $v0, 1
end_21:
move $t2, $v0
# If local_c2i_A2I_internal_18 goto true__465
sw $t0, -84($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
bnez $t2, true__465
lw $t0, -96($fp)
# Saves in local_c2i_A2I_internal_22 data_8
la $t0, data_8
lw $t1, -0($fp)
lw $t2, -92($fp)
# local_c2i_A2I_internal_21 <- char = local_c2i_A2I_internal_22
move $t8, $t1
move $t9, $t0
loop_22:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_22
beqz $a1, mismatch_22
seq $v0, $a0, $a1
beqz $v0, mismatch_22
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_22
mismatch_22:
li $v0, 0
j end_22
check_22:
bnez $a1, mismatch_22
li $v0, 1
end_22:
move $t2, $v0
# If local_c2i_A2I_internal_21 goto true__472
sw $t0, -96($fp)
sw $t1, -0($fp)
sw $t2, -92($fp)
bnez $t2, true__472
lw $t0, -108($fp)
# Saves in local_c2i_A2I_internal_25 data_9
la $t0, data_9
lw $t1, -0($fp)
lw $t2, -104($fp)
# local_c2i_A2I_internal_24 <- char = local_c2i_A2I_internal_25
move $t8, $t1
move $t9, $t0
loop_23:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_23
beqz $a1, mismatch_23
seq $v0, $a0, $a1
beqz $v0, mismatch_23
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_23
mismatch_23:
li $v0, 0
j end_23
check_23:
bnez $a1, mismatch_23
li $v0, 1
end_23:
move $t2, $v0
# If local_c2i_A2I_internal_24 goto true__479
sw $t0, -108($fp)
sw $t1, -0($fp)
sw $t2, -104($fp)
bnez $t2, true__479
lw $t0, -120($fp)
# Saves in local_c2i_A2I_internal_28 data_10
la $t0, data_10
lw $t1, -0($fp)
lw $t2, -116($fp)
# local_c2i_A2I_internal_27 <- char = local_c2i_A2I_internal_28
move $t8, $t1
move $t9, $t0
loop_24:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_24
beqz $a1, mismatch_24
seq $v0, $a0, $a1
beqz $v0, mismatch_24
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_24
mismatch_24:
li $v0, 0
j end_24
check_24:
bnez $a1, mismatch_24
li $v0, 1
end_24:
move $t2, $v0
# If local_c2i_A2I_internal_27 goto true__486
sw $t0, -120($fp)
sw $t1, -0($fp)
sw $t2, -116($fp)
bnez $t2, true__486
lw $t0, -4($fp)
lw $t1, -128($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -128($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -128($fp)
# saves the return value
move $t0, $v0
lw $t1, -132($fp)
# Moving 0 to local_c2i_A2I_internal_31
li $t1, 0
sw $t1, -132($fp)
lw $t2, -124($fp)
# Moving local_c2i_A2I_internal_31 to local_c2i_A2I_internal_29
move $t2, $t1
sw $t2, -124($fp)
sw $t0, -128($fp)
sw $t1, -132($fp)
sw $t2, -124($fp)
j end__486
true__486:
lw $t0, -124($fp)
# Moving 9 to local_c2i_A2I_internal_29
li $t0, 9
sw $t0, -124($fp)
sw $t0, -124($fp)
end__486:
lw $t0, -124($fp)
lw $t1, -112($fp)
# Moving local_c2i_A2I_internal_29 to local_c2i_A2I_internal_26
move $t1, $t0
sw $t1, -112($fp)
sw $t0, -124($fp)
sw $t1, -112($fp)
j end__479
true__479:
lw $t0, -112($fp)
# Moving 8 to local_c2i_A2I_internal_26
li $t0, 8
sw $t0, -112($fp)
sw $t0, -112($fp)
end__479:
lw $t0, -112($fp)
lw $t1, -100($fp)
# Moving local_c2i_A2I_internal_26 to local_c2i_A2I_internal_23
move $t1, $t0
sw $t1, -100($fp)
sw $t0, -112($fp)
sw $t1, -100($fp)
j end__472
true__472:
lw $t0, -100($fp)
# Moving 7 to local_c2i_A2I_internal_23
li $t0, 7
sw $t0, -100($fp)
sw $t0, -100($fp)
end__472:
lw $t0, -100($fp)
lw $t1, -88($fp)
# Moving local_c2i_A2I_internal_23 to local_c2i_A2I_internal_20
move $t1, $t0
sw $t1, -88($fp)
sw $t0, -100($fp)
sw $t1, -88($fp)
j end__465
true__465:
lw $t0, -88($fp)
# Moving 6 to local_c2i_A2I_internal_20
li $t0, 6
sw $t0, -88($fp)
sw $t0, -88($fp)
end__465:
lw $t0, -88($fp)
lw $t1, -76($fp)
# Moving local_c2i_A2I_internal_20 to local_c2i_A2I_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -88($fp)
sw $t1, -76($fp)
j end__458
true__458:
lw $t0, -76($fp)
# Moving 5 to local_c2i_A2I_internal_17
li $t0, 5
sw $t0, -76($fp)
sw $t0, -76($fp)
end__458:
lw $t0, -76($fp)
lw $t1, -64($fp)
# Moving local_c2i_A2I_internal_17 to local_c2i_A2I_internal_14
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -76($fp)
sw $t1, -64($fp)
j end__451
true__451:
lw $t0, -64($fp)
# Moving 4 to local_c2i_A2I_internal_14
li $t0, 4
sw $t0, -64($fp)
sw $t0, -64($fp)
end__451:
lw $t0, -64($fp)
lw $t1, -52($fp)
# Moving local_c2i_A2I_internal_14 to local_c2i_A2I_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -64($fp)
sw $t1, -52($fp)
j end__444
true__444:
lw $t0, -52($fp)
# Moving 3 to local_c2i_A2I_internal_11
li $t0, 3
sw $t0, -52($fp)
sw $t0, -52($fp)
end__444:
lw $t0, -52($fp)
lw $t1, -40($fp)
# Moving local_c2i_A2I_internal_11 to local_c2i_A2I_internal_8
move $t1, $t0
sw $t1, -40($fp)
sw $t0, -52($fp)
sw $t1, -40($fp)
j end__437
true__437:
lw $t0, -40($fp)
# Moving 2 to local_c2i_A2I_internal_8
li $t0, 2
sw $t0, -40($fp)
sw $t0, -40($fp)
end__437:
lw $t0, -40($fp)
lw $t1, -28($fp)
# Moving local_c2i_A2I_internal_8 to local_c2i_A2I_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -40($fp)
sw $t1, -28($fp)
j end__430
true__430:
lw $t0, -28($fp)
# Moving 1 to local_c2i_A2I_internal_5
li $t0, 1
sw $t0, -28($fp)
sw $t0, -28($fp)
end__430:
lw $t0, -28($fp)
lw $t1, -16($fp)
# Moving local_c2i_A2I_internal_5 to local_c2i_A2I_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -28($fp)
sw $t1, -16($fp)
j end__423
true__423:
lw $t0, -16($fp)
# Moving 0 to local_c2i_A2I_internal_2
li $t0, 0
sw $t0, -16($fp)
sw $t0, -16($fp)
end__423:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 136
jr $ra


function_i2c_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value i
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_i2c_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_32 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_i2c_A2I_internal_0 <- i = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_0 goto true__549
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__549
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_i2c_A2I_internal_2 <- i = 1
li $t9, 1
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_2 goto true__553
sw $t0, -0($fp)
sw $t1, -16($fp)
bnez $t1, true__553
lw $t0, -0($fp)
lw $t1, -24($fp)
# local_i2c_A2I_internal_4 <- i = 2
li $t9, 2
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_4 goto true__557
sw $t0, -0($fp)
sw $t1, -24($fp)
bnez $t1, true__557
lw $t0, -0($fp)
lw $t1, -32($fp)
# local_i2c_A2I_internal_6 <- i = 3
li $t9, 3
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_6 goto true__561
sw $t0, -0($fp)
sw $t1, -32($fp)
bnez $t1, true__561
lw $t0, -0($fp)
lw $t1, -40($fp)
# local_i2c_A2I_internal_8 <- i = 4
li $t9, 4
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_8 goto true__565
sw $t0, -0($fp)
sw $t1, -40($fp)
bnez $t1, true__565
lw $t0, -0($fp)
lw $t1, -48($fp)
# local_i2c_A2I_internal_10 <- i = 5
li $t9, 5
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_10 goto true__569
sw $t0, -0($fp)
sw $t1, -48($fp)
bnez $t1, true__569
lw $t0, -0($fp)
lw $t1, -56($fp)
# local_i2c_A2I_internal_12 <- i = 6
li $t9, 6
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_12 goto true__573
sw $t0, -0($fp)
sw $t1, -56($fp)
bnez $t1, true__573
lw $t0, -0($fp)
lw $t1, -64($fp)
# local_i2c_A2I_internal_14 <- i = 7
li $t9, 7
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_14 goto true__577
sw $t0, -0($fp)
sw $t1, -64($fp)
bnez $t1, true__577
lw $t0, -0($fp)
lw $t1, -72($fp)
# local_i2c_A2I_internal_16 <- i = 8
li $t9, 8
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_16 goto true__581
sw $t0, -0($fp)
sw $t1, -72($fp)
bnez $t1, true__581
lw $t0, -0($fp)
lw $t1, -80($fp)
# local_i2c_A2I_internal_18 <- i = 9
li $t9, 9
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_18 goto true__585
sw $t0, -0($fp)
sw $t1, -80($fp)
bnez $t1, true__585
lw $t0, -4($fp)
lw $t1, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -92($fp)
# Saves in local_i2c_A2I_internal_21 data_11
la $t1, data_11
lw $t2, -96($fp)
# Moving local_i2c_A2I_internal_21 to local_i2c_A2I_internal_22
move $t2, $t1
sw $t2, -96($fp)
lw $t3, -84($fp)
# Moving local_i2c_A2I_internal_22 to local_i2c_A2I_internal_19
move $t3, $t2
sw $t3, -84($fp)
sw $t0, -88($fp)
sw $t1, -92($fp)
sw $t2, -96($fp)
sw $t3, -84($fp)
j end__585
true__585:
lw $t0, -100($fp)
# Saves in local_i2c_A2I_internal_23 data_12
la $t0, data_12
lw $t1, -84($fp)
# Moving local_i2c_A2I_internal_23 to local_i2c_A2I_internal_19
move $t1, $t0
sw $t1, -84($fp)
sw $t0, -100($fp)
sw $t1, -84($fp)
end__585:
lw $t0, -84($fp)
lw $t1, -76($fp)
# Moving local_i2c_A2I_internal_19 to local_i2c_A2I_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -84($fp)
sw $t1, -76($fp)
j end__581
true__581:
lw $t0, -104($fp)
# Saves in local_i2c_A2I_internal_24 data_13
la $t0, data_13
lw $t1, -76($fp)
# Moving local_i2c_A2I_internal_24 to local_i2c_A2I_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -104($fp)
sw $t1, -76($fp)
end__581:
lw $t0, -76($fp)
lw $t1, -68($fp)
# Moving local_i2c_A2I_internal_17 to local_i2c_A2I_internal_15
move $t1, $t0
sw $t1, -68($fp)
sw $t0, -76($fp)
sw $t1, -68($fp)
j end__577
true__577:
lw $t0, -108($fp)
# Saves in local_i2c_A2I_internal_25 data_14
la $t0, data_14
lw $t1, -68($fp)
# Moving local_i2c_A2I_internal_25 to local_i2c_A2I_internal_15
move $t1, $t0
sw $t1, -68($fp)
sw $t0, -108($fp)
sw $t1, -68($fp)
end__577:
lw $t0, -68($fp)
lw $t1, -60($fp)
# Moving local_i2c_A2I_internal_15 to local_i2c_A2I_internal_13
move $t1, $t0
sw $t1, -60($fp)
sw $t0, -68($fp)
sw $t1, -60($fp)
j end__573
true__573:
lw $t0, -112($fp)
# Saves in local_i2c_A2I_internal_26 data_15
la $t0, data_15
lw $t1, -60($fp)
# Moving local_i2c_A2I_internal_26 to local_i2c_A2I_internal_13
move $t1, $t0
sw $t1, -60($fp)
sw $t0, -112($fp)
sw $t1, -60($fp)
end__573:
lw $t0, -60($fp)
lw $t1, -52($fp)
# Moving local_i2c_A2I_internal_13 to local_i2c_A2I_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -60($fp)
sw $t1, -52($fp)
j end__569
true__569:
lw $t0, -116($fp)
# Saves in local_i2c_A2I_internal_27 data_16
la $t0, data_16
lw $t1, -52($fp)
# Moving local_i2c_A2I_internal_27 to local_i2c_A2I_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -116($fp)
sw $t1, -52($fp)
end__569:
lw $t0, -52($fp)
lw $t1, -44($fp)
# Moving local_i2c_A2I_internal_11 to local_i2c_A2I_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -52($fp)
sw $t1, -44($fp)
j end__565
true__565:
lw $t0, -120($fp)
# Saves in local_i2c_A2I_internal_28 data_17
la $t0, data_17
lw $t1, -44($fp)
# Moving local_i2c_A2I_internal_28 to local_i2c_A2I_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -120($fp)
sw $t1, -44($fp)
end__565:
lw $t0, -44($fp)
lw $t1, -36($fp)
# Moving local_i2c_A2I_internal_9 to local_i2c_A2I_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -44($fp)
sw $t1, -36($fp)
j end__561
true__561:
lw $t0, -124($fp)
# Saves in local_i2c_A2I_internal_29 data_18
la $t0, data_18
lw $t1, -36($fp)
# Moving local_i2c_A2I_internal_29 to local_i2c_A2I_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -124($fp)
sw $t1, -36($fp)
end__561:
lw $t0, -36($fp)
lw $t1, -28($fp)
# Moving local_i2c_A2I_internal_7 to local_i2c_A2I_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -36($fp)
sw $t1, -28($fp)
j end__557
true__557:
lw $t0, -128($fp)
# Saves in local_i2c_A2I_internal_30 data_19
la $t0, data_19
lw $t1, -28($fp)
# Moving local_i2c_A2I_internal_30 to local_i2c_A2I_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -128($fp)
sw $t1, -28($fp)
end__557:
lw $t0, -28($fp)
lw $t1, -20($fp)
# Moving local_i2c_A2I_internal_5 to local_i2c_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -28($fp)
sw $t1, -20($fp)
j end__553
true__553:
lw $t0, -132($fp)
# Saves in local_i2c_A2I_internal_31 data_20
la $t0, data_20
lw $t1, -20($fp)
# Moving local_i2c_A2I_internal_31 to local_i2c_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -132($fp)
sw $t1, -20($fp)
end__553:
lw $t0, -20($fp)
lw $t1, -12($fp)
# Moving local_i2c_A2I_internal_3 to local_i2c_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -20($fp)
sw $t1, -12($fp)
j end__549
true__549:
lw $t0, -136($fp)
# Saves in local_i2c_A2I_internal_32 data_21
la $t0, data_21
lw $t1, -12($fp)
# Moving local_i2c_A2I_internal_32 to local_i2c_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -136($fp)
sw $t1, -12($fp)
end__549:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 140
jr $ra


function_a2i_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_a2i_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_34 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_a2i_A2I_internal_2 <- Type of s
la $t1, type_String
lw $t2, -20($fp)
# Saves in local_a2i_A2I_internal_3 data_0
la $t2, data_0
# local_a2i_A2I_internal_2 <- local_a2i_A2I_internal_2 = local_a2i_A2I_internal_3
move $t8, $t1
move $t9, $t2
loop_25:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_25
beqz $a1, mismatch_25
seq $v0, $a0, $a1
beqz $v0, mismatch_25
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_25
mismatch_25:
li $v0, 0
j end_25
check_25:
bnez $a1, mismatch_25
li $v0, 1
end_25:
move $t1, $v0
# If not local_a2i_A2I_internal_2 goto continue__682
sw $t0, -0($fp)
sw $t1, -16($fp)
sw $t2, -20($fp)
beqz $t1, continue__682
la $a0, dispatch_error
j .raise
continue__682:
lw $t0, -12($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# local_a2i_A2I_internal_0 <- local_a2i_A2I_internal_1 = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_a2i_A2I_internal_0 goto true__693
sw $t0, -12($fp)
sw $t1, -8($fp)
bnez $t1, true__693
lw $t0, -0($fp)
lw $t1, -36($fp)
# local_a2i_A2I_internal_7 <- Type of s
la $t1, type_String
lw $t2, -40($fp)
# Saves in local_a2i_A2I_internal_8 data_0
la $t2, data_0
# local_a2i_A2I_internal_7 <- local_a2i_A2I_internal_7 = local_a2i_A2I_internal_8
move $t8, $t1
move $t9, $t2
loop_26:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_26
beqz $a1, mismatch_26
seq $v0, $a0, $a1
beqz $v0, mismatch_26
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_26
mismatch_26:
li $v0, 0
j end_26
check_26:
bnez $a1, mismatch_26
li $v0, 1
end_26:
move $t1, $v0
# If not local_a2i_A2I_internal_7 goto continue__700
sw $t0, -0($fp)
sw $t1, -36($fp)
sw $t2, -40($fp)
beqz $t1, continue__700
la $a0, dispatch_error
j .raise
continue__700:
lw $t0, -32($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 0
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_a2i_A2I_internal_9 data_22
la $t1, data_22
lw $t2, -28($fp)
# local_a2i_A2I_internal_5 <- local_a2i_A2I_internal_6 = local_a2i_A2I_internal_9
move $t8, $t0
move $t9, $t1
loop_27:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_27
beqz $a1, mismatch_27
seq $v0, $a0, $a1
beqz $v0, mismatch_27
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_27
mismatch_27:
li $v0, 0
j end_27
check_27:
bnez $a1, mismatch_27
li $v0, 1
end_27:
move $t2, $v0
# If local_a2i_A2I_internal_5 goto true__714
sw $t0, -32($fp)
sw $t1, -44($fp)
sw $t2, -28($fp)
bnez $t2, true__714
lw $t0, -0($fp)
lw $t1, -60($fp)
# local_a2i_A2I_internal_13 <- Type of s
la $t1, type_String
lw $t2, -64($fp)
# Saves in local_a2i_A2I_internal_14 data_0
la $t2, data_0
# local_a2i_A2I_internal_13 <- local_a2i_A2I_internal_13 = local_a2i_A2I_internal_14
move $t8, $t1
move $t9, $t2
loop_28:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_28
beqz $a1, mismatch_28
seq $v0, $a0, $a1
beqz $v0, mismatch_28
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_28
mismatch_28:
li $v0, 0
j end_28
check_28:
bnez $a1, mismatch_28
li $v0, 1
end_28:
move $t1, $v0
# If not local_a2i_A2I_internal_13 goto continue__721
sw $t0, -0($fp)
sw $t1, -60($fp)
sw $t2, -64($fp)
beqz $t1, continue__721
la $a0, dispatch_error
j .raise
continue__721:
lw $t0, -56($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 0
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -68($fp)
# Saves in local_a2i_A2I_internal_15 data_23
la $t1, data_23
lw $t2, -52($fp)
# local_a2i_A2I_internal_11 <- local_a2i_A2I_internal_12 = local_a2i_A2I_internal_15
move $t8, $t0
move $t9, $t1
loop_29:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_29
beqz $a1, mismatch_29
seq $v0, $a0, $a1
beqz $v0, mismatch_29
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_29
mismatch_29:
li $v0, 0
j end_29
check_29:
bnez $a1, mismatch_29
li $v0, 1
end_29:
move $t2, $v0
# If local_a2i_A2I_internal_11 goto true__735
sw $t0, -56($fp)
sw $t1, -68($fp)
sw $t2, -52($fp)
bnez $t2, true__735
lw $t0, -4($fp)
lw $t1, -76($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_A2I
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -76($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -76($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Moving local_a2i_A2I_internal_17 to local_a2i_A2I_internal_16
move $t1, $t0
sw $t1, -72($fp)
sw $t0, -76($fp)
sw $t1, -72($fp)
j end__735
true__735:
lw $t0, -0($fp)
lw $t1, -88($fp)
# local_a2i_A2I_internal_20 <- Type of s
la $t1, type_String
lw $t2, -92($fp)
# Saves in local_a2i_A2I_internal_21 data_0
la $t2, data_0
# local_a2i_A2I_internal_20 <- local_a2i_A2I_internal_20 = local_a2i_A2I_internal_21
move $t8, $t1
move $t9, $t2
loop_30:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_30
beqz $a1, mismatch_30
seq $v0, $a0, $a1
beqz $v0, mismatch_30
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_30
mismatch_30:
li $v0, 0
j end_30
check_30:
bnez $a1, mismatch_30
li $v0, 1
end_30:
move $t1, $v0
# If not local_a2i_A2I_internal_20 goto continue__749
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
beqz $t1, continue__749
la $a0, dispatch_error
j .raise
continue__749:
lw $t0, -84($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -84($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -84($fp)
# saves the return value
move $t0, $v0
lw $t1, -80($fp)
# local_a2i_A2I_internal_18 <- local_a2i_A2I_internal_19 - 1
addi $t1, $t0, -1
lw $t2, -0($fp)
lw $t3, -100($fp)
# local_a2i_A2I_internal_23 <- Type of s
la $t3, type_String
lw $t4, -104($fp)
# Saves in local_a2i_A2I_internal_24 data_0
la $t4, data_0
# local_a2i_A2I_internal_23 <- local_a2i_A2I_internal_23 = local_a2i_A2I_internal_24
move $t8, $t3
move $t9, $t4
loop_31:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_31
beqz $a1, mismatch_31
seq $v0, $a0, $a1
beqz $v0, mismatch_31
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_31
mismatch_31:
li $v0, 0
j end_31
check_31:
bnez $a1, mismatch_31
li $v0, 1
end_31:
move $t3, $v0
# If not local_a2i_A2I_internal_23 goto continue__763
sw $t0, -84($fp)
sw $t1, -80($fp)
sw $t2, -0($fp)
sw $t3, -100($fp)
sw $t4, -104($fp)
beqz $t3, continue__763
la $a0, dispatch_error
j .raise
continue__763:
lw $t0, -96($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -80($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -96($fp)
sw $t1, -80($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -108($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_A2I
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -96($fp)
sw $t1, -4($fp)
sw $t2, -108($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -108($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Moving local_a2i_A2I_internal_25 to local_a2i_A2I_internal_16
move $t1, $t0
sw $t1, -72($fp)
sw $t0, -108($fp)
sw $t1, -72($fp)
end__735:
lw $t0, -72($fp)
lw $t1, -48($fp)
# Moving local_a2i_A2I_internal_16 to local_a2i_A2I_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -72($fp)
sw $t1, -48($fp)
j end__714
true__714:
lw $t0, -0($fp)
lw $t1, -124($fp)
# local_a2i_A2I_internal_29 <- Type of s
la $t1, type_String
lw $t2, -128($fp)
# Saves in local_a2i_A2I_internal_30 data_0
la $t2, data_0
# local_a2i_A2I_internal_29 <- local_a2i_A2I_internal_29 = local_a2i_A2I_internal_30
move $t8, $t1
move $t9, $t2
loop_32:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_32
beqz $a1, mismatch_32
seq $v0, $a0, $a1
beqz $v0, mismatch_32
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_32
mismatch_32:
li $v0, 0
j end_32
check_32:
bnez $a1, mismatch_32
li $v0, 1
end_32:
move $t1, $v0
# If not local_a2i_A2I_internal_29 goto continue__787
sw $t0, -0($fp)
sw $t1, -124($fp)
sw $t2, -128($fp)
beqz $t1, continue__787
la $a0, dispatch_error
j .raise
continue__787:
lw $t0, -120($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -120($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -120($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
# local_a2i_A2I_internal_27 <- local_a2i_A2I_internal_28 - 1
addi $t1, $t0, -1
lw $t2, -0($fp)
lw $t3, -136($fp)
# local_a2i_A2I_internal_32 <- Type of s
la $t3, type_String
lw $t4, -140($fp)
# Saves in local_a2i_A2I_internal_33 data_0
la $t4, data_0
# local_a2i_A2I_internal_32 <- local_a2i_A2I_internal_32 = local_a2i_A2I_internal_33
move $t8, $t3
move $t9, $t4
loop_33:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_33
beqz $a1, mismatch_33
seq $v0, $a0, $a1
beqz $v0, mismatch_33
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_33
mismatch_33:
li $v0, 0
j end_33
check_33:
bnez $a1, mismatch_33
li $v0, 1
end_33:
move $t3, $v0
# If not local_a2i_A2I_internal_32 goto continue__801
sw $t0, -120($fp)
sw $t1, -116($fp)
sw $t2, -0($fp)
sw $t3, -136($fp)
sw $t4, -140($fp)
beqz $t3, continue__801
la $a0, dispatch_error
j .raise
continue__801:
lw $t0, -132($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -116($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -116($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -132($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -144($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_A2I
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -4($fp)
sw $t2, -144($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -144($fp)
# saves the return value
move $t0, $v0
lw $t1, -112($fp)
# local_a2i_A2I_internal_26 <- ~local_a2i_A2I_internal_34
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -48($fp)
# Moving local_a2i_A2I_internal_26 to local_a2i_A2I_internal_10
move $t2, $t1
sw $t2, -48($fp)
sw $t0, -144($fp)
sw $t1, -112($fp)
sw $t2, -48($fp)
end__714:
lw $t0, -48($fp)
lw $t1, -24($fp)
# Moving local_a2i_A2I_internal_10 to local_a2i_A2I_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -48($fp)
sw $t1, -24($fp)
j end__693
true__693:
lw $t0, -24($fp)
# Moving 0 to local_a2i_A2I_internal_4
li $t0, 0
sw $t0, -24($fp)
sw $t0, -24($fp)
end__693:
lw $t0, -24($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 148
jr $ra


function_a2i_aux_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_a2i_aux_A2I_int_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_j_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_i_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_16 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_a2i_aux_A2I_int_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_a2i_aux_A2I_internal_3 <- Type of s
la $t2, type_String
lw $t3, -24($fp)
# Saves in local_a2i_aux_A2I_internal_4 data_0
la $t3, data_0
# local_a2i_aux_A2I_internal_3 <- local_a2i_aux_A2I_internal_3 = local_a2i_aux_A2I_internal_4
move $t8, $t2
move $t9, $t3
loop_34:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_34
beqz $a1, mismatch_34
seq $v0, $a0, $a1
beqz $v0, mismatch_34
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_34
mismatch_34:
li $v0, 0
j end_34
check_34:
bnez $a1, mismatch_34
li $v0, 1
end_34:
move $t2, $v0
# If not local_a2i_aux_A2I_internal_3 goto continue__831
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
sw $t3, -24($fp)
beqz $t2, continue__831
la $a0, dispatch_error
j .raise
continue__831:
lw $t0, -16($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_a2i_aux_A2I_internal_2 to local_a2i_aux_A2I_j_1
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -28($fp)
# Moving 0 to local_a2i_aux_A2I_i_5
li $t2, 0
sw $t2, -28($fp)
lw $t3, -32($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t3, $v0
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -28($fp)
sw $t3, -32($fp)
start__844:
lw $t0, -28($fp)
lw $t1, -12($fp)
lw $t2, -36($fp)
# local_a2i_aux_A2I_internal_7 <- local_a2i_aux_A2I_i_5 < local_a2i_aux_A2I_j_1
slt $t2, $t0, $t1
# If not local_a2i_aux_A2I_internal_7 goto end__844
sw $t0, -28($fp)
sw $t1, -12($fp)
sw $t2, -36($fp)
beqz $t2, end__844
lw $t0, -8($fp)
lw $t1, -44($fp)
# local_a2i_aux_A2I_internal_9 <- local_a2i_aux_A2I_int_0 * 10
li $t9, 10
mult $t0, $t9
mflo $t1
lw $t2, -0($fp)
lw $t3, -52($fp)
# local_a2i_aux_A2I_internal_11 <- Type of s
la $t3, type_String
lw $t4, -56($fp)
# Saves in local_a2i_aux_A2I_internal_12 data_0
la $t4, data_0
# local_a2i_aux_A2I_internal_11 <- local_a2i_aux_A2I_internal_11 = local_a2i_aux_A2I_internal_12
move $t8, $t3
move $t9, $t4
loop_35:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_35
beqz $a1, mismatch_35
seq $v0, $a0, $a1
beqz $v0, mismatch_35
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_35
mismatch_35:
li $v0, 0
j end_35
check_35:
bnez $a1, mismatch_35
li $v0, 1
end_35:
move $t3, $v0
# If not local_a2i_aux_A2I_internal_11 goto continue__858
sw $t0, -8($fp)
sw $t1, -44($fp)
sw $t2, -0($fp)
sw $t3, -52($fp)
sw $t4, -56($fp)
beqz $t3, continue__858
la $a0, dispatch_error
j .raise
continue__858:
lw $t0, -48($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -28($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_c2i_A2I
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -4($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
lw $t2, -40($fp)
# local_a2i_aux_A2I_internal_8 <- local_a2i_aux_A2I_internal_9 + local_a2i_aux_A2I_internal_13
add $t2, $t1, $t0
lw $t3, -8($fp)
# Moving local_a2i_aux_A2I_internal_8 to local_a2i_aux_A2I_int_0
move $t3, $t2
sw $t3, -8($fp)
lw $t4, -28($fp)
lw $t5, -64($fp)
# local_a2i_aux_A2I_internal_14 <- local_a2i_aux_A2I_i_5 + 1
addi $t5, $t4, 1
# Moving local_a2i_aux_A2I_internal_14 to local_a2i_aux_A2I_i_5
move $t4, $t5
sw $t4, -28($fp)
lw $t6, -68($fp)
# Moving local_a2i_aux_A2I_internal_14 to local_a2i_aux_A2I_internal_15
move $t6, $t5
sw $t6, -68($fp)
lw $t7, -32($fp)
# Moving local_a2i_aux_A2I_internal_15 to local_a2i_aux_A2I_internal_6
move $t7, $t6
sw $t7, -32($fp)
sw $t0, -60($fp)
sw $t1, -44($fp)
sw $t2, -40($fp)
sw $t3, -8($fp)
sw $t4, -28($fp)
sw $t5, -64($fp)
sw $t6, -68($fp)
sw $t7, -32($fp)
j start__844
end__844:
lw $t0, -8($fp)
lw $t1, -72($fp)
# Moving local_a2i_aux_A2I_int_0 to local_a2i_aux_A2I_internal_16
move $t1, $t0
sw $t1, -72($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -72($fp)
# Removing all locals from stack
addiu $sp, $sp, 76
jr $ra


function_i2a_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value i
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_i2a_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_12 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_i2a_A2I_internal_0 <- i = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_i2a_A2I_internal_0 goto true__889
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__889
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_i2a_A2I_internal_2 <- 0 < i
li $t9, 0
slt $t1, $t9, $t0
# If local_i2a_A2I_internal_2 goto true__893
sw $t0, -0($fp)
sw $t1, -16($fp)
bnez $t1, true__893
lw $t0, -24($fp)
# Saves in local_i2a_A2I_internal_4 data_24
la $t0, data_24
lw $t1, -32($fp)
li $t9, 1
# local_i2a_A2I_internal_6 <- ~1
not $t1, $t9
addi $t1, $t1, 1
lw $t2, -0($fp)
lw $t3, -28($fp)
# local_i2a_A2I_internal_5 <- i * local_i2a_A2I_internal_6
mult $t2, $t1
mflo $t3
lw $t4, -4($fp)
lw $t5, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t4)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_aux_A2I
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -32($fp)
sw $t2, -0($fp)
sw $t3, -28($fp)
sw $t4, -4($fp)
sw $t5, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
lw $t2, -44($fp)
# local_i2a_A2I_internal_9 <- Type of local_i2a_A2I_internal_4
la $t2, type_String
lw $t3, -48($fp)
# Saves in local_i2a_A2I_internal_10 data_0
la $t3, data_0
# local_i2a_A2I_internal_9 <- local_i2a_A2I_internal_9 = local_i2a_A2I_internal_10
move $t8, $t2
move $t9, $t3
loop_36:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_36
beqz $a1, mismatch_36
seq $v0, $a0, $a1
beqz $v0, mismatch_36
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_36
mismatch_36:
li $v0, 0
j end_36
check_36:
bnez $a1, mismatch_36
li $v0, 1
end_36:
move $t2, $v0
# If not local_i2a_A2I_internal_9 goto continue__909
sw $t0, -36($fp)
sw $t1, -24($fp)
sw $t2, -44($fp)
sw $t3, -48($fp)
beqz $t2, continue__909
la $a0, dispatch_error
j .raise
continue__909:
lw $t0, -40($fp)
# Static Dispatch of the method concat
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -36($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -24($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -36($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal function_concat_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_i2a_A2I_internal_8 to local_i2a_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -40($fp)
sw $t1, -20($fp)
j end__893
true__893:
lw $t0, -4($fp)
lw $t1, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_aux_A2I
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -52($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_i2a_A2I_internal_11 to local_i2a_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -52($fp)
sw $t1, -20($fp)
end__893:
lw $t0, -20($fp)
lw $t1, -12($fp)
# Moving local_i2a_A2I_internal_3 to local_i2a_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -20($fp)
sw $t1, -12($fp)
j end__889
true__889:
lw $t0, -56($fp)
# Saves in local_i2a_A2I_internal_12 data_25
la $t0, data_25
lw $t1, -12($fp)
# Moving local_i2a_A2I_internal_12 to local_i2a_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -56($fp)
sw $t1, -12($fp)
end__889:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_i2a_aux_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value i
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_i2a_aux_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_next_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_i2a_aux_A2I_internal_0 <- i = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_i2a_aux_A2I_internal_0 goto true__942
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__942
lw $t0, -0($fp)
lw $t1, -20($fp)
# local_i2a_aux_A2I_internal_3 <- i / 10
li $t9, 10
la $a0, zero_error
beqz $t9, .raise
div $t0, $t9
mflo $t1
lw $t2, -16($fp)
# Moving local_i2a_aux_A2I_internal_3 to local_i2a_aux_A2I_next_2
move $t2, $t1
sw $t2, -16($fp)
lw $t3, -4($fp)
lw $t4, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_aux_A2I
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -16($fp)
sw $t3, -4($fp)
sw $t4, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
lw $t2, -32($fp)
# local_i2a_aux_A2I_internal_6 <- local_i2a_aux_A2I_next_2 * 10
li $t9, 10
mult $t1, $t9
mflo $t2
lw $t3, -0($fp)
lw $t4, -28($fp)
# local_i2a_aux_A2I_internal_5 <- i - local_i2a_aux_A2I_internal_6
sub $t4, $t3, $t2
lw $t5, -4($fp)
lw $t6, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t5)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2c_A2I
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t5, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -16($fp)
sw $t2, -32($fp)
sw $t3, -0($fp)
sw $t4, -28($fp)
sw $t5, -4($fp)
sw $t6, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
lw $t2, -44($fp)
# local_i2a_aux_A2I_internal_9 <- Type of local_i2a_aux_A2I_internal_4
la $t2, type_String
lw $t3, -48($fp)
# Saves in local_i2a_aux_A2I_internal_10 data_0
la $t3, data_0
# local_i2a_aux_A2I_internal_9 <- local_i2a_aux_A2I_internal_9 = local_i2a_aux_A2I_internal_10
move $t8, $t2
move $t9, $t3
loop_37:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_37
beqz $a1, mismatch_37
seq $v0, $a0, $a1
beqz $v0, mismatch_37
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_37
mismatch_37:
li $v0, 0
j end_37
check_37:
bnez $a1, mismatch_37
li $v0, 1
end_37:
move $t2, $v0
# If not local_i2a_aux_A2I_internal_9 goto continue__963
sw $t0, -36($fp)
sw $t1, -24($fp)
sw $t2, -44($fp)
sw $t3, -48($fp)
beqz $t2, continue__963
la $a0, dispatch_error
j .raise
continue__963:
lw $t0, -40($fp)
# Static Dispatch of the method concat
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -36($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -24($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -36($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal function_concat_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_i2a_aux_A2I_internal_8 to local_i2a_aux_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -40($fp)
sw $t1, -12($fp)
j end__942
true__942:
lw $t0, -52($fp)
# Saves in local_i2a_aux_A2I_internal_11 data_26
la $t0, data_26
lw $t1, -12($fp)
# Moving local_i2a_aux_A2I_internal_11 to local_i2a_aux_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -52($fp)
sw $t1, -12($fp)
end__942:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_Main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_avar_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_a_var_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_Main_Main_internal_0 data_27
la $t0, data_27
lw $t1, -0($fp)
# self . char <- SET local_Main_Main_internal_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
# self . avar <- SET local_Main_Main_avar_1
sw $t2, 16($t1)
lw $t3, -12($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t3, $v0
# self . a_var <- SET local_Main_Main_a_var_2
sw $t3, 20($t1)
# self . flag <- SET 1
li $t9, 1
sw $t9, 24($t1)
lw $t4, -16($fp)
# Moving self to local_Main_Main_internal_3
move $t4, $t1
sw $t4, -16($fp)
move $v0, $t4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
sw $t4, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_menu_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_menu_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_53 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_menu_Main_internal_0 data_28
la $t0, data_28
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_menu_Main_avar_2 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Saves in local_menu_Main_internal_4 data_29
la $t1, data_29
lw $t2, -0($fp)
lw $t3, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Saves in local_menu_Main_internal_6 data_30
la $t1, data_30
lw $t2, -0($fp)
lw $t3, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
sw $t3, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -36($fp)
# local_menu_Main_avar_8 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -0($fp)
sw $t2, -36($fp)
sw $t3, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_menu_Main_internal_10 data_31
la $t1, data_31
lw $t2, -0($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -44($fp)
sw $t2, -0($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Saves in local_menu_Main_internal_12 data_32
la $t1, data_32
lw $t2, -0($fp)
lw $t3, -56($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
sw $t2, -0($fp)
sw $t3, -56($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -60($fp)
# local_menu_Main_avar_14 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
sw $t3, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -68($fp)
# Saves in local_menu_Main_internal_16 data_33
la $t1, data_33
lw $t2, -0($fp)
lw $t3, -72($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -68($fp)
sw $t2, -0($fp)
sw $t3, -72($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -72($fp)
# saves the return value
move $t0, $v0
lw $t1, -76($fp)
# Saves in local_menu_Main_internal_18 data_34
la $t1, data_34
lw $t2, -0($fp)
lw $t3, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -72($fp)
sw $t1, -76($fp)
sw $t2, -0($fp)
sw $t3, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -84($fp)
# local_menu_Main_avar_20 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -80($fp)
sw $t1, -0($fp)
sw $t2, -84($fp)
sw $t3, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -92($fp)
# Saves in local_menu_Main_internal_22 data_35
la $t1, data_35
lw $t2, -0($fp)
lw $t3, -96($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -88($fp)
sw $t1, -92($fp)
sw $t2, -0($fp)
sw $t3, -96($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -100($fp)
# Saves in local_menu_Main_internal_24 data_36
la $t1, data_36
lw $t2, -0($fp)
lw $t3, -104($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -96($fp)
sw $t1, -100($fp)
sw $t2, -0($fp)
sw $t3, -104($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -104($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -108($fp)
# local_menu_Main_avar_26 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -112($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -104($fp)
sw $t1, -0($fp)
sw $t2, -108($fp)
sw $t3, -112($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -112($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
# Saves in local_menu_Main_internal_28 data_37
la $t1, data_37
lw $t2, -0($fp)
lw $t3, -120($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -112($fp)
sw $t1, -116($fp)
sw $t2, -0($fp)
sw $t3, -120($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -120($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
# Saves in local_menu_Main_internal_30 data_38
la $t1, data_38
lw $t2, -0($fp)
lw $t3, -128($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -120($fp)
sw $t1, -124($fp)
sw $t2, -0($fp)
sw $t3, -128($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -128($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -132($fp)
# local_menu_Main_avar_32 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -128($fp)
sw $t1, -0($fp)
sw $t2, -132($fp)
sw $t3, -136($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -140($fp)
# Saves in local_menu_Main_internal_34 data_39
la $t1, data_39
lw $t2, -0($fp)
lw $t3, -144($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -136($fp)
sw $t1, -140($fp)
sw $t2, -0($fp)
sw $t3, -144($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -144($fp)
# saves the return value
move $t0, $v0
lw $t1, -148($fp)
# Saves in local_menu_Main_internal_36 data_40
la $t1, data_40
lw $t2, -0($fp)
lw $t3, -152($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -144($fp)
sw $t1, -148($fp)
sw $t2, -0($fp)
sw $t3, -152($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -152($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -156($fp)
# local_menu_Main_avar_38 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -160($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -152($fp)
sw $t1, -0($fp)
sw $t2, -156($fp)
sw $t3, -160($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -160($fp)
# saves the return value
move $t0, $v0
lw $t1, -164($fp)
# Saves in local_menu_Main_internal_40 data_41
la $t1, data_41
lw $t2, -0($fp)
lw $t3, -168($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -160($fp)
sw $t1, -164($fp)
sw $t2, -0($fp)
sw $t3, -168($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -168($fp)
# saves the return value
move $t0, $v0
lw $t1, -172($fp)
# Saves in local_menu_Main_internal_42 data_42
la $t1, data_42
lw $t2, -0($fp)
lw $t3, -176($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -168($fp)
sw $t1, -172($fp)
sw $t2, -0($fp)
sw $t3, -176($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -176($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -180($fp)
# local_menu_Main_avar_44 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -184($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -176($fp)
sw $t1, -0($fp)
sw $t2, -180($fp)
sw $t3, -184($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -184($fp)
# saves the return value
move $t0, $v0
lw $t1, -188($fp)
# Saves in local_menu_Main_internal_46 data_43
la $t1, data_43
lw $t2, -0($fp)
lw $t3, -192($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -184($fp)
sw $t1, -188($fp)
sw $t2, -0($fp)
sw $t3, -192($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -192($fp)
# saves the return value
move $t0, $v0
lw $t1, -196($fp)
# Saves in local_menu_Main_internal_48 data_44
la $t1, data_44
lw $t2, -0($fp)
lw $t3, -200($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -192($fp)
sw $t1, -196($fp)
sw $t2, -0($fp)
sw $t3, -200($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -200($fp)
# saves the return value
move $t0, $v0
lw $t1, -204($fp)
# Saves in local_menu_Main_internal_50 data_45
la $t1, data_45
lw $t2, -0($fp)
lw $t3, -208($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -200($fp)
sw $t1, -204($fp)
sw $t2, -0($fp)
sw $t3, -208($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -208($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -212($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -208($fp)
sw $t1, -0($fp)
sw $t2, -212($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -212($fp)
# saves the return value
move $t0, $v0
lw $t1, -216($fp)
# Moving local_menu_Main_internal_52 to local_menu_Main_internal_53
move $t1, $t0
sw $t1, -216($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -212($fp)
sw $t1, -216($fp)
# Removing all locals from stack
addiu $sp, $sp, 220
jr $ra


function_prompt_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_prompt_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_5 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_prompt_Main_internal_0 data_46
la $t0, data_46
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Saves in local_prompt_Main_internal_2 data_47
la $t1, data_47
lw $t2, -0($fp)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_prompt_Main_internal_4 to local_prompt_Main_internal_5
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_get_int_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_get_int_Main_z_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_s_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_7 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A2I
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t0)
lw $t1, -4($fp)
# Moving local_get_int_Main_internal_1 to local_get_int_Main_z_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_prompt_Main
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_get_int_Main_internal_3 to local_get_int_Main_s_2
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -4($fp)
lw $t3, -24($fp)
# local_get_int_Main_internal_5 <- Type of local_get_int_Main_z_0
lw $t3, 0($t2)
lw $t4, -28($fp)
# Saves in local_get_int_Main_internal_6 data_0
la $t4, data_0
# local_get_int_Main_internal_5 <- local_get_int_Main_internal_5 = local_get_int_Main_internal_6
move $t8, $t3
move $t9, $t4
loop_38:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_38
beqz $a1, mismatch_38
seq $v0, $a0, $a1
beqz $v0, mismatch_38
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_38
mismatch_38:
li $v0, 0
j end_38
check_38:
bnez $a1, mismatch_38
li $v0, 1
end_38:
move $t3, $v0
# If not local_get_int_Main_internal_5 goto continue__1216
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -4($fp)
sw $t3, -24($fp)
sw $t4, -28($fp)
beqz $t3, continue__1216
la $a0, dispatch_error
j .raise
continue__1216:
lw $t0, -4($fp)
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_A2I
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -12($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -20($fp)
sw $t2, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_get_int_Main_internal_4 to local_get_int_Main_internal_7
move $t1, $t0
sw $t1, -32($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -32($fp)
# Removing all locals from stack
addiu $sp, $sp, 36
jr $ra


function_is_even_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_is_even_Main_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_10 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# Moving num to local_is_even_Main_x_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -12($fp)
# local_is_even_Main_internal_1 <- local_is_even_Main_x_0 < 0
li $t9, 0
slt $t2, $t1, $t9
# If local_is_even_Main_internal_1 goto true__1236
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t2, true__1236
lw $t0, -8($fp)
lw $t1, -20($fp)
# local_is_even_Main_internal_3 <- 0 = local_is_even_Main_x_0
li $t9, 0
seq $t1, $t9, $t0
# If local_is_even_Main_internal_3 goto true__1240
sw $t0, -8($fp)
sw $t1, -20($fp)
bnez $t1, true__1240
lw $t0, -8($fp)
lw $t1, -28($fp)
# local_is_even_Main_internal_5 <- 1 = local_is_even_Main_x_0
li $t9, 1
seq $t1, $t9, $t0
# If local_is_even_Main_internal_5 goto true__1244
sw $t0, -8($fp)
sw $t1, -28($fp)
bnez $t1, true__1244
lw $t0, -8($fp)
lw $t1, -36($fp)
# local_is_even_Main_internal_7 <- local_is_even_Main_x_0 - 2
addi $t1, $t0, -2
lw $t2, -4($fp)
lw $t3, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_is_even_Main
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -36($fp)
sw $t2, -4($fp)
sw $t3, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_is_even_Main_internal_8 to local_is_even_Main_internal_6
move $t1, $t0
sw $t1, -32($fp)
sw $t0, -40($fp)
sw $t1, -32($fp)
j end__1244
true__1244:
lw $t0, -32($fp)
# Moving 0 to local_is_even_Main_internal_6
li $t0, 0
sw $t0, -32($fp)
sw $t0, -32($fp)
end__1244:
lw $t0, -32($fp)
lw $t1, -24($fp)
# Moving local_is_even_Main_internal_6 to local_is_even_Main_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -32($fp)
sw $t1, -24($fp)
j end__1240
true__1240:
lw $t0, -24($fp)
# Moving 1 to local_is_even_Main_internal_4
li $t0, 1
sw $t0, -24($fp)
sw $t0, -24($fp)
end__1240:
lw $t0, -24($fp)
lw $t1, -16($fp)
# Moving local_is_even_Main_internal_4 to local_is_even_Main_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -24($fp)
sw $t1, -16($fp)
j end__1236
true__1236:
lw $t0, -8($fp)
lw $t1, -44($fp)
# local_is_even_Main_internal_9 <- ~local_is_even_Main_x_0
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -4($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_is_even_Main
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -44($fp)
sw $t2, -4($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# Moving local_is_even_Main_internal_10 to local_is_even_Main_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -48($fp)
sw $t1, -16($fp)
end__1236:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 52
jr $ra


function_class_type_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value var
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_class_type_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_e_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_c_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_d_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_b_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_a_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_o_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_26 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -12($fp)
# local_class_type_Main_internal_1 <- Type of var
lw $t1, 0($t0)
lw $t2, -16($fp)
# Saves in local_class_type_Main_internal_2 data_0
la $t2, data_0
# local_class_type_Main_internal_1 <- local_class_type_Main_internal_1 = local_class_type_Main_internal_2
move $t8, $t1
move $t9, $t2
loop_39:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_39
beqz $a1, mismatch_39
seq $v0, $a0, $a1
beqz $v0, mismatch_39
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_39
mismatch_39:
li $v0, 0
j end_39
check_39:
bnez $a1, mismatch_39
li $v0, 1
end_39:
move $t1, $v0
# If local_class_type_Main_internal_1 goto error__1278
sw $t0, -0($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
bnez $t1, error__1278
lw $t0, -0($fp)
lw $t1, -20($fp)
la $t9, type_E
lw $v0, 8($t0)
loop_40:
move $t8, $v0
beqz $t8, false_40
lw $v1, 0($t8)
beq $t9, $v1, true_40
lw $v0, 4($t8)
j loop_40
true_40:
li $t1, 1
j end_40
false_40:
li $t1, 0
end_40:
# If not local_class_type_Main_internal_3 goto next__1284_0
sw $t0, -0($fp)
sw $t1, -20($fp)
beqz $t1, next__1284_0
lw $t0, -0($fp)
lw $t1, -24($fp)
# Moving var to local_class_type_Main_e_4
move $t1, $t0
sw $t1, -24($fp)
lw $t2, -28($fp)
# Saves in local_class_type_Main_internal_5 data_48
la $t2, data_48
lw $t3, -4($fp)
lw $t4, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -24($fp)
sw $t2, -28($fp)
sw $t3, -4($fp)
sw $t4, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_6 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -32($fp)
sw $t1, -8($fp)
j end__1278
next__1284_0:
lw $t0, -0($fp)
lw $t1, -36($fp)
la $t9, type_C
lw $v0, 8($t0)
loop_41:
move $t8, $v0
beqz $t8, false_41
lw $v1, 0($t8)
beq $t9, $v1, true_41
lw $v0, 4($t8)
j loop_41
true_41:
li $t1, 1
j end_41
false_41:
li $t1, 0
end_41:
# If not local_class_type_Main_internal_7 goto next__1299_1
sw $t0, -0($fp)
sw $t1, -36($fp)
beqz $t1, next__1299_1
lw $t0, -0($fp)
lw $t1, -40($fp)
# Moving var to local_class_type_Main_c_8
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -44($fp)
# Saves in local_class_type_Main_internal_9 data_49
la $t2, data_49
lw $t3, -4($fp)
lw $t4, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -44($fp)
sw $t3, -4($fp)
sw $t4, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_10 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -48($fp)
sw $t1, -8($fp)
j end__1278
next__1299_1:
lw $t0, -0($fp)
lw $t1, -52($fp)
la $t9, type_D
lw $v0, 8($t0)
loop_42:
move $t8, $v0
beqz $t8, false_42
lw $v1, 0($t8)
beq $t9, $v1, true_42
lw $v0, 4($t8)
j loop_42
true_42:
li $t1, 1
j end_42
false_42:
li $t1, 0
end_42:
# If not local_class_type_Main_internal_11 goto next__1314_2
sw $t0, -0($fp)
sw $t1, -52($fp)
beqz $t1, next__1314_2
lw $t0, -0($fp)
lw $t1, -56($fp)
# Moving var to local_class_type_Main_d_12
move $t1, $t0
sw $t1, -56($fp)
lw $t2, -60($fp)
# Saves in local_class_type_Main_internal_13 data_50
la $t2, data_50
lw $t3, -4($fp)
lw $t4, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -56($fp)
sw $t2, -60($fp)
sw $t3, -4($fp)
sw $t4, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_14 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -64($fp)
sw $t1, -8($fp)
j end__1278
next__1314_2:
lw $t0, -0($fp)
lw $t1, -68($fp)
la $t9, type_B
lw $v0, 8($t0)
loop_43:
move $t8, $v0
beqz $t8, false_43
lw $v1, 0($t8)
beq $t9, $v1, true_43
lw $v0, 4($t8)
j loop_43
true_43:
li $t1, 1
j end_43
false_43:
li $t1, 0
end_43:
# If not local_class_type_Main_internal_15 goto next__1329_3
sw $t0, -0($fp)
sw $t1, -68($fp)
beqz $t1, next__1329_3
lw $t0, -0($fp)
lw $t1, -72($fp)
# Moving var to local_class_type_Main_b_16
move $t1, $t0
sw $t1, -72($fp)
lw $t2, -76($fp)
# Saves in local_class_type_Main_internal_17 data_51
la $t2, data_51
lw $t3, -4($fp)
lw $t4, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -72($fp)
sw $t2, -76($fp)
sw $t3, -4($fp)
sw $t4, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_18 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -80($fp)
sw $t1, -8($fp)
j end__1278
next__1329_3:
lw $t0, -0($fp)
lw $t1, -84($fp)
la $t9, type_A
lw $v0, 8($t0)
loop_44:
move $t8, $v0
beqz $t8, false_44
lw $v1, 0($t8)
beq $t9, $v1, true_44
lw $v0, 4($t8)
j loop_44
true_44:
li $t1, 1
j end_44
false_44:
li $t1, 0
end_44:
# If not local_class_type_Main_internal_19 goto next__1344_4
sw $t0, -0($fp)
sw $t1, -84($fp)
beqz $t1, next__1344_4
lw $t0, -0($fp)
lw $t1, -88($fp)
# Moving var to local_class_type_Main_a_20
move $t1, $t0
sw $t1, -88($fp)
lw $t2, -92($fp)
# Saves in local_class_type_Main_internal_21 data_52
la $t2, data_52
lw $t3, -4($fp)
lw $t4, -96($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
sw $t3, -4($fp)
sw $t4, -96($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_22 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -96($fp)
sw $t1, -8($fp)
j end__1278
next__1344_4:
lw $t0, -0($fp)
lw $t1, -100($fp)
la $t9, type_Object
lw $v0, 8($t0)
loop_45:
move $t8, $v0
beqz $t8, false_45
lw $v1, 0($t8)
beq $t9, $v1, true_45
lw $v0, 4($t8)
j loop_45
true_45:
li $t1, 1
j end_45
false_45:
li $t1, 0
end_45:
# If not local_class_type_Main_internal_23 goto next__1359_5
sw $t0, -0($fp)
sw $t1, -100($fp)
beqz $t1, next__1359_5
lw $t0, -0($fp)
lw $t1, -104($fp)
# Moving var to local_class_type_Main_o_24
move $t1, $t0
sw $t1, -104($fp)
lw $t2, -108($fp)
# Saves in local_class_type_Main_internal_25 data_53
la $t2, data_53
lw $t3, -4($fp)
lw $t4, -112($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -104($fp)
sw $t2, -108($fp)
sw $t3, -4($fp)
sw $t4, -112($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -112($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_26 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -112($fp)
sw $t1, -8($fp)
j end__1278
next__1359_5:
la $a0, case_error
j .raise
error__1278:
la $a0, case_void_error
j .raise
end__1278:
lw $t0, -8($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 116
jr $ra


function_print_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value var
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_Main_z_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A2I
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t0)
lw $t1, -8($fp)
# Moving local_print_Main_internal_1 to local_print_Main_z_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
lw $t3, -20($fp)
# local_print_Main_internal_3 <- Type of var
lw $t3, 0($t2)
lw $t4, -24($fp)
# Saves in local_print_Main_internal_4 data_0
la $t4, data_0
# local_print_Main_internal_3 <- local_print_Main_internal_3 = local_print_Main_internal_4
move $t8, $t3
move $t9, $t4
loop_46:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_46
beqz $a1, mismatch_46
seq $v0, $a0, $a1
beqz $v0, mismatch_46
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_46
mismatch_46:
li $v0, 0
j end_46
check_46:
bnez $a1, mismatch_46
li $v0, 1
end_46:
move $t3, $v0
# If not local_print_Main_internal_3 goto continue__1390
sw $t0, -12($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
sw $t3, -20($fp)
sw $t4, -24($fp)
beqz $t3, continue__1390
la $a0, dispatch_error
j .raise
continue__1390:
lw $t0, -0($fp)
lw $t1, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
lw $t2, -32($fp)
# local_print_Main_internal_6 <- Type of local_print_Main_z_0
lw $t2, 0($t1)
lw $t3, -36($fp)
# Saves in local_print_Main_internal_7 data_0
la $t3, data_0
# local_print_Main_internal_6 <- local_print_Main_internal_6 = local_print_Main_internal_7
move $t8, $t2
move $t9, $t3
loop_47:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_47
beqz $a1, mismatch_47
seq $v0, $a0, $a1
beqz $v0, mismatch_47
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_47
mismatch_47:
li $v0, 0
j end_47
check_47:
bnez $a1, mismatch_47
li $v0, 1
end_47:
move $t2, $v0
# If not local_print_Main_internal_6 goto continue__1402
sw $t0, -16($fp)
sw $t1, -8($fp)
sw $t2, -32($fp)
sw $t3, -36($fp)
beqz $t2, continue__1402
la $a0, dispatch_error
j .raise
continue__1402:
lw $t0, -8($fp)
lw $t1, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_A2I
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -16($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -28($fp)
sw $t2, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -4($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_print_Main_internal_9 data_54
la $t1, data_54
lw $t2, -4($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -44($fp)
sw $t2, -4($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_print_Main_internal_10 to local_print_Main_internal_11
move $t1, $t0
sw $t1, -52($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_flag_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_53 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_54 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_55 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_56 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_57 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_58 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_59 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_60 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_61 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_62 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_63 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_64 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_65 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_66 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_67 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_68 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_x_69 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_x_70 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_71 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_72 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_73 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_74 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_75 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_76 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_77 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_78 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_r_79 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_80 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_81 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_82 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_83 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_84 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_85 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_86 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_87 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_88 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_89 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_90 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_91 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_92 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_93 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_94 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_95 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_96 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_97 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_98 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_99 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_100 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_101 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_102 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_103 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_104 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_105 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_106 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_107 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_108 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_109 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_110 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_111 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_112 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_113 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_114 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_115 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_116 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_117 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_118 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_119 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_120 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_121 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_122 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_123 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_124 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_125 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_126 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_127 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_128 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_129 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_130 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_131 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_132 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_133 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_134 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_135 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_136 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_137 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_138 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_139 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_140 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_141 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_142 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_143 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_144 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_145 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_146 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_147 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_148 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_149 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_150 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_151 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_152 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_153 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_154 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_155 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_156 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_157 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_158 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_159 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_160 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_161 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_162 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_163 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_164 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_165 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_var_166 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_167 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_168 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_169 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_170 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_171 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_172 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_173 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_174 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_175 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_176 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_177 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_178 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_c_179 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_180 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_181 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_182 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_183 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_184 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_185 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_186 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_187 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_188 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_189 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_190 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_191 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_192 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_193 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_194 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_o_195 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_196 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_197 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_198 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_199 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_200 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_201 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_202 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_203 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_204 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_205 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_206 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_207 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_208 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_209 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_var_210 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_211 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_212 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_213 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_214 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_215 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_216 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_217 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_218 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_219 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_0
sw $t0, 16($t1)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
start__1431:
lw $t0, -0($fp)
lw $t1, -12($fp)
# local_main_Main_flag_2 <- GET self . flag
lw $t1, 24($t0)
# If not local_main_Main_flag_2 goto end__1431
sw $t0, -0($fp)
sw $t1, -12($fp)
beqz $t1, end__1431
lw $t0, -16($fp)
# Saves in local_main_Main_internal_3 data_55
la $t0, data_55
lw $t1, -0($fp)
lw $t2, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -24($fp)
# local_main_Main_avar_5 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -0($fp)
sw $t2, -24($fp)
sw $t3, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -32($fp)
# local_main_Main_avar_7 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -40($fp)
# local_main_Main_internal_9 <- Type of local_main_Main_avar_7
lw $t3, 0($t2)
lw $t4, -44($fp)
# Saves in local_main_Main_internal_10 data_0
la $t4, data_0
# local_main_Main_internal_9 <- local_main_Main_internal_9 = local_main_Main_internal_10
move $t8, $t3
move $t9, $t4
loop_48:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_48
beqz $a1, mismatch_48
seq $v0, $a0, $a1
beqz $v0, mismatch_48
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_48
mismatch_48:
li $v0, 0
j end_48
check_48:
bnez $a1, mismatch_48
li $v0, 1
end_48:
move $t3, $v0
# If not local_main_Main_internal_9 goto continue__1455
sw $t0, -28($fp)
sw $t1, -0($fp)
sw $t2, -32($fp)
sw $t3, -40($fp)
sw $t4, -44($fp)
beqz $t3, continue__1455
la $a0, dispatch_error
j .raise
continue__1455:
lw $t0, -32($fp)
lw $t1, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_is_even_Main
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -0($fp)
sw $t2, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
# If local_main_Main_internal_11 goto true__1468
sw $t0, -48($fp)
bnez $t0, true__1468
lw $t0, -56($fp)
# Saves in local_main_Main_internal_13 data_56
la $t0, data_56
lw $t1, -0($fp)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_main_Main_internal_14 to local_main_Main_internal_12
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -60($fp)
sw $t1, -52($fp)
j end__1468
true__1468:
lw $t0, -64($fp)
# Saves in local_main_Main_internal_15 data_57
la $t0, data_57
lw $t1, -0($fp)
lw $t2, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_main_Main_internal_16 to local_main_Main_internal_12
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -68($fp)
sw $t1, -52($fp)
end__1468:
lw $t0, -0($fp)
lw $t1, -72($fp)
# local_main_Main_avar_17 <- GET self . avar
lw $t1, 16($t0)
lw $t2, -76($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_class_type_Main
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -72($fp)
sw $t2, -76($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -76($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_menu_Main
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -76($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . char <- SET local_main_Main_internal_19
sw $t0, 12($t1)
lw $t2, -88($fp)
# local_main_Main_char_21 <- GET self . char
lw $t2, 12($t1)
lw $t3, -92($fp)
# Saves in local_main_Main_internal_22 data_58
la $t3, data_58
lw $t4, -84($fp)
# local_main_Main_internal_20 <- local_main_Main_char_21 = local_main_Main_internal_22
move $t8, $t2
move $t9, $t3
loop_49:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_49
beqz $a1, mismatch_49
seq $v0, $a0, $a1
beqz $v0, mismatch_49
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_49
mismatch_49:
li $v0, 0
j end_49
check_49:
bnez $a1, mismatch_49
li $v0, 1
end_49:
move $t4, $v0
# If local_main_Main_internal_20 goto true__1506
sw $t0, -80($fp)
sw $t1, -0($fp)
sw $t2, -88($fp)
sw $t3, -92($fp)
sw $t4, -84($fp)
bnez $t4, true__1506
lw $t0, -0($fp)
lw $t1, -104($fp)
# local_main_Main_char_25 <- GET self . char
lw $t1, 12($t0)
lw $t2, -108($fp)
# Saves in local_main_Main_internal_26 data_59
la $t2, data_59
lw $t3, -100($fp)
# local_main_Main_internal_24 <- local_main_Main_char_25 = local_main_Main_internal_26
move $t8, $t1
move $t9, $t2
loop_50:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_50
beqz $a1, mismatch_50
seq $v0, $a0, $a1
beqz $v0, mismatch_50
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_50
mismatch_50:
li $v0, 0
j end_50
check_50:
bnez $a1, mismatch_50
li $v0, 1
end_50:
move $t3, $v0
# If local_main_Main_internal_24 goto true__1515
sw $t0, -0($fp)
sw $t1, -104($fp)
sw $t2, -108($fp)
sw $t3, -100($fp)
bnez $t3, true__1515
lw $t0, -0($fp)
lw $t1, -120($fp)
# local_main_Main_char_29 <- GET self . char
lw $t1, 12($t0)
lw $t2, -124($fp)
# Saves in local_main_Main_internal_30 data_60
la $t2, data_60
lw $t3, -116($fp)
# local_main_Main_internal_28 <- local_main_Main_char_29 = local_main_Main_internal_30
move $t8, $t1
move $t9, $t2
loop_51:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_51
beqz $a1, mismatch_51
seq $v0, $a0, $a1
beqz $v0, mismatch_51
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_51
mismatch_51:
li $v0, 0
j end_51
check_51:
bnez $a1, mismatch_51
li $v0, 1
end_51:
move $t3, $v0
# If local_main_Main_internal_28 goto true__1524
sw $t0, -0($fp)
sw $t1, -120($fp)
sw $t2, -124($fp)
sw $t3, -116($fp)
bnez $t3, true__1524
lw $t0, -0($fp)
lw $t1, -136($fp)
# local_main_Main_char_33 <- GET self . char
lw $t1, 12($t0)
lw $t2, -140($fp)
# Saves in local_main_Main_internal_34 data_61
la $t2, data_61
lw $t3, -132($fp)
# local_main_Main_internal_32 <- local_main_Main_char_33 = local_main_Main_internal_34
move $t8, $t1
move $t9, $t2
loop_52:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_52
beqz $a1, mismatch_52
seq $v0, $a0, $a1
beqz $v0, mismatch_52
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_52
mismatch_52:
li $v0, 0
j end_52
check_52:
bnez $a1, mismatch_52
li $v0, 1
end_52:
move $t3, $v0
# If local_main_Main_internal_32 goto true__1533
sw $t0, -0($fp)
sw $t1, -136($fp)
sw $t2, -140($fp)
sw $t3, -132($fp)
bnez $t3, true__1533
lw $t0, -0($fp)
lw $t1, -152($fp)
# local_main_Main_char_37 <- GET self . char
lw $t1, 12($t0)
lw $t2, -156($fp)
# Saves in local_main_Main_internal_38 data_62
la $t2, data_62
lw $t3, -148($fp)
# local_main_Main_internal_36 <- local_main_Main_char_37 = local_main_Main_internal_38
move $t8, $t1
move $t9, $t2
loop_53:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_53
beqz $a1, mismatch_53
seq $v0, $a0, $a1
beqz $v0, mismatch_53
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_53
mismatch_53:
li $v0, 0
j end_53
check_53:
bnez $a1, mismatch_53
li $v0, 1
end_53:
move $t3, $v0
# If local_main_Main_internal_36 goto true__1542
sw $t0, -0($fp)
sw $t1, -152($fp)
sw $t2, -156($fp)
sw $t3, -148($fp)
bnez $t3, true__1542
lw $t0, -0($fp)
lw $t1, -168($fp)
# local_main_Main_char_41 <- GET self . char
lw $t1, 12($t0)
lw $t2, -172($fp)
# Saves in local_main_Main_internal_42 data_63
la $t2, data_63
lw $t3, -164($fp)
# local_main_Main_internal_40 <- local_main_Main_char_41 = local_main_Main_internal_42
move $t8, $t1
move $t9, $t2
loop_54:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_54
beqz $a1, mismatch_54
seq $v0, $a0, $a1
beqz $v0, mismatch_54
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_54
mismatch_54:
li $v0, 0
j end_54
check_54:
bnez $a1, mismatch_54
li $v0, 1
end_54:
move $t3, $v0
# If local_main_Main_internal_40 goto true__1551
sw $t0, -0($fp)
sw $t1, -168($fp)
sw $t2, -172($fp)
sw $t3, -164($fp)
bnez $t3, true__1551
lw $t0, -0($fp)
lw $t1, -184($fp)
# local_main_Main_char_45 <- GET self . char
lw $t1, 12($t0)
lw $t2, -188($fp)
# Saves in local_main_Main_internal_46 data_64
la $t2, data_64
lw $t3, -180($fp)
# local_main_Main_internal_44 <- local_main_Main_char_45 = local_main_Main_internal_46
move $t8, $t1
move $t9, $t2
loop_55:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_55
beqz $a1, mismatch_55
seq $v0, $a0, $a1
beqz $v0, mismatch_55
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_55
mismatch_55:
li $v0, 0
j end_55
check_55:
bnez $a1, mismatch_55
li $v0, 1
end_55:
move $t3, $v0
# If local_main_Main_internal_44 goto true__1560
sw $t0, -0($fp)
sw $t1, -184($fp)
sw $t2, -188($fp)
sw $t3, -180($fp)
bnez $t3, true__1560
lw $t0, -0($fp)
lw $t1, -200($fp)
# local_main_Main_char_49 <- GET self . char
lw $t1, 12($t0)
lw $t2, -204($fp)
# Saves in local_main_Main_internal_50 data_65
la $t2, data_65
lw $t3, -196($fp)
# local_main_Main_internal_48 <- local_main_Main_char_49 = local_main_Main_internal_50
move $t8, $t1
move $t9, $t2
loop_56:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_56
beqz $a1, mismatch_56
seq $v0, $a0, $a1
beqz $v0, mismatch_56
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_56
mismatch_56:
li $v0, 0
j end_56
check_56:
bnez $a1, mismatch_56
li $v0, 1
end_56:
move $t3, $v0
# If local_main_Main_internal_48 goto true__1569
sw $t0, -0($fp)
sw $t1, -200($fp)
sw $t2, -204($fp)
sw $t3, -196($fp)
bnez $t3, true__1569
lw $t0, -0($fp)
lw $t1, -216($fp)
# local_main_Main_char_53 <- GET self . char
lw $t1, 12($t0)
lw $t2, -220($fp)
# Saves in local_main_Main_internal_54 data_66
la $t2, data_66
lw $t3, -212($fp)
# local_main_Main_internal_52 <- local_main_Main_char_53 = local_main_Main_internal_54
move $t8, $t1
move $t9, $t2
loop_57:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_57
beqz $a1, mismatch_57
seq $v0, $a0, $a1
beqz $v0, mismatch_57
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_57
mismatch_57:
li $v0, 0
j end_57
check_57:
bnez $a1, mismatch_57
li $v0, 1
end_57:
move $t3, $v0
# If local_main_Main_internal_52 goto true__1578
sw $t0, -0($fp)
sw $t1, -216($fp)
sw $t2, -220($fp)
sw $t3, -212($fp)
bnez $t3, true__1578
lw $t0, -0($fp)
lw $t1, -232($fp)
# local_main_Main_char_57 <- GET self . char
lw $t1, 12($t0)
lw $t2, -236($fp)
# Saves in local_main_Main_internal_58 data_67
la $t2, data_67
lw $t3, -228($fp)
# local_main_Main_internal_56 <- local_main_Main_char_57 = local_main_Main_internal_58
move $t8, $t1
move $t9, $t2
loop_58:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_58
beqz $a1, mismatch_58
seq $v0, $a0, $a1
beqz $v0, mismatch_58
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_58
mismatch_58:
li $v0, 0
j end_58
check_58:
bnez $a1, mismatch_58
li $v0, 1
end_58:
move $t3, $v0
# If local_main_Main_internal_56 goto true__1587
sw $t0, -0($fp)
sw $t1, -232($fp)
sw $t2, -236($fp)
sw $t3, -228($fp)
bnez $t3, true__1587
lw $t0, -244($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -244($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -244($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -248($fp)
# local_main_Main_avar_61 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -256($fp)
# local_main_Main_internal_63 <- Type of local_main_Main_avar_61
lw $t3, 0($t2)
lw $t4, -260($fp)
# Saves in local_main_Main_internal_64 data_0
la $t4, data_0
# local_main_Main_internal_63 <- local_main_Main_internal_63 = local_main_Main_internal_64
move $t8, $t3
move $t9, $t4
loop_59:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_59
beqz $a1, mismatch_59
seq $v0, $a0, $a1
beqz $v0, mismatch_59
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_59
mismatch_59:
li $v0, 0
j end_59
check_59:
bnez $a1, mismatch_59
li $v0, 1
end_59:
move $t3, $v0
# If not local_main_Main_internal_63 goto continue__1597
sw $t0, -244($fp)
sw $t1, -0($fp)
sw $t2, -248($fp)
sw $t3, -256($fp)
sw $t4, -260($fp)
beqz $t3, continue__1597
la $a0, dispatch_error
j .raise
continue__1597:
lw $t0, -248($fp)
lw $t1, -252($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -248($fp)
sw $t1, -252($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -252($fp)
# saves the return value
move $t0, $v0
lw $t1, -244($fp)
lw $t2, -268($fp)
# local_main_Main_internal_66 <- Type of local_main_Main_internal_60
lw $t2, 0($t1)
lw $t3, -272($fp)
# Saves in local_main_Main_internal_67 data_0
la $t3, data_0
# local_main_Main_internal_66 <- local_main_Main_internal_66 = local_main_Main_internal_67
move $t8, $t2
move $t9, $t3
loop_60:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_60
beqz $a1, mismatch_60
seq $v0, $a0, $a1
beqz $v0, mismatch_60
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_60
mismatch_60:
li $v0, 0
j end_60
check_60:
bnez $a1, mismatch_60
li $v0, 1
end_60:
move $t2, $v0
# If not local_main_Main_internal_66 goto continue__1609
sw $t0, -252($fp)
sw $t1, -244($fp)
sw $t2, -268($fp)
sw $t3, -272($fp)
beqz $t2, continue__1609
la $a0, dispatch_error
j .raise
continue__1609:
lw $t0, -244($fp)
lw $t1, -264($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method1_A
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -252($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -244($fp)
sw $t1, -264($fp)
sw $t2, -252($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -264($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_65
sw $t0, 16($t1)
lw $t2, -240($fp)
# Moving local_main_Main_internal_65 to local_main_Main_internal_59
move $t2, $t0
sw $t2, -240($fp)
sw $t0, -264($fp)
sw $t1, -0($fp)
sw $t2, -240($fp)
j end__1587
true__1587:
lw $t0, -0($fp)
# self . flag <- SET 0
li $t9, 0
sw $t9, 24($t0)
lw $t1, -240($fp)
# Moving 0 to local_main_Main_internal_59
li $t1, 0
sw $t1, -240($fp)
sw $t0, -0($fp)
sw $t1, -240($fp)
end__1587:
lw $t0, -240($fp)
lw $t1, -224($fp)
# Moving local_main_Main_internal_59 to local_main_Main_internal_55
move $t1, $t0
sw $t1, -224($fp)
sw $t0, -240($fp)
sw $t1, -224($fp)
j end__1578
true__1578:
lw $t0, -276($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -276($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -276($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_68
sw $t0, 16($t1)
lw $t2, -224($fp)
# Moving local_main_Main_internal_68 to local_main_Main_internal_55
move $t2, $t0
sw $t2, -224($fp)
sw $t0, -276($fp)
sw $t1, -0($fp)
sw $t2, -224($fp)
end__1578:
lw $t0, -224($fp)
lw $t1, -208($fp)
# Moving local_main_Main_internal_55 to local_main_Main_internal_51
move $t1, $t0
sw $t1, -208($fp)
sw $t0, -224($fp)
sw $t1, -208($fp)
j end__1569
true__1569:
lw $t0, -284($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t0, $v0
lw $t1, -280($fp)
# Moving local_main_Main_x_70 to local_main_Main_x_69
move $t1, $t0
sw $t1, -280($fp)
lw $t2, -288($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t2)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -284($fp)
sw $t1, -280($fp)
sw $t2, -288($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -288($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -292($fp)
# local_main_Main_avar_72 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -300($fp)
# local_main_Main_internal_74 <- Type of local_main_Main_avar_72
lw $t3, 0($t2)
lw $t4, -304($fp)
# Saves in local_main_Main_internal_75 data_0
la $t4, data_0
# local_main_Main_internal_74 <- local_main_Main_internal_74 = local_main_Main_internal_75
move $t8, $t3
move $t9, $t4
loop_61:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_61
beqz $a1, mismatch_61
seq $v0, $a0, $a1
beqz $v0, mismatch_61
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_61
mismatch_61:
li $v0, 0
j end_61
check_61:
bnez $a1, mismatch_61
li $v0, 1
end_61:
move $t3, $v0
# If not local_main_Main_internal_74 goto continue__1650
sw $t0, -288($fp)
sw $t1, -0($fp)
sw $t2, -292($fp)
sw $t3, -300($fp)
sw $t4, -304($fp)
beqz $t3, continue__1650
la $a0, dispatch_error
j .raise
continue__1650:
lw $t0, -292($fp)
lw $t1, -296($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -292($fp)
sw $t1, -296($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -296($fp)
# saves the return value
move $t0, $v0
lw $t1, -288($fp)
lw $t2, -312($fp)
# local_main_Main_internal_77 <- Type of local_main_Main_internal_71
lw $t2, 0($t1)
lw $t3, -316($fp)
# Saves in local_main_Main_internal_78 data_0
la $t3, data_0
# local_main_Main_internal_77 <- local_main_Main_internal_77 = local_main_Main_internal_78
move $t8, $t2
move $t9, $t3
loop_62:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_62
beqz $a1, mismatch_62
seq $v0, $a0, $a1
beqz $v0, mismatch_62
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_62
mismatch_62:
li $v0, 0
j end_62
check_62:
bnez $a1, mismatch_62
li $v0, 1
end_62:
move $t2, $v0
# If not local_main_Main_internal_77 goto continue__1662
sw $t0, -296($fp)
sw $t1, -288($fp)
sw $t2, -312($fp)
sw $t3, -316($fp)
beqz $t2, continue__1662
la $a0, dispatch_error
j .raise
continue__1662:
lw $t0, -288($fp)
lw $t1, -308($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method6_E
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -296($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -288($fp)
sw $t1, -308($fp)
sw $t2, -296($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -308($fp)
# saves the return value
move $t0, $v0
lw $t1, -284($fp)
# Moving local_main_Main_internal_76 to local_main_Main_x_70
move $t1, $t0
sw $t1, -284($fp)
lw $t2, -0($fp)
lw $t3, -328($fp)
# local_main_Main_avar_81 <- GET self . avar
lw $t3, 16($t2)
lw $t4, -336($fp)
# local_main_Main_internal_83 <- Type of local_main_Main_avar_81
lw $t4, 0($t3)
lw $t5, -340($fp)
# Saves in local_main_Main_internal_84 data_0
la $t5, data_0
# local_main_Main_internal_83 <- local_main_Main_internal_83 = local_main_Main_internal_84
move $t8, $t4
move $t9, $t5
loop_63:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_63
beqz $a1, mismatch_63
seq $v0, $a0, $a1
beqz $v0, mismatch_63
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_63
mismatch_63:
li $v0, 0
j end_63
check_63:
bnez $a1, mismatch_63
li $v0, 1
end_63:
move $t4, $v0
# If not local_main_Main_internal_83 goto continue__1679
sw $t0, -308($fp)
sw $t1, -284($fp)
sw $t2, -0($fp)
sw $t3, -328($fp)
sw $t4, -336($fp)
sw $t5, -340($fp)
beqz $t4, continue__1679
la $a0, dispatch_error
j .raise
continue__1679:
lw $t0, -328($fp)
lw $t1, -332($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -328($fp)
sw $t1, -332($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -332($fp)
# saves the return value
move $t0, $v0
lw $t1, -284($fp)
lw $t2, -352($fp)
# local_main_Main_internal_87 <- Type of local_main_Main_x_70
lw $t2, 0($t1)
lw $t3, -356($fp)
# Saves in local_main_Main_internal_88 data_0
la $t3, data_0
# local_main_Main_internal_87 <- local_main_Main_internal_87 = local_main_Main_internal_88
move $t8, $t2
move $t9, $t3
loop_64:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_64
beqz $a1, mismatch_64
seq $v0, $a0, $a1
beqz $v0, mismatch_64
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_64
mismatch_64:
li $v0, 0
j end_64
check_64:
bnez $a1, mismatch_64
li $v0, 1
end_64:
move $t2, $v0
# If not local_main_Main_internal_87 goto continue__1692
sw $t0, -332($fp)
sw $t1, -284($fp)
sw $t2, -352($fp)
sw $t3, -356($fp)
beqz $t2, continue__1692
la $a0, dispatch_error
j .raise
continue__1692:
lw $t0, -284($fp)
lw $t1, -348($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -284($fp)
sw $t1, -348($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -348($fp)
# saves the return value
move $t0, $v0
lw $t1, -344($fp)
# local_main_Main_internal_85 <- local_main_Main_internal_86 * 8
li $t9, 8
mult $t0, $t9
mflo $t1
lw $t2, -332($fp)
lw $t3, -324($fp)
# local_main_Main_internal_80 <- local_main_Main_internal_82 - local_main_Main_internal_85
sub $t3, $t2, $t1
lw $t4, -320($fp)
# Moving local_main_Main_internal_80 to local_main_Main_r_79
move $t4, $t3
sw $t4, -320($fp)
lw $t5, -360($fp)
# Saves in local_main_Main_internal_89 data_68
la $t5, data_68
lw $t6, -0($fp)
lw $t7, -364($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t6)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t6, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -348($fp)
sw $t1, -344($fp)
sw $t2, -332($fp)
sw $t3, -324($fp)
sw $t4, -320($fp)
sw $t5, -360($fp)
sw $t6, -0($fp)
sw $t7, -364($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -364($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -368($fp)
# local_main_Main_avar_91 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -372($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -364($fp)
sw $t1, -0($fp)
sw $t2, -368($fp)
sw $t3, -372($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -372($fp)
# saves the return value
move $t0, $v0
lw $t1, -376($fp)
# Saves in local_main_Main_internal_93 data_69
la $t1, data_69
lw $t2, -0($fp)
lw $t3, -380($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -372($fp)
sw $t1, -376($fp)
sw $t2, -0($fp)
sw $t3, -380($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -380($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -384($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t3, -284($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -380($fp)
sw $t1, -0($fp)
sw $t2, -384($fp)
sw $t3, -284($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -384($fp)
# saves the return value
move $t0, $v0
lw $t1, -388($fp)
# Saves in local_main_Main_internal_96 data_70
la $t1, data_70
lw $t2, -0($fp)
lw $t3, -392($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -384($fp)
sw $t1, -388($fp)
sw $t2, -0($fp)
sw $t3, -392($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -392($fp)
# saves the return value
move $t0, $v0
lw $t1, -400($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A2I
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t1, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t1)
lw $t2, -396($fp)
# Moving local_main_Main_internal_99 to local_main_Main_a_98
move $t2, $t1
sw $t2, -396($fp)
lw $t3, -408($fp)
# local_main_Main_internal_101 <- Type of local_main_Main_a_98
lw $t3, 0($t2)
lw $t4, -412($fp)
# Saves in local_main_Main_internal_102 data_0
la $t4, data_0
# local_main_Main_internal_101 <- local_main_Main_internal_101 = local_main_Main_internal_102
move $t8, $t3
move $t9, $t4
loop_65:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_65
beqz $a1, mismatch_65
seq $v0, $a0, $a1
beqz $v0, mismatch_65
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_65
mismatch_65:
li $v0, 0
j end_65
check_65:
bnez $a1, mismatch_65
li $v0, 1
end_65:
move $t3, $v0
# If not local_main_Main_internal_101 goto continue__1744
sw $t0, -392($fp)
sw $t1, -400($fp)
sw $t2, -396($fp)
sw $t3, -408($fp)
sw $t4, -412($fp)
beqz $t3, continue__1744
la $a0, dispatch_error
j .raise
continue__1744:
lw $t0, -396($fp)
lw $t1, -404($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_A2I
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -320($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -396($fp)
sw $t1, -404($fp)
sw $t2, -320($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -404($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -416($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -404($fp)
sw $t1, -0($fp)
sw $t2, -416($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -416($fp)
# saves the return value
move $t0, $v0
lw $t1, -420($fp)
# Saves in local_main_Main_internal_104 data_71
la $t1, data_71
lw $t2, -0($fp)
lw $t3, -424($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -416($fp)
sw $t1, -420($fp)
sw $t2, -0($fp)
sw $t3, -424($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -424($fp)
# saves the return value
move $t0, $v0
lw $t1, -428($fp)
# Moving local_main_Main_internal_105 to local_main_Main_internal_106
move $t1, $t0
sw $t1, -428($fp)
lw $t2, -432($fp)
# Moving local_main_Main_internal_106 to local_main_Main_internal_107
move $t2, $t1
sw $t2, -432($fp)
lw $t3, -284($fp)
lw $t4, -0($fp)
# self . avar <- SET local_main_Main_x_70
sw $t3, 16($t4)
lw $t5, -436($fp)
# Moving local_main_Main_x_70 to local_main_Main_internal_108
move $t5, $t3
sw $t5, -436($fp)
lw $t6, -208($fp)
# Moving local_main_Main_internal_108 to local_main_Main_internal_51
move $t6, $t5
sw $t6, -208($fp)
sw $t0, -424($fp)
sw $t1, -428($fp)
sw $t2, -432($fp)
sw $t3, -284($fp)
sw $t4, -0($fp)
sw $t5, -436($fp)
sw $t6, -208($fp)
end__1569:
lw $t0, -208($fp)
lw $t1, -192($fp)
# Moving local_main_Main_internal_51 to local_main_Main_internal_47
move $t1, $t0
sw $t1, -192($fp)
sw $t0, -208($fp)
sw $t1, -192($fp)
j end__1560
true__1560:
lw $t0, -440($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t0)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -440($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -440($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -444($fp)
# local_main_Main_avar_110 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -452($fp)
# local_main_Main_internal_112 <- Type of local_main_Main_avar_110
lw $t3, 0($t2)
lw $t4, -456($fp)
# Saves in local_main_Main_internal_113 data_0
la $t4, data_0
# local_main_Main_internal_112 <- local_main_Main_internal_112 = local_main_Main_internal_113
move $t8, $t3
move $t9, $t4
loop_66:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_66
beqz $a1, mismatch_66
seq $v0, $a0, $a1
beqz $v0, mismatch_66
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_66
mismatch_66:
li $v0, 0
j end_66
check_66:
bnez $a1, mismatch_66
li $v0, 1
end_66:
move $t3, $v0
# If not local_main_Main_internal_112 goto continue__1784
sw $t0, -440($fp)
sw $t1, -0($fp)
sw $t2, -444($fp)
sw $t3, -452($fp)
sw $t4, -456($fp)
beqz $t3, continue__1784
la $a0, dispatch_error
j .raise
continue__1784:
lw $t0, -444($fp)
lw $t1, -448($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -444($fp)
sw $t1, -448($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -448($fp)
# saves the return value
move $t0, $v0
lw $t1, -440($fp)
lw $t2, -464($fp)
# local_main_Main_internal_115 <- Type of local_main_Main_internal_109
lw $t2, 0($t1)
lw $t3, -468($fp)
# Saves in local_main_Main_internal_116 data_0
la $t3, data_0
# local_main_Main_internal_115 <- local_main_Main_internal_115 = local_main_Main_internal_116
move $t8, $t2
move $t9, $t3
loop_67:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_67
beqz $a1, mismatch_67
seq $v0, $a0, $a1
beqz $v0, mismatch_67
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_67
mismatch_67:
li $v0, 0
j end_67
check_67:
bnez $a1, mismatch_67
li $v0, 1
end_67:
move $t2, $v0
# If not local_main_Main_internal_115 goto continue__1796
sw $t0, -448($fp)
sw $t1, -440($fp)
sw $t2, -464($fp)
sw $t3, -468($fp)
beqz $t2, continue__1796
la $a0, dispatch_error
j .raise
continue__1796:
lw $t0, -440($fp)
lw $t1, -460($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method7_D
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -448($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -440($fp)
sw $t1, -460($fp)
sw $t2, -448($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -460($fp)
# saves the return value
move $t0, $v0
# If local_main_Main_internal_114 goto true__1806
sw $t0, -460($fp)
bnez $t0, true__1806
lw $t0, -476($fp)
# Saves in local_main_Main_internal_118 data_72
la $t0, data_72
lw $t1, -0($fp)
lw $t2, -480($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -476($fp)
sw $t1, -0($fp)
sw $t2, -480($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -480($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -484($fp)
# local_main_Main_avar_120 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -488($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -480($fp)
sw $t1, -0($fp)
sw $t2, -484($fp)
sw $t3, -488($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -488($fp)
# saves the return value
move $t0, $v0
lw $t1, -492($fp)
# Saves in local_main_Main_internal_122 data_73
la $t1, data_73
lw $t2, -0($fp)
lw $t3, -496($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -488($fp)
sw $t1, -492($fp)
sw $t2, -0($fp)
sw $t3, -496($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -496($fp)
# saves the return value
move $t0, $v0
lw $t1, -500($fp)
# Moving local_main_Main_internal_123 to local_main_Main_internal_124
move $t1, $t0
sw $t1, -500($fp)
lw $t2, -472($fp)
# Moving local_main_Main_internal_124 to local_main_Main_internal_117
move $t2, $t1
sw $t2, -472($fp)
sw $t0, -496($fp)
sw $t1, -500($fp)
sw $t2, -472($fp)
j end__1806
true__1806:
lw $t0, -504($fp)
# Saves in local_main_Main_internal_125 data_74
la $t0, data_74
lw $t1, -0($fp)
lw $t2, -508($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -504($fp)
sw $t1, -0($fp)
sw $t2, -508($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -508($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -512($fp)
# local_main_Main_avar_127 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -516($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -508($fp)
sw $t1, -0($fp)
sw $t2, -512($fp)
sw $t3, -516($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -516($fp)
# saves the return value
move $t0, $v0
lw $t1, -520($fp)
# Saves in local_main_Main_internal_129 data_75
la $t1, data_75
lw $t2, -0($fp)
lw $t3, -524($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -516($fp)
sw $t1, -520($fp)
sw $t2, -0($fp)
sw $t3, -524($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -524($fp)
# saves the return value
move $t0, $v0
lw $t1, -528($fp)
# Moving local_main_Main_internal_130 to local_main_Main_internal_131
move $t1, $t0
sw $t1, -528($fp)
lw $t2, -472($fp)
# Moving local_main_Main_internal_131 to local_main_Main_internal_117
move $t2, $t1
sw $t2, -472($fp)
sw $t0, -524($fp)
sw $t1, -528($fp)
sw $t2, -472($fp)
end__1806:
lw $t0, -472($fp)
lw $t1, -192($fp)
# Moving local_main_Main_internal_117 to local_main_Main_internal_47
move $t1, $t0
sw $t1, -192($fp)
sw $t0, -472($fp)
sw $t1, -192($fp)
end__1560:
lw $t0, -192($fp)
lw $t1, -176($fp)
# Moving local_main_Main_internal_47 to local_main_Main_internal_43
move $t1, $t0
sw $t1, -176($fp)
sw $t0, -192($fp)
sw $t1, -176($fp)
j end__1551
true__1551:
lw $t0, -532($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -532($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -532($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -536($fp)
# local_main_Main_avar_133 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -544($fp)
# local_main_Main_internal_135 <- Type of local_main_Main_avar_133
lw $t3, 0($t2)
lw $t4, -548($fp)
# Saves in local_main_Main_internal_136 data_0
la $t4, data_0
# local_main_Main_internal_135 <- local_main_Main_internal_135 = local_main_Main_internal_136
move $t8, $t3
move $t9, $t4
loop_68:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_68
beqz $a1, mismatch_68
seq $v0, $a0, $a1
beqz $v0, mismatch_68
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_68
mismatch_68:
li $v0, 0
j end_68
check_68:
bnez $a1, mismatch_68
li $v0, 1
end_68:
move $t3, $v0
# If not local_main_Main_internal_135 goto continue__1870
sw $t0, -532($fp)
sw $t1, -0($fp)
sw $t2, -536($fp)
sw $t3, -544($fp)
sw $t4, -548($fp)
beqz $t3, continue__1870
la $a0, dispatch_error
j .raise
continue__1870:
lw $t0, -536($fp)
lw $t1, -540($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -536($fp)
sw $t1, -540($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -540($fp)
# saves the return value
move $t0, $v0
lw $t1, -532($fp)
lw $t2, -556($fp)
# local_main_Main_internal_138 <- Type of local_main_Main_internal_132
lw $t2, 0($t1)
lw $t3, -560($fp)
# Saves in local_main_Main_internal_139 data_0
la $t3, data_0
# local_main_Main_internal_138 <- local_main_Main_internal_138 = local_main_Main_internal_139
move $t8, $t2
move $t9, $t3
loop_69:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_69
beqz $a1, mismatch_69
seq $v0, $a0, $a1
beqz $v0, mismatch_69
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_69
mismatch_69:
li $v0, 0
j end_69
check_69:
bnez $a1, mismatch_69
li $v0, 1
end_69:
move $t2, $v0
# If not local_main_Main_internal_138 goto continue__1882
sw $t0, -540($fp)
sw $t1, -532($fp)
sw $t2, -556($fp)
sw $t3, -560($fp)
beqz $t2, continue__1882
la $a0, dispatch_error
j .raise
continue__1882:
lw $t0, -552($fp)
# Static Dispatch of the method method5
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -540($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -532($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -552($fp)
sw $t1, -540($fp)
sw $t2, -532($fp)
# This function will consume the arguments
jal function_method5_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -552($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_137
sw $t0, 16($t1)
lw $t2, -176($fp)
# Moving local_main_Main_internal_137 to local_main_Main_internal_43
move $t2, $t0
sw $t2, -176($fp)
sw $t0, -552($fp)
sw $t1, -0($fp)
sw $t2, -176($fp)
end__1551:
lw $t0, -176($fp)
lw $t1, -160($fp)
# Moving local_main_Main_internal_43 to local_main_Main_internal_39
move $t1, $t0
sw $t1, -160($fp)
sw $t0, -176($fp)
sw $t1, -160($fp)
j end__1542
true__1542:
lw $t0, -564($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -564($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -564($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -568($fp)
# local_main_Main_avar_141 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -576($fp)
# local_main_Main_internal_143 <- Type of local_main_Main_avar_141
lw $t3, 0($t2)
lw $t4, -580($fp)
# Saves in local_main_Main_internal_144 data_0
la $t4, data_0
# local_main_Main_internal_143 <- local_main_Main_internal_143 = local_main_Main_internal_144
move $t8, $t3
move $t9, $t4
loop_70:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_70
beqz $a1, mismatch_70
seq $v0, $a0, $a1
beqz $v0, mismatch_70
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_70
mismatch_70:
li $v0, 0
j end_70
check_70:
bnez $a1, mismatch_70
li $v0, 1
end_70:
move $t3, $v0
# If not local_main_Main_internal_143 goto continue__1906
sw $t0, -564($fp)
sw $t1, -0($fp)
sw $t2, -568($fp)
sw $t3, -576($fp)
sw $t4, -580($fp)
beqz $t3, continue__1906
la $a0, dispatch_error
j .raise
continue__1906:
lw $t0, -568($fp)
lw $t1, -572($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -568($fp)
sw $t1, -572($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -572($fp)
# saves the return value
move $t0, $v0
lw $t1, -564($fp)
lw $t2, -588($fp)
# local_main_Main_internal_146 <- Type of local_main_Main_internal_140
lw $t2, 0($t1)
lw $t3, -592($fp)
# Saves in local_main_Main_internal_147 data_0
la $t3, data_0
# local_main_Main_internal_146 <- local_main_Main_internal_146 = local_main_Main_internal_147
move $t8, $t2
move $t9, $t3
loop_71:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_71
beqz $a1, mismatch_71
seq $v0, $a0, $a1
beqz $v0, mismatch_71
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_71
mismatch_71:
li $v0, 0
j end_71
check_71:
bnez $a1, mismatch_71
li $v0, 1
end_71:
move $t2, $v0
# If not local_main_Main_internal_146 goto continue__1918
sw $t0, -572($fp)
sw $t1, -564($fp)
sw $t2, -588($fp)
sw $t3, -592($fp)
beqz $t2, continue__1918
la $a0, dispatch_error
j .raise
continue__1918:
lw $t0, -584($fp)
# Static Dispatch of the method method5
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -572($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -564($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -584($fp)
sw $t1, -572($fp)
sw $t2, -564($fp)
# This function will consume the arguments
jal function_method5_B
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -584($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_145
sw $t0, 16($t1)
lw $t2, -160($fp)
# Moving local_main_Main_internal_145 to local_main_Main_internal_39
move $t2, $t0
sw $t2, -160($fp)
sw $t0, -584($fp)
sw $t1, -0($fp)
sw $t2, -160($fp)
end__1542:
lw $t0, -160($fp)
lw $t1, -144($fp)
# Moving local_main_Main_internal_39 to local_main_Main_internal_35
move $t1, $t0
sw $t1, -144($fp)
sw $t0, -160($fp)
sw $t1, -144($fp)
j end__1533
true__1533:
lw $t0, -596($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -596($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -596($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -600($fp)
# local_main_Main_avar_149 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -608($fp)
# local_main_Main_internal_151 <- Type of local_main_Main_avar_149
lw $t3, 0($t2)
lw $t4, -612($fp)
# Saves in local_main_Main_internal_152 data_0
la $t4, data_0
# local_main_Main_internal_151 <- local_main_Main_internal_151 = local_main_Main_internal_152
move $t8, $t3
move $t9, $t4
loop_72:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_72
beqz $a1, mismatch_72
seq $v0, $a0, $a1
beqz $v0, mismatch_72
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_72
mismatch_72:
li $v0, 0
j end_72
check_72:
bnez $a1, mismatch_72
li $v0, 1
end_72:
move $t3, $v0
# If not local_main_Main_internal_151 goto continue__1942
sw $t0, -596($fp)
sw $t1, -0($fp)
sw $t2, -600($fp)
sw $t3, -608($fp)
sw $t4, -612($fp)
beqz $t3, continue__1942
la $a0, dispatch_error
j .raise
continue__1942:
lw $t0, -600($fp)
lw $t1, -604($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -600($fp)
sw $t1, -604($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -604($fp)
# saves the return value
move $t0, $v0
lw $t1, -596($fp)
lw $t2, -620($fp)
# local_main_Main_internal_154 <- Type of local_main_Main_internal_148
lw $t2, 0($t1)
lw $t3, -624($fp)
# Saves in local_main_Main_internal_155 data_0
la $t3, data_0
# local_main_Main_internal_154 <- local_main_Main_internal_154 = local_main_Main_internal_155
move $t8, $t2
move $t9, $t3
loop_73:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_73
beqz $a1, mismatch_73
seq $v0, $a0, $a1
beqz $v0, mismatch_73
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_73
mismatch_73:
li $v0, 0
j end_73
check_73:
bnez $a1, mismatch_73
li $v0, 1
end_73:
move $t2, $v0
# If not local_main_Main_internal_154 goto continue__1954
sw $t0, -604($fp)
sw $t1, -596($fp)
sw $t2, -620($fp)
sw $t3, -624($fp)
beqz $t2, continue__1954
la $a0, dispatch_error
j .raise
continue__1954:
lw $t0, -616($fp)
# Static Dispatch of the method method5
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -604($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -596($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -616($fp)
sw $t1, -604($fp)
sw $t2, -596($fp)
# This function will consume the arguments
jal function_method5_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -616($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_153
sw $t0, 16($t1)
lw $t2, -144($fp)
# Moving local_main_Main_internal_153 to local_main_Main_internal_35
move $t2, $t0
sw $t2, -144($fp)
sw $t0, -616($fp)
sw $t1, -0($fp)
sw $t2, -144($fp)
end__1533:
lw $t0, -144($fp)
lw $t1, -128($fp)
# Moving local_main_Main_internal_35 to local_main_Main_internal_31
move $t1, $t0
sw $t1, -128($fp)
sw $t0, -144($fp)
sw $t1, -128($fp)
j end__1524
true__1524:
lw $t0, -628($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -628($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -628($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -632($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_get_int_Main
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -628($fp)
sw $t1, -0($fp)
sw $t2, -632($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -632($fp)
# saves the return value
move $t0, $v0
lw $t1, -628($fp)
lw $t2, -640($fp)
# local_main_Main_internal_159 <- Type of local_main_Main_internal_156
lw $t2, 0($t1)
lw $t3, -644($fp)
# Saves in local_main_Main_internal_160 data_0
la $t3, data_0
# local_main_Main_internal_159 <- local_main_Main_internal_159 = local_main_Main_internal_160
move $t8, $t2
move $t9, $t3
loop_74:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_74
beqz $a1, mismatch_74
seq $v0, $a0, $a1
beqz $v0, mismatch_74
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_74
mismatch_74:
li $v0, 0
j end_74
check_74:
bnez $a1, mismatch_74
li $v0, 1
end_74:
move $t2, $v0
# If not local_main_Main_internal_159 goto continue__1979
sw $t0, -632($fp)
sw $t1, -628($fp)
sw $t2, -640($fp)
sw $t3, -644($fp)
beqz $t2, continue__1979
la $a0, dispatch_error
j .raise
continue__1979:
lw $t0, -628($fp)
lw $t1, -636($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -632($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -628($fp)
sw $t1, -636($fp)
sw $t2, -632($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -636($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . a_var <- SET local_main_Main_internal_158
sw $t0, 20($t1)
lw $t2, -648($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t2)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -636($fp)
sw $t1, -0($fp)
sw $t2, -648($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -648($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -652($fp)
# local_main_Main_avar_162 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -660($fp)
# local_main_Main_internal_164 <- Type of local_main_Main_avar_162
lw $t3, 0($t2)
lw $t4, -664($fp)
# Saves in local_main_Main_internal_165 data_0
la $t4, data_0
# local_main_Main_internal_164 <- local_main_Main_internal_164 = local_main_Main_internal_165
move $t8, $t3
move $t9, $t4
loop_75:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_75
beqz $a1, mismatch_75
seq $v0, $a0, $a1
beqz $v0, mismatch_75
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_75
mismatch_75:
li $v0, 0
j end_75
check_75:
bnez $a1, mismatch_75
li $v0, 1
end_75:
move $t3, $v0
# If not local_main_Main_internal_164 goto continue__1998
sw $t0, -648($fp)
sw $t1, -0($fp)
sw $t2, -652($fp)
sw $t3, -660($fp)
sw $t4, -664($fp)
beqz $t3, continue__1998
la $a0, dispatch_error
j .raise
continue__1998:
lw $t0, -652($fp)
lw $t1, -656($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -652($fp)
sw $t1, -656($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -656($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -668($fp)
# local_main_Main_a_var_166 <- GET self . a_var
lw $t2, 20($t1)
lw $t3, -676($fp)
# local_main_Main_internal_168 <- Type of local_main_Main_a_var_166
lw $t3, 0($t2)
lw $t4, -680($fp)
# Saves in local_main_Main_internal_169 data_0
la $t4, data_0
# local_main_Main_internal_168 <- local_main_Main_internal_168 = local_main_Main_internal_169
move $t8, $t3
move $t9, $t4
loop_76:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_76
beqz $a1, mismatch_76
seq $v0, $a0, $a1
beqz $v0, mismatch_76
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_76
mismatch_76:
li $v0, 0
j end_76
check_76:
bnez $a1, mismatch_76
li $v0, 1
end_76:
move $t3, $v0
# If not local_main_Main_internal_168 goto continue__2012
sw $t0, -656($fp)
sw $t1, -0($fp)
sw $t2, -668($fp)
sw $t3, -676($fp)
sw $t4, -680($fp)
beqz $t3, continue__2012
la $a0, dispatch_error
j .raise
continue__2012:
lw $t0, -668($fp)
lw $t1, -672($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -668($fp)
sw $t1, -672($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -672($fp)
# saves the return value
move $t0, $v0
lw $t1, -648($fp)
lw $t2, -688($fp)
# local_main_Main_internal_171 <- Type of local_main_Main_internal_161
lw $t2, 0($t1)
lw $t3, -692($fp)
# Saves in local_main_Main_internal_172 data_0
la $t3, data_0
# local_main_Main_internal_171 <- local_main_Main_internal_171 = local_main_Main_internal_172
move $t8, $t2
move $t9, $t3
loop_77:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_77
beqz $a1, mismatch_77
seq $v0, $a0, $a1
beqz $v0, mismatch_77
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_77
mismatch_77:
li $v0, 0
j end_77
check_77:
bnez $a1, mismatch_77
li $v0, 1
end_77:
move $t2, $v0
# If not local_main_Main_internal_171 goto continue__2025
sw $t0, -672($fp)
sw $t1, -648($fp)
sw $t2, -688($fp)
sw $t3, -692($fp)
beqz $t2, continue__2025
la $a0, dispatch_error
j .raise
continue__2025:
lw $t0, -648($fp)
lw $t1, -684($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method4_A
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -672($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -656($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -648($fp)
sw $t1, -684($fp)
sw $t2, -672($fp)
sw $t3, -656($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -684($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_170
sw $t0, 16($t1)
lw $t2, -696($fp)
# Moving local_main_Main_internal_170 to local_main_Main_internal_173
move $t2, $t0
sw $t2, -696($fp)
lw $t3, -128($fp)
# Moving local_main_Main_internal_173 to local_main_Main_internal_31
move $t3, $t2
sw $t3, -128($fp)
sw $t0, -684($fp)
sw $t1, -0($fp)
sw $t2, -696($fp)
sw $t3, -128($fp)
end__1524:
lw $t0, -128($fp)
lw $t1, -112($fp)
# Moving local_main_Main_internal_31 to local_main_Main_internal_27
move $t1, $t0
sw $t1, -112($fp)
sw $t0, -128($fp)
sw $t1, -112($fp)
j end__1515
true__1515:
lw $t0, -0($fp)
lw $t1, -700($fp)
# local_main_Main_avar_174 <- GET self . avar
lw $t1, 16($t0)
lw $t2, -708($fp)
# local_main_Main_internal_176 <- Type of local_main_Main_avar_174
lw $t2, 0($t1)
lw $t3, -712($fp)
# Saves in local_main_Main_internal_177 data_0
la $t3, data_0
# local_main_Main_internal_176 <- local_main_Main_internal_176 = local_main_Main_internal_177
move $t8, $t2
move $t9, $t3
loop_78:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_78
beqz $a1, mismatch_78
seq $v0, $a0, $a1
beqz $v0, mismatch_78
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_78
mismatch_78:
li $v0, 0
j end_78
check_78:
bnez $a1, mismatch_78
li $v0, 1
end_78:
move $t2, $v0
# If local_main_Main_internal_176 goto error__2046
sw $t0, -0($fp)
sw $t1, -700($fp)
sw $t2, -708($fp)
sw $t3, -712($fp)
bnez $t2, error__2046
lw $t0, -700($fp)
lw $t1, -716($fp)
la $t9, type_C
lw $v0, 8($t0)
loop_79:
move $t8, $v0
beqz $t8, false_79
lw $v1, 0($t8)
beq $t9, $v1, true_79
lw $v0, 4($t8)
j loop_79
true_79:
li $t1, 1
j end_79
false_79:
li $t1, 0
end_79:
# If not local_main_Main_internal_178 goto next__2052_0
sw $t0, -700($fp)
sw $t1, -716($fp)
beqz $t1, next__2052_0
lw $t0, -700($fp)
lw $t1, -720($fp)
# Moving local_main_Main_avar_174 to local_main_Main_c_179
move $t1, $t0
sw $t1, -720($fp)
lw $t2, -728($fp)
# local_main_Main_internal_181 <- Type of local_main_Main_c_179
lw $t2, 0($t1)
lw $t3, -732($fp)
# Saves in local_main_Main_internal_182 data_0
la $t3, data_0
# local_main_Main_internal_181 <- local_main_Main_internal_181 = local_main_Main_internal_182
move $t8, $t2
move $t9, $t3
loop_80:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_80
beqz $a1, mismatch_80
seq $v0, $a0, $a1
beqz $v0, mismatch_80
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_80
mismatch_80:
li $v0, 0
j end_80
check_80:
bnez $a1, mismatch_80
li $v0, 1
end_80:
move $t2, $v0
# If not local_main_Main_internal_181 goto continue__2060
sw $t0, -700($fp)
sw $t1, -720($fp)
sw $t2, -728($fp)
sw $t3, -732($fp)
beqz $t2, continue__2060
la $a0, dispatch_error
j .raise
continue__2060:
lw $t0, -720($fp)
lw $t1, -724($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -720($fp)
sw $t1, -724($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -724($fp)
# saves the return value
move $t0, $v0
lw $t1, -720($fp)
lw $t2, -740($fp)
# local_main_Main_internal_184 <- Type of local_main_Main_c_179
lw $t2, 0($t1)
lw $t3, -744($fp)
# Saves in local_main_Main_internal_185 data_0
la $t3, data_0
# local_main_Main_internal_184 <- local_main_Main_internal_184 = local_main_Main_internal_185
move $t8, $t2
move $t9, $t3
loop_81:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_81
beqz $a1, mismatch_81
seq $v0, $a0, $a1
beqz $v0, mismatch_81
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_81
mismatch_81:
li $v0, 0
j end_81
check_81:
bnez $a1, mismatch_81
li $v0, 1
end_81:
move $t2, $v0
# If not local_main_Main_internal_184 goto continue__2072
sw $t0, -724($fp)
sw $t1, -720($fp)
sw $t2, -740($fp)
sw $t3, -744($fp)
beqz $t2, continue__2072
la $a0, dispatch_error
j .raise
continue__2072:
lw $t0, -720($fp)
lw $t1, -736($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method6_C
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -724($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -720($fp)
sw $t1, -736($fp)
sw $t2, -724($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -736($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_183
sw $t0, 16($t1)
lw $t2, -704($fp)
# Moving local_main_Main_internal_183 to local_main_Main_internal_175
move $t2, $t0
sw $t2, -704($fp)
sw $t0, -736($fp)
sw $t1, -0($fp)
sw $t2, -704($fp)
j end__2046
next__2052_0:
lw $t0, -700($fp)
lw $t1, -748($fp)
la $t9, type_A
lw $v0, 8($t0)
loop_82:
move $t8, $v0
beqz $t8, false_82
lw $v1, 0($t8)
beq $t9, $v1, true_82
lw $v0, 4($t8)
j loop_82
true_82:
li $t1, 1
j end_82
false_82:
li $t1, 0
end_82:
# If not local_main_Main_internal_186 goto next__2086_1
sw $t0, -700($fp)
sw $t1, -748($fp)
beqz $t1, next__2086_1
lw $t0, -700($fp)
lw $t1, -752($fp)
# Moving local_main_Main_avar_174 to local_main_Main_a_187
move $t1, $t0
sw $t1, -752($fp)
lw $t2, -760($fp)
# local_main_Main_internal_189 <- Type of local_main_Main_a_187
lw $t2, 0($t1)
lw $t3, -764($fp)
# Saves in local_main_Main_internal_190 data_0
la $t3, data_0
# local_main_Main_internal_189 <- local_main_Main_internal_189 = local_main_Main_internal_190
move $t8, $t2
move $t9, $t3
loop_83:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_83
beqz $a1, mismatch_83
seq $v0, $a0, $a1
beqz $v0, mismatch_83
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_83
mismatch_83:
li $v0, 0
j end_83
check_83:
bnez $a1, mismatch_83
li $v0, 1
end_83:
move $t2, $v0
# If not local_main_Main_internal_189 goto continue__2094
sw $t0, -700($fp)
sw $t1, -752($fp)
sw $t2, -760($fp)
sw $t3, -764($fp)
beqz $t2, continue__2094
la $a0, dispatch_error
j .raise
continue__2094:
lw $t0, -752($fp)
lw $t1, -756($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -752($fp)
sw $t1, -756($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -756($fp)
# saves the return value
move $t0, $v0
lw $t1, -752($fp)
lw $t2, -772($fp)
# local_main_Main_internal_192 <- Type of local_main_Main_a_187
lw $t2, 0($t1)
lw $t3, -776($fp)
# Saves in local_main_Main_internal_193 data_0
la $t3, data_0
# local_main_Main_internal_192 <- local_main_Main_internal_192 = local_main_Main_internal_193
move $t8, $t2
move $t9, $t3
loop_84:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_84
beqz $a1, mismatch_84
seq $v0, $a0, $a1
beqz $v0, mismatch_84
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_84
mismatch_84:
li $v0, 0
j end_84
check_84:
bnez $a1, mismatch_84
li $v0, 1
end_84:
move $t2, $v0
# If not local_main_Main_internal_192 goto continue__2106
sw $t0, -756($fp)
sw $t1, -752($fp)
sw $t2, -772($fp)
sw $t3, -776($fp)
beqz $t2, continue__2106
la $a0, dispatch_error
j .raise
continue__2106:
lw $t0, -752($fp)
lw $t1, -768($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method3_A
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -756($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -752($fp)
sw $t1, -768($fp)
sw $t2, -756($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -768($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_191
sw $t0, 16($t1)
lw $t2, -704($fp)
# Moving local_main_Main_internal_191 to local_main_Main_internal_175
move $t2, $t0
sw $t2, -704($fp)
sw $t0, -768($fp)
sw $t1, -0($fp)
sw $t2, -704($fp)
j end__2046
next__2086_1:
lw $t0, -700($fp)
lw $t1, -780($fp)
la $t9, type_Object
lw $v0, 8($t0)
loop_85:
move $t8, $v0
beqz $t8, false_85
lw $v1, 0($t8)
beq $t9, $v1, true_85
lw $v0, 4($t8)
j loop_85
true_85:
li $t1, 1
j end_85
false_85:
li $t1, 0
end_85:
# If not local_main_Main_internal_194 goto next__2120_2
sw $t0, -700($fp)
sw $t1, -780($fp)
beqz $t1, next__2120_2
lw $t0, -700($fp)
lw $t1, -784($fp)
# Moving local_main_Main_avar_174 to local_main_Main_o_195
move $t1, $t0
sw $t1, -784($fp)
lw $t2, -788($fp)
# Saves in local_main_Main_internal_196 data_76
la $t2, data_76
lw $t3, -0($fp)
lw $t4, -792($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -700($fp)
sw $t1, -784($fp)
sw $t2, -788($fp)
sw $t3, -0($fp)
sw $t4, -792($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -792($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -796($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -792($fp)
sw $t1, -0($fp)
sw $t2, -796($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -796($fp)
# saves the return value
move $t0, $v0
lw $t1, -800($fp)
# Moving 0 to local_main_Main_internal_199
li $t1, 0
sw $t1, -800($fp)
lw $t2, -704($fp)
# Moving local_main_Main_internal_199 to local_main_Main_internal_175
move $t2, $t1
sw $t2, -704($fp)
sw $t0, -796($fp)
sw $t1, -800($fp)
sw $t2, -704($fp)
j end__2046
next__2120_2:
la $a0, case_error
j .raise
error__2046:
la $a0, case_void_error
j .raise
end__2046:
lw $t0, -704($fp)
lw $t1, -112($fp)
# Moving local_main_Main_internal_175 to local_main_Main_internal_27
move $t1, $t0
sw $t1, -112($fp)
sw $t0, -704($fp)
sw $t1, -112($fp)
end__1515:
lw $t0, -112($fp)
lw $t1, -96($fp)
# Moving local_main_Main_internal_27 to local_main_Main_internal_23
move $t1, $t0
sw $t1, -96($fp)
sw $t0, -112($fp)
sw $t1, -96($fp)
j end__1506
true__1506:
lw $t0, -804($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -804($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -804($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -808($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_get_int_Main
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -804($fp)
sw $t1, -0($fp)
sw $t2, -808($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -808($fp)
# saves the return value
move $t0, $v0
lw $t1, -804($fp)
lw $t2, -816($fp)
# local_main_Main_internal_203 <- Type of local_main_Main_internal_200
lw $t2, 0($t1)
lw $t3, -820($fp)
# Saves in local_main_Main_internal_204 data_0
la $t3, data_0
# local_main_Main_internal_203 <- local_main_Main_internal_203 = local_main_Main_internal_204
move $t8, $t2
move $t9, $t3
loop_86:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_86
beqz $a1, mismatch_86
seq $v0, $a0, $a1
beqz $v0, mismatch_86
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_86
mismatch_86:
li $v0, 0
j end_86
check_86:
bnez $a1, mismatch_86
li $v0, 1
end_86:
move $t2, $v0
# If not local_main_Main_internal_203 goto continue__2158
sw $t0, -808($fp)
sw $t1, -804($fp)
sw $t2, -816($fp)
sw $t3, -820($fp)
beqz $t2, continue__2158
la $a0, dispatch_error
j .raise
continue__2158:
lw $t0, -804($fp)
lw $t1, -812($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -808($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -804($fp)
sw $t1, -812($fp)
sw $t2, -808($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -812($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . a_var <- SET local_main_Main_internal_202
sw $t0, 20($t1)
lw $t2, -824($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_B
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method B
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -812($fp)
sw $t1, -0($fp)
sw $t2, -824($fp)
# This function will consume the arguments
jal function_B_B
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -824($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -828($fp)
# local_main_Main_avar_206 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -836($fp)
# local_main_Main_internal_208 <- Type of local_main_Main_avar_206
lw $t3, 0($t2)
lw $t4, -840($fp)
# Saves in local_main_Main_internal_209 data_0
la $t4, data_0
# local_main_Main_internal_208 <- local_main_Main_internal_208 = local_main_Main_internal_209
move $t8, $t3
move $t9, $t4
loop_87:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_87
beqz $a1, mismatch_87
seq $v0, $a0, $a1
beqz $v0, mismatch_87
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_87
mismatch_87:
li $v0, 0
j end_87
check_87:
bnez $a1, mismatch_87
li $v0, 1
end_87:
move $t3, $v0
# If not local_main_Main_internal_208 goto continue__2177
sw $t0, -824($fp)
sw $t1, -0($fp)
sw $t2, -828($fp)
sw $t3, -836($fp)
sw $t4, -840($fp)
beqz $t3, continue__2177
la $a0, dispatch_error
j .raise
continue__2177:
lw $t0, -828($fp)
lw $t1, -832($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -828($fp)
sw $t1, -832($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -832($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -844($fp)
# local_main_Main_a_var_210 <- GET self . a_var
lw $t2, 20($t1)
lw $t3, -852($fp)
# local_main_Main_internal_212 <- Type of local_main_Main_a_var_210
lw $t3, 0($t2)
lw $t4, -856($fp)
# Saves in local_main_Main_internal_213 data_0
la $t4, data_0
# local_main_Main_internal_212 <- local_main_Main_internal_212 = local_main_Main_internal_213
move $t8, $t3
move $t9, $t4
loop_88:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_88
beqz $a1, mismatch_88
seq $v0, $a0, $a1
beqz $v0, mismatch_88
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_88
mismatch_88:
li $v0, 0
j end_88
check_88:
bnez $a1, mismatch_88
li $v0, 1
end_88:
move $t3, $v0
# If not local_main_Main_internal_212 goto continue__2191
sw $t0, -832($fp)
sw $t1, -0($fp)
sw $t2, -844($fp)
sw $t3, -852($fp)
sw $t4, -856($fp)
beqz $t3, continue__2191
la $a0, dispatch_error
j .raise
continue__2191:
lw $t0, -844($fp)
lw $t1, -848($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -844($fp)
sw $t1, -848($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -848($fp)
# saves the return value
move $t0, $v0
lw $t1, -824($fp)
lw $t2, -864($fp)
# local_main_Main_internal_215 <- Type of local_main_Main_internal_205
lw $t2, 0($t1)
lw $t3, -868($fp)
# Saves in local_main_Main_internal_216 data_0
la $t3, data_0
# local_main_Main_internal_215 <- local_main_Main_internal_215 = local_main_Main_internal_216
move $t8, $t2
move $t9, $t3
loop_89:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_89
beqz $a1, mismatch_89
seq $v0, $a0, $a1
beqz $v0, mismatch_89
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_89
mismatch_89:
li $v0, 0
j end_89
check_89:
bnez $a1, mismatch_89
li $v0, 1
end_89:
move $t2, $v0
# If not local_main_Main_internal_215 goto continue__2204
sw $t0, -848($fp)
sw $t1, -824($fp)
sw $t2, -864($fp)
sw $t3, -868($fp)
beqz $t2, continue__2204
la $a0, dispatch_error
j .raise
continue__2204:
lw $t0, -824($fp)
lw $t1, -860($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method2_A
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -848($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -832($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -824($fp)
sw $t1, -860($fp)
sw $t2, -848($fp)
sw $t3, -832($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -860($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_214
sw $t0, 16($t1)
lw $t2, -872($fp)
# Moving local_main_Main_internal_214 to local_main_Main_internal_217
move $t2, $t0
sw $t2, -872($fp)
lw $t3, -96($fp)
# Moving local_main_Main_internal_217 to local_main_Main_internal_23
move $t3, $t2
sw $t3, -96($fp)
sw $t0, -860($fp)
sw $t1, -0($fp)
sw $t2, -872($fp)
sw $t3, -96($fp)
end__1506:
lw $t0, -96($fp)
lw $t1, -876($fp)
# Moving local_main_Main_internal_23 to local_main_Main_internal_218
move $t1, $t0
sw $t1, -876($fp)
lw $t2, -8($fp)
# Moving local_main_Main_internal_218 to local_main_Main_internal_1
move $t2, $t1
sw $t2, -8($fp)
sw $t0, -96($fp)
sw $t1, -876($fp)
sw $t2, -8($fp)
j start__1431
end__1431:
lw $t0, -8($fp)
lw $t1, -880($fp)
# Moving local_main_Main_internal_1 to local_main_Main_internal_219
move $t1, $t0
sw $t1, -880($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -880($fp)
# Removing all locals from stack
addiu $sp, $sp, 884
jr $ra

# Raise exception method
.raise:
li $v0, 4
syscall
li $v0, 17
li $a0, 1
syscall

.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "
"
string_abort: .asciiz "Abort called from class String
"
int_abort: .asciiz "Abort called from class Int
"
bool_abort: .asciiz "Abort called from class Bool
"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_A: .asciiz "A"
type_B: .asciiz "B"
type_C: .asciiz "C"
type_D: .asciiz "D"
type_E: .asciiz "E"
type_A2I: .asciiz "A2I"
type_Main: .asciiz "Main"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz "0"
data_2: .asciiz "1"
data_3: .asciiz "2"
data_4: .asciiz "3"
data_5: .asciiz "4"
data_6: .asciiz "5"
data_7: .asciiz "6"
data_8: .asciiz "7"
data_9: .asciiz "8"
data_10: .asciiz "9"
data_11: .asciiz ""
data_12: .asciiz "9"
data_13: .asciiz "8"
data_14: .asciiz "7"
data_15: .asciiz "6"
data_16: .asciiz "5"
data_17: .asciiz "4"
data_18: .asciiz "3"
data_19: .asciiz "2"
data_20: .asciiz "1"
data_21: .asciiz "0"
data_22: .asciiz "-"
data_23: .asciiz "+"
data_24: .asciiz "-"
data_25: .asciiz "0"
data_26: .asciiz ""
data_27: .asciiz ""
data_28: .asciiz "
	To add a number to "
data_29: .asciiz "...enter a:
"
data_30: .asciiz "	To negate "
data_31: .asciiz "...enter b:
"
data_32: .asciiz "	To find the difference between "
data_33: .asciiz "and another number...enter c:
"
data_34: .asciiz "	To find the factorial of "
data_35: .asciiz "...enter d:
"
data_36: .asciiz "	To square "
data_37: .asciiz "...enter e:
"
data_38: .asciiz "	To cube "
data_39: .asciiz "...enter f:
"
data_40: .asciiz "	To find out if "
data_41: .asciiz "is a multiple of 3...enter g:
"
data_42: .asciiz "	To divide "
data_43: .asciiz "by 8...enter h:
"
data_44: .asciiz "	To get a new number...enter j:
"
data_45: .asciiz "	To quit...enter q:

"
data_46: .asciiz "
"
data_47: .asciiz "Please enter a number...  "
data_48: .asciiz "Class type is now E
"
data_49: .asciiz "Class type is now C
"
data_50: .asciiz "Class type is now D
"
data_51: .asciiz "Class type is now B
"
data_52: .asciiz "Class type is now A
"
data_53: .asciiz "Oooops
"
data_54: .asciiz " "
data_55: .asciiz "number "
data_56: .asciiz "is odd!
"
data_57: .asciiz "is even!
"
data_58: .asciiz "a"
data_59: .asciiz "b"
data_60: .asciiz "c"
data_61: .asciiz "d"
data_62: .asciiz "e"
data_63: .asciiz "f"
data_64: .asciiz "g"
data_65: .asciiz "h"
data_66: .asciiz "j"
data_67: .asciiz "q"
data_68: .asciiz "number "
data_69: .asciiz "is equal to "
data_70: .asciiz "times 8 with a remainder of "
data_71: .asciiz "
"
data_72: .asciiz "number "
data_73: .asciiz "is not divisible by 3.
"
data_74: .asciiz "number "
data_75: .asciiz "is divisible by 3.
"
data_76: .asciiz "Oooops
"
zero_error: .asciiz "Division by zero error
"
case_void_error: .asciiz "Case on void error
"
dispatch_error: .asciiz "Dispatch on void error
"
case_error: .asciiz "Case statement without a matching branch error
"
index_error: .asciiz "Substring out of range error
"
heap_error: .asciiz "Heap overflow error
"