
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:40 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
A2I:   .asciiz    "A2I"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    dummy, function_out_string_at_IO, dummy, dummy, dummy, function_copy_at_Object, function_out_int_at_IO, function_abort_at_Object, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_type_name_at_Object, dummy, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_length_at_String, dummy, function_substr_at_String, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, function_concat_at_String, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy, dummy
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type A2I ****
A2I_vtable:   .word    dummy, dummy, dummy, function_c2i_at_A2I, dummy, function_copy_at_Object, dummy, function_abort_at_Object, function_a2i_aux_at_A2I, dummy, function_i2a_aux_at_A2I, dummy, function_i2a_at_A2I, function_a2i_at_A2I, function_type_name_at_Object, function_i2c_at_A2I, dummy
# Function END
# 


#  **** Type RECORD for type A2I ****
A2I_start: 
   A2I_vtable_pointer:   .word    A2I_vtable
   # Function END
A2I_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    dummy, function_out_string_at_IO, dummy, dummy, function_main_at_Main, function_copy_at_Object, function_out_int_at_IO, function_abort_at_Object, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_type_name_at_Object, dummy, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 1, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1
A2I__TDT:   .word    -1, -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "0"
# 


data_5:   .asciiz    "1"
# 


data_6:   .asciiz    "2"
# 


data_7:   .asciiz    "3"
# 


data_8:   .asciiz    "4"
# 


data_9:   .asciiz    "5"
# 


data_10:   .asciiz    "6"
# 


data_11:   .asciiz    "7"
# 


data_12:   .asciiz    "8"
# 


data_13:   .asciiz    "9"
# 


data_14:   .asciiz    "0"
# 


data_15:   .asciiz    "1"
# 


data_16:   .asciiz    "2"
# 


data_17:   .asciiz    "3"
# 


data_18:   .asciiz    "4"
# 


data_19:   .asciiz    "5"
# 


data_20:   .asciiz    "6"
# 


data_21:   .asciiz    "7"
# 


data_22:   .asciiz    "8"
# 


data_23:   .asciiz    "9"
# 


data_24:   .asciiz    ""
# 


data_25:   .asciiz    "-"
# 


data_26:   .asciiz    "+"
# 


data_27:   .asciiz    "0"
# 


data_28:   .asciiz    "-"
# 


data_29:   .asciiz    ""
# 


data_30:   .asciiz    "678987"
# 


data_31:   .asciiz    " == "
# 


data_32:   .asciiz    "\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7fd4a2bd7250>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 16($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_c2i_at_A2I implementation.
# @Params:
# 	0($fp) = param_c2i_at_A2I_char_0
function_c2i_at_A2I: 
   # Allocate stack frame for function function_c2i_at_A2I.
   subu $sp, $sp, 264
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 264
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_4
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_3
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_3
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_3
   # IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_FALSE_3
   # IF_ZERO local_c2i_at_A2I_internal_4 GOTO label_FALSE_3
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_3
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_6
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_6
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_6
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_7
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_7
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_7
   # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
   # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_4
   # GOTO label_FALSE_3
   j label_FALSE_3
   label_COMPARE_BY_VALUE_7: 
      # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
      # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_4
      # GOTO label_FALSE_3
      j label_FALSE_3
      label_COMPARE_STRING_6: 
         # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_CONTINUE_8
         # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_CONTINUE_8
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_8
         # GOTO label_FALSE_3
         j label_FALSE_3
         label_CONTINUE_8: 
            # LOCAL local_c2i_at_A2I_internal_3 --> -16($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_9: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_10
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_9
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_10: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
                  # IF_ZERO local_c2i_at_A2I_internal_3 GOTO label_TRUE_4
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_4
                  label_FALSE_3: 
                     # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_5
j label_END_5
label_TRUE_4: 
   # LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_5: 
# LOCAL local_c2i_at_A2I_internal_0 --> -4($fp)
# LOCAL local_c2i_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_FALSEIF_1
# IF_ZERO local_c2i_at_A2I_internal_0 GOTO label_FALSEIF_1
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_1
# LOCAL local_c2i_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -24($fp)
# LOCAL local_c2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_c2i_at_A2I_internal_5 --> -24($fp)
# local_c2i_at_A2I_internal_1 = local_c2i_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_2
j label_ENDIF_2
label_FALSEIF_1: 
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_5
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -44($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_13
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_13
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_13
   # IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_FALSE_13
   # IF_ZERO local_c2i_at_A2I_internal_10 GOTO label_FALSE_13
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_13
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_STRING_16
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_STRING_16
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_16
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_17
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_17
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_17
   # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -44($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
   # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_14
   # GOTO label_FALSE_13
   j label_FALSE_13
   label_COMPARE_BY_VALUE_17: 
      # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
      lw $a0, 0($fp)
      lw $a1, -44($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
      # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_14
      # GOTO label_FALSE_13
      j label_FALSE_13
      label_COMPARE_STRING_16: 
         # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -44($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_CONTINUE_18
         # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_CONTINUE_18
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_18
         # GOTO label_FALSE_13
         j label_FALSE_13
         label_CONTINUE_18: 
            # LOCAL local_c2i_at_A2I_internal_9 --> -40($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_10 --> -44($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -44($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_19: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_20
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_19
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_20: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
                  # IF_ZERO local_c2i_at_A2I_internal_9 GOTO label_TRUE_14
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_14
                  label_FALSE_13: 
                     # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_15
j label_END_15
label_TRUE_14: 
   # LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_15: 
# LOCAL local_c2i_at_A2I_internal_6 --> -28($fp)
# LOCAL local_c2i_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_FALSEIF_11
# IF_ZERO local_c2i_at_A2I_internal_6 GOTO label_FALSEIF_11
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_11
# LOCAL local_c2i_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -48($fp)
# LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
# LOCAL local_c2i_at_A2I_internal_11 --> -48($fp)
# local_c2i_at_A2I_internal_7 = local_c2i_at_A2I_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_12
j label_ENDIF_12
label_FALSEIF_11: 
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_6
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_23
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_23
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_23
   # IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_FALSE_23
   # IF_ZERO local_c2i_at_A2I_internal_16 GOTO label_FALSE_23
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_23
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_STRING_26
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_STRING_26
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_STRING_26
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_27
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_27
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_27
   # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
   # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
   lw $t0, -64($fp)
   beq $t0, 0, label_TRUE_24
   # GOTO label_FALSE_23
   j label_FALSE_23
   label_COMPARE_BY_VALUE_27: 
      # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
      lw $a0, 0($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -64($fp)
      # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
      # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
      lw $t0, -64($fp)
      beq $t0, 0, label_TRUE_24
      # GOTO label_FALSE_23
      j label_FALSE_23
      label_COMPARE_STRING_26: 
         # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -64($fp)
         # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_CONTINUE_28
         # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_CONTINUE_28
         lw $t0, -64($fp)
         beq $t0, 0, label_CONTINUE_28
         # GOTO label_FALSE_23
         j label_FALSE_23
         label_CONTINUE_28: 
            # LOCAL local_c2i_at_A2I_internal_15 --> -64($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_29: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_30
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_29
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_30: 
                  # Store result
                  sw $a2, -64($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
                  # IF_ZERO local_c2i_at_A2I_internal_15 GOTO label_TRUE_24
                  lw $t0, -64($fp)
                  beq $t0, 0, label_TRUE_24
                  label_FALSE_23: 
                     # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -60($fp)
                     # GOTO label_END_25
j label_END_25
label_TRUE_24: 
   # LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_END_25: 
# LOCAL local_c2i_at_A2I_internal_12 --> -52($fp)
# LOCAL local_c2i_at_A2I_internal_14 --> -60($fp)
# Obtain value from -60($fp)
lw $v0, -60($fp)
lw $v0, 12($v0)
sw $v0, -52($fp)
# IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_FALSEIF_21
# IF_ZERO local_c2i_at_A2I_internal_12 GOTO label_FALSEIF_21
lw $t0, -52($fp)
beq $t0, 0, label_FALSEIF_21
# LOCAL local_c2i_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 2
sw $t0, 12($v0)
sw $v0, -72($fp)
# LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
# LOCAL local_c2i_at_A2I_internal_17 --> -72($fp)
# local_c2i_at_A2I_internal_13 = local_c2i_at_A2I_internal_17
lw $t0, -72($fp)
sw $t0, -56($fp)
# GOTO label_ENDIF_22
j label_ENDIF_22
label_FALSEIF_21: 
   # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_7
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -92($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_33
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_33
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_33
   # IF_ZERO local_c2i_at_A2I_internal_22 GOTO label_FALSE_33
   # IF_ZERO local_c2i_at_A2I_internal_22 GOTO label_FALSE_33
   lw $t0, -92($fp)
   beq $t0, 0, label_FALSE_33
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_STRING_36
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_STRING_36
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_STRING_36
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_37
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_37
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_37
   # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -92($fp)
   sub $a0, $a0, $a1
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
   # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
   lw $t0, -88($fp)
   beq $t0, 0, label_TRUE_34
   # GOTO label_FALSE_33
   j label_FALSE_33
   label_COMPARE_BY_VALUE_37: 
      # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
      lw $a0, 0($fp)
      lw $a1, -92($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -88($fp)
      # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
      # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
      lw $t0, -88($fp)
      beq $t0, 0, label_TRUE_34
      # GOTO label_FALSE_33
      j label_FALSE_33
      label_COMPARE_STRING_36: 
         # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -92($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -88($fp)
         # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_CONTINUE_38
         # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_CONTINUE_38
         lw $t0, -88($fp)
         beq $t0, 0, label_CONTINUE_38
         # GOTO label_FALSE_33
         j label_FALSE_33
         label_CONTINUE_38: 
            # LOCAL local_c2i_at_A2I_internal_21 --> -88($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_22 --> -92($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -92($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_39: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_40
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_39
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_40: 
                  # Store result
                  sw $a2, -88($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
                  # IF_ZERO local_c2i_at_A2I_internal_21 GOTO label_TRUE_34
                  lw $t0, -88($fp)
                  beq $t0, 0, label_TRUE_34
                  label_FALSE_33: 
                     # LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -84($fp)
                     # GOTO label_END_35
j label_END_35
label_TRUE_34: 
   # LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   label_END_35: 
# LOCAL local_c2i_at_A2I_internal_18 --> -76($fp)
# LOCAL local_c2i_at_A2I_internal_20 --> -84($fp)
# Obtain value from -84($fp)
lw $v0, -84($fp)
lw $v0, 12($v0)
sw $v0, -76($fp)
# IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_FALSEIF_31
# IF_ZERO local_c2i_at_A2I_internal_18 GOTO label_FALSEIF_31
lw $t0, -76($fp)
beq $t0, 0, label_FALSEIF_31
# LOCAL local_c2i_at_A2I_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 3
sw $t0, 12($v0)
sw $v0, -96($fp)
# LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
# LOCAL local_c2i_at_A2I_internal_23 --> -96($fp)
# local_c2i_at_A2I_internal_19 = local_c2i_at_A2I_internal_23
lw $t0, -96($fp)
sw $t0, -80($fp)
# GOTO label_ENDIF_32
j label_ENDIF_32
label_FALSEIF_31: 
   # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_8
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -116($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_43
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_43
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_43
   # IF_ZERO local_c2i_at_A2I_internal_28 GOTO label_FALSE_43
   # IF_ZERO local_c2i_at_A2I_internal_28 GOTO label_FALSE_43
   lw $t0, -116($fp)
   beq $t0, 0, label_FALSE_43
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_STRING_46
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_STRING_46
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_STRING_46
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -116($fp)
   sub $a0, $a0, $a1
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
   # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
   lw $t0, -112($fp)
   beq $t0, 0, label_TRUE_44
   # GOTO label_FALSE_43
   j label_FALSE_43
   label_COMPARE_BY_VALUE_47: 
      # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
      lw $a0, 0($fp)
      lw $a1, -116($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -112($fp)
      # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
      # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
      lw $t0, -112($fp)
      beq $t0, 0, label_TRUE_44
      # GOTO label_FALSE_43
      j label_FALSE_43
      label_COMPARE_STRING_46: 
         # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -116($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -112($fp)
         # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_CONTINUE_48
         # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_CONTINUE_48
         lw $t0, -112($fp)
         beq $t0, 0, label_CONTINUE_48
         # GOTO label_FALSE_43
         j label_FALSE_43
         label_CONTINUE_48: 
            # LOCAL local_c2i_at_A2I_internal_27 --> -112($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_28 --> -116($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -116($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_49: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_50
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_49
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_50: 
                  # Store result
                  sw $a2, -112($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
                  # IF_ZERO local_c2i_at_A2I_internal_27 GOTO label_TRUE_44
                  lw $t0, -112($fp)
                  beq $t0, 0, label_TRUE_44
                  label_FALSE_43: 
                     # LOCAL local_c2i_at_A2I_internal_26 --> -108($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -108($fp)
                     # GOTO label_END_45
j label_END_45
label_TRUE_44: 
   # LOCAL local_c2i_at_A2I_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -108($fp)
   label_END_45: 
# LOCAL local_c2i_at_A2I_internal_24 --> -100($fp)
# LOCAL local_c2i_at_A2I_internal_26 --> -108($fp)
# Obtain value from -108($fp)
lw $v0, -108($fp)
lw $v0, 12($v0)
sw $v0, -100($fp)
# IF_ZERO local_c2i_at_A2I_internal_24 GOTO label_FALSEIF_41
# IF_ZERO local_c2i_at_A2I_internal_24 GOTO label_FALSEIF_41
lw $t0, -100($fp)
beq $t0, 0, label_FALSEIF_41
# LOCAL local_c2i_at_A2I_internal_29 --> -120($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -120($fp)
# LOCAL local_c2i_at_A2I_internal_25 --> -104($fp)
# LOCAL local_c2i_at_A2I_internal_29 --> -120($fp)
# local_c2i_at_A2I_internal_25 = local_c2i_at_A2I_internal_29
lw $t0, -120($fp)
sw $t0, -104($fp)
# GOTO label_ENDIF_42
j label_ENDIF_42
label_FALSEIF_41: 
   # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_9
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -140($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_53
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_53
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_53
   # IF_ZERO local_c2i_at_A2I_internal_34 GOTO label_FALSE_53
   # IF_ZERO local_c2i_at_A2I_internal_34 GOTO label_FALSE_53
   lw $t0, -140($fp)
   beq $t0, 0, label_FALSE_53
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_STRING_56
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_STRING_56
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_STRING_56
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_57
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_57
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_57
   # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -140($fp)
   sub $a0, $a0, $a1
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
   # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
   lw $t0, -136($fp)
   beq $t0, 0, label_TRUE_54
   # GOTO label_FALSE_53
   j label_FALSE_53
   label_COMPARE_BY_VALUE_57: 
      # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
      lw $a0, 0($fp)
      lw $a1, -140($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -136($fp)
      # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
      # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
      lw $t0, -136($fp)
      beq $t0, 0, label_TRUE_54
      # GOTO label_FALSE_53
      j label_FALSE_53
      label_COMPARE_STRING_56: 
         # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -140($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -136($fp)
         # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_CONTINUE_58
         # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_CONTINUE_58
         lw $t0, -136($fp)
         beq $t0, 0, label_CONTINUE_58
         # GOTO label_FALSE_53
         j label_FALSE_53
         label_CONTINUE_58: 
            # LOCAL local_c2i_at_A2I_internal_33 --> -136($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_34 --> -140($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -140($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_59: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_60
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_59
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_60: 
                  # Store result
                  sw $a2, -136($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
                  # IF_ZERO local_c2i_at_A2I_internal_33 GOTO label_TRUE_54
                  lw $t0, -136($fp)
                  beq $t0, 0, label_TRUE_54
                  label_FALSE_53: 
                     # LOCAL local_c2i_at_A2I_internal_32 --> -132($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -132($fp)
                     # GOTO label_END_55
j label_END_55
label_TRUE_54: 
   # LOCAL local_c2i_at_A2I_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -132($fp)
   label_END_55: 
# LOCAL local_c2i_at_A2I_internal_30 --> -124($fp)
# LOCAL local_c2i_at_A2I_internal_32 --> -132($fp)
# Obtain value from -132($fp)
lw $v0, -132($fp)
lw $v0, 12($v0)
sw $v0, -124($fp)
# IF_ZERO local_c2i_at_A2I_internal_30 GOTO label_FALSEIF_51
# IF_ZERO local_c2i_at_A2I_internal_30 GOTO label_FALSEIF_51
lw $t0, -124($fp)
beq $t0, 0, label_FALSEIF_51
# LOCAL local_c2i_at_A2I_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -144($fp)
# LOCAL local_c2i_at_A2I_internal_31 --> -128($fp)
# LOCAL local_c2i_at_A2I_internal_35 --> -144($fp)
# local_c2i_at_A2I_internal_31 = local_c2i_at_A2I_internal_35
lw $t0, -144($fp)
sw $t0, -128($fp)
# GOTO label_ENDIF_52
j label_ENDIF_52
label_FALSEIF_51: 
   # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_10
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -164($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_63
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_63
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_63
   # IF_ZERO local_c2i_at_A2I_internal_40 GOTO label_FALSE_63
   # IF_ZERO local_c2i_at_A2I_internal_40 GOTO label_FALSE_63
   lw $t0, -164($fp)
   beq $t0, 0, label_FALSE_63
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_STRING_66
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_STRING_66
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_STRING_66
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_67
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_67
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_67
   # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -164($fp)
   sub $a0, $a0, $a1
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
   # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
   lw $t0, -160($fp)
   beq $t0, 0, label_TRUE_64
   # GOTO label_FALSE_63
   j label_FALSE_63
   label_COMPARE_BY_VALUE_67: 
      # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
      lw $a0, 0($fp)
      lw $a1, -164($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -160($fp)
      # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
      # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
      lw $t0, -160($fp)
      beq $t0, 0, label_TRUE_64
      # GOTO label_FALSE_63
      j label_FALSE_63
      label_COMPARE_STRING_66: 
         # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -164($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -160($fp)
         # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_CONTINUE_68
         # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_CONTINUE_68
         lw $t0, -160($fp)
         beq $t0, 0, label_CONTINUE_68
         # GOTO label_FALSE_63
         j label_FALSE_63
         label_CONTINUE_68: 
            # LOCAL local_c2i_at_A2I_internal_39 --> -160($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_40 --> -164($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -164($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_69: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_70
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_69
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_70: 
                  # Store result
                  sw $a2, -160($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
                  # IF_ZERO local_c2i_at_A2I_internal_39 GOTO label_TRUE_64
                  lw $t0, -160($fp)
                  beq $t0, 0, label_TRUE_64
                  label_FALSE_63: 
                     # LOCAL local_c2i_at_A2I_internal_38 --> -156($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -156($fp)
                     # GOTO label_END_65
j label_END_65
label_TRUE_64: 
   # LOCAL local_c2i_at_A2I_internal_38 --> -156($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -156($fp)
   label_END_65: 
# LOCAL local_c2i_at_A2I_internal_36 --> -148($fp)
# LOCAL local_c2i_at_A2I_internal_38 --> -156($fp)
# Obtain value from -156($fp)
lw $v0, -156($fp)
lw $v0, 12($v0)
sw $v0, -148($fp)
# IF_ZERO local_c2i_at_A2I_internal_36 GOTO label_FALSEIF_61
# IF_ZERO local_c2i_at_A2I_internal_36 GOTO label_FALSEIF_61
lw $t0, -148($fp)
beq $t0, 0, label_FALSEIF_61
# LOCAL local_c2i_at_A2I_internal_41 --> -168($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 6
sw $t0, 12($v0)
sw $v0, -168($fp)
# LOCAL local_c2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_c2i_at_A2I_internal_41 --> -168($fp)
# local_c2i_at_A2I_internal_37 = local_c2i_at_A2I_internal_41
lw $t0, -168($fp)
sw $t0, -152($fp)
# GOTO label_ENDIF_62
j label_ENDIF_62
label_FALSEIF_61: 
   # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_11
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -188($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_73
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_73
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_73
   # IF_ZERO local_c2i_at_A2I_internal_46 GOTO label_FALSE_73
   # IF_ZERO local_c2i_at_A2I_internal_46 GOTO label_FALSE_73
   lw $t0, -188($fp)
   beq $t0, 0, label_FALSE_73
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_STRING_76
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_STRING_76
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_STRING_76
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_77
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_77
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_77
   # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -188($fp)
   sub $a0, $a0, $a1
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
   # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
   lw $t0, -184($fp)
   beq $t0, 0, label_TRUE_74
   # GOTO label_FALSE_73
   j label_FALSE_73
   label_COMPARE_BY_VALUE_77: 
      # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
      lw $a0, 0($fp)
      lw $a1, -188($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -184($fp)
      # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
      # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
      lw $t0, -184($fp)
      beq $t0, 0, label_TRUE_74
      # GOTO label_FALSE_73
      j label_FALSE_73
      label_COMPARE_STRING_76: 
         # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -188($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -184($fp)
         # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_CONTINUE_78
         # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_CONTINUE_78
         lw $t0, -184($fp)
         beq $t0, 0, label_CONTINUE_78
         # GOTO label_FALSE_73
         j label_FALSE_73
         label_CONTINUE_78: 
            # LOCAL local_c2i_at_A2I_internal_45 --> -184($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_46 --> -188($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -188($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_79: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_80
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_79
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_80: 
                  # Store result
                  sw $a2, -184($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
                  # IF_ZERO local_c2i_at_A2I_internal_45 GOTO label_TRUE_74
                  lw $t0, -184($fp)
                  beq $t0, 0, label_TRUE_74
                  label_FALSE_73: 
                     # LOCAL local_c2i_at_A2I_internal_44 --> -180($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -180($fp)
                     # GOTO label_END_75
j label_END_75
label_TRUE_74: 
   # LOCAL local_c2i_at_A2I_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -180($fp)
   label_END_75: 
# LOCAL local_c2i_at_A2I_internal_42 --> -172($fp)
# LOCAL local_c2i_at_A2I_internal_44 --> -180($fp)
# Obtain value from -180($fp)
lw $v0, -180($fp)
lw $v0, 12($v0)
sw $v0, -172($fp)
# IF_ZERO local_c2i_at_A2I_internal_42 GOTO label_FALSEIF_71
# IF_ZERO local_c2i_at_A2I_internal_42 GOTO label_FALSEIF_71
lw $t0, -172($fp)
beq $t0, 0, label_FALSEIF_71
# LOCAL local_c2i_at_A2I_internal_47 --> -192($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 7
sw $t0, 12($v0)
sw $v0, -192($fp)
# LOCAL local_c2i_at_A2I_internal_43 --> -176($fp)
# LOCAL local_c2i_at_A2I_internal_47 --> -192($fp)
# local_c2i_at_A2I_internal_43 = local_c2i_at_A2I_internal_47
lw $t0, -192($fp)
sw $t0, -176($fp)
# GOTO label_ENDIF_72
j label_ENDIF_72
label_FALSEIF_71: 
   # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_12
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -212($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_83
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_83
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_83
   # IF_ZERO local_c2i_at_A2I_internal_52 GOTO label_FALSE_83
   # IF_ZERO local_c2i_at_A2I_internal_52 GOTO label_FALSE_83
   lw $t0, -212($fp)
   beq $t0, 0, label_FALSE_83
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_STRING_86
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_STRING_86
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_STRING_86
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_87
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_87
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_87
   # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -212($fp)
   sub $a0, $a0, $a1
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
   # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
   lw $t0, -208($fp)
   beq $t0, 0, label_TRUE_84
   # GOTO label_FALSE_83
   j label_FALSE_83
   label_COMPARE_BY_VALUE_87: 
      # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
      lw $a0, 0($fp)
      lw $a1, -212($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -208($fp)
      # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
      # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
      lw $t0, -208($fp)
      beq $t0, 0, label_TRUE_84
      # GOTO label_FALSE_83
      j label_FALSE_83
      label_COMPARE_STRING_86: 
         # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -212($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -208($fp)
         # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_CONTINUE_88
         # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_CONTINUE_88
         lw $t0, -208($fp)
         beq $t0, 0, label_CONTINUE_88
         # GOTO label_FALSE_83
         j label_FALSE_83
         label_CONTINUE_88: 
            # LOCAL local_c2i_at_A2I_internal_51 --> -208($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_52 --> -212($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -212($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_89: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_90
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_89
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_90: 
                  # Store result
                  sw $a2, -208($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
                  # IF_ZERO local_c2i_at_A2I_internal_51 GOTO label_TRUE_84
                  lw $t0, -208($fp)
                  beq $t0, 0, label_TRUE_84
                  label_FALSE_83: 
                     # LOCAL local_c2i_at_A2I_internal_50 --> -204($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -204($fp)
                     # GOTO label_END_85
j label_END_85
label_TRUE_84: 
   # LOCAL local_c2i_at_A2I_internal_50 --> -204($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -204($fp)
   label_END_85: 
# LOCAL local_c2i_at_A2I_internal_48 --> -196($fp)
# LOCAL local_c2i_at_A2I_internal_50 --> -204($fp)
# Obtain value from -204($fp)
lw $v0, -204($fp)
lw $v0, 12($v0)
sw $v0, -196($fp)
# IF_ZERO local_c2i_at_A2I_internal_48 GOTO label_FALSEIF_81
# IF_ZERO local_c2i_at_A2I_internal_48 GOTO label_FALSEIF_81
lw $t0, -196($fp)
beq $t0, 0, label_FALSEIF_81
# LOCAL local_c2i_at_A2I_internal_53 --> -216($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 8
sw $t0, 12($v0)
sw $v0, -216($fp)
# LOCAL local_c2i_at_A2I_internal_49 --> -200($fp)
# LOCAL local_c2i_at_A2I_internal_53 --> -216($fp)
# local_c2i_at_A2I_internal_49 = local_c2i_at_A2I_internal_53
lw $t0, -216($fp)
sw $t0, -200($fp)
# GOTO label_ENDIF_82
j label_ENDIF_82
label_FALSEIF_81: 
   # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_13
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -236($fp)
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_93
   # IF_ZERO param_c2i_at_A2I_char_0 GOTO label_FALSE_93
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_93
   # IF_ZERO local_c2i_at_A2I_internal_58 GOTO label_FALSE_93
   # IF_ZERO local_c2i_at_A2I_internal_58 GOTO label_FALSE_93
   lw $t0, -236($fp)
   beq $t0, 0, label_FALSE_93
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_STRING_96
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_STRING_96
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_STRING_96
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_97
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_97
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_97
   # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
   # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
   # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -236($fp)
   sub $a0, $a0, $a1
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
   # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
   lw $t0, -232($fp)
   beq $t0, 0, label_TRUE_94
   # GOTO label_FALSE_93
   j label_FALSE_93
   label_COMPARE_BY_VALUE_97: 
      # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
      # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
      # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
      lw $a0, 0($fp)
      lw $a1, -236($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -232($fp)
      # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
      # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
      lw $t0, -232($fp)
      beq $t0, 0, label_TRUE_94
      # GOTO label_FALSE_93
      j label_FALSE_93
      label_COMPARE_STRING_96: 
         # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
         # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
         # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -236($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -232($fp)
         # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_CONTINUE_98
         # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_CONTINUE_98
         lw $t0, -232($fp)
         beq $t0, 0, label_CONTINUE_98
         # GOTO label_FALSE_93
         j label_FALSE_93
         label_CONTINUE_98: 
            # LOCAL local_c2i_at_A2I_internal_57 --> -232($fp)
            # PARAM param_c2i_at_A2I_char_0 --> 0($fp)
            # LOCAL local_c2i_at_A2I_internal_58 --> -236($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -236($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_99: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_100
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_99
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_100: 
                  # Store result
                  sw $a2, -232($fp)
                  # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
                  # IF_ZERO local_c2i_at_A2I_internal_57 GOTO label_TRUE_94
                  lw $t0, -232($fp)
                  beq $t0, 0, label_TRUE_94
                  label_FALSE_93: 
                     # LOCAL local_c2i_at_A2I_internal_56 --> -228($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -228($fp)
                     # GOTO label_END_95
j label_END_95
label_TRUE_94: 
   # LOCAL local_c2i_at_A2I_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -228($fp)
   label_END_95: 
# LOCAL local_c2i_at_A2I_internal_54 --> -220($fp)
# LOCAL local_c2i_at_A2I_internal_56 --> -228($fp)
# Obtain value from -228($fp)
lw $v0, -228($fp)
lw $v0, 12($v0)
sw $v0, -220($fp)
# IF_ZERO local_c2i_at_A2I_internal_54 GOTO label_FALSEIF_91
# IF_ZERO local_c2i_at_A2I_internal_54 GOTO label_FALSEIF_91
lw $t0, -220($fp)
beq $t0, 0, label_FALSEIF_91
# LOCAL local_c2i_at_A2I_internal_59 --> -240($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 9
sw $t0, 12($v0)
sw $v0, -240($fp)
# LOCAL local_c2i_at_A2I_internal_55 --> -224($fp)
# LOCAL local_c2i_at_A2I_internal_59 --> -240($fp)
# local_c2i_at_A2I_internal_55 = local_c2i_at_A2I_internal_59
lw $t0, -240($fp)
sw $t0, -224($fp)
# GOTO label_ENDIF_92
j label_ENDIF_92
label_FALSEIF_91: 
   # LOCAL local_c2i_at_A2I_internal_62 --> -252($fp)
   # local_c2i_at_A2I_internal_62 = SELF
   sw $s1, -252($fp)
   # LOCAL local_c2i_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_c2i_at_A2I_internal_62 --> -252($fp)
   # local_c2i_at_A2I_internal_60 = local_c2i_at_A2I_internal_62
   lw $t0, -252($fp)
   sw $t0, -244($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_c2i_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_c2i_at_A2I_internal_61 --> -248($fp)
   # local_c2i_at_A2I_internal_61 = VCALL local_c2i_at_A2I_internal_60 abort
   # Save new self pointer in $s1
   lw $s1, -244($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -248($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_c2i_at_A2I_internal_63 --> -256($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -256($fp)
   # LOCAL local_c2i_at_A2I_internal_55 --> -224($fp)
   # LOCAL local_c2i_at_A2I_internal_63 --> -256($fp)
   # local_c2i_at_A2I_internal_55 = local_c2i_at_A2I_internal_63
   lw $t0, -256($fp)
   sw $t0, -224($fp)
   label_ENDIF_92: 
# LOCAL local_c2i_at_A2I_internal_49 --> -200($fp)
# LOCAL local_c2i_at_A2I_internal_55 --> -224($fp)
# local_c2i_at_A2I_internal_49 = local_c2i_at_A2I_internal_55
lw $t0, -224($fp)
sw $t0, -200($fp)
label_ENDIF_82: 
# LOCAL local_c2i_at_A2I_internal_43 --> -176($fp)
# LOCAL local_c2i_at_A2I_internal_49 --> -200($fp)
# local_c2i_at_A2I_internal_43 = local_c2i_at_A2I_internal_49
lw $t0, -200($fp)
sw $t0, -176($fp)
label_ENDIF_72: 
# LOCAL local_c2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_c2i_at_A2I_internal_43 --> -176($fp)
# local_c2i_at_A2I_internal_37 = local_c2i_at_A2I_internal_43
lw $t0, -176($fp)
sw $t0, -152($fp)
label_ENDIF_62: 
# LOCAL local_c2i_at_A2I_internal_31 --> -128($fp)
# LOCAL local_c2i_at_A2I_internal_37 --> -152($fp)
# local_c2i_at_A2I_internal_31 = local_c2i_at_A2I_internal_37
lw $t0, -152($fp)
sw $t0, -128($fp)
label_ENDIF_52: 
# LOCAL local_c2i_at_A2I_internal_25 --> -104($fp)
# LOCAL local_c2i_at_A2I_internal_31 --> -128($fp)
# local_c2i_at_A2I_internal_25 = local_c2i_at_A2I_internal_31
lw $t0, -128($fp)
sw $t0, -104($fp)
label_ENDIF_42: 
# LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
# LOCAL local_c2i_at_A2I_internal_25 --> -104($fp)
# local_c2i_at_A2I_internal_19 = local_c2i_at_A2I_internal_25
lw $t0, -104($fp)
sw $t0, -80($fp)
label_ENDIF_32: 
# LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
# LOCAL local_c2i_at_A2I_internal_19 --> -80($fp)
# local_c2i_at_A2I_internal_13 = local_c2i_at_A2I_internal_19
lw $t0, -80($fp)
sw $t0, -56($fp)
label_ENDIF_22: 
# LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
# LOCAL local_c2i_at_A2I_internal_13 --> -56($fp)
# local_c2i_at_A2I_internal_7 = local_c2i_at_A2I_internal_13
lw $t0, -56($fp)
sw $t0, -32($fp)
label_ENDIF_12: 
# LOCAL local_c2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_c2i_at_A2I_internal_7 --> -32($fp)
# local_c2i_at_A2I_internal_1 = local_c2i_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_2: 
# RETURN local_c2i_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_c2i_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 264
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_i2c_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2c_at_A2I_i_0
function_i2c_at_A2I: 
   # Allocate stack frame for function function_i2c_at_A2I.
   subu $sp, $sp, 264
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 264
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_103
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_103
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_103
   # IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_FALSE_103
   # IF_ZERO local_i2c_at_A2I_internal_4 GOTO label_FALSE_103
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_103
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_STRING_106
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_STRING_106
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_106
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_107
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_107
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_107
   # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
   # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_104
   # GOTO label_FALSE_103
   j label_FALSE_103
   label_COMPARE_BY_VALUE_107: 
      # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
      # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_104
      # GOTO label_FALSE_103
      j label_FALSE_103
      label_COMPARE_STRING_106: 
         # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_CONTINUE_108
         # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_CONTINUE_108
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_108
         # GOTO label_FALSE_103
         j label_FALSE_103
         label_CONTINUE_108: 
            # LOCAL local_i2c_at_A2I_internal_3 --> -16($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_109: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_110
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_109
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_110: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
                  # IF_ZERO local_i2c_at_A2I_internal_3 GOTO label_TRUE_104
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_104
                  label_FALSE_103: 
                     # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_105
j label_END_105
label_TRUE_104: 
   # LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_105: 
# LOCAL local_i2c_at_A2I_internal_0 --> -4($fp)
# LOCAL local_i2c_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_FALSEIF_101
# IF_ZERO local_i2c_at_A2I_internal_0 GOTO label_FALSEIF_101
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_101
# LOCAL local_i2c_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_14
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_i2c_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2c_at_A2I_internal_5 --> -24($fp)
# local_i2c_at_A2I_internal_1 = local_i2c_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_102
j label_ENDIF_102
label_FALSEIF_101: 
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_113
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_113
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_113
   # IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_FALSE_113
   # IF_ZERO local_i2c_at_A2I_internal_10 GOTO label_FALSE_113
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_113
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_STRING_116
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_STRING_116
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_116
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_117
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_COMPARE_BY_VALUE_117
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_117
   # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -44($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
   # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_114
   # GOTO label_FALSE_113
   j label_FALSE_113
   label_COMPARE_BY_VALUE_117: 
      # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
      lw $a0, 0($fp)
      lw $a1, -44($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
      # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_114
      # GOTO label_FALSE_113
      j label_FALSE_113
      label_COMPARE_STRING_116: 
         # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -44($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_CONTINUE_118
         # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_CONTINUE_118
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_118
         # GOTO label_FALSE_113
         j label_FALSE_113
         label_CONTINUE_118: 
            # LOCAL local_i2c_at_A2I_internal_9 --> -40($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_10 --> -44($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -44($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_119: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_120
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_119
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_120: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
                  # IF_ZERO local_i2c_at_A2I_internal_9 GOTO label_TRUE_114
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_114
                  label_FALSE_113: 
                     # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_115
j label_END_115
label_TRUE_114: 
   # LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_115: 
# LOCAL local_i2c_at_A2I_internal_6 --> -28($fp)
# LOCAL local_i2c_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_FALSEIF_111
# IF_ZERO local_i2c_at_A2I_internal_6 GOTO label_FALSEIF_111
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_111
# LOCAL local_i2c_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_15
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -48($fp)
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# LOCAL local_i2c_at_A2I_internal_11 --> -48($fp)
# local_i2c_at_A2I_internal_7 = local_i2c_at_A2I_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_112
j label_ENDIF_112
label_FALSEIF_111: 
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -68($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_123
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_123
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_123
   # IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_FALSE_123
   # IF_ZERO local_i2c_at_A2I_internal_16 GOTO label_FALSE_123
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_123
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_STRING_126
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_STRING_126
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_STRING_126
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_127
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_COMPARE_BY_VALUE_127
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_127
   # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -64($fp)
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
   # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
   lw $t0, -64($fp)
   beq $t0, 0, label_TRUE_124
   # GOTO label_FALSE_123
   j label_FALSE_123
   label_COMPARE_BY_VALUE_127: 
      # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
      lw $a0, 0($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -64($fp)
      # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
      # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
      lw $t0, -64($fp)
      beq $t0, 0, label_TRUE_124
      # GOTO label_FALSE_123
      j label_FALSE_123
      label_COMPARE_STRING_126: 
         # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -64($fp)
         # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_CONTINUE_128
         # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_CONTINUE_128
         lw $t0, -64($fp)
         beq $t0, 0, label_CONTINUE_128
         # GOTO label_FALSE_123
         j label_FALSE_123
         label_CONTINUE_128: 
            # LOCAL local_i2c_at_A2I_internal_15 --> -64($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_129: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_130
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_129
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_130: 
                  # Store result
                  sw $a2, -64($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
                  # IF_ZERO local_i2c_at_A2I_internal_15 GOTO label_TRUE_124
                  lw $t0, -64($fp)
                  beq $t0, 0, label_TRUE_124
                  label_FALSE_123: 
                     # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -60($fp)
                     # GOTO label_END_125
j label_END_125
label_TRUE_124: 
   # LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_END_125: 
# LOCAL local_i2c_at_A2I_internal_12 --> -52($fp)
# LOCAL local_i2c_at_A2I_internal_14 --> -60($fp)
# Obtain value from -60($fp)
lw $v0, -60($fp)
lw $v0, 12($v0)
sw $v0, -52($fp)
# IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_FALSEIF_121
# IF_ZERO local_i2c_at_A2I_internal_12 GOTO label_FALSEIF_121
lw $t0, -52($fp)
beq $t0, 0, label_FALSEIF_121
# LOCAL local_i2c_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_16
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -72($fp)
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# LOCAL local_i2c_at_A2I_internal_17 --> -72($fp)
# local_i2c_at_A2I_internal_13 = local_i2c_at_A2I_internal_17
lw $t0, -72($fp)
sw $t0, -56($fp)
# GOTO label_ENDIF_122
j label_ENDIF_122
label_FALSEIF_121: 
   # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 3
   sw $t0, 12($v0)
   sw $v0, -92($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_133
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_133
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_133
   # IF_ZERO local_i2c_at_A2I_internal_22 GOTO label_FALSE_133
   # IF_ZERO local_i2c_at_A2I_internal_22 GOTO label_FALSE_133
   lw $t0, -92($fp)
   beq $t0, 0, label_FALSE_133
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_STRING_136
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_STRING_136
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_STRING_136
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_137
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_COMPARE_BY_VALUE_137
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_137
   # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -92($fp)
   sub $a0, $a0, $a1
   sw $a0, -88($fp)
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
   # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
   lw $t0, -88($fp)
   beq $t0, 0, label_TRUE_134
   # GOTO label_FALSE_133
   j label_FALSE_133
   label_COMPARE_BY_VALUE_137: 
      # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
      lw $a0, 0($fp)
      lw $a1, -92($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -88($fp)
      # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
      # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
      lw $t0, -88($fp)
      beq $t0, 0, label_TRUE_134
      # GOTO label_FALSE_133
      j label_FALSE_133
      label_COMPARE_STRING_136: 
         # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -92($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -88($fp)
         # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_CONTINUE_138
         # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_CONTINUE_138
         lw $t0, -88($fp)
         beq $t0, 0, label_CONTINUE_138
         # GOTO label_FALSE_133
         j label_FALSE_133
         label_CONTINUE_138: 
            # LOCAL local_i2c_at_A2I_internal_21 --> -88($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_22 --> -92($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -92($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_139: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_140
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_139
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_140: 
                  # Store result
                  sw $a2, -88($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
                  # IF_ZERO local_i2c_at_A2I_internal_21 GOTO label_TRUE_134
                  lw $t0, -88($fp)
                  beq $t0, 0, label_TRUE_134
                  label_FALSE_133: 
                     # LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -84($fp)
                     # GOTO label_END_135
j label_END_135
label_TRUE_134: 
   # LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   label_END_135: 
# LOCAL local_i2c_at_A2I_internal_18 --> -76($fp)
# LOCAL local_i2c_at_A2I_internal_20 --> -84($fp)
# Obtain value from -84($fp)
lw $v0, -84($fp)
lw $v0, 12($v0)
sw $v0, -76($fp)
# IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_FALSEIF_131
# IF_ZERO local_i2c_at_A2I_internal_18 GOTO label_FALSEIF_131
lw $t0, -76($fp)
beq $t0, 0, label_FALSEIF_131
# LOCAL local_i2c_at_A2I_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_17
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -96($fp)
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# LOCAL local_i2c_at_A2I_internal_23 --> -96($fp)
# local_i2c_at_A2I_internal_19 = local_i2c_at_A2I_internal_23
lw $t0, -96($fp)
sw $t0, -80($fp)
# GOTO label_ENDIF_132
j label_ENDIF_132
label_FALSEIF_131: 
   # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 4
   sw $t0, 12($v0)
   sw $v0, -116($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_143
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_143
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_143
   # IF_ZERO local_i2c_at_A2I_internal_28 GOTO label_FALSE_143
   # IF_ZERO local_i2c_at_A2I_internal_28 GOTO label_FALSE_143
   lw $t0, -116($fp)
   beq $t0, 0, label_FALSE_143
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_STRING_146
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_STRING_146
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_STRING_146
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_147
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_COMPARE_BY_VALUE_147
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_147
   # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -116($fp)
   sub $a0, $a0, $a1
   sw $a0, -112($fp)
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
   # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
   lw $t0, -112($fp)
   beq $t0, 0, label_TRUE_144
   # GOTO label_FALSE_143
   j label_FALSE_143
   label_COMPARE_BY_VALUE_147: 
      # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
      lw $a0, 0($fp)
      lw $a1, -116($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -112($fp)
      # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
      # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
      lw $t0, -112($fp)
      beq $t0, 0, label_TRUE_144
      # GOTO label_FALSE_143
      j label_FALSE_143
      label_COMPARE_STRING_146: 
         # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -116($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -112($fp)
         # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_CONTINUE_148
         # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_CONTINUE_148
         lw $t0, -112($fp)
         beq $t0, 0, label_CONTINUE_148
         # GOTO label_FALSE_143
         j label_FALSE_143
         label_CONTINUE_148: 
            # LOCAL local_i2c_at_A2I_internal_27 --> -112($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_28 --> -116($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -116($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_149: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_150
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_149
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_150: 
                  # Store result
                  sw $a2, -112($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
                  # IF_ZERO local_i2c_at_A2I_internal_27 GOTO label_TRUE_144
                  lw $t0, -112($fp)
                  beq $t0, 0, label_TRUE_144
                  label_FALSE_143: 
                     # LOCAL local_i2c_at_A2I_internal_26 --> -108($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -108($fp)
                     # GOTO label_END_145
j label_END_145
label_TRUE_144: 
   # LOCAL local_i2c_at_A2I_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -108($fp)
   label_END_145: 
# LOCAL local_i2c_at_A2I_internal_24 --> -100($fp)
# LOCAL local_i2c_at_A2I_internal_26 --> -108($fp)
# Obtain value from -108($fp)
lw $v0, -108($fp)
lw $v0, 12($v0)
sw $v0, -100($fp)
# IF_ZERO local_i2c_at_A2I_internal_24 GOTO label_FALSEIF_141
# IF_ZERO local_i2c_at_A2I_internal_24 GOTO label_FALSEIF_141
lw $t0, -100($fp)
beq $t0, 0, label_FALSEIF_141
# LOCAL local_i2c_at_A2I_internal_29 --> -120($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_18
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -120($fp)
# LOCAL local_i2c_at_A2I_internal_25 --> -104($fp)
# LOCAL local_i2c_at_A2I_internal_29 --> -120($fp)
# local_i2c_at_A2I_internal_25 = local_i2c_at_A2I_internal_29
lw $t0, -120($fp)
sw $t0, -104($fp)
# GOTO label_ENDIF_142
j label_ENDIF_142
label_FALSEIF_141: 
   # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 5
   sw $t0, 12($v0)
   sw $v0, -140($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_153
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_153
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_153
   # IF_ZERO local_i2c_at_A2I_internal_34 GOTO label_FALSE_153
   # IF_ZERO local_i2c_at_A2I_internal_34 GOTO label_FALSE_153
   lw $t0, -140($fp)
   beq $t0, 0, label_FALSE_153
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_STRING_156
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_STRING_156
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_STRING_156
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_157
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_COMPARE_BY_VALUE_157
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_157
   # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -140($fp)
   sub $a0, $a0, $a1
   sw $a0, -136($fp)
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
   # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
   lw $t0, -136($fp)
   beq $t0, 0, label_TRUE_154
   # GOTO label_FALSE_153
   j label_FALSE_153
   label_COMPARE_BY_VALUE_157: 
      # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
      lw $a0, 0($fp)
      lw $a1, -140($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -136($fp)
      # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
      # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
      lw $t0, -136($fp)
      beq $t0, 0, label_TRUE_154
      # GOTO label_FALSE_153
      j label_FALSE_153
      label_COMPARE_STRING_156: 
         # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -140($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -136($fp)
         # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_CONTINUE_158
         # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_CONTINUE_158
         lw $t0, -136($fp)
         beq $t0, 0, label_CONTINUE_158
         # GOTO label_FALSE_153
         j label_FALSE_153
         label_CONTINUE_158: 
            # LOCAL local_i2c_at_A2I_internal_33 --> -136($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_34 --> -140($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -140($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_159: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_160
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_159
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_160: 
                  # Store result
                  sw $a2, -136($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
                  # IF_ZERO local_i2c_at_A2I_internal_33 GOTO label_TRUE_154
                  lw $t0, -136($fp)
                  beq $t0, 0, label_TRUE_154
                  label_FALSE_153: 
                     # LOCAL local_i2c_at_A2I_internal_32 --> -132($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -132($fp)
                     # GOTO label_END_155
j label_END_155
label_TRUE_154: 
   # LOCAL local_i2c_at_A2I_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -132($fp)
   label_END_155: 
# LOCAL local_i2c_at_A2I_internal_30 --> -124($fp)
# LOCAL local_i2c_at_A2I_internal_32 --> -132($fp)
# Obtain value from -132($fp)
lw $v0, -132($fp)
lw $v0, 12($v0)
sw $v0, -124($fp)
# IF_ZERO local_i2c_at_A2I_internal_30 GOTO label_FALSEIF_151
# IF_ZERO local_i2c_at_A2I_internal_30 GOTO label_FALSEIF_151
lw $t0, -124($fp)
beq $t0, 0, label_FALSEIF_151
# LOCAL local_i2c_at_A2I_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_19
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -144($fp)
# LOCAL local_i2c_at_A2I_internal_31 --> -128($fp)
# LOCAL local_i2c_at_A2I_internal_35 --> -144($fp)
# local_i2c_at_A2I_internal_31 = local_i2c_at_A2I_internal_35
lw $t0, -144($fp)
sw $t0, -128($fp)
# GOTO label_ENDIF_152
j label_ENDIF_152
label_FALSEIF_151: 
   # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 6
   sw $t0, 12($v0)
   sw $v0, -164($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_163
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_163
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_163
   # IF_ZERO local_i2c_at_A2I_internal_40 GOTO label_FALSE_163
   # IF_ZERO local_i2c_at_A2I_internal_40 GOTO label_FALSE_163
   lw $t0, -164($fp)
   beq $t0, 0, label_FALSE_163
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_STRING_166
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_STRING_166
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_STRING_166
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_167
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_COMPARE_BY_VALUE_167
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_167
   # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -164($fp)
   sub $a0, $a0, $a1
   sw $a0, -160($fp)
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
   # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
   lw $t0, -160($fp)
   beq $t0, 0, label_TRUE_164
   # GOTO label_FALSE_163
   j label_FALSE_163
   label_COMPARE_BY_VALUE_167: 
      # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
      lw $a0, 0($fp)
      lw $a1, -164($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -160($fp)
      # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
      # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
      lw $t0, -160($fp)
      beq $t0, 0, label_TRUE_164
      # GOTO label_FALSE_163
      j label_FALSE_163
      label_COMPARE_STRING_166: 
         # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -164($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -160($fp)
         # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_CONTINUE_168
         # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_CONTINUE_168
         lw $t0, -160($fp)
         beq $t0, 0, label_CONTINUE_168
         # GOTO label_FALSE_163
         j label_FALSE_163
         label_CONTINUE_168: 
            # LOCAL local_i2c_at_A2I_internal_39 --> -160($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_40 --> -164($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -164($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_169: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_170
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_169
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_170: 
                  # Store result
                  sw $a2, -160($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
                  # IF_ZERO local_i2c_at_A2I_internal_39 GOTO label_TRUE_164
                  lw $t0, -160($fp)
                  beq $t0, 0, label_TRUE_164
                  label_FALSE_163: 
                     # LOCAL local_i2c_at_A2I_internal_38 --> -156($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -156($fp)
                     # GOTO label_END_165
j label_END_165
label_TRUE_164: 
   # LOCAL local_i2c_at_A2I_internal_38 --> -156($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -156($fp)
   label_END_165: 
# LOCAL local_i2c_at_A2I_internal_36 --> -148($fp)
# LOCAL local_i2c_at_A2I_internal_38 --> -156($fp)
# Obtain value from -156($fp)
lw $v0, -156($fp)
lw $v0, 12($v0)
sw $v0, -148($fp)
# IF_ZERO local_i2c_at_A2I_internal_36 GOTO label_FALSEIF_161
# IF_ZERO local_i2c_at_A2I_internal_36 GOTO label_FALSEIF_161
lw $t0, -148($fp)
beq $t0, 0, label_FALSEIF_161
# LOCAL local_i2c_at_A2I_internal_41 --> -168($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_20
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -168($fp)
# LOCAL local_i2c_at_A2I_internal_37 --> -152($fp)
# LOCAL local_i2c_at_A2I_internal_41 --> -168($fp)
# local_i2c_at_A2I_internal_37 = local_i2c_at_A2I_internal_41
lw $t0, -168($fp)
sw $t0, -152($fp)
# GOTO label_ENDIF_162
j label_ENDIF_162
label_FALSEIF_161: 
   # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 7
   sw $t0, 12($v0)
   sw $v0, -188($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_173
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_173
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_173
   # IF_ZERO local_i2c_at_A2I_internal_46 GOTO label_FALSE_173
   # IF_ZERO local_i2c_at_A2I_internal_46 GOTO label_FALSE_173
   lw $t0, -188($fp)
   beq $t0, 0, label_FALSE_173
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_STRING_176
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_STRING_176
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_STRING_176
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_177
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_COMPARE_BY_VALUE_177
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_177
   # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -188($fp)
   sub $a0, $a0, $a1
   sw $a0, -184($fp)
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
   # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
   lw $t0, -184($fp)
   beq $t0, 0, label_TRUE_174
   # GOTO label_FALSE_173
   j label_FALSE_173
   label_COMPARE_BY_VALUE_177: 
      # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
      lw $a0, 0($fp)
      lw $a1, -188($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -184($fp)
      # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
      # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
      lw $t0, -184($fp)
      beq $t0, 0, label_TRUE_174
      # GOTO label_FALSE_173
      j label_FALSE_173
      label_COMPARE_STRING_176: 
         # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -188($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -184($fp)
         # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_CONTINUE_178
         # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_CONTINUE_178
         lw $t0, -184($fp)
         beq $t0, 0, label_CONTINUE_178
         # GOTO label_FALSE_173
         j label_FALSE_173
         label_CONTINUE_178: 
            # LOCAL local_i2c_at_A2I_internal_45 --> -184($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_46 --> -188($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -188($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_179: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_180
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_179
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_180: 
                  # Store result
                  sw $a2, -184($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
                  # IF_ZERO local_i2c_at_A2I_internal_45 GOTO label_TRUE_174
                  lw $t0, -184($fp)
                  beq $t0, 0, label_TRUE_174
                  label_FALSE_173: 
                     # LOCAL local_i2c_at_A2I_internal_44 --> -180($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -180($fp)
                     # GOTO label_END_175
j label_END_175
label_TRUE_174: 
   # LOCAL local_i2c_at_A2I_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -180($fp)
   label_END_175: 
# LOCAL local_i2c_at_A2I_internal_42 --> -172($fp)
# LOCAL local_i2c_at_A2I_internal_44 --> -180($fp)
# Obtain value from -180($fp)
lw $v0, -180($fp)
lw $v0, 12($v0)
sw $v0, -172($fp)
# IF_ZERO local_i2c_at_A2I_internal_42 GOTO label_FALSEIF_171
# IF_ZERO local_i2c_at_A2I_internal_42 GOTO label_FALSEIF_171
lw $t0, -172($fp)
beq $t0, 0, label_FALSEIF_171
# LOCAL local_i2c_at_A2I_internal_47 --> -192($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_21
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -192($fp)
# LOCAL local_i2c_at_A2I_internal_43 --> -176($fp)
# LOCAL local_i2c_at_A2I_internal_47 --> -192($fp)
# local_i2c_at_A2I_internal_43 = local_i2c_at_A2I_internal_47
lw $t0, -192($fp)
sw $t0, -176($fp)
# GOTO label_ENDIF_172
j label_ENDIF_172
label_FALSEIF_171: 
   # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 8
   sw $t0, 12($v0)
   sw $v0, -212($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_183
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_183
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_183
   # IF_ZERO local_i2c_at_A2I_internal_52 GOTO label_FALSE_183
   # IF_ZERO local_i2c_at_A2I_internal_52 GOTO label_FALSE_183
   lw $t0, -212($fp)
   beq $t0, 0, label_FALSE_183
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_STRING_186
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_STRING_186
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_STRING_186
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_187
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_COMPARE_BY_VALUE_187
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_187
   # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -212($fp)
   sub $a0, $a0, $a1
   sw $a0, -208($fp)
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
   # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
   lw $t0, -208($fp)
   beq $t0, 0, label_TRUE_184
   # GOTO label_FALSE_183
   j label_FALSE_183
   label_COMPARE_BY_VALUE_187: 
      # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
      lw $a0, 0($fp)
      lw $a1, -212($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -208($fp)
      # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
      # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
      lw $t0, -208($fp)
      beq $t0, 0, label_TRUE_184
      # GOTO label_FALSE_183
      j label_FALSE_183
      label_COMPARE_STRING_186: 
         # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -212($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -208($fp)
         # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_CONTINUE_188
         # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_CONTINUE_188
         lw $t0, -208($fp)
         beq $t0, 0, label_CONTINUE_188
         # GOTO label_FALSE_183
         j label_FALSE_183
         label_CONTINUE_188: 
            # LOCAL local_i2c_at_A2I_internal_51 --> -208($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_52 --> -212($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -212($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_189: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_190
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_189
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_190: 
                  # Store result
                  sw $a2, -208($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
                  # IF_ZERO local_i2c_at_A2I_internal_51 GOTO label_TRUE_184
                  lw $t0, -208($fp)
                  beq $t0, 0, label_TRUE_184
                  label_FALSE_183: 
                     # LOCAL local_i2c_at_A2I_internal_50 --> -204($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -204($fp)
                     # GOTO label_END_185
j label_END_185
label_TRUE_184: 
   # LOCAL local_i2c_at_A2I_internal_50 --> -204($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -204($fp)
   label_END_185: 
# LOCAL local_i2c_at_A2I_internal_48 --> -196($fp)
# LOCAL local_i2c_at_A2I_internal_50 --> -204($fp)
# Obtain value from -204($fp)
lw $v0, -204($fp)
lw $v0, 12($v0)
sw $v0, -196($fp)
# IF_ZERO local_i2c_at_A2I_internal_48 GOTO label_FALSEIF_181
# IF_ZERO local_i2c_at_A2I_internal_48 GOTO label_FALSEIF_181
lw $t0, -196($fp)
beq $t0, 0, label_FALSEIF_181
# LOCAL local_i2c_at_A2I_internal_53 --> -216($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_22
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -216($fp)
# LOCAL local_i2c_at_A2I_internal_49 --> -200($fp)
# LOCAL local_i2c_at_A2I_internal_53 --> -216($fp)
# local_i2c_at_A2I_internal_49 = local_i2c_at_A2I_internal_53
lw $t0, -216($fp)
sw $t0, -200($fp)
# GOTO label_ENDIF_182
j label_ENDIF_182
label_FALSEIF_181: 
   # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 9
   sw $t0, 12($v0)
   sw $v0, -236($fp)
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_193
   # IF_ZERO param_i2c_at_A2I_i_0 GOTO label_FALSE_193
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_193
   # IF_ZERO local_i2c_at_A2I_internal_58 GOTO label_FALSE_193
   # IF_ZERO local_i2c_at_A2I_internal_58 GOTO label_FALSE_193
   lw $t0, -236($fp)
   beq $t0, 0, label_FALSE_193
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_STRING_196
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_STRING_196
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_STRING_196
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_197
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_COMPARE_BY_VALUE_197
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_197
   # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
   # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -236($fp)
   sub $a0, $a0, $a1
   sw $a0, -232($fp)
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
   # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
   lw $t0, -232($fp)
   beq $t0, 0, label_TRUE_194
   # GOTO label_FALSE_193
   j label_FALSE_193
   label_COMPARE_BY_VALUE_197: 
      # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
      # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
      lw $a0, 0($fp)
      lw $a1, -236($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -232($fp)
      # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
      # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
      lw $t0, -232($fp)
      beq $t0, 0, label_TRUE_194
      # GOTO label_FALSE_193
      j label_FALSE_193
      label_COMPARE_STRING_196: 
         # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
         # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -236($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -232($fp)
         # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_CONTINUE_198
         # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_CONTINUE_198
         lw $t0, -232($fp)
         beq $t0, 0, label_CONTINUE_198
         # GOTO label_FALSE_193
         j label_FALSE_193
         label_CONTINUE_198: 
            # LOCAL local_i2c_at_A2I_internal_57 --> -232($fp)
            # PARAM param_i2c_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2c_at_A2I_internal_58 --> -236($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -236($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_199: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_200
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_199
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_200: 
                  # Store result
                  sw $a2, -232($fp)
                  # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
                  # IF_ZERO local_i2c_at_A2I_internal_57 GOTO label_TRUE_194
                  lw $t0, -232($fp)
                  beq $t0, 0, label_TRUE_194
                  label_FALSE_193: 
                     # LOCAL local_i2c_at_A2I_internal_56 --> -228($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -228($fp)
                     # GOTO label_END_195
j label_END_195
label_TRUE_194: 
   # LOCAL local_i2c_at_A2I_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -228($fp)
   label_END_195: 
# LOCAL local_i2c_at_A2I_internal_54 --> -220($fp)
# LOCAL local_i2c_at_A2I_internal_56 --> -228($fp)
# Obtain value from -228($fp)
lw $v0, -228($fp)
lw $v0, 12($v0)
sw $v0, -220($fp)
# IF_ZERO local_i2c_at_A2I_internal_54 GOTO label_FALSEIF_191
# IF_ZERO local_i2c_at_A2I_internal_54 GOTO label_FALSEIF_191
lw $t0, -220($fp)
beq $t0, 0, label_FALSEIF_191
# LOCAL local_i2c_at_A2I_internal_59 --> -240($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_23
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -240($fp)
# LOCAL local_i2c_at_A2I_internal_55 --> -224($fp)
# LOCAL local_i2c_at_A2I_internal_59 --> -240($fp)
# local_i2c_at_A2I_internal_55 = local_i2c_at_A2I_internal_59
lw $t0, -240($fp)
sw $t0, -224($fp)
# GOTO label_ENDIF_192
j label_ENDIF_192
label_FALSEIF_191: 
   # LOCAL local_i2c_at_A2I_internal_62 --> -252($fp)
   # local_i2c_at_A2I_internal_62 = SELF
   sw $s1, -252($fp)
   # LOCAL local_i2c_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_i2c_at_A2I_internal_62 --> -252($fp)
   # local_i2c_at_A2I_internal_60 = local_i2c_at_A2I_internal_62
   lw $t0, -252($fp)
   sw $t0, -244($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2c_at_A2I_internal_60 --> -244($fp)
   # LOCAL local_i2c_at_A2I_internal_61 --> -248($fp)
   # local_i2c_at_A2I_internal_61 = VCALL local_i2c_at_A2I_internal_60 abort
   # Save new self pointer in $s1
   lw $s1, -244($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -248($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2c_at_A2I_internal_63 --> -256($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_24
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -256($fp)
   # LOCAL local_i2c_at_A2I_internal_55 --> -224($fp)
   # LOCAL local_i2c_at_A2I_internal_63 --> -256($fp)
   # local_i2c_at_A2I_internal_55 = local_i2c_at_A2I_internal_63
   lw $t0, -256($fp)
   sw $t0, -224($fp)
   label_ENDIF_192: 
# LOCAL local_i2c_at_A2I_internal_49 --> -200($fp)
# LOCAL local_i2c_at_A2I_internal_55 --> -224($fp)
# local_i2c_at_A2I_internal_49 = local_i2c_at_A2I_internal_55
lw $t0, -224($fp)
sw $t0, -200($fp)
label_ENDIF_182: 
# LOCAL local_i2c_at_A2I_internal_43 --> -176($fp)
# LOCAL local_i2c_at_A2I_internal_49 --> -200($fp)
# local_i2c_at_A2I_internal_43 = local_i2c_at_A2I_internal_49
lw $t0, -200($fp)
sw $t0, -176($fp)
label_ENDIF_172: 
# LOCAL local_i2c_at_A2I_internal_37 --> -152($fp)
# LOCAL local_i2c_at_A2I_internal_43 --> -176($fp)
# local_i2c_at_A2I_internal_37 = local_i2c_at_A2I_internal_43
lw $t0, -176($fp)
sw $t0, -152($fp)
label_ENDIF_162: 
# LOCAL local_i2c_at_A2I_internal_31 --> -128($fp)
# LOCAL local_i2c_at_A2I_internal_37 --> -152($fp)
# local_i2c_at_A2I_internal_31 = local_i2c_at_A2I_internal_37
lw $t0, -152($fp)
sw $t0, -128($fp)
label_ENDIF_152: 
# LOCAL local_i2c_at_A2I_internal_25 --> -104($fp)
# LOCAL local_i2c_at_A2I_internal_31 --> -128($fp)
# local_i2c_at_A2I_internal_25 = local_i2c_at_A2I_internal_31
lw $t0, -128($fp)
sw $t0, -104($fp)
label_ENDIF_142: 
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# LOCAL local_i2c_at_A2I_internal_25 --> -104($fp)
# local_i2c_at_A2I_internal_19 = local_i2c_at_A2I_internal_25
lw $t0, -104($fp)
sw $t0, -80($fp)
label_ENDIF_132: 
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# LOCAL local_i2c_at_A2I_internal_19 --> -80($fp)
# local_i2c_at_A2I_internal_13 = local_i2c_at_A2I_internal_19
lw $t0, -80($fp)
sw $t0, -56($fp)
label_ENDIF_122: 
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# LOCAL local_i2c_at_A2I_internal_13 --> -56($fp)
# local_i2c_at_A2I_internal_7 = local_i2c_at_A2I_internal_13
lw $t0, -56($fp)
sw $t0, -32($fp)
label_ENDIF_112: 
# LOCAL local_i2c_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2c_at_A2I_internal_7 --> -32($fp)
# local_i2c_at_A2I_internal_1 = local_i2c_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_102: 
# RETURN local_i2c_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_i2c_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 264
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_at_A2I implementation.
# @Params:
# 	0($fp) = param_a2i_at_A2I_s_0
function_a2i_at_A2I: 
   # Allocate stack frame for function function_a2i_at_A2I.
   subu $sp, $sp, 208
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 208
   # LOCAL local_a2i_at_A2I_internal_4 --> -20($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_4 = PARAM param_a2i_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_4 --> -20($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # local_a2i_at_A2I_internal_5 = VCALL local_a2i_at_A2I_internal_4 length
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 0($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # IF_ZERO local_a2i_at_A2I_internal_5 GOTO label_FALSE_203
   # IF_ZERO local_a2i_at_A2I_internal_5 GOTO label_FALSE_203
   lw $t0, -24($fp)
   beq $t0, 0, label_FALSE_203
   # IF_ZERO local_a2i_at_A2I_internal_6 GOTO label_FALSE_203
   # IF_ZERO local_a2i_at_A2I_internal_6 GOTO label_FALSE_203
   lw $t0, -28($fp)
   beq $t0, 0, label_FALSE_203
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # Comparing -24($fp) type with String
   la $v0, String
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_206
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_STRING_206
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_206
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Bool
   la $v0, Bool
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_207
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Int
   la $v0, Int
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_207
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_207
   # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
   # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
   # Load pointers and SUB
   lw $a0, -24($fp)
   lw $a1, -28($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
   # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_204
   # GOTO label_FALSE_203
   j label_FALSE_203
   label_COMPARE_BY_VALUE_207: 
      # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
      # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
      # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
      lw $a0, -24($fp)
      lw $a1, -28($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
      # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_204
      # GOTO label_FALSE_203
      j label_FALSE_203
      label_COMPARE_STRING_206: 
         # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
         # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
         # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
         # Load strings for comparison
         lw $v0, -24($fp)
         lw $v1, -28($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_CONTINUE_208
         # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_CONTINUE_208
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_208
         # GOTO label_FALSE_203
         j label_FALSE_203
         label_CONTINUE_208: 
            # LOCAL local_a2i_at_A2I_internal_3 --> -16($fp)
            # LOCAL local_a2i_at_A2I_internal_5 --> -24($fp)
            # LOCAL local_a2i_at_A2I_internal_6 --> -28($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -24($fp)
            lw $v1, -28($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_209: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_210
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_209
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_210: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
                  # IF_ZERO local_a2i_at_A2I_internal_3 GOTO label_TRUE_204
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_204
                  label_FALSE_203: 
                     # LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_205
j label_END_205
label_TRUE_204: 
   # LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_205: 
# LOCAL local_a2i_at_A2I_internal_0 --> -4($fp)
# LOCAL local_a2i_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_FALSEIF_201
# IF_ZERO local_a2i_at_A2I_internal_0 GOTO label_FALSEIF_201
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_201
# LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -32($fp)
# LOCAL local_a2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_a2i_at_A2I_internal_7 --> -32($fp)
# local_a2i_at_A2I_internal_1 = local_a2i_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_202
j label_ENDIF_202
label_FALSEIF_201: 
   # LOCAL local_a2i_at_A2I_internal_12 --> -52($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_12 = PARAM param_a2i_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   # ARG local_a2i_at_A2I_internal_14
   # LOCAL local_a2i_at_A2I_internal_14 --> -60($fp)
   lw $t0, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -64($fp)
   # ARG local_a2i_at_A2I_internal_15
   # LOCAL local_a2i_at_A2I_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_12 --> -52($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # local_a2i_at_A2I_internal_13 = VCALL local_a2i_at_A2I_internal_12 substr
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_25
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # IF_ZERO local_a2i_at_A2I_internal_13 GOTO label_FALSE_213
   # IF_ZERO local_a2i_at_A2I_internal_13 GOTO label_FALSE_213
   lw $t0, -56($fp)
   beq $t0, 0, label_FALSE_213
   # IF_ZERO local_a2i_at_A2I_internal_16 GOTO label_FALSE_213
   # IF_ZERO local_a2i_at_A2I_internal_16 GOTO label_FALSE_213
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_213
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # Comparing -56($fp) type with String
   la $v0, String
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_STRING_216
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_STRING_216
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_STRING_216
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Bool
   la $v0, Bool
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_217
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Int
   la $v0, Int
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_COMPARE_BY_VALUE_217
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_217
   # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, -56($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
   # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
   lw $t0, -48($fp)
   beq $t0, 0, label_TRUE_214
   # GOTO label_FALSE_213
   j label_FALSE_213
   label_COMPARE_BY_VALUE_217: 
      # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
      # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
      # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
      lw $a0, -56($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -48($fp)
      # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
      # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
      lw $t0, -48($fp)
      beq $t0, 0, label_TRUE_214
      # GOTO label_FALSE_213
      j label_FALSE_213
      label_COMPARE_STRING_216: 
         # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
         # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
         # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, -56($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -48($fp)
         # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_CONTINUE_218
         # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_CONTINUE_218
         lw $t0, -48($fp)
         beq $t0, 0, label_CONTINUE_218
         # GOTO label_FALSE_213
         j label_FALSE_213
         label_CONTINUE_218: 
            # LOCAL local_a2i_at_A2I_internal_11 --> -48($fp)
            # LOCAL local_a2i_at_A2I_internal_13 --> -56($fp)
            # LOCAL local_a2i_at_A2I_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -56($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_219: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_220
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_219
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_220: 
                  # Store result
                  sw $a2, -48($fp)
                  # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
                  # IF_ZERO local_a2i_at_A2I_internal_11 GOTO label_TRUE_214
                  lw $t0, -48($fp)
                  beq $t0, 0, label_TRUE_214
                  label_FALSE_213: 
                     # LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -44($fp)
                     # GOTO label_END_215
j label_END_215
label_TRUE_214: 
   # LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   label_END_215: 
# LOCAL local_a2i_at_A2I_internal_8 --> -36($fp)
# LOCAL local_a2i_at_A2I_internal_10 --> -44($fp)
# Obtain value from -44($fp)
lw $v0, -44($fp)
lw $v0, 12($v0)
sw $v0, -36($fp)
# IF_ZERO local_a2i_at_A2I_internal_8 GOTO label_FALSEIF_211
# IF_ZERO local_a2i_at_A2I_internal_8 GOTO label_FALSEIF_211
lw $t0, -36($fp)
beq $t0, 0, label_FALSEIF_211
# LOCAL local_a2i_at_A2I_internal_20 --> -84($fp)
# local_a2i_at_A2I_internal_20 = SELF
sw $s1, -84($fp)
# LOCAL local_a2i_at_A2I_internal_18 --> -76($fp)
# LOCAL local_a2i_at_A2I_internal_20 --> -84($fp)
# local_a2i_at_A2I_internal_18 = local_a2i_at_A2I_internal_20
lw $t0, -84($fp)
sw $t0, -76($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_21 --> -88($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_21 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -96($fp)
# ARG local_a2i_at_A2I_internal_23
# LOCAL local_a2i_at_A2I_internal_23 --> -96($fp)
lw $t0, -96($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_25 --> -104($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_25 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -104($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_25 --> -104($fp)
# LOCAL local_a2i_at_A2I_internal_26 --> -108($fp)
# local_a2i_at_A2I_internal_26 = VCALL local_a2i_at_A2I_internal_25 length
# Save new self pointer in $s1
lw $s1, -104($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 0($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -108($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_27 --> -112($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -112($fp)
# LOCAL local_a2i_at_A2I_internal_24 --> -100($fp)
# LOCAL local_a2i_at_A2I_internal_26 --> -108($fp)
# LOCAL local_a2i_at_A2I_internal_27 --> -112($fp)
# local_a2i_at_A2I_internal_24 = local_a2i_at_A2I_internal_26 - local_a2i_at_A2I_internal_27
lw $t1, -108($fp)
lw $t0, 12($t1)
lw $t1, -112($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -100($fp)
# ARG local_a2i_at_A2I_internal_24
# LOCAL local_a2i_at_A2I_internal_24 --> -100($fp)
lw $t0, -100($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_21 --> -88($fp)
# LOCAL local_a2i_at_A2I_internal_22 --> -92($fp)
# local_a2i_at_A2I_internal_22 = VCALL local_a2i_at_A2I_internal_21 substr
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_A2I_internal_22
# LOCAL local_a2i_at_A2I_internal_22 --> -92($fp)
lw $t0, -92($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_18 --> -76($fp)
# LOCAL local_a2i_at_A2I_internal_19 --> -80($fp)
# local_a2i_at_A2I_internal_19 = VCALL local_a2i_at_A2I_internal_18 a2i_aux
# Save new self pointer in $s1
lw $s1, -76($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 32($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -80($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# LOCAL local_a2i_at_A2I_internal_19 --> -80($fp)
lw $t0, -80($fp)
lw $t0, 12($t0)
not $t0, $t0
add $t0, $t0, 1
sw $t0, -72($fp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
lw $t0, -72($fp)
sw $t0, 12($v0)
sw $v0, -72($fp)
# LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
# LOCAL local_a2i_at_A2I_internal_17 --> -72($fp)
# local_a2i_at_A2I_internal_9 = local_a2i_at_A2I_internal_17
lw $t0, -72($fp)
sw $t0, -40($fp)
# GOTO label_ENDIF_212
j label_ENDIF_212
label_FALSEIF_211: 
   # LOCAL local_a2i_at_A2I_internal_32 --> -132($fp)
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   # local_a2i_at_A2I_internal_32 = PARAM param_a2i_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -132($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -140($fp)
   # ARG local_a2i_at_A2I_internal_34
   # LOCAL local_a2i_at_A2I_internal_34 --> -140($fp)
   lw $t0, -140($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_35 --> -144($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -144($fp)
   # ARG local_a2i_at_A2I_internal_35
   # LOCAL local_a2i_at_A2I_internal_35 --> -144($fp)
   lw $t0, -144($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_32 --> -132($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # local_a2i_at_A2I_internal_33 = VCALL local_a2i_at_A2I_internal_32 substr
   # Save new self pointer in $s1
   lw $s1, -132($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -136($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_26
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -148($fp)
   # IF_ZERO local_a2i_at_A2I_internal_33 GOTO label_FALSE_223
   # IF_ZERO local_a2i_at_A2I_internal_33 GOTO label_FALSE_223
   lw $t0, -136($fp)
   beq $t0, 0, label_FALSE_223
   # IF_ZERO local_a2i_at_A2I_internal_36 GOTO label_FALSE_223
   # IF_ZERO local_a2i_at_A2I_internal_36 GOTO label_FALSE_223
   lw $t0, -148($fp)
   beq $t0, 0, label_FALSE_223
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # Comparing -136($fp) type with String
   la $v0, String
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_STRING_226
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_STRING_226
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_STRING_226
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # Comparing -136($fp) type with Bool
   la $v0, Bool
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_227
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # Comparing -136($fp) type with Int
   la $v0, Int
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_COMPARE_BY_VALUE_227
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_227
   # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
   # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
   # Load pointers and SUB
   lw $a0, -136($fp)
   lw $a1, -148($fp)
   sub $a0, $a0, $a1
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
   # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
   lw $t0, -128($fp)
   beq $t0, 0, label_TRUE_224
   # GOTO label_FALSE_223
   j label_FALSE_223
   label_COMPARE_BY_VALUE_227: 
      # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
      # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
      # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
      lw $a0, -136($fp)
      lw $a1, -148($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -128($fp)
      # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
      # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
      lw $t0, -128($fp)
      beq $t0, 0, label_TRUE_224
      # GOTO label_FALSE_223
      j label_FALSE_223
      label_COMPARE_STRING_226: 
         # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
         # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
         # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
         # Load strings for comparison
         lw $v0, -136($fp)
         lw $v1, -148($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -128($fp)
         # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_CONTINUE_228
         # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_CONTINUE_228
         lw $t0, -128($fp)
         beq $t0, 0, label_CONTINUE_228
         # GOTO label_FALSE_223
         j label_FALSE_223
         label_CONTINUE_228: 
            # LOCAL local_a2i_at_A2I_internal_31 --> -128($fp)
            # LOCAL local_a2i_at_A2I_internal_33 --> -136($fp)
            # LOCAL local_a2i_at_A2I_internal_36 --> -148($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -136($fp)
            lw $v1, -148($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_229: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_230
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_229
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_230: 
                  # Store result
                  sw $a2, -128($fp)
                  # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
                  # IF_ZERO local_a2i_at_A2I_internal_31 GOTO label_TRUE_224
                  lw $t0, -128($fp)
                  beq $t0, 0, label_TRUE_224
                  label_FALSE_223: 
                     # LOCAL local_a2i_at_A2I_internal_30 --> -124($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -124($fp)
                     # GOTO label_END_225
j label_END_225
label_TRUE_224: 
   # LOCAL local_a2i_at_A2I_internal_30 --> -124($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -124($fp)
   label_END_225: 
# LOCAL local_a2i_at_A2I_internal_28 --> -116($fp)
# LOCAL local_a2i_at_A2I_internal_30 --> -124($fp)
# Obtain value from -124($fp)
lw $v0, -124($fp)
lw $v0, 12($v0)
sw $v0, -116($fp)
# IF_ZERO local_a2i_at_A2I_internal_28 GOTO label_FALSEIF_221
# IF_ZERO local_a2i_at_A2I_internal_28 GOTO label_FALSEIF_221
lw $t0, -116($fp)
beq $t0, 0, label_FALSEIF_221
# LOCAL local_a2i_at_A2I_internal_39 --> -160($fp)
# local_a2i_at_A2I_internal_39 = SELF
sw $s1, -160($fp)
# LOCAL local_a2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_a2i_at_A2I_internal_39 --> -160($fp)
# local_a2i_at_A2I_internal_37 = local_a2i_at_A2I_internal_39
lw $t0, -160($fp)
sw $t0, -152($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_40 --> -164($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_40 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -164($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_42 --> -172($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -172($fp)
# ARG local_a2i_at_A2I_internal_42
# LOCAL local_a2i_at_A2I_internal_42 --> -172($fp)
lw $t0, -172($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_44 --> -180($fp)
# PARAM param_a2i_at_A2I_s_0 --> 0($fp)
# local_a2i_at_A2I_internal_44 = PARAM param_a2i_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -180($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_A2I_internal_44 --> -180($fp)
# LOCAL local_a2i_at_A2I_internal_45 --> -184($fp)
# local_a2i_at_A2I_internal_45 = VCALL local_a2i_at_A2I_internal_44 length
# Save new self pointer in $s1
lw $s1, -180($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 0($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -184($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_46 --> -188($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -188($fp)
# LOCAL local_a2i_at_A2I_internal_43 --> -176($fp)
# LOCAL local_a2i_at_A2I_internal_45 --> -184($fp)
# LOCAL local_a2i_at_A2I_internal_46 --> -188($fp)
# local_a2i_at_A2I_internal_43 = local_a2i_at_A2I_internal_45 - local_a2i_at_A2I_internal_46
lw $t1, -184($fp)
lw $t0, 12($t1)
lw $t1, -188($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -176($fp)
# ARG local_a2i_at_A2I_internal_43
# LOCAL local_a2i_at_A2I_internal_43 --> -176($fp)
lw $t0, -176($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_40 --> -164($fp)
# LOCAL local_a2i_at_A2I_internal_41 --> -168($fp)
# local_a2i_at_A2I_internal_41 = VCALL local_a2i_at_A2I_internal_40 substr
# Save new self pointer in $s1
lw $s1, -164($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -168($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_A2I_internal_41
# LOCAL local_a2i_at_A2I_internal_41 --> -168($fp)
lw $t0, -168($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_A2I_internal_37 --> -152($fp)
# LOCAL local_a2i_at_A2I_internal_38 --> -156($fp)
# local_a2i_at_A2I_internal_38 = VCALL local_a2i_at_A2I_internal_37 a2i_aux
# Save new self pointer in $s1
lw $s1, -152($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 32($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -156($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_A2I_internal_29 --> -120($fp)
# LOCAL local_a2i_at_A2I_internal_38 --> -156($fp)
# local_a2i_at_A2I_internal_29 = local_a2i_at_A2I_internal_38
lw $t0, -156($fp)
sw $t0, -120($fp)
# GOTO label_ENDIF_222
j label_ENDIF_222
label_FALSEIF_221: 
   # LOCAL local_a2i_at_A2I_internal_49 --> -200($fp)
   # local_a2i_at_A2I_internal_49 = SELF
   sw $s1, -200($fp)
   # LOCAL local_a2i_at_A2I_internal_47 --> -192($fp)
   # LOCAL local_a2i_at_A2I_internal_49 --> -200($fp)
   # local_a2i_at_A2I_internal_47 = local_a2i_at_A2I_internal_49
   lw $t0, -200($fp)
   sw $t0, -192($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_a2i_at_A2I_s_0
   # PARAM param_a2i_at_A2I_s_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_A2I_internal_47 --> -192($fp)
   # LOCAL local_a2i_at_A2I_internal_48 --> -196($fp)
   # local_a2i_at_A2I_internal_48 = VCALL local_a2i_at_A2I_internal_47 a2i_aux
   # Save new self pointer in $s1
   lw $s1, -192($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 32($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -196($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_A2I_internal_29 --> -120($fp)
   # LOCAL local_a2i_at_A2I_internal_48 --> -196($fp)
   # local_a2i_at_A2I_internal_29 = local_a2i_at_A2I_internal_48
   lw $t0, -196($fp)
   sw $t0, -120($fp)
   label_ENDIF_222: 
# LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
# LOCAL local_a2i_at_A2I_internal_29 --> -120($fp)
# local_a2i_at_A2I_internal_9 = local_a2i_at_A2I_internal_29
lw $t0, -120($fp)
sw $t0, -40($fp)
label_ENDIF_212: 
# LOCAL local_a2i_at_A2I_internal_1 --> -8($fp)
# LOCAL local_a2i_at_A2I_internal_9 --> -40($fp)
# local_a2i_at_A2I_internal_1 = local_a2i_at_A2I_internal_9
lw $t0, -40($fp)
sw $t0, -8($fp)
label_ENDIF_202: 
# RETURN local_a2i_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_a2i_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 208
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_aux_at_A2I implementation.
# @Params:
# 	0($fp) = param_a2i_aux_at_A2I_s_0
function_a2i_aux_at_A2I: 
   # Allocate stack frame for function function_a2i_aux_at_A2I.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_1 --> -8($fp)
   # local_a2i_aux_at_A2I_int_0 = local_a2i_aux_at_A2I_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_a2i_aux_at_A2I_j_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_a2i_aux_at_A2I_s_0 --> 0($fp)
   # local_a2i_aux_at_A2I_internal_3 = PARAM param_a2i_aux_at_A2I_s_0
   lw $t0, 0($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_aux_at_A2I_internal_3 --> -16($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_4 --> -20($fp)
   # local_a2i_aux_at_A2I_internal_4 = VCALL local_a2i_aux_at_A2I_internal_3 length
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 0($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_aux_at_A2I_j_2 --> -12($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_4 --> -20($fp)
   # local_a2i_aux_at_A2I_j_2 = local_a2i_aux_at_A2I_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
   # LOCAL local_a2i_aux_at_A2I_internal_6 --> -28($fp)
   # local_a2i_aux_at_A2I_i_5 = local_a2i_aux_at_A2I_internal_6
   lw $t0, -28($fp)
   sw $t0, -24($fp)
   label_WHILE_231: 
      # LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
      # LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
      # LOCAL local_a2i_aux_at_A2I_j_2 --> -12($fp)
      lw $a0, -24($fp)
      lw $a1, -12($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -36($fp)
      # IF_GREATER_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      # IF_GREATER_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      lw $t0, -36($fp)
      bgt $t0, 0, label_FALSE_233
      # IF_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      # IF_ZERO local_a2i_aux_at_A2I_internal_8 GOTO label_FALSE_233
      lw $t0, -36($fp)
      beq $t0, 0, label_FALSE_233
      # LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -36($fp)
      # GOTO label_END_234
j label_END_234
label_FALSE_233: 
   # LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_234: 
# LOCAL local_a2i_aux_at_A2I_internal_7 --> -32($fp)
# LOCAL local_a2i_aux_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_a2i_aux_at_A2I_internal_7 GOTO label_WHILE_END_232
# IF_ZERO local_a2i_aux_at_A2I_internal_7 GOTO label_WHILE_END_232
lw $t0, -32($fp)
beq $t0, 0, label_WHILE_END_232
# LOCAL local_a2i_aux_at_A2I_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 10
sw $t0, 12($v0)
sw $v0, -48($fp)
# LOCAL local_a2i_aux_at_A2I_internal_10 --> -44($fp)
# LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_11 --> -48($fp)
# local_a2i_aux_at_A2I_internal_10 = local_a2i_aux_at_A2I_int_0 * local_a2i_aux_at_A2I_internal_11
lw $t1, -4($fp)
lw $t0, 12($t1)
lw $t1, -48($fp)
lw $t2, 12($t1)
mul $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -44($fp)
# LOCAL local_a2i_aux_at_A2I_internal_14 --> -60($fp)
# local_a2i_aux_at_A2I_internal_14 = SELF
sw $s1, -60($fp)
# LOCAL local_a2i_aux_at_A2I_internal_12 --> -52($fp)
# LOCAL local_a2i_aux_at_A2I_internal_14 --> -60($fp)
# local_a2i_aux_at_A2I_internal_12 = local_a2i_aux_at_A2I_internal_14
lw $t0, -60($fp)
sw $t0, -52($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_15 --> -64($fp)
# PARAM param_a2i_aux_at_A2I_s_0 --> 0($fp)
# local_a2i_aux_at_A2I_internal_15 = PARAM param_a2i_aux_at_A2I_s_0
lw $t0, 0($fp)
sw $t0, -64($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_a2i_aux_at_A2I_i_5
# LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
lw $t0, -24($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -72($fp)
# ARG local_a2i_aux_at_A2I_internal_17
# LOCAL local_a2i_aux_at_A2I_internal_17 --> -72($fp)
lw $t0, -72($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_15 --> -64($fp)
# LOCAL local_a2i_aux_at_A2I_internal_16 --> -68($fp)
# local_a2i_aux_at_A2I_internal_16 = VCALL local_a2i_aux_at_A2I_internal_15 substr
# Save new self pointer in $s1
lw $s1, -64($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -68($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_aux_at_A2I_internal_16
# LOCAL local_a2i_aux_at_A2I_internal_16 --> -68($fp)
lw $t0, -68($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_A2I_internal_12 --> -52($fp)
# LOCAL local_a2i_aux_at_A2I_internal_13 --> -56($fp)
# local_a2i_aux_at_A2I_internal_13 = VCALL local_a2i_aux_at_A2I_internal_12 c2i
# Save new self pointer in $s1
lw $s1, -52($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 12($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -56($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_aux_at_A2I_internal_9 --> -40($fp)
# LOCAL local_a2i_aux_at_A2I_internal_10 --> -44($fp)
# LOCAL local_a2i_aux_at_A2I_internal_13 --> -56($fp)
# local_a2i_aux_at_A2I_internal_9 = local_a2i_aux_at_A2I_internal_10 + local_a2i_aux_at_A2I_internal_13
lw $t1, -44($fp)
lw $t0, 12($t1)
lw $t1, -56($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -40($fp)
# LOCAL local_a2i_aux_at_A2I_int_0 --> -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_9 --> -40($fp)
# local_a2i_aux_at_A2I_int_0 = local_a2i_aux_at_A2I_internal_9
lw $t0, -40($fp)
sw $t0, -4($fp)
# LOCAL local_a2i_aux_at_A2I_internal_19 --> -80($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -80($fp)
# LOCAL local_a2i_aux_at_A2I_internal_18 --> -76($fp)
# LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_A2I_internal_19 --> -80($fp)
# local_a2i_aux_at_A2I_internal_18 = local_a2i_aux_at_A2I_i_5 + local_a2i_aux_at_A2I_internal_19
lw $t1, -24($fp)
lw $t0, 12($t1)
lw $t1, -80($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -76($fp)
# LOCAL local_a2i_aux_at_A2I_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_A2I_internal_18 --> -76($fp)
# local_a2i_aux_at_A2I_i_5 = local_a2i_aux_at_A2I_internal_18
lw $t0, -76($fp)
sw $t0, -24($fp)
# GOTO label_WHILE_231
j label_WHILE_231
label_WHILE_END_232: 
   # RETURN local_a2i_aux_at_A2I_int_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_a2i_aux_at_A2I.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 88
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_i2a_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2a_at_A2I_i_0
function_i2a_at_A2I: 
   # Allocate stack frame for function function_i2a_at_A2I.
   subu $sp, $sp, 96
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 96
   # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_i2a_at_A2I_i_0 GOTO label_FALSE_237
   # IF_ZERO param_i2a_at_A2I_i_0 GOTO label_FALSE_237
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_237
   # IF_ZERO local_i2a_at_A2I_internal_4 GOTO label_FALSE_237
   # IF_ZERO local_i2a_at_A2I_internal_4 GOTO label_FALSE_237
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_237
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_STRING_240
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_STRING_240
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_240
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_241
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_241
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_241
   # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
   # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_238
   # GOTO label_FALSE_237
   j label_FALSE_237
   label_COMPARE_BY_VALUE_241: 
      # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
      # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
      # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_238
      # GOTO label_FALSE_237
      j label_FALSE_237
      label_COMPARE_STRING_240: 
         # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
         # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_CONTINUE_242
         # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_CONTINUE_242
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_242
         # GOTO label_FALSE_237
         j label_FALSE_237
         label_CONTINUE_242: 
            # LOCAL local_i2a_at_A2I_internal_3 --> -16($fp)
            # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2a_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_243: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_244
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_243
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_244: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
                  # IF_ZERO local_i2a_at_A2I_internal_3 GOTO label_TRUE_238
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_238
                  label_FALSE_237: 
                     # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_239
j label_END_239
label_TRUE_238: 
   # LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_239: 
# LOCAL local_i2a_at_A2I_internal_0 --> -4($fp)
# LOCAL local_i2a_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_FALSEIF_235
# IF_ZERO local_i2a_at_A2I_internal_0 GOTO label_FALSEIF_235
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_235
# LOCAL local_i2a_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_27
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_i2a_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2a_at_A2I_internal_5 --> -24($fp)
# local_i2a_at_A2I_internal_1 = local_i2a_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_236
j label_ENDIF_236
label_FALSEIF_235: 
   # LOCAL local_i2a_at_A2I_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # LOCAL local_i2a_at_A2I_internal_9 --> -40($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   lw $a0, -40($fp)
   lw $a1, 0($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -36($fp)
   # IF_GREATER_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   # IF_GREATER_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   lw $t0, -36($fp)
   bgt $t0, 0, label_FALSE_247
   # IF_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   # IF_ZERO local_i2a_at_A2I_internal_8 GOTO label_FALSE_247
   lw $t0, -36($fp)
   beq $t0, 0, label_FALSE_247
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   # GOTO label_END_248
j label_END_248
label_FALSE_247: 
   # LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_248: 
# LOCAL local_i2a_at_A2I_internal_6 --> -28($fp)
# LOCAL local_i2a_at_A2I_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_i2a_at_A2I_internal_6 GOTO label_FALSEIF_245
# IF_ZERO local_i2a_at_A2I_internal_6 GOTO label_FALSEIF_245
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_245
# LOCAL local_i2a_at_A2I_internal_12 --> -52($fp)
# local_i2a_at_A2I_internal_12 = SELF
sw $s1, -52($fp)
# LOCAL local_i2a_at_A2I_internal_10 --> -44($fp)
# LOCAL local_i2a_at_A2I_internal_12 --> -52($fp)
# local_i2a_at_A2I_internal_10 = local_i2a_at_A2I_internal_12
lw $t0, -52($fp)
sw $t0, -44($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_i2a_at_A2I_i_0
# PARAM param_i2a_at_A2I_i_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_i2a_at_A2I_internal_10 --> -44($fp)
# LOCAL local_i2a_at_A2I_internal_11 --> -48($fp)
# local_i2a_at_A2I_internal_11 = VCALL local_i2a_at_A2I_internal_10 i2a_aux
# Save new self pointer in $s1
lw $s1, -44($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 40($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -48($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
# LOCAL local_i2a_at_A2I_internal_11 --> -48($fp)
# local_i2a_at_A2I_internal_7 = local_i2a_at_A2I_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_246
j label_ENDIF_246
label_FALSEIF_245: 
   # LOCAL local_i2a_at_A2I_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_28
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -64($fp)
   # LOCAL local_i2a_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_i2a_at_A2I_internal_15 --> -64($fp)
   # local_i2a_at_A2I_internal_13 = local_i2a_at_A2I_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_18 --> -76($fp)
   # local_i2a_at_A2I_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_i2a_at_A2I_internal_16 --> -68($fp)
   # LOCAL local_i2a_at_A2I_internal_18 --> -76($fp)
   # local_i2a_at_A2I_internal_16 = local_i2a_at_A2I_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_21 --> -88($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -88($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_i2a_at_A2I_internal_21 --> -88($fp)
   lw $t0, -88($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -84($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -84($fp)
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   # LOCAL local_i2a_at_A2I_internal_19 --> -80($fp)
   # PARAM param_i2a_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_at_A2I_internal_20 --> -84($fp)
   # local_i2a_at_A2I_internal_19 = PARAM param_i2a_at_A2I_i_0 * local_i2a_at_A2I_internal_20
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -84($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # ARG local_i2a_at_A2I_internal_19
   # LOCAL local_i2a_at_A2I_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_16 --> -68($fp)
   # LOCAL local_i2a_at_A2I_internal_17 --> -72($fp)
   # local_i2a_at_A2I_internal_17 = VCALL local_i2a_at_A2I_internal_16 i2a_aux
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_i2a_at_A2I_internal_17
   # LOCAL local_i2a_at_A2I_internal_17 --> -72($fp)
   lw $t0, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_at_A2I_internal_13 --> -56($fp)
   # LOCAL local_i2a_at_A2I_internal_14 --> -60($fp)
   # local_i2a_at_A2I_internal_14 = VCALL local_i2a_at_A2I_internal_13 concat
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 36($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
   # LOCAL local_i2a_at_A2I_internal_14 --> -60($fp)
   # local_i2a_at_A2I_internal_7 = local_i2a_at_A2I_internal_14
   lw $t0, -60($fp)
   sw $t0, -32($fp)
   label_ENDIF_246: 
# LOCAL local_i2a_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2a_at_A2I_internal_7 --> -32($fp)
# local_i2a_at_A2I_internal_1 = local_i2a_at_A2I_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_236: 
# RETURN local_i2a_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_i2a_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 96
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_i2a_aux_at_A2I implementation.
# @Params:
# 	0($fp) = param_i2a_aux_at_A2I_i_0
function_i2a_aux_at_A2I: 
   # Allocate stack frame for function function_i2a_aux_at_A2I.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_i2a_aux_at_A2I_i_0 GOTO label_FALSE_251
   # IF_ZERO param_i2a_aux_at_A2I_i_0 GOTO label_FALSE_251
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_251
   # IF_ZERO local_i2a_aux_at_A2I_internal_4 GOTO label_FALSE_251
   # IF_ZERO local_i2a_aux_at_A2I_internal_4 GOTO label_FALSE_251
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_251
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_STRING_254
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_STRING_254
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_254
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_255
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_COMPARE_BY_VALUE_255
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_255
   # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
   # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_252
   # GOTO label_FALSE_251
   j label_FALSE_251
   label_COMPARE_BY_VALUE_255: 
      # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
      # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
      # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
      # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_252
      # GOTO label_FALSE_251
      j label_FALSE_251
      label_COMPARE_STRING_254: 
         # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
         # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
         # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_CONTINUE_256
         # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_CONTINUE_256
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_256
         # GOTO label_FALSE_251
         j label_FALSE_251
         label_CONTINUE_256: 
            # LOCAL local_i2a_aux_at_A2I_internal_3 --> -16($fp)
            # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
            # LOCAL local_i2a_aux_at_A2I_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_257: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_258
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_257
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_258: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
                  # IF_ZERO local_i2a_aux_at_A2I_internal_3 GOTO label_TRUE_252
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_252
                  label_FALSE_251: 
                     # LOCAL local_i2a_aux_at_A2I_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_253
j label_END_253
label_TRUE_252: 
   # LOCAL local_i2a_aux_at_A2I_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_253: 
# LOCAL local_i2a_aux_at_A2I_internal_0 --> -4($fp)
# LOCAL local_i2a_aux_at_A2I_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_FALSEIF_249
# IF_ZERO local_i2a_aux_at_A2I_internal_0 GOTO label_FALSEIF_249
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_249
# LOCAL local_i2a_aux_at_A2I_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_29
sw $t0, 12($v0)
li $t0, 0
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_i2a_aux_at_A2I_internal_1 --> -8($fp)
# LOCAL local_i2a_aux_at_A2I_internal_5 --> -24($fp)
# local_i2a_aux_at_A2I_internal_1 = local_i2a_aux_at_A2I_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_250
j label_ENDIF_250
label_FALSEIF_249: 
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 10
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_7 --> -32($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_8 --> -36($fp)
   # local_i2a_aux_at_A2I_internal_7 = PARAM param_i2a_aux_at_A2I_i_0 / local_i2a_aux_at_A2I_internal_8
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -36($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -32($fp)
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_7 --> -32($fp)
   # local_i2a_aux_at_A2I_next_6 = local_i2a_aux_at_A2I_internal_7
   lw $t0, -32($fp)
   sw $t0, -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_13 --> -56($fp)
   # local_i2a_aux_at_A2I_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_13 --> -56($fp)
   # local_i2a_aux_at_A2I_internal_11 = local_i2a_aux_at_A2I_internal_13
   lw $t0, -56($fp)
   sw $t0, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_i2a_aux_at_A2I_next_6
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   lw $t0, -28($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_11 --> -48($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_12 --> -52($fp)
   # local_i2a_aux_at_A2I_internal_12 = VCALL local_i2a_aux_at_A2I_internal_11 i2a_aux
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_aux_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_12 --> -52($fp)
   # local_i2a_aux_at_A2I_internal_9 = local_i2a_aux_at_A2I_internal_12
   lw $t0, -52($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_16 --> -68($fp)
   # local_i2a_aux_at_A2I_internal_16 = SELF
   sw $s1, -68($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_14 --> -60($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_16 --> -68($fp)
   # local_i2a_aux_at_A2I_internal_14 = local_i2a_aux_at_A2I_internal_16
   lw $t0, -68($fp)
   sw $t0, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 10
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_18 --> -76($fp)
   # LOCAL local_i2a_aux_at_A2I_next_6 --> -28($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_19 --> -80($fp)
   # local_i2a_aux_at_A2I_internal_18 = local_i2a_aux_at_A2I_next_6 * local_i2a_aux_at_A2I_internal_19
   lw $t1, -28($fp)
   lw $t0, 12($t1)
   lw $t1, -80($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_17 --> -72($fp)
   # PARAM param_i2a_aux_at_A2I_i_0 --> 0($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_18 --> -76($fp)
   # local_i2a_aux_at_A2I_internal_17 = PARAM param_i2a_aux_at_A2I_i_0 - local_i2a_aux_at_A2I_internal_18
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -76($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   # ARG local_i2a_aux_at_A2I_internal_17
   # LOCAL local_i2a_aux_at_A2I_internal_17 --> -72($fp)
   lw $t0, -72($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_14 --> -60($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_15 --> -64($fp)
   # local_i2a_aux_at_A2I_internal_15 = VCALL local_i2a_aux_at_A2I_internal_14 i2c
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 60($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_i2a_aux_at_A2I_internal_15
   # LOCAL local_i2a_aux_at_A2I_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_i2a_aux_at_A2I_internal_9 --> -40($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_10 --> -44($fp)
   # local_i2a_aux_at_A2I_internal_10 = VCALL local_i2a_aux_at_A2I_internal_9 concat
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 36($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_i2a_aux_at_A2I_internal_1 --> -8($fp)
   # LOCAL local_i2a_aux_at_A2I_internal_10 --> -44($fp)
   # local_i2a_aux_at_A2I_internal_1 = local_i2a_aux_at_A2I_internal_10
   lw $t0, -44($fp)
   sw $t0, -8($fp)
   label_ENDIF_250: 
# RETURN local_i2a_aux_at_A2I_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_i2a_aux_at_A2I.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 88
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 104
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 104
   # LOCAL local_main_at_Main_a_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = ALLOCATE A2I
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A2I
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A2I_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -16($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_1 = local_main_at_Main_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_30
   sw $t0, 12($v0)
   li $t0, 6
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # ARG local_main_at_Main_internal_4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = VCALL local_main_at_Main_internal_1 a2i
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 52($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_a_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_a_0 = local_main_at_Main_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # LOCAL local_main_at_Main_b_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -24($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = ALLOCATE A2I
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, A2I
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, A2I_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -36($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_internal_8
   lw $t0, -36($fp)
   sw $t0, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 678987
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   # ARG local_main_at_Main_internal_9
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   lw $t0, -40($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 i2a
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 48($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_b_5 --> -24($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_b_5 = local_main_at_Main_internal_7
   lw $t0, -32($fp)
   sw $t0, -24($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # local_main_at_Main_internal_12 = SELF
   sw $s1, -52($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # local_main_at_Main_internal_10 = local_main_at_Main_internal_12
   lw $t0, -52($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_main_at_Main_a_0
   # LOCAL local_main_at_Main_a_0 --> -4($fp)
   lw $t0, -4($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = VCALL local_main_at_Main_internal_10 out_int
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 24($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_13 = local_main_at_Main_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_31
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # ARG local_main_at_Main_internal_16
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   lw $t0, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = VCALL local_main_at_Main_internal_13 out_string
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_19 --> -80($fp)
   # local_main_at_Main_internal_19 = SELF
   sw $s1, -80($fp)
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   # LOCAL local_main_at_Main_internal_19 --> -80($fp)
   # local_main_at_Main_internal_17 = local_main_at_Main_internal_19
   lw $t0, -80($fp)
   sw $t0, -72($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_main_at_Main_b_5
   # LOCAL local_main_at_Main_b_5 --> -24($fp)
   lw $t0, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_17 --> -72($fp)
   # LOCAL local_main_at_Main_internal_18 --> -76($fp)
   # local_main_at_Main_internal_18 = VCALL local_main_at_Main_internal_17 out_string
   # Save new self pointer in $s1
   lw $s1, -72($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -76($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_22 --> -92($fp)
   # local_main_at_Main_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   # LOCAL local_main_at_Main_internal_22 --> -92($fp)
   # local_main_at_Main_internal_20 = local_main_at_Main_internal_22
   lw $t0, -92($fp)
   sw $t0, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_32
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -96($fp)
   # ARG local_main_at_Main_internal_23
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   lw $t0, -96($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   # LOCAL local_main_at_Main_internal_21 --> -88($fp)
   # local_main_at_Main_internal_21 = VCALL local_main_at_Main_internal_20 out_string
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_21
   lw $v0, -88($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 104
   jr $ra
   # Function END

