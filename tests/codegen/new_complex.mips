.text
.globl main
main:
# Save method directions in the methods array
la $v0, methods
la $t9, entry
sw $t9, 0($v0)
la $t9, function_abort_Object
sw $t9, 4($v0)
la $t9, function_type_name_Object
sw $t9, 8($v0)
la $t9, function_copy_Object
sw $t9, 12($v0)
la $t9, function_out_string_IO
sw $t9, 16($v0)
la $t9, function_out_int_IO
sw $t9, 20($v0)
la $t9, function_in_int_IO
sw $t9, 24($v0)
la $t9, function_in_string_IO
sw $t9, 28($v0)
la $t9, function_length_String
sw $t9, 32($v0)
la $t9, function_concat_String
sw $t9, 36($v0)
la $t9, function_substr_String
sw $t9, 40($v0)
la $t9, function_type_name_String
sw $t9, 44($v0)
la $t9, function_copy_String
sw $t9, 48($v0)
la $t9, function_type_name_Int
sw $t9, 52($v0)
la $t9, function_copy_Int
sw $t9, 56($v0)
la $t9, function_type_name_Bool
sw $t9, 60($v0)
la $t9, function_copy_Bool
sw $t9, 64($v0)
la $t9, function_abort_String
sw $t9, 68($v0)
la $t9, function_abort_Int
sw $t9, 72($v0)
la $t9, function_abort_Bool
sw $t9, 76($v0)
la $t9, function_main_Main
sw $t9, 80($v0)
la $t9, function_Complex_Complex
sw $t9, 84($v0)
la $t9, function_init_Complex
sw $t9, 88($v0)
la $t9, function_print_Complex
sw $t9, 92($v0)
la $t9, function_reflect_0_Complex
sw $t9, 96($v0)
la $t9, function_reflect_X_Complex
sw $t9, 100($v0)
la $t9, function_reflect_Y_Complex
sw $t9, 104($v0)
la $t9, function_equal_Complex
sw $t9, 108($v0)
la $t9, function_x_value_Complex
sw $t9, 112($v0)
la $t9, function_y_value_Complex
sw $t9, 116($v0)
# Save types directions in the types array
la $t9, types
# Save space to locate the type info
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_String
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 0($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 28
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_length_String in a0
lw $a0, 32($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_concat_String in a0
lw $a0, 36($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_substr_String in a0
lw $a0, 40($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_abort_String in a0
lw $a0, 68($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_type_name_String in a0
lw $a0, 44($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_copy_String in a0
lw $a0, 48($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Int
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 4($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Int in a0
lw $a0, 72($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Int in a0
lw $a0, 52($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Int in a0
lw $a0, 56($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Object
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 8($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bool
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 12($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Bool in a0
lw $a0, 76($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Bool in a0
lw $a0, 60($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Bool in a0
lw $a0, 64($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_IO
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 16($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Main
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 20($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 36
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_main_Main in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Complex
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 24($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 68
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_init_Complex in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_print_Complex in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_reflect_0_Complex in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_reflect_X_Complex in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_reflect_Y_Complex in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_equal_Complex in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_x_value_Complex in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_y_value_Complex in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
# Save the direction of the method function_Complex_Complex in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 64($v0)
sw $v0, 8($t8)
# Copying parents
lw $v0, 0($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 4($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 8($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 12($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 16($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 20($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 24($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)

entry:
# Gets the params from the stack
move $fp, $sp
# Gets the frame pointer from the stack
# Updates stack pointer pushing local__internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local__internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Main
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
lw $t1, -4($fp)
# Static Dispatch of the method main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal function_main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
li $v0, 0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Object_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_abort_Object_self_0
move $t1, $t0
sw $t1, -4($fp)
# Exiting the program
li $t8, 0
# Printing abort message
li $v0, 4
la $a0, abort_msg
syscall
li $v0, 4
lw $a0, 0($t0)
syscall
li $v0, 4
la $a0, new_line
syscall
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)
sw $t1, -4($fp)

function_type_name_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_type_name_Object_result_0 <- Type of self
lw $t1, 0($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t9, 4($t0)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
move $a0, $t9
syscall
move $t1, $v0
# Loop to copy every field of the previous object
# t8 the register to loop
li $t8, 0
loop_0:
# In t9 is stored the size of the object
bge $t8, $t9, exit_0
lw $a0, ($t0)
sw $a0, ($v0)
addi $v0, $v0, 4
addi $t0, $t0, 4
# Increase loop counter
addi $t8, $t8, 4
j loop_0
exit_0:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_out_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_string_String_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_string_String_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing a string
li $v0, 4
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_out_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value number
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_int_IO_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_int_IO_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing an int
li $v0, 1
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_in_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_int_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Reading a int
li $v0, 5
syscall
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_in_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_string_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t0, $v0
# Reading a string
# Putting buffer in a0
move $a0, $t0
# Putting length of string in a1
li $a1, 356
li $v0, 8
syscall
# Walks to eliminate the newline
move $t9, $t0
start_1:
lb $t8, 0($t9)
beqz $t8, end_1
add $t9, $t9, 1
j start_1
end_1:
addiu $t9, $t9, -1
sb $0, ($t9)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_length_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_length_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
move $t8, $t0
# Determining the length of a string
loop_2:
lb $t9, 0($t8)
beq $t9, $zero, end_2
addi $t8, $t8, 1
j loop_2
end_2:
sub $t1, $t8, $t0
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_concat_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_concat_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -8($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t2
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
# Concatenate second string on result buffer
move $a0, $t1
move $a1, $v0
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_3
# Definition of strcopier
strcopier:
# In a0 is the source and in a1 is the destination
loop_3:
lb $t8, ($a0)
beq $t8, $zero, end_3
addiu $a0, $a0, 1
sb $t8, ($a1)
addiu $a1, $a1, 1
b loop_3
end_3:
move $v0, $a1
jr $ra
finish_3:
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_substr_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value begin
addiu $fp, $fp, 4
# Pops the register with the param value end
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_substr_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
lw $t3, -8($fp)
# Getting the substring of a node
# Move to the first position in the string
li $v0, 0
move $t8, $t3
start_4:
lb $t9, 0($t8)
beqz $t9, error_4
addi $v0, 1
bgt $v0, $t0, end_len_4
addi $t8, 1
j start_4
end_len_4:
# Saving dest to iterate over him
move $v0, $t2
loop_4:
sub $t9, $v0, $t2
beq $t9, $t1, end_4
lb $t9, 0($t8)
beqz $t9, error_4
sb $t9, 0($v0)
addi $t8, $t8, 1
addi $v0, $v0, 1
j loop_4
error_4:
la $a0, index_error
li $v0, 4
move $a0, $t3
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 1
move $a0, $t1
syscall
j .raise
end_4:
sb $0, 0($v0)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_type_name_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_String_result_0 type_String
la $t0, type_String
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t1, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t1
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_5
finish_5:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Int_result_0 type_Int
la $t0, type_Int
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_Int_result_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Bool_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Bool_result_0 type_Bool
la $t0, type_Bool
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_result_Bool_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_result_Bool_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_String_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self string_abort
la $t0, string_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Int_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self int_abort
la $t0, int_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Bool_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self bool_abort
la $t0, bool_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_main_Main_c_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_34 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 20
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Complex
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 20
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Complex
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# This function will consume the arguments
jal function_Complex_Complex
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# local_main_Main_internal_3 <- Type of local_main_Main_internal_1
lw $t1, 0($t0)
lw $t2, -20($fp)
# Saves in local_main_Main_internal_4 data_0
la $t2, data_0
# local_main_Main_internal_3 <- local_main_Main_internal_3 = local_main_Main_internal_4
move $t8, $t1
move $t9, $t2
loop_6:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_6
beqz $a1, mismatch_6
seq $v0, $a0, $a1
beqz $v0, mismatch_6
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_6
mismatch_6:
li $v0, 0
j end_6
check_6:
bnez $a1, mismatch_6
li $v0, 1
end_6:
move $t1, $v0
# If not local_main_Main_internal_3 goto continue__56
sw $t0, -8($fp)
sw $t1, -16($fp)
sw $t2, -20($fp)
beqz $t1, continue__56
la $a0, dispatch_error
j .raise
continue__56:
lw $t0, -8($fp)
lw $t1, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_init_Complex
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_main_Main_internal_2 to local_main_Main_c_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -32($fp)
# local_main_Main_internal_7 <- Type of local_main_Main_c_0
lw $t2, 0($t1)
lw $t3, -36($fp)
# Saves in local_main_Main_internal_8 data_0
la $t3, data_0
# local_main_Main_internal_7 <- local_main_Main_internal_7 = local_main_Main_internal_8
move $t8, $t2
move $t9, $t3
loop_7:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_7
beqz $a1, mismatch_7
seq $v0, $a0, $a1
beqz $v0, mismatch_7
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_7
mismatch_7:
li $v0, 0
j end_7
check_7:
bnez $a1, mismatch_7
li $v0, 1
end_7:
move $t2, $v0
# If not local_main_Main_internal_7 goto continue__70
sw $t0, -12($fp)
sw $t1, -4($fp)
sw $t2, -32($fp)
sw $t3, -36($fp)
beqz $t2, continue__70
la $a0, dispatch_error
j .raise
continue__70:
lw $t0, -4($fp)
lw $t1, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_reflect_X_Complex
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -44($fp)
# local_main_Main_internal_10 <- Type of local_main_Main_c_0
lw $t2, 0($t1)
lw $t3, -48($fp)
# Saves in local_main_Main_internal_11 data_0
la $t3, data_0
# local_main_Main_internal_10 <- local_main_Main_internal_10 = local_main_Main_internal_11
move $t8, $t2
move $t9, $t3
loop_8:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_8
beqz $a1, mismatch_8
seq $v0, $a0, $a1
beqz $v0, mismatch_8
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_8
mismatch_8:
li $v0, 0
j end_8
check_8:
bnez $a1, mismatch_8
li $v0, 1
end_8:
move $t2, $v0
# If not local_main_Main_internal_10 goto continue__82
sw $t0, -28($fp)
sw $t1, -4($fp)
sw $t2, -44($fp)
sw $t3, -48($fp)
beqz $t2, continue__82
la $a0, dispatch_error
j .raise
continue__82:
lw $t0, -4($fp)
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_reflect_0_Complex
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
lw $t2, -24($fp)
# local_main_Main_internal_5 <- local_main_Main_internal_6 = local_main_Main_internal_9
seq $t2, $t1, $t0
# If local_main_Main_internal_5 goto true__93
sw $t0, -40($fp)
sw $t1, -28($fp)
sw $t2, -24($fp)
bnez $t2, true__93
lw $t0, -56($fp)
# Saves in local_main_Main_internal_13 data_1
la $t0, data_1
lw $t1, -0($fp)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_main_Main_internal_14 to local_main_Main_internal_12
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -60($fp)
sw $t1, -52($fp)
j end__93
true__93:
lw $t0, -64($fp)
# Saves in local_main_Main_internal_15 data_2
la $t0, data_2
lw $t1, -0($fp)
lw $t2, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_main_Main_internal_16 to local_main_Main_internal_12
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -68($fp)
sw $t1, -52($fp)
end__93:
lw $t0, -4($fp)
lw $t1, -76($fp)
# local_main_Main_internal_18 <- Type of local_main_Main_c_0
lw $t1, 0($t0)
lw $t2, -80($fp)
# Saves in local_main_Main_internal_19 data_0
la $t2, data_0
# local_main_Main_internal_18 <- local_main_Main_internal_18 = local_main_Main_internal_19
move $t8, $t1
move $t9, $t2
loop_9:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_9
beqz $a1, mismatch_9
seq $v0, $a0, $a1
beqz $v0, mismatch_9
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_9
mismatch_9:
li $v0, 0
j end_9
check_9:
bnez $a1, mismatch_9
li $v0, 1
end_9:
move $t1, $v0
# If not local_main_Main_internal_18 goto continue__116
sw $t0, -4($fp)
sw $t1, -76($fp)
sw $t2, -80($fp)
beqz $t1, continue__116
la $a0, dispatch_error
j .raise
continue__116:
lw $t0, -4($fp)
lw $t1, -72($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_reflect_X_Complex
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -72($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -72($fp)
# saves the return value
move $t0, $v0
lw $t1, -88($fp)
# local_main_Main_internal_21 <- Type of local_main_Main_internal_17
lw $t1, 0($t0)
lw $t2, -92($fp)
# Saves in local_main_Main_internal_22 data_0
la $t2, data_0
# local_main_Main_internal_21 <- local_main_Main_internal_21 = local_main_Main_internal_22
move $t8, $t1
move $t9, $t2
loop_10:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_10
beqz $a1, mismatch_10
seq $v0, $a0, $a1
beqz $v0, mismatch_10
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_10
mismatch_10:
li $v0, 0
j end_10
check_10:
bnez $a1, mismatch_10
li $v0, 1
end_10:
move $t1, $v0
# If not local_main_Main_internal_21 goto continue__128
sw $t0, -72($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
beqz $t1, continue__128
la $a0, dispatch_error
j .raise
continue__128:
lw $t0, -72($fp)
lw $t1, -84($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_reflect_Y_Complex
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -72($fp)
sw $t1, -84($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -84($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -100($fp)
# local_main_Main_internal_24 <- Type of local_main_Main_c_0
lw $t2, 0($t1)
lw $t3, -104($fp)
# Saves in local_main_Main_internal_25 data_0
la $t3, data_0
# local_main_Main_internal_24 <- local_main_Main_internal_24 = local_main_Main_internal_25
move $t8, $t2
move $t9, $t3
loop_11:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_11
beqz $a1, mismatch_11
seq $v0, $a0, $a1
beqz $v0, mismatch_11
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_11
mismatch_11:
li $v0, 0
j end_11
check_11:
bnez $a1, mismatch_11
li $v0, 1
end_11:
move $t2, $v0
# If not local_main_Main_internal_24 goto continue__141
sw $t0, -84($fp)
sw $t1, -4($fp)
sw $t2, -100($fp)
sw $t3, -104($fp)
beqz $t2, continue__141
la $a0, dispatch_error
j .raise
continue__141:
lw $t0, -4($fp)
lw $t1, -96($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_reflect_0_Complex
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -96($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -84($fp)
lw $t2, -112($fp)
# local_main_Main_internal_27 <- Type of local_main_Main_internal_20
lw $t2, 0($t1)
lw $t3, -116($fp)
# Saves in local_main_Main_internal_28 data_0
la $t3, data_0
# local_main_Main_internal_27 <- local_main_Main_internal_27 = local_main_Main_internal_28
move $t8, $t2
move $t9, $t3
loop_12:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_12
beqz $a1, mismatch_12
seq $v0, $a0, $a1
beqz $v0, mismatch_12
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_12
mismatch_12:
li $v0, 0
j end_12
check_12:
bnez $a1, mismatch_12
li $v0, 1
end_12:
move $t2, $v0
# If not local_main_Main_internal_27 goto continue__153
sw $t0, -96($fp)
sw $t1, -84($fp)
sw $t2, -112($fp)
sw $t3, -116($fp)
beqz $t2, continue__153
la $a0, dispatch_error
j .raise
continue__153:
lw $t0, -84($fp)
lw $t1, -108($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_equal_Complex
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -96($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -84($fp)
sw $t1, -108($fp)
sw $t2, -96($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -108($fp)
# saves the return value
move $t0, $v0
# If local_main_Main_internal_26 goto true__163
sw $t0, -108($fp)
bnez $t0, true__163
lw $t0, -124($fp)
# Saves in local_main_Main_internal_30 data_3
la $t0, data_3
lw $t1, -0($fp)
lw $t2, -128($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -124($fp)
sw $t1, -0($fp)
sw $t2, -128($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -128($fp)
# saves the return value
move $t0, $v0
lw $t1, -120($fp)
# Moving local_main_Main_internal_31 to local_main_Main_internal_29
move $t1, $t0
sw $t1, -120($fp)
sw $t0, -128($fp)
sw $t1, -120($fp)
j end__163
true__163:
lw $t0, -132($fp)
# Saves in local_main_Main_internal_32 data_4
la $t0, data_4
lw $t1, -0($fp)
lw $t2, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -0($fp)
sw $t2, -136($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -120($fp)
# Moving local_main_Main_internal_33 to local_main_Main_internal_29
move $t1, $t0
sw $t1, -120($fp)
sw $t0, -136($fp)
sw $t1, -120($fp)
end__163:
lw $t0, -120($fp)
lw $t1, -140($fp)
# Moving local_main_Main_internal_29 to local_main_Main_internal_34
move $t1, $t0
sw $t1, -140($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -120($fp)
sw $t1, -140($fp)
# Removing all locals from stack
addiu $sp, $sp, 144
jr $ra


function_Complex_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Complex_Complex_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . x <- SET 0
li $t9, 0
sw $t9, 12($t0)
# self . y <- SET 0
li $t9, 0
sw $t9, 16($t0)
lw $t1, -4($fp)
# Moving self to local_Complex_Complex_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_init_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value a
addiu $fp, $fp, 4
# Pops the register with the param value b
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_init_Complex_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_init_Complex_x_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_init_Complex_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_init_Complex_y_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_init_Complex_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
lw $t1, -16($fp)
# local_init_Complex_x_1 <- GET self . x
lw $t1, 12($t0)
lw $t2, -4($fp)
lw $t3, -12($fp)
# local_init_Complex_internal_0 <- local_init_Complex_x_1 = a
seq $t3, $t1, $t2
lw $t4, -24($fp)
# local_init_Complex_y_3 <- GET self . y
lw $t4, 16($t0)
lw $t5, -0($fp)
lw $t6, -20($fp)
# local_init_Complex_internal_2 <- local_init_Complex_y_3 = b
seq $t6, $t4, $t5
lw $t7, -28($fp)
# Moving self to local_init_Complex_internal_4
move $t7, $t0
sw $t7, -28($fp)
move $v0, $t7
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -16($fp)
sw $t2, -4($fp)
sw $t3, -12($fp)
sw $t4, -24($fp)
sw $t5, -0($fp)
sw $t6, -20($fp)
sw $t7, -28($fp)
# Removing all locals from stack
addiu $sp, $sp, 32
jr $ra


function_print_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_Complex_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_y_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_x_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_y_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_x_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Complex_internal_18 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_print_Complex_y_1 <- GET self . y
lw $t1, 16($t0)
lw $t2, -4($fp)
# local_print_Complex_internal_0 <- local_print_Complex_y_1 = 0
li $t9, 0
seq $t2, $t1, $t9
# If local_print_Complex_internal_0 goto true__215
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -4($fp)
bnez $t2, true__215
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_print_Complex_x_3 <- GET self . x
lw $t1, 12($t0)
lw $t2, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -16($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Saves in local_print_Complex_internal_5 data_5
la $t1, data_5
lw $t2, -32($fp)
# local_print_Complex_internal_7 <- Type of local_print_Complex_internal_4
lw $t2, 0($t0)
lw $t3, -36($fp)
# Saves in local_print_Complex_internal_8 data_0
la $t3, data_0
# local_print_Complex_internal_7 <- local_print_Complex_internal_7 = local_print_Complex_internal_8
move $t8, $t2
move $t9, $t3
loop_13:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_13
beqz $a1, mismatch_13
seq $v0, $a0, $a1
beqz $v0, mismatch_13
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_13
mismatch_13:
li $v0, 0
j end_13
check_13:
bnez $a1, mismatch_13
li $v0, 1
end_13:
move $t2, $v0
# If not local_print_Complex_internal_7 goto continue__229
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -32($fp)
sw $t3, -36($fp)
beqz $t2, continue__229
la $a0, dispatch_error
j .raise
continue__229:
lw $t0, -20($fp)
lw $t1, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -24($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -28($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -40($fp)
# local_print_Complex_y_9 <- GET self . y
lw $t2, 16($t1)
lw $t3, -48($fp)
# local_print_Complex_internal_11 <- Type of local_print_Complex_internal_6
lw $t3, 0($t0)
lw $t4, -52($fp)
# Saves in local_print_Complex_internal_12 data_0
la $t4, data_0
# local_print_Complex_internal_11 <- local_print_Complex_internal_11 = local_print_Complex_internal_12
move $t8, $t3
move $t9, $t4
loop_14:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_14
beqz $a1, mismatch_14
seq $v0, $a0, $a1
beqz $v0, mismatch_14
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_14
mismatch_14:
li $v0, 0
j end_14
check_14:
bnez $a1, mismatch_14
li $v0, 1
end_14:
move $t3, $v0
# If not local_print_Complex_internal_11 goto continue__244
sw $t0, -28($fp)
sw $t1, -0($fp)
sw $t2, -40($fp)
sw $t3, -48($fp)
sw $t4, -52($fp)
beqz $t3, continue__244
la $a0, dispatch_error
j .raise
continue__244:
lw $t0, -28($fp)
lw $t1, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -40($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -44($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -56($fp)
# Saves in local_print_Complex_internal_13 data_6
la $t1, data_6
lw $t2, -64($fp)
# local_print_Complex_internal_15 <- Type of local_print_Complex_internal_10
lw $t2, 0($t0)
lw $t3, -68($fp)
# Saves in local_print_Complex_internal_16 data_0
la $t3, data_0
# local_print_Complex_internal_15 <- local_print_Complex_internal_15 = local_print_Complex_internal_16
move $t8, $t2
move $t9, $t3
loop_15:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_15
beqz $a1, mismatch_15
seq $v0, $a0, $a1
beqz $v0, mismatch_15
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_15
mismatch_15:
li $v0, 0
j end_15
check_15:
bnez $a1, mismatch_15
li $v0, 1
end_15:
move $t2, $v0
# If not local_print_Complex_internal_15 goto continue__260
sw $t0, -44($fp)
sw $t1, -56($fp)
sw $t2, -64($fp)
sw $t3, -68($fp)
beqz $t2, continue__260
la $a0, dispatch_error
j .raise
continue__260:
lw $t0, -44($fp)
lw $t1, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -56($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -44($fp)
sw $t1, -60($fp)
sw $t2, -56($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_print_Complex_internal_14 to local_print_Complex_internal_2
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -60($fp)
sw $t1, -12($fp)
j end__215
true__215:
lw $t0, -0($fp)
lw $t1, -72($fp)
# local_print_Complex_x_17 <- GET self . x
lw $t1, 12($t0)
lw $t2, -76($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -72($fp)
sw $t2, -76($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -76($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_print_Complex_internal_18 to local_print_Complex_internal_2
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -76($fp)
sw $t1, -12($fp)
end__215:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 80
jr $ra


function_reflect_0_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_reflect_0_Complex_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_x_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_x_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_y_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_y_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_0_Complex_internal_8 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_reflect_0_Complex_x_1 <- GET self . x
lw $t1, 12($t0)
lw $t2, -16($fp)
# local_reflect_0_Complex_x_3 <- GET self . x
lw $t2, 12($t0)
lw $t3, -12($fp)
# local_reflect_0_Complex_internal_2 <- ~local_reflect_0_Complex_x_3
not $t3, $t2
addi $t3, $t3, 1
lw $t4, -4($fp)
# local_reflect_0_Complex_internal_0 <- local_reflect_0_Complex_x_1 = local_reflect_0_Complex_internal_2
seq $t4, $t1, $t3
lw $t5, -24($fp)
# local_reflect_0_Complex_y_5 <- GET self . y
lw $t5, 16($t0)
lw $t6, -32($fp)
# local_reflect_0_Complex_y_7 <- GET self . y
lw $t6, 16($t0)
lw $t7, -28($fp)
# local_reflect_0_Complex_internal_6 <- ~local_reflect_0_Complex_y_7
not $t7, $t6
addi $t7, $t7, 1
lw $a1, -20($fp)
# local_reflect_0_Complex_internal_4 <- local_reflect_0_Complex_y_5 = local_reflect_0_Complex_internal_6
seq $a1, $t5, $t7
lw $a2, -36($fp)
# Moving self to local_reflect_0_Complex_internal_8
move $a2, $t0
sw $a2, -36($fp)
move $v0, $a2
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -16($fp)
sw $t3, -12($fp)
sw $t4, -4($fp)
sw $t5, -24($fp)
sw $t6, -32($fp)
sw $t7, -28($fp)
sw $a1, -20($fp)
sw $a2, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_reflect_X_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_reflect_X_Complex_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_X_Complex_y_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_X_Complex_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_X_Complex_y_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_X_Complex_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_reflect_X_Complex_y_1 <- GET self . y
lw $t1, 16($t0)
lw $t2, -16($fp)
# local_reflect_X_Complex_y_3 <- GET self . y
lw $t2, 16($t0)
lw $t3, -12($fp)
# local_reflect_X_Complex_internal_2 <- ~local_reflect_X_Complex_y_3
not $t3, $t2
addi $t3, $t3, 1
lw $t4, -4($fp)
# local_reflect_X_Complex_internal_0 <- local_reflect_X_Complex_y_1 = local_reflect_X_Complex_internal_2
seq $t4, $t1, $t3
lw $t5, -20($fp)
# Moving self to local_reflect_X_Complex_internal_4
move $t5, $t0
sw $t5, -20($fp)
move $v0, $t5
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -16($fp)
sw $t3, -12($fp)
sw $t4, -4($fp)
sw $t5, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 24
jr $ra


function_reflect_Y_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_reflect_Y_Complex_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_Y_Complex_x_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_Y_Complex_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_Y_Complex_x_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_reflect_Y_Complex_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_reflect_Y_Complex_x_1 <- GET self . x
lw $t1, 12($t0)
lw $t2, -16($fp)
# local_reflect_Y_Complex_x_3 <- GET self . x
lw $t2, 12($t0)
lw $t3, -12($fp)
# local_reflect_Y_Complex_internal_2 <- ~local_reflect_Y_Complex_x_3
not $t3, $t2
addi $t3, $t3, 1
lw $t4, -4($fp)
# local_reflect_Y_Complex_internal_0 <- local_reflect_Y_Complex_x_1 = local_reflect_Y_Complex_internal_2
seq $t4, $t1, $t3
lw $t5, -20($fp)
# Moving self to local_reflect_Y_Complex_internal_4
move $t5, $t0
sw $t5, -20($fp)
move $v0, $t5
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -16($fp)
sw $t3, -12($fp)
sw $t4, -4($fp)
sw $t5, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 24
jr $ra


function_equal_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value d
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_equal_Complex_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_x_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_y_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_equal_Complex_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# local_equal_Complex_x_1 <- GET self . x
lw $t1, 12($t0)
lw $t2, -0($fp)
lw $t3, -20($fp)
# local_equal_Complex_internal_3 <- Type of d
lw $t3, 0($t2)
lw $t4, -24($fp)
# Saves in local_equal_Complex_internal_4 data_0
la $t4, data_0
# local_equal_Complex_internal_3 <- local_equal_Complex_internal_3 = local_equal_Complex_internal_4
move $t8, $t3
move $t9, $t4
loop_16:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_16
beqz $a1, mismatch_16
seq $v0, $a0, $a1
beqz $v0, mismatch_16
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_16
mismatch_16:
li $v0, 0
j end_16
check_16:
bnez $a1, mismatch_16
li $v0, 1
end_16:
move $t3, $v0
# If not local_equal_Complex_internal_3 goto continue__337
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -0($fp)
sw $t3, -20($fp)
sw $t4, -24($fp)
beqz $t3, continue__337
la $a0, dispatch_error
j .raise
continue__337:
lw $t0, -0($fp)
lw $t1, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_x_value_Complex
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
lw $t2, -8($fp)
# local_equal_Complex_internal_0 <- local_equal_Complex_x_1 = local_equal_Complex_internal_2
seq $t2, $t1, $t0
# If local_equal_Complex_internal_0 goto true__348
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -8($fp)
bnez $t2, true__348
lw $t0, -28($fp)
# Moving 0 to local_equal_Complex_internal_5
li $t0, 0
sw $t0, -28($fp)
sw $t0, -28($fp)
j end__348
true__348:
lw $t0, -4($fp)
lw $t1, -36($fp)
# local_equal_Complex_y_7 <- GET self . y
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -44($fp)
# local_equal_Complex_internal_9 <- Type of d
lw $t3, 0($t2)
lw $t4, -48($fp)
# Saves in local_equal_Complex_internal_10 data_0
la $t4, data_0
# local_equal_Complex_internal_9 <- local_equal_Complex_internal_9 = local_equal_Complex_internal_10
move $t8, $t3
move $t9, $t4
loop_17:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_17
beqz $a1, mismatch_17
seq $v0, $a0, $a1
beqz $v0, mismatch_17
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_17
mismatch_17:
li $v0, 0
j end_17
check_17:
bnez $a1, mismatch_17
li $v0, 1
end_17:
move $t3, $v0
# If not local_equal_Complex_internal_9 goto continue__358
sw $t0, -4($fp)
sw $t1, -36($fp)
sw $t2, -0($fp)
sw $t3, -44($fp)
sw $t4, -48($fp)
beqz $t3, continue__358
la $a0, dispatch_error
j .raise
continue__358:
lw $t0, -0($fp)
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_y_value_Complex
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
lw $t2, -32($fp)
# local_equal_Complex_internal_6 <- local_equal_Complex_y_7 = local_equal_Complex_internal_8
seq $t2, $t1, $t0
# If local_equal_Complex_internal_6 goto true__369
sw $t0, -40($fp)
sw $t1, -36($fp)
sw $t2, -32($fp)
bnez $t2, true__369
lw $t0, -52($fp)
# Moving 0 to local_equal_Complex_internal_11
li $t0, 0
sw $t0, -52($fp)
sw $t0, -52($fp)
j end__369
true__369:
lw $t0, -52($fp)
# Moving 1 to local_equal_Complex_internal_11
li $t0, 1
sw $t0, -52($fp)
sw $t0, -52($fp)
end__369:
lw $t0, -52($fp)
lw $t1, -28($fp)
# Moving local_equal_Complex_internal_11 to local_equal_Complex_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -52($fp)
sw $t1, -28($fp)
end__348:
lw $t0, -28($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_x_value_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_x_value_Complex_x_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_x_value_Complex_x_0 <- GET self . x
lw $t1, 12($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_y_value_Complex:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_y_value_Complex_y_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_y_value_Complex_y_0 <- GET self . y
lw $t1, 16($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra

# Raise exception method
.raise:
li $v0, 4
syscall
li $v0, 17
li $a0, 1
syscall

.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "
"
string_abort: .asciiz "Abort called from class String
"
int_abort: .asciiz "Abort called from class Int
"
bool_abort: .asciiz "Abort called from class Bool
"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_Main: .asciiz "Main"
type_Complex: .asciiz "Complex"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz "=(
"
data_2: .asciiz "=)
"
data_3: .asciiz "=(
"
data_4: .asciiz "=)
"
data_5: .asciiz "+"
data_6: .asciiz "I"
zero_error: .asciiz "Division by zero error
"
case_void_error: .asciiz "Case on void error
"
dispatch_error: .asciiz "Dispatch on void error
"
case_error: .asciiz "Case statement without a matching branch error
"
index_error: .asciiz "Substring out of range error
"
heap_error: .asciiz "Heap overflow error
"