
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:37 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
Main:   .asciiz    "Main"
# Function END
Bazz:   .asciiz    "Bazz"
# Function END
Foo:   .asciiz    "Foo"
# Function END
Razz:   .asciiz    "Razz"
# Function END
Bar:   .asciiz    "Bar"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_abort_at_Object, function_out_int_at_IO, dummy, function_copy_at_Object, function_in_int_at_IO, function_out_string_at_IO, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_abort_at_Object, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_abort_at_Object, dummy, function_length_at_String, function_copy_at_Object, dummy, dummy, function_concat_at_String, dummy, dummy, dummy, function_substr_at_String, dummy, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_abort_at_Object, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    function_abort_at_Object, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_abort_at_Object, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, function_main_at_Main, dummy, dummy, dummy, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


#  **** VTABLE for type Bazz ****
Bazz_vtable:   .word    function_abort_at_Object, function_out_int_at_IO, dummy, function_copy_at_Object, function_in_int_at_IO, function_out_string_at_IO, dummy, function_printh_at_Bazz, dummy, function_in_string_at_IO, dummy, function_doh_at_Bazz, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Bazz ****
Bazz_start: 
   Bazz_vtable_pointer:   .word    Bazz_vtable
   # Function END
Bazz_end: 
# 


#  **** VTABLE for type Foo ****
Foo_vtable:   .word    function_abort_at_Object, function_out_int_at_IO, dummy, function_copy_at_Object, function_in_int_at_IO, function_out_string_at_IO, dummy, function_printh_at_Bazz, dummy, function_in_string_at_IO, dummy, function_doh_at_Foo, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Foo ****
Foo_start: 
   Foo_vtable_pointer:   .word    Foo_vtable
   # Function END
Foo_end: 
# 


#  **** VTABLE for type Razz ****
Razz_vtable:   .word    function_abort_at_Object, function_out_int_at_IO, dummy, function_copy_at_Object, function_in_int_at_IO, function_out_string_at_IO, dummy, function_printh_at_Bazz, dummy, function_in_string_at_IO, dummy, function_doh_at_Foo, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Razz ****
Razz_start: 
   Razz_vtable_pointer:   .word    Razz_vtable
   # Function END
Razz_end: 
# 


#  **** VTABLE for type Bar ****
Bar_vtable:   .word    function_abort_at_Object, function_out_int_at_IO, dummy, function_copy_at_Object, function_in_int_at_IO, function_out_string_at_IO, dummy, function_printh_at_Bazz, dummy, function_in_string_at_IO, dummy, function_doh_at_Foo, function_type_name_at_Object
# Function END
# 


#  **** Type RECORD for type Bar ****
Bar_start: 
   Bar_vtable_pointer:   .word    Bar_vtable
   # Function END
Bar_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, -1, 1, 2, 3, 4
Object__TDT:   .word    1, 0, 1, 1, 1, 1, 2, 3, 4, 5
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1, -1, -1, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, 0, -1, -1, -1, -1
Bazz__TDT:   .word    -1, -1, -1, -1, -1, -1, 0, 1, 2, 3
Foo__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, 0, 1, 2
Razz__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, 0, 1
Bar__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "do nothing"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f324723b430>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 28 bytes of memory
   li $a0, 28
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__c__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__d__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 32($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__a__init implementation.
# @Params:
__Main__attrib__a__init: 
   # Allocate stack frame for function __Main__attrib__a__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__a__init_internal_1 --> -8($fp)
   # local_ttrib__a__init_internal_1 = ALLOCATE Bazz
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bazz
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 24 bytes of memory
   li $a0, 24
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bazz_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_ttrib__a__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Main__attrib__a__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__b__init implementation.
# @Params:
__Main__attrib__b__init: 
   # Allocate stack frame for function __Main__attrib__b__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__b__init_internal_1 --> -8($fp)
   # local_ttrib__b__init_internal_1 = ALLOCATE Foo
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Foo
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 32 bytes of memory
   li $a0, 32
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Foo_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 28
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_ttrib__b__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Main__attrib__b__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__c__init implementation.
# @Params:
__Main__attrib__c__init: 
   # Allocate stack frame for function __Main__attrib__c__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__c__init_internal_1 --> -8($fp)
   # local_ttrib__c__init_internal_1 = ALLOCATE Razz
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Razz
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 40 bytes of memory
   li $a0, 40
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Razz_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 32
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__e__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 32($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__f__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 36($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_ttrib__c__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Main__attrib__c__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Main__attrib__d__init implementation.
# @Params:
__Main__attrib__d__init: 
   # Allocate stack frame for function __Main__attrib__d__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__d__init_internal_1 --> -8($fp)
   # local_ttrib__d__init_internal_1 = ALLOCATE Bar
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bar
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 48 bytes of memory
   li $a0, 48
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bar_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 36
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__e__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 32($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__f__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 36($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bar__attrib__c__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 40($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bar__attrib__d__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 44($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_ttrib__d__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Main__attrib__d__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_4
   sw $t0, 12($v0)
   li $t0, 10
   sw $t0, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_main_at_Main_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Bazz__attrib__h__init implementation.
# @Params:
__Bazz__attrib__h__init: 
   # Allocate stack frame for function __Bazz__attrib__h__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__h__init_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_ttrib__h__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Bazz__attrib__h__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Bazz__attrib__g__init implementation.
# @Params:
__Bazz__attrib__g__init: 
   # Allocate stack frame for function __Bazz__attrib__g__init.
   subu $sp, $sp, 64
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 64
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # local_ttrib__g__init_internal_1 = SELF
   sw $s1, -8($fp)
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
   # local_ttrib__g__init_internal_2 = TYPEOF local_ttrib__g__init_internal_1
   lw $t0, -8($fp)
   # Load pointer to type offset
   lw $t1, 8($t0)
   sw $t1, -12($fp)
   # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
   # local_ttrib__g__init_internal_5 = 13
   li $t0, 13
   sw $t0, -24($fp)
   # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Bazz <cil.nodes.LocalNode object at 0x7f324723fe50>
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Bazz
   la $t0, Bazz__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_Not_min0_1
   # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # local_ttrib__g__init_internal_5 = local_ttrib__g__init_internal_6
   lw $t0, -28($fp)
   sw $t0, -24($fp)
   label_Not_min0_1: 
      # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Razz <cil.nodes.LocalNode object at 0x7f324723fe50>
      # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
      # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
      # Load TDT pointer to type Razz
      la $t0, Razz__TDT
      lw $t1, -12($fp)
      addu $t0, $t0, $t1
      # Save distance
      lw $t1, 0($t0)
      sw $t1, -28($fp)
      # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
      # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
      # Update min if 8 < 9
      lw $t0, -28($fp)
      lw $t1, -24($fp)
      bgtu $t0, $t1, label_Not_min1_2
      # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
      # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
      # local_ttrib__g__init_internal_5 = local_ttrib__g__init_internal_6
      lw $t0, -28($fp)
      sw $t0, -24($fp)
      label_Not_min1_2: 
         # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Foo <cil.nodes.LocalNode object at 0x7f324723fe50>
         # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
         # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
         # Load TDT pointer to type Foo
         la $t0, Foo__TDT
         lw $t1, -12($fp)
         addu $t0, $t0, $t1
         # Save distance
         lw $t1, 0($t0)
         sw $t1, -28($fp)
         # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
         # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
         # Update min if 8 < 9
         lw $t0, -28($fp)
         lw $t1, -24($fp)
         bgtu $t0, $t1, label_Not_min2_3
         # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
         # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
         # local_ttrib__g__init_internal_5 = local_ttrib__g__init_internal_6
         lw $t0, -28($fp)
         sw $t0, -24($fp)
         label_Not_min2_3: 
            # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Bar <cil.nodes.LocalNode object at 0x7f324723fe50>
            # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
            # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
            # Load TDT pointer to type Bar
            la $t0, Bar__TDT
            lw $t1, -12($fp)
            addu $t0, $t0, $t1
            # Save distance
            lw $t1, 0($t0)
            sw $t1, -28($fp)
            # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
            # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
            # Update min if 8 < 9
            lw $t0, -28($fp)
            lw $t1, -24($fp)
            bgtu $t0, $t1, label_Not_min3_4
            # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
            # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
            # local_ttrib__g__init_internal_5 = local_ttrib__g__init_internal_6
            lw $t0, -28($fp)
            sw $t0, -24($fp)
            label_Not_min3_4: 
               # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
               # local_ttrib__g__init_internal_6 = 13
               li $t0, 13
               sw $t0, -28($fp)
               # LOCAL local_ttrib__g__init_internal_3 --> -16($fp)
               # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
               # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
               # Load pointers and SUB
               lw $a0, -28($fp)
               lw $a1, -24($fp)
               sub $a0, $a0, $a1
               sw $a0, -16($fp)
               # IF_ZERO local_ttrib__g__init_internal_3 GOTO label_ERROR_5
               # IF_ZERO local_ttrib__g__init_internal_3 GOTO label_ERROR_5
               lw $t0, -16($fp)
               beq $t0, 0, label_ERROR_5
               # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Bazz <cil.nodes.LocalNode object at 0x7f324723fe50>
               # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
               # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
               # Load TDT pointer to type Bazz
               la $t0, Bazz__TDT
               lw $t1, -12($fp)
               addu $t0, $t0, $t1
               # Save distance
               lw $t1, 0($t0)
               sw $t1, -28($fp)
               # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
               # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
               # Update min if 8 < 9
               lw $t0, -28($fp)
               lw $t1, -24($fp)
               bgtu $t0, $t1, label_NEXT0_7
               # LOCAL local_ttrib__g__init_n_7 --> -32($fp)
               # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
               # local_ttrib__g__init_n_7 = local_ttrib__g__init_internal_1
               lw $t0, -8($fp)
               sw $t0, -32($fp)
               # LOCAL local_ttrib__g__init_internal_8 --> -36($fp)
               # local_ttrib__g__init_internal_8 = ALLOCATE Foo
               # Allocating 20 bytes of memory
               li $a0, 20
               li $v0, 9
               syscall
               # Allocating string for type name
               la $t0, String
               sw $t0, 0($v0)
               la $t0, String_start
               sw $t0, 4($v0)
               # Load type offset
               li $t0, 8
               sw $t0, 8($v0)
               la $t0, Foo
               sw $t0, 12($v0)
               li $t0, 3
               sw $t0, 16($v0)
               move $t0, $v0
               # Allocating 32 bytes of memory
               li $a0, 32
               li $v0, 9
               syscall
               sw $t0, 0($v0)
               la $t0, Foo_start
               sw $t0, 4($v0)
               # Load type offset
               li $t0, 28
               sw $t0, 8($v0)
               move $t1, $v0
               # Push register s1 into stack
               subu $sp, $sp, 4
               sw $s1, 0($sp)
               move $s1, $v0
               # Push register t1 into stack
               subu $sp, $sp, 4
               sw $t1, 0($sp)
               jal __Bazz__attrib__h__init
               # Pop 4 bytes from stack into register t1
               lw $t1, 0($sp)
               addu $sp, $sp, 4
               sw $v0, 12($t1)
               # Push register t1 into stack
               subu $sp, $sp, 4
               sw $t1, 0($sp)
               jal __Bazz__attrib__g__init
               # Pop 4 bytes from stack into register t1
               lw $t1, 0($sp)
               addu $sp, $sp, 4
               sw $v0, 16($t1)
               # Push register t1 into stack
               subu $sp, $sp, 4
               sw $t1, 0($sp)
               jal __Bazz__attrib__i__init
               # Pop 4 bytes from stack into register t1
               lw $t1, 0($sp)
               addu $sp, $sp, 4
               sw $v0, 20($t1)
               # Push register t1 into stack
               subu $sp, $sp, 4
               sw $t1, 0($sp)
               jal __Foo__attrib__a__init
               # Pop 4 bytes from stack into register t1
               lw $t1, 0($sp)
               addu $sp, $sp, 4
               sw $v0, 24($t1)
               # Push register t1 into stack
               subu $sp, $sp, 4
               sw $t1, 0($sp)
               jal __Foo__attrib__b__init
               # Pop 4 bytes from stack into register t1
               lw $t1, 0($sp)
               addu $sp, $sp, 4
               sw $v0, 28($t1)
               # Pop 4 bytes from stack into register s1
               lw $s1, 0($sp)
               addu $sp, $sp, 4
               sw $t1, -36($fp)
               # LOCAL local_ttrib__g__init_internal_4 --> -20($fp)
               # LOCAL local_ttrib__g__init_internal_8 --> -36($fp)
               # local_ttrib__g__init_internal_4 = local_ttrib__g__init_internal_8
               lw $t0, -36($fp)
               sw $t0, -20($fp)
               # GOTO label_END_6
j label_END_6
label_NEXT0_7: 
   # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Razz <cil.nodes.LocalNode object at 0x7f324723fe50>
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Razz
   la $t0, Razz__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_NEXT1_8
   # LOCAL local_ttrib__g__init_n_9 --> -40($fp)
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # local_ttrib__g__init_n_9 = local_ttrib__g__init_internal_1
   lw $t0, -8($fp)
   sw $t0, -40($fp)
   # LOCAL local_ttrib__g__init_internal_10 --> -44($fp)
   # local_ttrib__g__init_internal_10 = ALLOCATE Bar
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bar
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 48 bytes of memory
   li $a0, 48
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bar_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 36
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__e__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 32($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__f__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 36($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bar__attrib__c__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 40($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bar__attrib__d__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 44($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -44($fp)
   # LOCAL local_ttrib__g__init_internal_4 --> -20($fp)
   # LOCAL local_ttrib__g__init_internal_10 --> -44($fp)
   # local_ttrib__g__init_internal_4 = local_ttrib__g__init_internal_10
   lw $t0, -44($fp)
   sw $t0, -20($fp)
   # GOTO label_END_6
j label_END_6
label_NEXT1_8: 
   # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Foo <cil.nodes.LocalNode object at 0x7f324723fe50>
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Foo
   la $t0, Foo__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_NEXT2_9
   # LOCAL local_ttrib__g__init_n_11 --> -48($fp)
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # local_ttrib__g__init_n_11 = local_ttrib__g__init_internal_1
   lw $t0, -8($fp)
   sw $t0, -48($fp)
   # LOCAL local_ttrib__g__init_internal_12 --> -52($fp)
   # local_ttrib__g__init_internal_12 = ALLOCATE Razz
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Razz
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 40 bytes of memory
   li $a0, 40
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Razz_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 32
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__e__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 32($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__f__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 36($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -52($fp)
   # LOCAL local_ttrib__g__init_internal_4 --> -20($fp)
   # LOCAL local_ttrib__g__init_internal_12 --> -52($fp)
   # local_ttrib__g__init_internal_4 = local_ttrib__g__init_internal_12
   lw $t0, -52($fp)
   sw $t0, -20($fp)
   # GOTO label_END_6
j label_END_6
label_NEXT2_9: 
   # local_ttrib__g__init_internal_6 = TYPE_DISTANCE Bar <cil.nodes.LocalNode object at 0x7f324723fe50>
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Bar
   la $t0, Bar__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_ttrib__g__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__g__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_NEXT3_10
   # LOCAL local_ttrib__g__init_n_13 --> -56($fp)
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # local_ttrib__g__init_n_13 = local_ttrib__g__init_internal_1
   lw $t0, -8($fp)
   sw $t0, -56($fp)
   # LOCAL local_ttrib__g__init_internal_4 --> -20($fp)
   # LOCAL local_ttrib__g__init_n_13 --> -56($fp)
   # local_ttrib__g__init_internal_4 = local_ttrib__g__init_n_13
   lw $t0, -56($fp)
   sw $t0, -20($fp)
   # GOTO label_END_6
j label_END_6
label_NEXT3_10: 
   label_ERROR_5: 
      # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
      lw $t0, 0($s1)
      sw $t0, -8($fp)
      # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
      la $a0, data_1
      li $v0, 4
      syscall
      lw $a0, -8($fp)
      li $v0, 4
      syscall
      la $a0, data_2
      li $v0, 4
      syscall
      li $v0, 10
      syscall
      label_END_6: 
# RETURN local_ttrib__g__init_internal_4
lw $v0, -20($fp)
# Deallocate stack frame for function __Bazz__attrib__g__init.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 64
jr $ra
# Function END


# __Bazz__attrib__i__init implementation.
# @Params:
__Bazz__attrib__i__init: 
   # Allocate stack frame for function __Bazz__attrib__i__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__i__init_internal_3 --> -16($fp)
   # local_ttrib__i__init_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_ttrib__i__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__i__init_internal_3 --> -16($fp)
   # local_ttrib__i__init_internal_1 = local_ttrib__i__init_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__i__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__i__init_internal_2 --> -12($fp)
   # local_ttrib__i__init_internal_2 = VCALL local_ttrib__i__init_internal_1 printh
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_ttrib__i__init_internal_2
   lw $v0, -12($fp)
   # Deallocate stack frame for function __Bazz__attrib__i__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_printh_at_Bazz implementation.
# @Params:
function_printh_at_Bazz: 
   # Allocate stack frame for function function_printh_at_Bazz.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_printh_at_Bazz_internal_2 --> -12($fp)
   # local_printh_at_Bazz_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_printh_at_Bazz_internal_0 --> -4($fp)
   # LOCAL local_printh_at_Bazz_internal_2 --> -12($fp)
   # local_printh_at_Bazz_internal_0 = local_printh_at_Bazz_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_printh_at_Bazz_internal_3 = GETATTRIBUTE h Bazz
   # LOCAL local_printh_at_Bazz_internal_3 --> -16($fp)
   lw $t0, 12($s1)
   sw $t0, -16($fp)
   # ARG local_printh_at_Bazz_internal_3
   # LOCAL local_printh_at_Bazz_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_printh_at_Bazz_internal_0 --> -4($fp)
   # LOCAL local_printh_at_Bazz_internal_1 --> -8($fp)
   # local_printh_at_Bazz_internal_1 = VCALL local_printh_at_Bazz_internal_0 out_int
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_printh_at_Bazz_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # RETURN local_printh_at_Bazz_internal_4
   lw $v0, -20($fp)
   # Deallocate stack frame for function function_printh_at_Bazz.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_doh_at_Bazz implementation.
# @Params:
function_doh_at_Bazz: 
   # Allocate stack frame for function function_doh_at_Bazz.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_doh_at_Bazz_i_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # local_doh_at_Bazz_internal_1 = GETATTRIBUTE h Bazz
   # LOCAL local_doh_at_Bazz_internal_1 --> -8($fp)
   lw $t0, 12($s1)
   sw $t0, -8($fp)
   # LOCAL local_doh_at_Bazz_i_0 --> -4($fp)
   # LOCAL local_doh_at_Bazz_internal_1 --> -8($fp)
   # local_doh_at_Bazz_i_0 = local_doh_at_Bazz_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # local_doh_at_Bazz_internal_3 = GETATTRIBUTE h Bazz
   # LOCAL local_doh_at_Bazz_internal_3 --> -16($fp)
   lw $t0, 12($s1)
   sw $t0, -16($fp)
   # LOCAL local_doh_at_Bazz_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_doh_at_Bazz_internal_2 --> -12($fp)
   # LOCAL local_doh_at_Bazz_internal_3 --> -16($fp)
   # LOCAL local_doh_at_Bazz_internal_4 --> -20($fp)
   # local_doh_at_Bazz_internal_2 = local_doh_at_Bazz_internal_3 + local_doh_at_Bazz_internal_4
   lw $t1, -16($fp)
   lw $t0, 12($t1)
   lw $t1, -20($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # 
   # LOCAL local_doh_at_Bazz_internal_2 --> -12($fp)
   lw $t0, -12($fp)
   sw $t0, 12($s1)
   # RETURN local_doh_at_Bazz_i_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_doh_at_Bazz.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Foo__attrib__a__init implementation.
# @Params:
__Foo__attrib__a__init: 
   # Allocate stack frame for function __Foo__attrib__a__init.
   subu $sp, $sp, 56
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 56
   # LOCAL local_trib__a__init_internal_1 --> -8($fp)
   # local_trib__a__init_internal_1 = SELF
   sw $s1, -8($fp)
   # LOCAL local_trib__a__init_internal_1 --> -8($fp)
   # LOCAL local_trib__a__init_internal_2 --> -12($fp)
   # local_trib__a__init_internal_2 = TYPEOF local_trib__a__init_internal_1
   lw $t0, -8($fp)
   # Load pointer to type offset
   lw $t1, 8($t0)
   sw $t1, -12($fp)
   # LOCAL local_trib__a__init_internal_5 --> -24($fp)
   # local_trib__a__init_internal_5 = 13
   li $t0, 13
   sw $t0, -24($fp)
   # local_trib__a__init_internal_6 = TYPE_DISTANCE Razz <cil.nodes.LocalNode object at 0x7f324724c370>
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # LOCAL local_trib__a__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Razz
   la $t0, Razz__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # LOCAL local_trib__a__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_Not_min0_11
   # LOCAL local_trib__a__init_internal_5 --> -24($fp)
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # local_trib__a__init_internal_5 = local_trib__a__init_internal_6
   lw $t0, -28($fp)
   sw $t0, -24($fp)
   label_Not_min0_11: 
      # local_trib__a__init_internal_6 = TYPE_DISTANCE Foo <cil.nodes.LocalNode object at 0x7f324724c370>
      # LOCAL local_trib__a__init_internal_6 --> -28($fp)
      # LOCAL local_trib__a__init_internal_2 --> -12($fp)
      # Load TDT pointer to type Foo
      la $t0, Foo__TDT
      lw $t1, -12($fp)
      addu $t0, $t0, $t1
      # Save distance
      lw $t1, 0($t0)
      sw $t1, -28($fp)
      # LOCAL local_trib__a__init_internal_6 --> -28($fp)
      # LOCAL local_trib__a__init_internal_5 --> -24($fp)
      # Update min if 8 < 9
      lw $t0, -28($fp)
      lw $t1, -24($fp)
      bgtu $t0, $t1, label_Not_min1_12
      # LOCAL local_trib__a__init_internal_5 --> -24($fp)
      # LOCAL local_trib__a__init_internal_6 --> -28($fp)
      # local_trib__a__init_internal_5 = local_trib__a__init_internal_6
      lw $t0, -28($fp)
      sw $t0, -24($fp)
      label_Not_min1_12: 
         # local_trib__a__init_internal_6 = TYPE_DISTANCE Bar <cil.nodes.LocalNode object at 0x7f324724c370>
         # LOCAL local_trib__a__init_internal_6 --> -28($fp)
         # LOCAL local_trib__a__init_internal_2 --> -12($fp)
         # Load TDT pointer to type Bar
         la $t0, Bar__TDT
         lw $t1, -12($fp)
         addu $t0, $t0, $t1
         # Save distance
         lw $t1, 0($t0)
         sw $t1, -28($fp)
         # LOCAL local_trib__a__init_internal_6 --> -28($fp)
         # LOCAL local_trib__a__init_internal_5 --> -24($fp)
         # Update min if 8 < 9
         lw $t0, -28($fp)
         lw $t1, -24($fp)
         bgtu $t0, $t1, label_Not_min2_13
         # LOCAL local_trib__a__init_internal_5 --> -24($fp)
         # LOCAL local_trib__a__init_internal_6 --> -28($fp)
         # local_trib__a__init_internal_5 = local_trib__a__init_internal_6
         lw $t0, -28($fp)
         sw $t0, -24($fp)
         label_Not_min2_13: 
            # LOCAL local_trib__a__init_internal_6 --> -28($fp)
            # local_trib__a__init_internal_6 = 13
            li $t0, 13
            sw $t0, -28($fp)
            # LOCAL local_trib__a__init_internal_3 --> -16($fp)
            # LOCAL local_trib__a__init_internal_6 --> -28($fp)
            # LOCAL local_trib__a__init_internal_5 --> -24($fp)
            # Load pointers and SUB
            lw $a0, -28($fp)
            lw $a1, -24($fp)
            sub $a0, $a0, $a1
            sw $a0, -16($fp)
            # IF_ZERO local_trib__a__init_internal_3 GOTO label_ERROR_14
            # IF_ZERO local_trib__a__init_internal_3 GOTO label_ERROR_14
            lw $t0, -16($fp)
            beq $t0, 0, label_ERROR_14
            # local_trib__a__init_internal_6 = TYPE_DISTANCE Razz <cil.nodes.LocalNode object at 0x7f324724c370>
            # LOCAL local_trib__a__init_internal_6 --> -28($fp)
            # LOCAL local_trib__a__init_internal_2 --> -12($fp)
            # Load TDT pointer to type Razz
            la $t0, Razz__TDT
            lw $t1, -12($fp)
            addu $t0, $t0, $t1
            # Save distance
            lw $t1, 0($t0)
            sw $t1, -28($fp)
            # LOCAL local_trib__a__init_internal_6 --> -28($fp)
            # LOCAL local_trib__a__init_internal_5 --> -24($fp)
            # Update min if 8 < 9
            lw $t0, -28($fp)
            lw $t1, -24($fp)
            bgtu $t0, $t1, label_NEXT0_16
            # LOCAL local_trib__a__init_n_7 --> -32($fp)
            # LOCAL local_trib__a__init_internal_1 --> -8($fp)
            # local_trib__a__init_n_7 = local_trib__a__init_internal_1
            lw $t0, -8($fp)
            sw $t0, -32($fp)
            # LOCAL local_trib__a__init_internal_8 --> -36($fp)
            # local_trib__a__init_internal_8 = ALLOCATE Bar
            # Allocating 20 bytes of memory
            li $a0, 20
            li $v0, 9
            syscall
            # Allocating string for type name
            la $t0, String
            sw $t0, 0($v0)
            la $t0, String_start
            sw $t0, 4($v0)
            # Load type offset
            li $t0, 8
            sw $t0, 8($v0)
            la $t0, Bar
            sw $t0, 12($v0)
            li $t0, 3
            sw $t0, 16($v0)
            move $t0, $v0
            # Allocating 48 bytes of memory
            li $a0, 48
            li $v0, 9
            syscall
            sw $t0, 0($v0)
            la $t0, Bar_start
            sw $t0, 4($v0)
            # Load type offset
            li $t0, 36
            sw $t0, 8($v0)
            move $t1, $v0
            # Push register s1 into stack
            subu $sp, $sp, 4
            sw $s1, 0($sp)
            move $s1, $v0
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Bazz__attrib__h__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 12($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Bazz__attrib__g__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 16($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Bazz__attrib__i__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 20($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Foo__attrib__a__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 24($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Foo__attrib__b__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 28($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Razz__attrib__e__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 32($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Razz__attrib__f__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 36($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Bar__attrib__c__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 40($t1)
            # Push register t1 into stack
            subu $sp, $sp, 4
            sw $t1, 0($sp)
            jal __Bar__attrib__d__init
            # Pop 4 bytes from stack into register t1
            lw $t1, 0($sp)
            addu $sp, $sp, 4
            sw $v0, 44($t1)
            # Pop 4 bytes from stack into register s1
            lw $s1, 0($sp)
            addu $sp, $sp, 4
            sw $t1, -36($fp)
            # LOCAL local_trib__a__init_internal_4 --> -20($fp)
            # LOCAL local_trib__a__init_internal_8 --> -36($fp)
            # local_trib__a__init_internal_4 = local_trib__a__init_internal_8
            lw $t0, -36($fp)
            sw $t0, -20($fp)
            # GOTO label_END_15
j label_END_15
label_NEXT0_16: 
   # local_trib__a__init_internal_6 = TYPE_DISTANCE Foo <cil.nodes.LocalNode object at 0x7f324724c370>
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # LOCAL local_trib__a__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Foo
   la $t0, Foo__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # LOCAL local_trib__a__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_NEXT1_17
   # LOCAL local_trib__a__init_n_9 --> -40($fp)
   # LOCAL local_trib__a__init_internal_1 --> -8($fp)
   # local_trib__a__init_n_9 = local_trib__a__init_internal_1
   lw $t0, -8($fp)
   sw $t0, -40($fp)
   # LOCAL local_trib__a__init_internal_10 --> -44($fp)
   # local_trib__a__init_internal_10 = ALLOCATE Razz
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Razz
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 40 bytes of memory
   li $a0, 40
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Razz_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 32
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__h__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Bazz__attrib__i__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__a__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Foo__attrib__b__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__e__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 32($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Razz__attrib__f__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 36($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -44($fp)
   # LOCAL local_trib__a__init_internal_4 --> -20($fp)
   # LOCAL local_trib__a__init_internal_10 --> -44($fp)
   # local_trib__a__init_internal_4 = local_trib__a__init_internal_10
   lw $t0, -44($fp)
   sw $t0, -20($fp)
   # GOTO label_END_15
j label_END_15
label_NEXT1_17: 
   # local_trib__a__init_internal_6 = TYPE_DISTANCE Bar <cil.nodes.LocalNode object at 0x7f324724c370>
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # LOCAL local_trib__a__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Bar
   la $t0, Bar__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_trib__a__init_internal_6 --> -28($fp)
   # LOCAL local_trib__a__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_NEXT2_18
   # LOCAL local_trib__a__init_n_11 --> -48($fp)
   # LOCAL local_trib__a__init_internal_1 --> -8($fp)
   # local_trib__a__init_n_11 = local_trib__a__init_internal_1
   lw $t0, -8($fp)
   sw $t0, -48($fp)
   # LOCAL local_trib__a__init_internal_4 --> -20($fp)
   # LOCAL local_trib__a__init_n_11 --> -48($fp)
   # local_trib__a__init_internal_4 = local_trib__a__init_n_11
   lw $t0, -48($fp)
   sw $t0, -20($fp)
   # GOTO label_END_15
j label_END_15
label_NEXT2_18: 
   label_ERROR_14: 
      # LOCAL local_trib__a__init_internal_1 --> -8($fp)
      lw $t0, 0($s1)
      sw $t0, -8($fp)
      # LOCAL local_trib__a__init_internal_1 --> -8($fp)
      la $a0, data_1
      li $v0, 4
      syscall
      lw $a0, -8($fp)
      li $v0, 4
      syscall
      la $a0, data_2
      li $v0, 4
      syscall
      li $v0, 10
      syscall
      label_END_15: 
# RETURN local_trib__a__init_internal_4
lw $v0, -20($fp)
# Deallocate stack frame for function __Foo__attrib__a__init.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 56
jr $ra
# Function END


# __Foo__attrib__b__init implementation.
# @Params:
__Foo__attrib__b__init: 
   # Allocate stack frame for function __Foo__attrib__b__init.
   subu $sp, $sp, 72
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 72
   # local_trib__b__init_internal_6 = GETATTRIBUTE a Foo
   # LOCAL local_trib__b__init_internal_6 --> -28($fp)
   lw $t0, 24($s1)
   sw $t0, -28($fp)
   # LOCAL local_trib__b__init_internal_4 --> -20($fp)
   # LOCAL local_trib__b__init_internal_6 --> -28($fp)
   # local_trib__b__init_internal_4 = local_trib__b__init_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_trib__b__init_internal_4 --> -20($fp)
   # LOCAL local_trib__b__init_internal_5 --> -24($fp)
   # local_trib__b__init_internal_5 = VCALL local_trib__b__init_internal_4 doh
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_trib__b__init_internal_9 = GETATTRIBUTE g Foo
   # LOCAL local_trib__b__init_internal_9 --> -40($fp)
   lw $t0, 16($s1)
   sw $t0, -40($fp)
   # LOCAL local_trib__b__init_internal_7 --> -32($fp)
   # LOCAL local_trib__b__init_internal_9 --> -40($fp)
   # local_trib__b__init_internal_7 = local_trib__b__init_internal_9
   lw $t0, -40($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_trib__b__init_internal_7 --> -32($fp)
   # LOCAL local_trib__b__init_internal_8 --> -36($fp)
   # local_trib__b__init_internal_8 = VCALL local_trib__b__init_internal_7 doh
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_trib__b__init_internal_3 --> -16($fp)
   # LOCAL local_trib__b__init_internal_5 --> -24($fp)
   # LOCAL local_trib__b__init_internal_8 --> -36($fp)
   # local_trib__b__init_internal_3 = local_trib__b__init_internal_5 + local_trib__b__init_internal_8
   lw $t1, -24($fp)
   lw $t0, 12($t1)
   lw $t1, -36($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_trib__b__init_internal_12 --> -52($fp)
   # local_trib__b__init_internal_12 = SELF
   sw $s1, -52($fp)
   # LOCAL local_trib__b__init_internal_10 --> -44($fp)
   # LOCAL local_trib__b__init_internal_12 --> -52($fp)
   # local_trib__b__init_internal_10 = local_trib__b__init_internal_12
   lw $t0, -52($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_trib__b__init_internal_10 --> -44($fp)
   # LOCAL local_trib__b__init_internal_11 --> -48($fp)
   # local_trib__b__init_internal_11 = VCALL local_trib__b__init_internal_10 doh
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_trib__b__init_internal_2 --> -12($fp)
   # LOCAL local_trib__b__init_internal_3 --> -16($fp)
   # LOCAL local_trib__b__init_internal_11 --> -48($fp)
   # local_trib__b__init_internal_2 = local_trib__b__init_internal_3 + local_trib__b__init_internal_11
   lw $t1, -16($fp)
   lw $t0, 12($t1)
   lw $t1, -48($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_trib__b__init_internal_15 --> -64($fp)
   # local_trib__b__init_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_trib__b__init_internal_13 --> -56($fp)
   # LOCAL local_trib__b__init_internal_15 --> -64($fp)
   # local_trib__b__init_internal_13 = local_trib__b__init_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_trib__b__init_internal_13 --> -56($fp)
   # LOCAL local_trib__b__init_internal_14 --> -60($fp)
   # local_trib__b__init_internal_14 = VCALL local_trib__b__init_internal_13 printh
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_trib__b__init_internal_1 --> -8($fp)
   # LOCAL local_trib__b__init_internal_2 --> -12($fp)
   # LOCAL local_trib__b__init_internal_14 --> -60($fp)
   # local_trib__b__init_internal_1 = local_trib__b__init_internal_2 + local_trib__b__init_internal_14
   lw $t1, -12($fp)
   lw $t0, 12($t1)
   lw $t1, -60($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_trib__b__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Foo__attrib__b__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 72
   jr $ra
   # Function END


# function_doh_at_Foo implementation.
# @Params:
function_doh_at_Foo: 
   # Allocate stack frame for function function_doh_at_Foo.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_doh_at_Foo_i_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # local_doh_at_Foo_internal_1 = GETATTRIBUTE h Foo
   # LOCAL local_doh_at_Foo_internal_1 --> -8($fp)
   lw $t0, 12($s1)
   sw $t0, -8($fp)
   # LOCAL local_doh_at_Foo_i_0 --> -4($fp)
   # LOCAL local_doh_at_Foo_internal_1 --> -8($fp)
   # local_doh_at_Foo_i_0 = local_doh_at_Foo_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # local_doh_at_Foo_internal_3 = GETATTRIBUTE h Foo
   # LOCAL local_doh_at_Foo_internal_3 --> -16($fp)
   lw $t0, 12($s1)
   sw $t0, -16($fp)
   # LOCAL local_doh_at_Foo_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_doh_at_Foo_internal_2 --> -12($fp)
   # LOCAL local_doh_at_Foo_internal_3 --> -16($fp)
   # LOCAL local_doh_at_Foo_internal_4 --> -20($fp)
   # local_doh_at_Foo_internal_2 = local_doh_at_Foo_internal_3 + local_doh_at_Foo_internal_4
   lw $t1, -16($fp)
   lw $t0, 12($t1)
   lw $t1, -20($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # 
   # LOCAL local_doh_at_Foo_internal_2 --> -12($fp)
   lw $t0, -12($fp)
   sw $t0, 12($s1)
   # RETURN local_doh_at_Foo_i_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_doh_at_Foo.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Razz__attrib__e__init implementation.
# @Params:
__Razz__attrib__e__init: 
   # Allocate stack frame for function __Razz__attrib__e__init.
   subu $sp, $sp, 48
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 48
   # LOCAL local_ttrib__e__init_internal_1 --> -8($fp)
   # local_ttrib__e__init_internal_1 = SELF
   sw $s1, -8($fp)
   # LOCAL local_ttrib__e__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__e__init_internal_2 --> -12($fp)
   # local_ttrib__e__init_internal_2 = TYPEOF local_ttrib__e__init_internal_1
   lw $t0, -8($fp)
   # Load pointer to type offset
   lw $t1, 8($t0)
   sw $t1, -12($fp)
   # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
   # local_ttrib__e__init_internal_5 = 13
   li $t0, 13
   sw $t0, -24($fp)
   # local_ttrib__e__init_internal_6 = TYPE_DISTANCE Razz <cil.nodes.LocalNode object at 0x7f3247250d00>
   # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__e__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Razz
   la $t0, Razz__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_Not_min0_19
   # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
   # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
   # local_ttrib__e__init_internal_5 = local_ttrib__e__init_internal_6
   lw $t0, -28($fp)
   sw $t0, -24($fp)
   label_Not_min0_19: 
      # local_ttrib__e__init_internal_6 = TYPE_DISTANCE Bar <cil.nodes.LocalNode object at 0x7f3247250d00>
      # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
      # LOCAL local_ttrib__e__init_internal_2 --> -12($fp)
      # Load TDT pointer to type Bar
      la $t0, Bar__TDT
      lw $t1, -12($fp)
      addu $t0, $t0, $t1
      # Save distance
      lw $t1, 0($t0)
      sw $t1, -28($fp)
      # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
      # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
      # Update min if 8 < 9
      lw $t0, -28($fp)
      lw $t1, -24($fp)
      bgtu $t0, $t1, label_Not_min1_20
      # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
      # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
      # local_ttrib__e__init_internal_5 = local_ttrib__e__init_internal_6
      lw $t0, -28($fp)
      sw $t0, -24($fp)
      label_Not_min1_20: 
         # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
         # local_ttrib__e__init_internal_6 = 13
         li $t0, 13
         sw $t0, -28($fp)
         # LOCAL local_ttrib__e__init_internal_3 --> -16($fp)
         # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
         # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
         # Load pointers and SUB
         lw $a0, -28($fp)
         lw $a1, -24($fp)
         sub $a0, $a0, $a1
         sw $a0, -16($fp)
         # IF_ZERO local_ttrib__e__init_internal_3 GOTO label_ERROR_21
         # IF_ZERO local_ttrib__e__init_internal_3 GOTO label_ERROR_21
         lw $t0, -16($fp)
         beq $t0, 0, label_ERROR_21
         # local_ttrib__e__init_internal_6 = TYPE_DISTANCE Razz <cil.nodes.LocalNode object at 0x7f3247250d00>
         # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
         # LOCAL local_ttrib__e__init_internal_2 --> -12($fp)
         # Load TDT pointer to type Razz
         la $t0, Razz__TDT
         lw $t1, -12($fp)
         addu $t0, $t0, $t1
         # Save distance
         lw $t1, 0($t0)
         sw $t1, -28($fp)
         # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
         # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
         # Update min if 8 < 9
         lw $t0, -28($fp)
         lw $t1, -24($fp)
         bgtu $t0, $t1, label_NEXT0_23
         # LOCAL local_ttrib__e__init_n_7 --> -32($fp)
         # LOCAL local_ttrib__e__init_internal_1 --> -8($fp)
         # local_ttrib__e__init_n_7 = local_ttrib__e__init_internal_1
         lw $t0, -8($fp)
         sw $t0, -32($fp)
         # LOCAL local_ttrib__e__init_internal_8 --> -36($fp)
         # local_ttrib__e__init_internal_8 = ALLOCATE Bar
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string for type name
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         la $t0, Bar
         sw $t0, 12($v0)
         li $t0, 3
         sw $t0, 16($v0)
         move $t0, $v0
         # Allocating 48 bytes of memory
         li $a0, 48
         li $v0, 9
         syscall
         sw $t0, 0($v0)
         la $t0, Bar_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 36
         sw $t0, 8($v0)
         move $t1, $v0
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         move $s1, $v0
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Bazz__attrib__h__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 12($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Bazz__attrib__g__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 16($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Bazz__attrib__i__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 20($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Foo__attrib__a__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 24($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Foo__attrib__b__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 28($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Razz__attrib__e__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 32($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Razz__attrib__f__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 36($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Bar__attrib__c__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 40($t1)
         # Push register t1 into stack
         subu $sp, $sp, 4
         sw $t1, 0($sp)
         jal __Bar__attrib__d__init
         # Pop 4 bytes from stack into register t1
         lw $t1, 0($sp)
         addu $sp, $sp, 4
         sw $v0, 44($t1)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         sw $t1, -36($fp)
         # LOCAL local_ttrib__e__init_internal_4 --> -20($fp)
         # LOCAL local_ttrib__e__init_internal_8 --> -36($fp)
         # local_ttrib__e__init_internal_4 = local_ttrib__e__init_internal_8
         lw $t0, -36($fp)
         sw $t0, -20($fp)
         # GOTO label_END_22
j label_END_22
label_NEXT0_23: 
   # local_ttrib__e__init_internal_6 = TYPE_DISTANCE Bar <cil.nodes.LocalNode object at 0x7f3247250d00>
   # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__e__init_internal_2 --> -12($fp)
   # Load TDT pointer to type Bar
   la $t0, Bar__TDT
   lw $t1, -12($fp)
   addu $t0, $t0, $t1
   # Save distance
   lw $t1, 0($t0)
   sw $t1, -28($fp)
   # LOCAL local_ttrib__e__init_internal_6 --> -28($fp)
   # LOCAL local_ttrib__e__init_internal_5 --> -24($fp)
   # Update min if 8 < 9
   lw $t0, -28($fp)
   lw $t1, -24($fp)
   bgtu $t0, $t1, label_NEXT1_24
   # LOCAL local_ttrib__e__init_n_9 --> -40($fp)
   # LOCAL local_ttrib__e__init_internal_1 --> -8($fp)
   # local_ttrib__e__init_n_9 = local_ttrib__e__init_internal_1
   lw $t0, -8($fp)
   sw $t0, -40($fp)
   # LOCAL local_ttrib__e__init_internal_4 --> -20($fp)
   # LOCAL local_ttrib__e__init_n_9 --> -40($fp)
   # local_ttrib__e__init_internal_4 = local_ttrib__e__init_n_9
   lw $t0, -40($fp)
   sw $t0, -20($fp)
   # GOTO label_END_22
j label_END_22
label_NEXT1_24: 
   label_ERROR_21: 
      # LOCAL local_ttrib__e__init_internal_1 --> -8($fp)
      lw $t0, 0($s1)
      sw $t0, -8($fp)
      # LOCAL local_ttrib__e__init_internal_1 --> -8($fp)
      la $a0, data_1
      li $v0, 4
      syscall
      lw $a0, -8($fp)
      li $v0, 4
      syscall
      la $a0, data_2
      li $v0, 4
      syscall
      li $v0, 10
      syscall
      label_END_22: 
# RETURN local_ttrib__e__init_internal_4
lw $v0, -20($fp)
# Deallocate stack frame for function __Razz__attrib__e__init.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 48
jr $ra
# Function END


# __Razz__attrib__f__init implementation.
# @Params:
__Razz__attrib__f__init: 
   # Allocate stack frame for function __Razz__attrib__f__init.
   subu $sp, $sp, 84
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 84
   # local_ttrib__f__init_internal_6 = GETATTRIBUTE a Razz
   # LOCAL local_ttrib__f__init_internal_6 --> -28($fp)
   lw $t0, 24($s1)
   sw $t0, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_ttrib__f__init_internal_5 = CALL doh
   # LOCAL local_ttrib__f__init_internal_5 --> -24($fp)
   # LOCAL local_ttrib__f__init_internal_6 --> -28($fp)
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type's VTABLE
   la $t0, Bazz_vtable
   # Get pointer to function address
   lw $t1, 44($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_ttrib__f__init_internal_9 = GETATTRIBUTE g Razz
   # LOCAL local_ttrib__f__init_internal_9 --> -40($fp)
   lw $t0, 16($s1)
   sw $t0, -40($fp)
   # LOCAL local_ttrib__f__init_internal_7 --> -32($fp)
   # LOCAL local_ttrib__f__init_internal_9 --> -40($fp)
   # local_ttrib__f__init_internal_7 = local_ttrib__f__init_internal_9
   lw $t0, -40($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__f__init_internal_7 --> -32($fp)
   # LOCAL local_ttrib__f__init_internal_8 --> -36($fp)
   # local_ttrib__f__init_internal_8 = VCALL local_ttrib__f__init_internal_7 doh
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_ttrib__f__init_internal_4 --> -20($fp)
   # LOCAL local_ttrib__f__init_internal_5 --> -24($fp)
   # LOCAL local_ttrib__f__init_internal_8 --> -36($fp)
   # local_ttrib__f__init_internal_4 = local_ttrib__f__init_internal_5 + local_ttrib__f__init_internal_8
   lw $t1, -24($fp)
   lw $t0, 12($t1)
   lw $t1, -36($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # local_ttrib__f__init_internal_12 = GETATTRIBUTE e Razz
   # LOCAL local_ttrib__f__init_internal_12 --> -52($fp)
   lw $t0, 32($s1)
   sw $t0, -52($fp)
   # LOCAL local_ttrib__f__init_internal_10 --> -44($fp)
   # LOCAL local_ttrib__f__init_internal_12 --> -52($fp)
   # local_ttrib__f__init_internal_10 = local_ttrib__f__init_internal_12
   lw $t0, -52($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__f__init_internal_10 --> -44($fp)
   # LOCAL local_ttrib__f__init_internal_11 --> -48($fp)
   # local_ttrib__f__init_internal_11 = VCALL local_ttrib__f__init_internal_10 doh
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_ttrib__f__init_internal_3 --> -16($fp)
   # LOCAL local_ttrib__f__init_internal_4 --> -20($fp)
   # LOCAL local_ttrib__f__init_internal_11 --> -48($fp)
   # local_ttrib__f__init_internal_3 = local_ttrib__f__init_internal_4 + local_ttrib__f__init_internal_11
   lw $t1, -20($fp)
   lw $t0, 12($t1)
   lw $t1, -48($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_ttrib__f__init_internal_15 --> -64($fp)
   # local_ttrib__f__init_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_ttrib__f__init_internal_13 --> -56($fp)
   # LOCAL local_ttrib__f__init_internal_15 --> -64($fp)
   # local_ttrib__f__init_internal_13 = local_ttrib__f__init_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__f__init_internal_13 --> -56($fp)
   # LOCAL local_ttrib__f__init_internal_14 --> -60($fp)
   # local_ttrib__f__init_internal_14 = VCALL local_ttrib__f__init_internal_13 doh
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_ttrib__f__init_internal_2 --> -12($fp)
   # LOCAL local_ttrib__f__init_internal_3 --> -16($fp)
   # LOCAL local_ttrib__f__init_internal_14 --> -60($fp)
   # local_ttrib__f__init_internal_2 = local_ttrib__f__init_internal_3 + local_ttrib__f__init_internal_14
   lw $t1, -16($fp)
   lw $t0, 12($t1)
   lw $t1, -60($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_ttrib__f__init_internal_18 --> -76($fp)
   # local_ttrib__f__init_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_ttrib__f__init_internal_16 --> -68($fp)
   # LOCAL local_ttrib__f__init_internal_18 --> -76($fp)
   # local_ttrib__f__init_internal_16 = local_ttrib__f__init_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__f__init_internal_16 --> -68($fp)
   # LOCAL local_ttrib__f__init_internal_17 --> -72($fp)
   # local_ttrib__f__init_internal_17 = VCALL local_ttrib__f__init_internal_16 printh
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_ttrib__f__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__f__init_internal_2 --> -12($fp)
   # LOCAL local_ttrib__f__init_internal_17 --> -72($fp)
   # local_ttrib__f__init_internal_1 = local_ttrib__f__init_internal_2 + local_ttrib__f__init_internal_17
   lw $t1, -12($fp)
   lw $t0, 12($t1)
   lw $t1, -72($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_ttrib__f__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Razz__attrib__f__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 84
   jr $ra
   # Function END


# __Bar__attrib__c__init implementation.
# @Params:
__Bar__attrib__c__init: 
   # Allocate stack frame for function __Bar__attrib__c__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_trib__c__init_internal_3 --> -16($fp)
   # local_trib__c__init_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_trib__c__init_internal_1 --> -8($fp)
   # LOCAL local_trib__c__init_internal_3 --> -16($fp)
   # local_trib__c__init_internal_1 = local_trib__c__init_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_trib__c__init_internal_1 --> -8($fp)
   # LOCAL local_trib__c__init_internal_2 --> -12($fp)
   # local_trib__c__init_internal_2 = VCALL local_trib__c__init_internal_1 doh
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_trib__c__init_internal_2
   lw $v0, -12($fp)
   # Deallocate stack frame for function __Bar__attrib__c__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Bar__attrib__d__init implementation.
# @Params:
__Bar__attrib__d__init: 
   # Allocate stack frame for function __Bar__attrib__d__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_trib__d__init_internal_3 --> -16($fp)
   # local_trib__d__init_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_trib__d__init_internal_1 --> -8($fp)
   # LOCAL local_trib__d__init_internal_3 --> -16($fp)
   # local_trib__d__init_internal_1 = local_trib__d__init_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_trib__d__init_internal_1 --> -8($fp)
   # LOCAL local_trib__d__init_internal_2 --> -12($fp)
   # local_trib__d__init_internal_2 = VCALL local_trib__d__init_internal_1 printh
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_trib__d__init_internal_2
   lw $v0, -12($fp)
   # Deallocate stack frame for function __Bar__attrib__d__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END

