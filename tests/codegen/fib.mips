
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:38 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    dummy, function_out_string_at_IO, dummy, function_out_int_at_IO, function_abort_at_Object, dummy, dummy, function_in_string_at_IO, function_copy_at_Object, dummy, function_type_name_at_Object, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, function_copy_at_Object, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    dummy, dummy, function_substr_at_String, dummy, function_abort_at_Object, dummy, function_length_at_String, dummy, function_copy_at_Object, function_concat_at_String, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, function_copy_at_Object, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, function_copy_at_Object, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_fib_at_Main, function_out_string_at_IO, dummy, function_out_int_at_IO, function_abort_at_Object, function_main_at_Main, dummy, function_in_string_at_IO, function_copy_at_Object, dummy, function_type_name_at_Object, function_in_int_at_IO
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "Enter n to find nth fibonacci number!\n"
# 


data_5:   .asciiz    "\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f849051c760>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 20($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 76
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 76
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_0 = local_main_at_Main_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_4
   sw $t0, 12($v0)
   li $t0, 38
   sw $t0, 16($v0)
   sw $v0, -16($fp)
   # ARG local_main_at_Main_internal_3
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # local_main_at_Main_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # local_main_at_Main_internal_4 = local_main_at_Main_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_9 = SELF
   sw $s1, -40($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # local_main_at_Main_internal_7 = local_main_at_Main_internal_9
   lw $t0, -40($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # local_main_at_Main_internal_12 = SELF
   sw $s1, -52($fp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # local_main_at_Main_internal_10 = local_main_at_Main_internal_12
   lw $t0, -52($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = VCALL local_main_at_Main_internal_10 in_int
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_main_at_Main_internal_11
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   lw $t0, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = VCALL local_main_at_Main_internal_7 fib
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 0($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_main_at_Main_internal_8
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_5 = VCALL local_main_at_Main_internal_4 out_int
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 12($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_13 = local_main_at_Main_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_5
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # ARG local_main_at_Main_internal_16
   # LOCAL local_main_at_Main_internal_16 --> -68($fp)
   lw $t0, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # local_main_at_Main_internal_14 = VCALL local_main_at_Main_internal_13 out_string
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_14
   lw $v0, -60($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 76
   jr $ra
   # Function END


# function_fib_at_Main implementation.
# @Params:
# 	0($fp) = param_fib_at_Main_i_0
function_fib_at_Main: 
   # Allocate stack frame for function function_fib_at_Main.
   subu $sp, $sp, 64
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 64
   # LOCAL local_fib_at_Main_a_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_fib_at_Main_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_fib_at_Main_a_0 --> -4($fp)
   # LOCAL local_fib_at_Main_internal_1 --> -8($fp)
   # local_fib_at_Main_a_0 = local_fib_at_Main_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_fib_at_Main_b_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_fib_at_Main_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_fib_at_Main_b_2 --> -12($fp)
   # LOCAL local_fib_at_Main_internal_3 --> -16($fp)
   # local_fib_at_Main_b_2 = local_fib_at_Main_internal_3
   lw $t0, -16($fp)
   sw $t0, -12($fp)
   # LOCAL local_fib_at_Main_c_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_fib_at_Main_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_fib_at_Main_c_4 --> -20($fp)
   # LOCAL local_fib_at_Main_internal_5 --> -24($fp)
   # local_fib_at_Main_c_4 = local_fib_at_Main_internal_5
   lw $t0, -24($fp)
   sw $t0, -20($fp)
   label_WHILE_1: 
      # LOCAL local_fib_at_Main_internal_9 --> -40($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Int
      sw $t0, 12($v0)
      li $t0, 3
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Int_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 16
      sw $t0, 8($v0)
      li $t0, 0
      sw $t0, 12($v0)
      sw $v0, -40($fp)
      # IF_ZERO param_fib_at_Main_i_0 GOTO label_FALSE_3
      # IF_ZERO param_fib_at_Main_i_0 GOTO label_FALSE_3
      lw $t0, 0($fp)
      beq $t0, 0, label_FALSE_3
      # IF_ZERO local_fib_at_Main_internal_9 GOTO label_FALSE_3
      # IF_ZERO local_fib_at_Main_internal_9 GOTO label_FALSE_3
      lw $t0, -40($fp)
      beq $t0, 0, label_FALSE_3
      # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # Comparing 0($fp) type with String
      la $v0, String
      lw $a0, 0($fp)
      lw $a0, 0($a0)
      sub $a0, $a0, $v0
      sw $a0, -36($fp)
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_COMPARE_STRING_6
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_COMPARE_STRING_6
      lw $t0, -36($fp)
      beq $t0, 0, label_COMPARE_STRING_6
      # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # Comparing 0($fp) type with Bool
      la $v0, Bool
      lw $a0, 0($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -36($fp)
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_COMPARE_BY_VALUE_7
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_COMPARE_BY_VALUE_7
      lw $t0, -36($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_7
      # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # Comparing 0($fp) type with Int
      la $v0, Int
      lw $a0, 0($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -36($fp)
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_COMPARE_BY_VALUE_7
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_COMPARE_BY_VALUE_7
      lw $t0, -36($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_7
      # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # LOCAL local_fib_at_Main_internal_9 --> -40($fp)
      # Load pointers and SUB
      lw $a0, 0($fp)
      lw $a1, -40($fp)
      sub $a0, $a0, $a1
      sw $a0, -36($fp)
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_TRUE_4
      # IF_ZERO local_fib_at_Main_internal_8 GOTO label_TRUE_4
      lw $t0, -36($fp)
      beq $t0, 0, label_TRUE_4
      # GOTO label_FALSE_3
      j label_FALSE_3
      label_COMPARE_BY_VALUE_7: 
         # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
         # PARAM param_fib_at_Main_i_0 --> 0($fp)
         # LOCAL local_fib_at_Main_internal_9 --> -40($fp)
         lw $a0, 0($fp)
         lw $a1, -40($fp)
         # Load values
         lw $a0, 12($a0)
         lw $a1, 12($a1)
         # SUB and store
         sub $a0, $a0, $a1
         sw $a0, -36($fp)
         # IF_ZERO local_fib_at_Main_internal_8 GOTO label_TRUE_4
         # IF_ZERO local_fib_at_Main_internal_8 GOTO label_TRUE_4
         lw $t0, -36($fp)
         beq $t0, 0, label_TRUE_4
         # GOTO label_FALSE_3
         j label_FALSE_3
         label_COMPARE_STRING_6: 
            # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
            # PARAM param_fib_at_Main_i_0 --> 0($fp)
            # LOCAL local_fib_at_Main_internal_9 --> -40($fp)
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -40($fp)
            # Compare lengths
            lw $v0, 16($v0)
            lw $v1, 16($v1)
            sub $v0, $v0, $v1
            sw $v0, -36($fp)
            # IF_ZERO local_fib_at_Main_internal_8 GOTO label_CONTINUE_8
            # IF_ZERO local_fib_at_Main_internal_8 GOTO label_CONTINUE_8
            lw $t0, -36($fp)
            beq $t0, 0, label_CONTINUE_8
            # GOTO label_FALSE_3
            j label_FALSE_3
            label_CONTINUE_8: 
               # LOCAL local_fib_at_Main_internal_8 --> -36($fp)
               # PARAM param_fib_at_Main_i_0 --> 0($fp)
               # LOCAL local_fib_at_Main_internal_9 --> -40($fp)
               move $a2, $zero
               # Load strings for comparison
               lw $v0, 0($fp)
               lw $v1, -40($fp)
               # Load strings pointers
               lw $v0, 12($v0)
               lw $v1, 12($v1)
               # Compare loop, while [v0] != \0
               label_WHILE_STR_COMP_9: 
                  lb $a0, 0($v0)
                  # If EOS => break
                  beqz $a0, label_WHILE_STR_COMP_END_10
                  lb $a1, 0($v1)
                  # Move strings pointers
                  addu $v0, $v0, 1
                  addu $v1, $v1, 1
                  # Compare chars
                  sub $a0, $a0, $a1
                  beqz $a0, label_WHILE_STR_COMP_9
                  # False
                  li $a2, 1
                  label_WHILE_STR_COMP_END_10: 
                     # Store result
                     sw $a2, -36($fp)
                     # IF_ZERO local_fib_at_Main_internal_8 GOTO label_TRUE_4
                     # IF_ZERO local_fib_at_Main_internal_8 GOTO label_TRUE_4
                     lw $t0, -36($fp)
                     beq $t0, 0, label_TRUE_4
                     label_FALSE_3: 
                        # LOCAL local_fib_at_Main_internal_7 --> -32($fp)
                        # Allocating 20 bytes of memory
                        li $a0, 20
                        li $v0, 9
                        syscall
                        # Allocating string for type Bool
                        la $t0, String
                        sw $t0, 0($v0)
                        la $t0, String_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 8
                        sw $t0, 8($v0)
                        la $t0, Bool
                        sw $t0, 12($v0)
                        li $t0, 4
                        sw $t0, 16($v0)
                        move $t0, $v0
                        # Allocating 16 bytes of memory
                        li $a0, 16
                        li $v0, 9
                        syscall
                        sw $t0, 0($v0)
                        la $t0, Bool_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 12
                        sw $t0, 8($v0)
                        li $t0, 0
                        sw $t0, 12($v0)
                        sw $v0, -32($fp)
                        # GOTO label_END_5
j label_END_5
label_TRUE_4: 
   # LOCAL local_fib_at_Main_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -32($fp)
   label_END_5: 
# LOCAL local_fib_at_Main_internal_7 --> -32($fp)
# LOCAL local_fib_at_Main_internal_7 --> -32($fp)
# Obtain value from -32($fp)
lw $v0, -32($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_fib_at_Main_internal_7 GOTO label_FALSE_11
# IF_ZERO local_fib_at_Main_internal_7 GOTO label_FALSE_11
lw $t0, -32($fp)
beq $t0, 0, label_FALSE_11
# LOCAL local_fib_at_Main_internal_10 --> -44($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -44($fp)
# GOTO label_NOT_END_12
j label_NOT_END_12
label_FALSE_11: 
   # LOCAL local_fib_at_Main_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   label_NOT_END_12: 
      # LOCAL local_fib_at_Main_internal_6 --> -28($fp)
      # LOCAL local_fib_at_Main_internal_10 --> -44($fp)
      # Obtain value from -44($fp)
      lw $v0, -44($fp)
      lw $v0, 12($v0)
      sw $v0, -28($fp)
      # IF_ZERO local_fib_at_Main_internal_6 GOTO label_WHILE_END_2
      # IF_ZERO local_fib_at_Main_internal_6 GOTO label_WHILE_END_2
      lw $t0, -28($fp)
      beq $t0, 0, label_WHILE_END_2
      # LOCAL local_fib_at_Main_internal_11 --> -48($fp)
      # LOCAL local_fib_at_Main_a_0 --> -4($fp)
      # LOCAL local_fib_at_Main_b_2 --> -12($fp)
      # local_fib_at_Main_internal_11 = local_fib_at_Main_a_0 + local_fib_at_Main_b_2
      lw $t1, -4($fp)
      lw $t0, 12($t1)
      lw $t1, -12($fp)
      lw $t2, 12($t1)
      add $t0, $t0, $t2
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      la $t1, Int
      sw $t1, 12($v0)
      li $t1, 3
      sw $t1, 16($v0)
      move $t1, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t1, 0($v0)
      la $t1, Int_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 16
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $v0, -48($fp)
      # LOCAL local_fib_at_Main_c_4 --> -20($fp)
      # LOCAL local_fib_at_Main_internal_11 --> -48($fp)
      # local_fib_at_Main_c_4 = local_fib_at_Main_internal_11
      lw $t0, -48($fp)
      sw $t0, -20($fp)
      # LOCAL local_fib_at_Main_internal_13 --> -56($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Int
      sw $t0, 12($v0)
      li $t0, 3
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Int_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 16
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -56($fp)
      # LOCAL local_fib_at_Main_internal_12 --> -52($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # LOCAL local_fib_at_Main_internal_13 --> -56($fp)
      # local_fib_at_Main_internal_12 = PARAM param_fib_at_Main_i_0 - local_fib_at_Main_internal_13
      lw $t1, 0($fp)
      lw $t0, 12($t1)
      lw $t1, -56($fp)
      lw $t2, 12($t1)
      sub $t0, $t0, $t2
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      la $t1, Int
      sw $t1, 12($v0)
      li $t1, 3
      sw $t1, 16($v0)
      move $t1, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t1, 0($v0)
      la $t1, Int_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 16
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $v0, -52($fp)
      # PARAM param_fib_at_Main_i_0 --> 0($fp)
      # LOCAL local_fib_at_Main_internal_12 --> -52($fp)
      # PARAM param_fib_at_Main_i_0 = local_fib_at_Main_internal_12
      lw $t0, -52($fp)
      sw $t0, 0($fp)
      # LOCAL local_fib_at_Main_b_2 --> -12($fp)
      # LOCAL local_fib_at_Main_a_0 --> -4($fp)
      # local_fib_at_Main_b_2 = local_fib_at_Main_a_0
      lw $t0, -4($fp)
      sw $t0, -12($fp)
      # LOCAL local_fib_at_Main_a_0 --> -4($fp)
      # LOCAL local_fib_at_Main_c_4 --> -20($fp)
      # local_fib_at_Main_a_0 = local_fib_at_Main_c_4
      lw $t0, -20($fp)
      sw $t0, -4($fp)
      # GOTO label_WHILE_1
      j label_WHILE_1
      label_WHILE_END_2: 
         # RETURN local_fib_at_Main_c_4
         lw $v0, -20($fp)
         # Deallocate stack frame for function function_fib_at_Main.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 64
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END

