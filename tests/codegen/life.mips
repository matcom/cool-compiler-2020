
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:40 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
Board:   .asciiz    "Board"
# Function END
CellularAutomaton:   .asciiz    "CellularAutomaton"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_in_int_at_IO, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, dummy, dummy, function_out_int_at_IO, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    dummy, dummy, dummy, dummy, dummy, function_substr_at_String, dummy, dummy, dummy, dummy, function_length_at_String, function_concat_at_String, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type Board ****
Board_vtable:   .word    function_in_int_at_IO, function_board_init_at_Board, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_size_of_board_at_Board, dummy, function_out_int_at_IO, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, function_abort_at_Object, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy, dummy, function_type_name_at_Object, dummy
# Function END
# 


#  **** Type RECORD for type Board ****
Board_start: 
   Board_vtable_pointer:   .word    Board_vtable
   # Function END
Board_end: 
# 


#  **** VTABLE for type CellularAutomaton ****
CellularAutomaton_vtable:   .word    function_in_int_at_IO, function_board_init_at_Board, function_southwest_at_CellularAutomaton, function_cell_at_next_evolution_at_CellularAutomaton, function_in_string_at_IO, dummy, function_prompt_at_CellularAutomaton, function_size_of_board_at_Board, function_west_at_CellularAutomaton, function_out_int_at_IO, dummy, dummy, function_southeast_at_CellularAutomaton, function_northeast_at_CellularAutomaton, function_copy_at_Object, function_num_cells_at_CellularAutomaton, function_northwest_at_CellularAutomaton, function_init_at_CellularAutomaton, function_south_at_CellularAutomaton, function_east_at_CellularAutomaton, function_print_at_CellularAutomaton, function_abort_at_Object, function_north_at_CellularAutomaton, function_out_string_at_IO, function_option_at_CellularAutomaton, function_cell_at_CellularAutomaton, function_neighbors_at_CellularAutomaton, function_prompt2_at_CellularAutomaton, dummy, function_type_name_at_Object, function_evolve_at_CellularAutomaton
# Function END
# 


#  **** Type RECORD for type CellularAutomaton ****
CellularAutomaton_start: 
   CellularAutomaton_vtable_pointer:   .word    CellularAutomaton_vtable
   # Function END
CellularAutomaton_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_in_int_at_IO, function_board_init_at_Board, function_southwest_at_CellularAutomaton, function_cell_at_next_evolution_at_CellularAutomaton, function_in_string_at_IO, dummy, function_prompt_at_CellularAutomaton, function_size_of_board_at_Board, function_west_at_CellularAutomaton, function_out_int_at_IO, dummy, dummy, function_southeast_at_CellularAutomaton, function_northeast_at_CellularAutomaton, function_copy_at_Object, function_num_cells_at_CellularAutomaton, function_northwest_at_CellularAutomaton, function_init_at_CellularAutomaton, function_south_at_CellularAutomaton, function_east_at_CellularAutomaton, function_print_at_CellularAutomaton, function_abort_at_Object, function_north_at_CellularAutomaton, function_out_string_at_IO, function_option_at_CellularAutomaton, function_cell_at_CellularAutomaton, function_neighbors_at_CellularAutomaton, function_prompt2_at_CellularAutomaton, function_main_at_Main, function_type_name_at_Object, function_evolve_at_CellularAutomaton
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, 1, 2, 3
Object__TDT:   .word    1, 0, 1, 1, 1, 2, 3, 4
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1, -1
Board__TDT:   .word    -1, -1, -1, -1, -1, 0, 1, 2
CellularAutomaton__TDT:   .word    -1, -1, -1, -1, -1, -1, 0, 1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "\n"
# 


data_5:   .asciiz    "\n"
# 


data_6:   .asciiz    "\n"
# 


data_7:   .asciiz    " "
# 


data_8:   .asciiz    " "
# 


data_9:   .asciiz    " "
# 


data_10:   .asciiz    " "
# 


data_11:   .asciiz    " "
# 


data_12:   .asciiz    " "
# 


data_13:   .asciiz    " "
# 


data_14:   .asciiz    " "
# 


data_15:   .asciiz    " "
# 


data_16:   .asciiz    " "
# 


data_17:   .asciiz    " "
# 


data_18:   .asciiz    " "
# 


data_19:   .asciiz    " "
# 


data_20:   .asciiz    " "
# 


data_21:   .asciiz    "X"
# 


data_22:   .asciiz    "X"
# 


data_23:   .asciiz    "X"
# 


data_24:   .asciiz    "X"
# 


data_25:   .asciiz    "X"
# 


data_26:   .asciiz    "X"
# 


data_27:   .asciiz    "X"
# 


data_28:   .asciiz    "X"
# 


data_29:   .asciiz    "X"
# 


data_30:   .asciiz    "X"
# 


data_31:   .asciiz    "X"
# 


data_32:   .asciiz    "-"
# 


data_33:   .asciiz    "-"
# 


data_34:   .asciiz    "\nPlease chose a number:\n"
# 


data_35:   .asciiz    "\t1: A cross\n"
# 


data_36:   .asciiz    "\t2: A slash from the upper left to lower right\n"
# 


data_37:   .asciiz    "\t3: A slash from the upper right to lower left\n"
# 


data_38:   .asciiz    "\t4: An X\n"
# 


data_39:   .asciiz    "\t5: A greater than sign \n"
# 


data_40:   .asciiz    "\t6: A less than sign\n"
# 


data_41:   .asciiz    "\t7: Two greater than signs\n"
# 


data_42:   .asciiz    "\t8: Two less than signs\n"
# 


data_43:   .asciiz    "\t9: A 'V'\n"
# 


data_44:   .asciiz    "\t10: An inverse 'V'\n"
# 


data_45:   .asciiz    "\t11: Numbers 9 and 10 combined\n"
# 


data_46:   .asciiz    "\t12: A full grid\n"
# 


data_47:   .asciiz    "\t13: A 'T'\n"
# 


data_48:   .asciiz    "\t14: A plus '+'\n"
# 


data_49:   .asciiz    "\t15: A 'W'\n"
# 


data_50:   .asciiz    "\t16: An 'M'\n"
# 


data_51:   .asciiz    "\t17: An 'E'\n"
# 


data_52:   .asciiz    "\t18: A '3'\n"
# 


data_53:   .asciiz    "\t19: An 'O'\n"
# 


data_54:   .asciiz    "\t20: An '8'\n"
# 


data_55:   .asciiz    "\t21: An 'S'\n"
# 


data_56:   .asciiz    "Your choice => "
# 


data_57:   .asciiz    "\n"
# 


data_58:   .asciiz    " XX  XXXX XXXX  XX  "
# 


data_59:   .asciiz    "    X   X   X   X   X    "
# 


data_60:   .asciiz    "X     X     X     X     X"
# 


data_61:   .asciiz    "X   X X X   X   X X X   X"
# 


data_62:   .asciiz    "X     X     X   X   X    "
# 


data_63:   .asciiz    "    X   X   X     X     X"
# 


data_64:   .asciiz    "X  X  X  XX  X      "
# 


data_65:   .asciiz    " X  XX  X  X  X     "
# 


data_66:   .asciiz    "X   X X X   X  "
# 


data_67:   .asciiz    "  X   X X X   X"
# 


data_68:   .asciiz    "X X X X X X X X"
# 


data_69:   .asciiz    "XXXXXXXXXXXXXXXXXXXXXXXXX"
# 


data_70:   .asciiz    "XXXXX  X    X    X    X  "
# 


data_71:   .asciiz    "  X    X  XXXXX  X    X  "
# 


data_72:   .asciiz    "X     X X X X   X X  "
# 


data_73:   .asciiz    "  X X   X X X X     X"
# 


data_74:   .asciiz    "XXXXX   X   XXXXX   X   XXXX"
# 


data_75:   .asciiz    "XXX    X   X  X    X   XXXX "
# 


data_76:   .asciiz    " XX X  XX  X XX "
# 


data_77:   .asciiz    " XX X  XX  X XX X  XX  X XX "
# 


data_78:   .asciiz    " XXXX   X    XX    X   XXXX "
# 


data_79:   .asciiz    "                         "
# 


data_80:   .asciiz    "Would you like to continue with the next generation? \n"
# 


data_81:   .asciiz    "Please use lowercase y or n for your answer [y]: "
# 


data_82:   .asciiz    "\n"
# 


data_83:   .asciiz    "n"
# 


data_84:   .asciiz    "\n\n"
# 


data_85:   .asciiz    "Would you like to choose a background pattern? \n"
# 


data_86:   .asciiz    "Please use lowercase y or n for your answer [n]: "
# 


data_87:   .asciiz    "y"
# 


data_88:   .asciiz    "Welcome to the Game of Life.\n"
# 


data_89:   .asciiz    "There are many initial states to choose from. \n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7f2db4091370>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 32 bytes of memory
   li $a0, 32
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 28
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Board__attrib__rows__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Board__attrib__columns__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Board__attrib__board_size__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __CellularAutomaton__attrib__population_map__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 24($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__cells__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 28($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 112($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Board__attrib__rows__init implementation.
# @Params:
__Board__attrib__rows__init: 
   # Allocate stack frame for function __Board__attrib__rows__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__rows__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_attrib__rows__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Board__attrib__rows__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Board__attrib__columns__init implementation.
# @Params:
__Board__attrib__columns__init: 
   # Allocate stack frame for function __Board__attrib__columns__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__columns__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_attrib__columns__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Board__attrib__columns__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Board__attrib__board_size__init implementation.
# @Params:
__Board__attrib__board_size__init: 
   # Allocate stack frame for function __Board__attrib__board_size__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__board_size__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_attrib__board_size__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Board__attrib__board_size__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_size_of_board_at_Board implementation.
# @Params:
# 	0($fp) = param_size_of_board_at_Board_initial_0
function_size_of_board_at_Board: 
   # Allocate stack frame for function function_size_of_board_at_Board.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_size_of_board_at_Board_internal_0 --> -4($fp)
   # PARAM param_size_of_board_at_Board_initial_0 --> 0($fp)
   # local_size_of_board_at_Board_internal_0 = PARAM param_size_of_board_at_Board_initial_0
   lw $t0, 0($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_size_of_board_at_Board_internal_0 --> -4($fp)
   # LOCAL local_size_of_board_at_Board_internal_1 --> -8($fp)
   # local_size_of_board_at_Board_internal_1 = VCALL local_size_of_board_at_Board_internal_0 length
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_size_of_board_at_Board_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_size_of_board_at_Board.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_board_init_at_Board implementation.
# @Params:
# 	0($fp) = param_board_init_at_Board_start_0
function_board_init_at_Board: 
   # Allocate stack frame for function function_board_init_at_Board.
   subu $sp, $sp, 204
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 204
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_board_init_at_Board_internal_3 --> -16($fp)
   # local_board_init_at_Board_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_board_init_at_Board_internal_1 --> -8($fp)
   # LOCAL local_board_init_at_Board_internal_3 --> -16($fp)
   # local_board_init_at_Board_internal_1 = local_board_init_at_Board_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_board_init_at_Board_start_0
   # PARAM param_board_init_at_Board_start_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_board_init_at_Board_internal_1 --> -8($fp)
   # LOCAL local_board_init_at_Board_internal_2 --> -12($fp)
   # local_board_init_at_Board_internal_2 = VCALL local_board_init_at_Board_internal_1 size_of_board
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_2 --> -12($fp)
   # local_board_init_at_Board_size_0 = local_board_init_at_Board_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 15
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_3
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_3
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_3
   # IF_ZERO local_board_init_at_Board_internal_8 GOTO label_FALSE_3
   # IF_ZERO local_board_init_at_Board_internal_8 GOTO label_FALSE_3
   lw $t0, -36($fp)
   beq $t0, 0, label_FALSE_3
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -32($fp)
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_COMPARE_STRING_6
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_COMPARE_STRING_6
   lw $t0, -32($fp)
   beq $t0, 0, label_COMPARE_STRING_6
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -32($fp)
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_COMPARE_BY_VALUE_7
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_COMPARE_BY_VALUE_7
   lw $t0, -32($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_7
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -32($fp)
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_COMPARE_BY_VALUE_7
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_COMPARE_BY_VALUE_7
   lw $t0, -32($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_7
   # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -36($fp)
   sub $a0, $a0, $a1
   sw $a0, -32($fp)
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_4
   # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_4
   lw $t0, -32($fp)
   beq $t0, 0, label_TRUE_4
   # GOTO label_FALSE_3
   j label_FALSE_3
   label_COMPARE_BY_VALUE_7: 
      # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
      # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
      # LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
      lw $a0, -4($fp)
      lw $a1, -36($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -32($fp)
      # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_4
      # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_4
      lw $t0, -32($fp)
      beq $t0, 0, label_TRUE_4
      # GOTO label_FALSE_3
      j label_FALSE_3
      label_COMPARE_STRING_6: 
         # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
         # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
         # LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -36($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -32($fp)
         # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_CONTINUE_8
         # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_CONTINUE_8
         lw $t0, -32($fp)
         beq $t0, 0, label_CONTINUE_8
         # GOTO label_FALSE_3
         j label_FALSE_3
         label_CONTINUE_8: 
            # LOCAL local_board_init_at_Board_internal_7 --> -32($fp)
            # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
            # LOCAL local_board_init_at_Board_internal_8 --> -36($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -36($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_9: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_10
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_9
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_10: 
                  # Store result
                  sw $a2, -32($fp)
                  # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_4
                  # IF_ZERO local_board_init_at_Board_internal_7 GOTO label_TRUE_4
                  lw $t0, -32($fp)
                  beq $t0, 0, label_TRUE_4
                  label_FALSE_3: 
                     # LOCAL local_board_init_at_Board_internal_6 --> -28($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -28($fp)
                     # GOTO label_END_5
j label_END_5
label_TRUE_4: 
   # LOCAL local_board_init_at_Board_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   label_END_5: 
# LOCAL local_board_init_at_Board_internal_4 --> -20($fp)
# LOCAL local_board_init_at_Board_internal_6 --> -28($fp)
# Obtain value from -28($fp)
lw $v0, -28($fp)
lw $v0, 12($v0)
sw $v0, -20($fp)
# IF_ZERO local_board_init_at_Board_internal_4 GOTO label_FALSEIF_1
# IF_ZERO local_board_init_at_Board_internal_4 GOTO label_FALSEIF_1
lw $t0, -20($fp)
beq $t0, 0, label_FALSEIF_1
# LOCAL local_board_init_at_Board_internal_9 --> -40($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 3
sw $t0, 12($v0)
sw $v0, -40($fp)
# 
# LOCAL local_board_init_at_Board_internal_9 --> -40($fp)
lw $t0, -40($fp)
sw $t0, 12($s1)
# LOCAL local_board_init_at_Board_internal_10 --> -44($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -44($fp)
# 
# LOCAL local_board_init_at_Board_internal_10 --> -44($fp)
lw $t0, -44($fp)
sw $t0, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t0, -4($fp)
sw $t0, 20($s1)
# LOCAL local_board_init_at_Board_internal_5 --> -24($fp)
# local_board_init_at_Board_internal_5 = 
# GOTO label_ENDIF_2
j label_ENDIF_2
label_FALSEIF_1: 
   # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 16
   sw $t0, 12($v0)
   sw $v0, -64($fp)
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_13
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_13
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_13
   # IF_ZERO local_board_init_at_Board_internal_15 GOTO label_FALSE_13
   # IF_ZERO local_board_init_at_Board_internal_15 GOTO label_FALSE_13
   lw $t0, -64($fp)
   beq $t0, 0, label_FALSE_13
   # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -60($fp)
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_COMPARE_STRING_16
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_COMPARE_STRING_16
   lw $t0, -60($fp)
   beq $t0, 0, label_COMPARE_STRING_16
   # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -60($fp)
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_COMPARE_BY_VALUE_17
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_COMPARE_BY_VALUE_17
   lw $t0, -60($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_17
   # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -60($fp)
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_COMPARE_BY_VALUE_17
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_COMPARE_BY_VALUE_17
   lw $t0, -60($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_17
   # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -64($fp)
   sub $a0, $a0, $a1
   sw $a0, -60($fp)
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_TRUE_14
   # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_TRUE_14
   lw $t0, -60($fp)
   beq $t0, 0, label_TRUE_14
   # GOTO label_FALSE_13
   j label_FALSE_13
   label_COMPARE_BY_VALUE_17: 
      # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
      # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
      # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
      lw $a0, -4($fp)
      lw $a1, -64($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -60($fp)
      # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_TRUE_14
      # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_TRUE_14
      lw $t0, -60($fp)
      beq $t0, 0, label_TRUE_14
      # GOTO label_FALSE_13
      j label_FALSE_13
      label_COMPARE_STRING_16: 
         # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
         # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
         # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -64($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -60($fp)
         # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_CONTINUE_18
         # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_CONTINUE_18
         lw $t0, -60($fp)
         beq $t0, 0, label_CONTINUE_18
         # GOTO label_FALSE_13
         j label_FALSE_13
         label_CONTINUE_18: 
            # LOCAL local_board_init_at_Board_internal_14 --> -60($fp)
            # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
            # LOCAL local_board_init_at_Board_internal_15 --> -64($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -64($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_19: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_20
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_19
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_20: 
                  # Store result
                  sw $a2, -60($fp)
                  # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_TRUE_14
                  # IF_ZERO local_board_init_at_Board_internal_14 GOTO label_TRUE_14
                  lw $t0, -60($fp)
                  beq $t0, 0, label_TRUE_14
                  label_FALSE_13: 
                     # LOCAL local_board_init_at_Board_internal_13 --> -56($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -56($fp)
                     # GOTO label_END_15
j label_END_15
label_TRUE_14: 
   # LOCAL local_board_init_at_Board_internal_13 --> -56($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -56($fp)
   label_END_15: 
# LOCAL local_board_init_at_Board_internal_11 --> -48($fp)
# LOCAL local_board_init_at_Board_internal_13 --> -56($fp)
# Obtain value from -56($fp)
lw $v0, -56($fp)
lw $v0, 12($v0)
sw $v0, -48($fp)
# IF_ZERO local_board_init_at_Board_internal_11 GOTO label_FALSEIF_11
# IF_ZERO local_board_init_at_Board_internal_11 GOTO label_FALSEIF_11
lw $t0, -48($fp)
beq $t0, 0, label_FALSEIF_11
# LOCAL local_board_init_at_Board_internal_16 --> -68($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -68($fp)
# 
# LOCAL local_board_init_at_Board_internal_16 --> -68($fp)
lw $t0, -68($fp)
sw $t0, 12($s1)
# LOCAL local_board_init_at_Board_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -72($fp)
# 
# LOCAL local_board_init_at_Board_internal_17 --> -72($fp)
lw $t0, -72($fp)
sw $t0, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t0, -4($fp)
sw $t0, 20($s1)
# LOCAL local_board_init_at_Board_internal_12 --> -52($fp)
# local_board_init_at_Board_internal_12 = 
# GOTO label_ENDIF_12
j label_ENDIF_12
label_FALSEIF_11: 
   # LOCAL local_board_init_at_Board_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 20
   sw $t0, 12($v0)
   sw $v0, -92($fp)
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_23
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_23
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_23
   # IF_ZERO local_board_init_at_Board_internal_22 GOTO label_FALSE_23
   # IF_ZERO local_board_init_at_Board_internal_22 GOTO label_FALSE_23
   lw $t0, -92($fp)
   beq $t0, 0, label_FALSE_23
   # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_COMPARE_STRING_26
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_COMPARE_STRING_26
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_STRING_26
   # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_COMPARE_BY_VALUE_27
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_COMPARE_BY_VALUE_27
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_27
   # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_COMPARE_BY_VALUE_27
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_COMPARE_BY_VALUE_27
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_27
   # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_22 --> -92($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -92($fp)
   sub $a0, $a0, $a1
   sw $a0, -88($fp)
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_TRUE_24
   # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_TRUE_24
   lw $t0, -88($fp)
   beq $t0, 0, label_TRUE_24
   # GOTO label_FALSE_23
   j label_FALSE_23
   label_COMPARE_BY_VALUE_27: 
      # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
      # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
      # LOCAL local_board_init_at_Board_internal_22 --> -92($fp)
      lw $a0, -4($fp)
      lw $a1, -92($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -88($fp)
      # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_TRUE_24
      # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_TRUE_24
      lw $t0, -88($fp)
      beq $t0, 0, label_TRUE_24
      # GOTO label_FALSE_23
      j label_FALSE_23
      label_COMPARE_STRING_26: 
         # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
         # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
         # LOCAL local_board_init_at_Board_internal_22 --> -92($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -92($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -88($fp)
         # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_CONTINUE_28
         # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_CONTINUE_28
         lw $t0, -88($fp)
         beq $t0, 0, label_CONTINUE_28
         # GOTO label_FALSE_23
         j label_FALSE_23
         label_CONTINUE_28: 
            # LOCAL local_board_init_at_Board_internal_21 --> -88($fp)
            # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
            # LOCAL local_board_init_at_Board_internal_22 --> -92($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -92($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_29: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_30
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_29
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_30: 
                  # Store result
                  sw $a2, -88($fp)
                  # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_TRUE_24
                  # IF_ZERO local_board_init_at_Board_internal_21 GOTO label_TRUE_24
                  lw $t0, -88($fp)
                  beq $t0, 0, label_TRUE_24
                  label_FALSE_23: 
                     # LOCAL local_board_init_at_Board_internal_20 --> -84($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -84($fp)
                     # GOTO label_END_25
j label_END_25
label_TRUE_24: 
   # LOCAL local_board_init_at_Board_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   label_END_25: 
# LOCAL local_board_init_at_Board_internal_18 --> -76($fp)
# LOCAL local_board_init_at_Board_internal_20 --> -84($fp)
# Obtain value from -84($fp)
lw $v0, -84($fp)
lw $v0, 12($v0)
sw $v0, -76($fp)
# IF_ZERO local_board_init_at_Board_internal_18 GOTO label_FALSEIF_21
# IF_ZERO local_board_init_at_Board_internal_18 GOTO label_FALSEIF_21
lw $t0, -76($fp)
beq $t0, 0, label_FALSEIF_21
# LOCAL local_board_init_at_Board_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -96($fp)
# 
# LOCAL local_board_init_at_Board_internal_23 --> -96($fp)
lw $t0, -96($fp)
sw $t0, 12($s1)
# LOCAL local_board_init_at_Board_internal_24 --> -100($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -100($fp)
# 
# LOCAL local_board_init_at_Board_internal_24 --> -100($fp)
lw $t0, -100($fp)
sw $t0, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t0, -4($fp)
sw $t0, 20($s1)
# LOCAL local_board_init_at_Board_internal_19 --> -80($fp)
# local_board_init_at_Board_internal_19 = 
# GOTO label_ENDIF_22
j label_ENDIF_22
label_FALSEIF_21: 
   # LOCAL local_board_init_at_Board_internal_29 --> -120($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 21
   sw $t0, 12($v0)
   sw $v0, -120($fp)
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_33
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_33
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_33
   # IF_ZERO local_board_init_at_Board_internal_29 GOTO label_FALSE_33
   # IF_ZERO local_board_init_at_Board_internal_29 GOTO label_FALSE_33
   lw $t0, -120($fp)
   beq $t0, 0, label_FALSE_33
   # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -116($fp)
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_COMPARE_STRING_36
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_COMPARE_STRING_36
   lw $t0, -116($fp)
   beq $t0, 0, label_COMPARE_STRING_36
   # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -116($fp)
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_COMPARE_BY_VALUE_37
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_COMPARE_BY_VALUE_37
   lw $t0, -116($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_37
   # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -116($fp)
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_COMPARE_BY_VALUE_37
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_COMPARE_BY_VALUE_37
   lw $t0, -116($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_37
   # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_29 --> -120($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -120($fp)
   sub $a0, $a0, $a1
   sw $a0, -116($fp)
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_TRUE_34
   # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_TRUE_34
   lw $t0, -116($fp)
   beq $t0, 0, label_TRUE_34
   # GOTO label_FALSE_33
   j label_FALSE_33
   label_COMPARE_BY_VALUE_37: 
      # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
      # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
      # LOCAL local_board_init_at_Board_internal_29 --> -120($fp)
      lw $a0, -4($fp)
      lw $a1, -120($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -116($fp)
      # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_TRUE_34
      # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_TRUE_34
      lw $t0, -116($fp)
      beq $t0, 0, label_TRUE_34
      # GOTO label_FALSE_33
      j label_FALSE_33
      label_COMPARE_STRING_36: 
         # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
         # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
         # LOCAL local_board_init_at_Board_internal_29 --> -120($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -120($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -116($fp)
         # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_CONTINUE_38
         # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_CONTINUE_38
         lw $t0, -116($fp)
         beq $t0, 0, label_CONTINUE_38
         # GOTO label_FALSE_33
         j label_FALSE_33
         label_CONTINUE_38: 
            # LOCAL local_board_init_at_Board_internal_28 --> -116($fp)
            # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
            # LOCAL local_board_init_at_Board_internal_29 --> -120($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -120($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_39: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_40
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_39
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_40: 
                  # Store result
                  sw $a2, -116($fp)
                  # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_TRUE_34
                  # IF_ZERO local_board_init_at_Board_internal_28 GOTO label_TRUE_34
                  lw $t0, -116($fp)
                  beq $t0, 0, label_TRUE_34
                  label_FALSE_33: 
                     # LOCAL local_board_init_at_Board_internal_27 --> -112($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -112($fp)
                     # GOTO label_END_35
j label_END_35
label_TRUE_34: 
   # LOCAL local_board_init_at_Board_internal_27 --> -112($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -112($fp)
   label_END_35: 
# LOCAL local_board_init_at_Board_internal_25 --> -104($fp)
# LOCAL local_board_init_at_Board_internal_27 --> -112($fp)
# Obtain value from -112($fp)
lw $v0, -112($fp)
lw $v0, 12($v0)
sw $v0, -104($fp)
# IF_ZERO local_board_init_at_Board_internal_25 GOTO label_FALSEIF_31
# IF_ZERO local_board_init_at_Board_internal_25 GOTO label_FALSEIF_31
lw $t0, -104($fp)
beq $t0, 0, label_FALSEIF_31
# LOCAL local_board_init_at_Board_internal_30 --> -124($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 3
sw $t0, 12($v0)
sw $v0, -124($fp)
# 
# LOCAL local_board_init_at_Board_internal_30 --> -124($fp)
lw $t0, -124($fp)
sw $t0, 12($s1)
# LOCAL local_board_init_at_Board_internal_31 --> -128($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 7
sw $t0, 12($v0)
sw $v0, -128($fp)
# 
# LOCAL local_board_init_at_Board_internal_31 --> -128($fp)
lw $t0, -128($fp)
sw $t0, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t0, -4($fp)
sw $t0, 20($s1)
# LOCAL local_board_init_at_Board_internal_26 --> -108($fp)
# local_board_init_at_Board_internal_26 = 
# GOTO label_ENDIF_32
j label_ENDIF_32
label_FALSEIF_31: 
   # LOCAL local_board_init_at_Board_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 25
   sw $t0, 12($v0)
   sw $v0, -148($fp)
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_43
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_43
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_43
   # IF_ZERO local_board_init_at_Board_internal_36 GOTO label_FALSE_43
   # IF_ZERO local_board_init_at_Board_internal_36 GOTO label_FALSE_43
   lw $t0, -148($fp)
   beq $t0, 0, label_FALSE_43
   # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -144($fp)
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_COMPARE_STRING_46
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_COMPARE_STRING_46
   lw $t0, -144($fp)
   beq $t0, 0, label_COMPARE_STRING_46
   # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -144($fp)
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -144($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -144($fp)
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -144($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_36 --> -148($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -148($fp)
   sub $a0, $a0, $a1
   sw $a0, -144($fp)
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_TRUE_44
   # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_TRUE_44
   lw $t0, -144($fp)
   beq $t0, 0, label_TRUE_44
   # GOTO label_FALSE_43
   j label_FALSE_43
   label_COMPARE_BY_VALUE_47: 
      # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
      # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
      # LOCAL local_board_init_at_Board_internal_36 --> -148($fp)
      lw $a0, -4($fp)
      lw $a1, -148($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -144($fp)
      # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_TRUE_44
      # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_TRUE_44
      lw $t0, -144($fp)
      beq $t0, 0, label_TRUE_44
      # GOTO label_FALSE_43
      j label_FALSE_43
      label_COMPARE_STRING_46: 
         # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
         # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
         # LOCAL local_board_init_at_Board_internal_36 --> -148($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -148($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -144($fp)
         # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_CONTINUE_48
         # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_CONTINUE_48
         lw $t0, -144($fp)
         beq $t0, 0, label_CONTINUE_48
         # GOTO label_FALSE_43
         j label_FALSE_43
         label_CONTINUE_48: 
            # LOCAL local_board_init_at_Board_internal_35 --> -144($fp)
            # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
            # LOCAL local_board_init_at_Board_internal_36 --> -148($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -148($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_49: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_50
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_49
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_50: 
                  # Store result
                  sw $a2, -144($fp)
                  # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_TRUE_44
                  # IF_ZERO local_board_init_at_Board_internal_35 GOTO label_TRUE_44
                  lw $t0, -144($fp)
                  beq $t0, 0, label_TRUE_44
                  label_FALSE_43: 
                     # LOCAL local_board_init_at_Board_internal_34 --> -140($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -140($fp)
                     # GOTO label_END_45
j label_END_45
label_TRUE_44: 
   # LOCAL local_board_init_at_Board_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -140($fp)
   label_END_45: 
# LOCAL local_board_init_at_Board_internal_32 --> -132($fp)
# LOCAL local_board_init_at_Board_internal_34 --> -140($fp)
# Obtain value from -140($fp)
lw $v0, -140($fp)
lw $v0, 12($v0)
sw $v0, -132($fp)
# IF_ZERO local_board_init_at_Board_internal_32 GOTO label_FALSEIF_41
# IF_ZERO local_board_init_at_Board_internal_32 GOTO label_FALSEIF_41
lw $t0, -132($fp)
beq $t0, 0, label_FALSEIF_41
# LOCAL local_board_init_at_Board_internal_37 --> -152($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -152($fp)
# 
# LOCAL local_board_init_at_Board_internal_37 --> -152($fp)
lw $t0, -152($fp)
sw $t0, 12($s1)
# LOCAL local_board_init_at_Board_internal_38 --> -156($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -156($fp)
# 
# LOCAL local_board_init_at_Board_internal_38 --> -156($fp)
lw $t0, -156($fp)
sw $t0, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t0, -4($fp)
sw $t0, 20($s1)
# LOCAL local_board_init_at_Board_internal_33 --> -136($fp)
# local_board_init_at_Board_internal_33 = 
# GOTO label_ENDIF_42
j label_ENDIF_42
label_FALSEIF_41: 
   # LOCAL local_board_init_at_Board_internal_43 --> -176($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 28
   sw $t0, 12($v0)
   sw $v0, -176($fp)
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_53
   # IF_ZERO local_board_init_at_Board_size_0 GOTO label_FALSE_53
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_53
   # IF_ZERO local_board_init_at_Board_internal_43 GOTO label_FALSE_53
   # IF_ZERO local_board_init_at_Board_internal_43 GOTO label_FALSE_53
   lw $t0, -176($fp)
   beq $t0, 0, label_FALSE_53
   # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -172($fp)
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_COMPARE_STRING_56
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_COMPARE_STRING_56
   lw $t0, -172($fp)
   beq $t0, 0, label_COMPARE_STRING_56
   # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -172($fp)
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_COMPARE_BY_VALUE_57
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_COMPARE_BY_VALUE_57
   lw $t0, -172($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_57
   # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -172($fp)
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_COMPARE_BY_VALUE_57
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_COMPARE_BY_VALUE_57
   lw $t0, -172($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_57
   # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   # LOCAL local_board_init_at_Board_internal_43 --> -176($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -176($fp)
   sub $a0, $a0, $a1
   sw $a0, -172($fp)
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_TRUE_54
   # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_TRUE_54
   lw $t0, -172($fp)
   beq $t0, 0, label_TRUE_54
   # GOTO label_FALSE_53
   j label_FALSE_53
   label_COMPARE_BY_VALUE_57: 
      # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
      # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
      # LOCAL local_board_init_at_Board_internal_43 --> -176($fp)
      lw $a0, -4($fp)
      lw $a1, -176($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -172($fp)
      # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_TRUE_54
      # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_TRUE_54
      lw $t0, -172($fp)
      beq $t0, 0, label_TRUE_54
      # GOTO label_FALSE_53
      j label_FALSE_53
      label_COMPARE_STRING_56: 
         # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
         # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
         # LOCAL local_board_init_at_Board_internal_43 --> -176($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -176($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -172($fp)
         # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_CONTINUE_58
         # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_CONTINUE_58
         lw $t0, -172($fp)
         beq $t0, 0, label_CONTINUE_58
         # GOTO label_FALSE_53
         j label_FALSE_53
         label_CONTINUE_58: 
            # LOCAL local_board_init_at_Board_internal_42 --> -172($fp)
            # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
            # LOCAL local_board_init_at_Board_internal_43 --> -176($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -176($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_59: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_60
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_59
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_60: 
                  # Store result
                  sw $a2, -172($fp)
                  # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_TRUE_54
                  # IF_ZERO local_board_init_at_Board_internal_42 GOTO label_TRUE_54
                  lw $t0, -172($fp)
                  beq $t0, 0, label_TRUE_54
                  label_FALSE_53: 
                     # LOCAL local_board_init_at_Board_internal_41 --> -168($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -168($fp)
                     # GOTO label_END_55
j label_END_55
label_TRUE_54: 
   # LOCAL local_board_init_at_Board_internal_41 --> -168($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -168($fp)
   label_END_55: 
# LOCAL local_board_init_at_Board_internal_39 --> -160($fp)
# LOCAL local_board_init_at_Board_internal_41 --> -168($fp)
# Obtain value from -168($fp)
lw $v0, -168($fp)
lw $v0, 12($v0)
sw $v0, -160($fp)
# IF_ZERO local_board_init_at_Board_internal_39 GOTO label_FALSEIF_51
# IF_ZERO local_board_init_at_Board_internal_39 GOTO label_FALSEIF_51
lw $t0, -160($fp)
beq $t0, 0, label_FALSEIF_51
# LOCAL local_board_init_at_Board_internal_44 --> -180($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 7
sw $t0, 12($v0)
sw $v0, -180($fp)
# 
# LOCAL local_board_init_at_Board_internal_44 --> -180($fp)
lw $t0, -180($fp)
sw $t0, 12($s1)
# LOCAL local_board_init_at_Board_internal_45 --> -184($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -184($fp)
# 
# LOCAL local_board_init_at_Board_internal_45 --> -184($fp)
lw $t0, -184($fp)
sw $t0, 16($s1)
# 
# LOCAL local_board_init_at_Board_size_0 --> -4($fp)
lw $t0, -4($fp)
sw $t0, 20($s1)
# LOCAL local_board_init_at_Board_internal_40 --> -164($fp)
# local_board_init_at_Board_internal_40 = 
# GOTO label_ENDIF_52
j label_ENDIF_52
label_FALSEIF_51: 
   # LOCAL local_board_init_at_Board_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 5
   sw $t0, 12($v0)
   sw $v0, -188($fp)
   # 
   # LOCAL local_board_init_at_Board_internal_46 --> -188($fp)
   lw $t0, -188($fp)
   sw $t0, 12($s1)
   # LOCAL local_board_init_at_Board_internal_47 --> -192($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 5
   sw $t0, 12($v0)
   sw $v0, -192($fp)
   # 
   # LOCAL local_board_init_at_Board_internal_47 --> -192($fp)
   lw $t0, -192($fp)
   sw $t0, 16($s1)
   # 
   # LOCAL local_board_init_at_Board_size_0 --> -4($fp)
   lw $t0, -4($fp)
   sw $t0, 20($s1)
   # LOCAL local_board_init_at_Board_internal_40 --> -164($fp)
   # local_board_init_at_Board_internal_40 = 
   label_ENDIF_52: 
# LOCAL local_board_init_at_Board_internal_33 --> -136($fp)
# LOCAL local_board_init_at_Board_internal_40 --> -164($fp)
# local_board_init_at_Board_internal_33 = local_board_init_at_Board_internal_40
lw $t0, -164($fp)
sw $t0, -136($fp)
label_ENDIF_42: 
# LOCAL local_board_init_at_Board_internal_26 --> -108($fp)
# LOCAL local_board_init_at_Board_internal_33 --> -136($fp)
# local_board_init_at_Board_internal_26 = local_board_init_at_Board_internal_33
lw $t0, -136($fp)
sw $t0, -108($fp)
label_ENDIF_32: 
# LOCAL local_board_init_at_Board_internal_19 --> -80($fp)
# LOCAL local_board_init_at_Board_internal_26 --> -108($fp)
# local_board_init_at_Board_internal_19 = local_board_init_at_Board_internal_26
lw $t0, -108($fp)
sw $t0, -80($fp)
label_ENDIF_22: 
# LOCAL local_board_init_at_Board_internal_12 --> -52($fp)
# LOCAL local_board_init_at_Board_internal_19 --> -80($fp)
# local_board_init_at_Board_internal_12 = local_board_init_at_Board_internal_19
lw $t0, -80($fp)
sw $t0, -52($fp)
label_ENDIF_12: 
# LOCAL local_board_init_at_Board_internal_5 --> -24($fp)
# LOCAL local_board_init_at_Board_internal_12 --> -52($fp)
# local_board_init_at_Board_internal_5 = local_board_init_at_Board_internal_12
lw $t0, -52($fp)
sw $t0, -24($fp)
label_ENDIF_2: 
# LOCAL local_board_init_at_Board_internal_48 --> -196($fp)
# local_board_init_at_Board_internal_48 = SELF
sw $s1, -196($fp)
# RETURN local_board_init_at_Board_internal_48
lw $v0, -196($fp)
# Deallocate stack frame for function function_board_init_at_Board.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 204
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# __CellularAutomaton__attrib__population_map__init implementation.
# @Params:
__CellularAutomaton__attrib__population_map__init: 
   # Allocate stack frame for function __CellularAutomaton__attrib__population_map__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_rAutomaton__attrib__population_map__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_rAutomaton__attrib__population_map__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __CellularAutomaton__attrib__population_map__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_init_at_CellularAutomaton_map_0
function_init_at_CellularAutomaton: 
   # Allocate stack frame for function function_init_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_CellularAutomaton_map_0 --> 0($fp)
   lw $t0, 0($fp)
   sw $t0, 24($s1)
   # LOCAL local_init_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_init_at_CellularAutomaton_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_init_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_init_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_init_at_CellularAutomaton_internal_0 = local_init_at_CellularAutomaton_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_init_at_CellularAutomaton_map_0
   # PARAM param_init_at_CellularAutomaton_map_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_init_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_init_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_init_at_CellularAutomaton_internal_1 = VCALL local_init_at_CellularAutomaton_internal_0 board_init
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_init_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_init_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_init_at_CellularAutomaton_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_init_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_print_at_CellularAutomaton implementation.
# @Params:
function_print_at_CellularAutomaton: 
   # Allocate stack frame for function function_print_at_CellularAutomaton.
   subu $sp, $sp, 120
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 120
   # LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_print_at_CellularAutomaton_i_0 = local_print_at_CellularAutomaton_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_print_at_CellularAutomaton_num_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # local_print_at_CellularAutomaton_internal_3 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_print_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t0, 20($s1)
   sw $t0, -16($fp)
   # LOCAL local_print_at_CellularAutomaton_num_2 --> -12($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_print_at_CellularAutomaton_num_2 = local_print_at_CellularAutomaton_internal_3
   lw $t0, -16($fp)
   sw $t0, -12($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_print_at_CellularAutomaton_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_print_at_CellularAutomaton_internal_4 = local_print_at_CellularAutomaton_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_4
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -32($fp)
   # ARG local_print_at_CellularAutomaton_internal_7
   # LOCAL local_print_at_CellularAutomaton_internal_7 --> -32($fp)
   lw $t0, -32($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_print_at_CellularAutomaton_internal_5 = VCALL local_print_at_CellularAutomaton_internal_4 out_string
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_WHILE_61: 
      # LOCAL local_print_at_CellularAutomaton_internal_9 --> -40($fp)
      # LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
      # LOCAL local_print_at_CellularAutomaton_num_2 --> -12($fp)
      lw $a0, -4($fp)
      lw $a1, -12($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_GREATER_ZERO local_print_at_CellularAutomaton_internal_9 GOTO label_FALSE_63
      # IF_GREATER_ZERO local_print_at_CellularAutomaton_internal_9 GOTO label_FALSE_63
      lw $t0, -40($fp)
      bgt $t0, 0, label_FALSE_63
      # IF_ZERO local_print_at_CellularAutomaton_internal_9 GOTO label_FALSE_63
      # IF_ZERO local_print_at_CellularAutomaton_internal_9 GOTO label_FALSE_63
      lw $t0, -40($fp)
      beq $t0, 0, label_FALSE_63
      # LOCAL local_print_at_CellularAutomaton_internal_9 --> -40($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -40($fp)
      # GOTO label_END_64
j label_END_64
label_FALSE_63: 
   # LOCAL local_print_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   label_END_64: 
# LOCAL local_print_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_print_at_CellularAutomaton_internal_9 --> -40($fp)
# Obtain value from -40($fp)
lw $v0, -40($fp)
lw $v0, 12($v0)
sw $v0, -36($fp)
# IF_ZERO local_print_at_CellularAutomaton_internal_8 GOTO label_WHILE_END_62
# IF_ZERO local_print_at_CellularAutomaton_internal_8 GOTO label_WHILE_END_62
lw $t0, -36($fp)
beq $t0, 0, label_WHILE_END_62
# LOCAL local_print_at_CellularAutomaton_internal_12 --> -52($fp)
# local_print_at_CellularAutomaton_internal_12 = SELF
sw $s1, -52($fp)
# LOCAL local_print_at_CellularAutomaton_internal_10 --> -44($fp)
# LOCAL local_print_at_CellularAutomaton_internal_12 --> -52($fp)
# local_print_at_CellularAutomaton_internal_10 = local_print_at_CellularAutomaton_internal_12
lw $t0, -52($fp)
sw $t0, -44($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_print_at_CellularAutomaton_internal_15 = GETATTRIBUTE population_map CellularAutomaton
# LOCAL local_print_at_CellularAutomaton_internal_15 --> -64($fp)
lw $t0, 24($s1)
sw $t0, -64($fp)
# LOCAL local_print_at_CellularAutomaton_internal_13 --> -56($fp)
# LOCAL local_print_at_CellularAutomaton_internal_15 --> -64($fp)
# local_print_at_CellularAutomaton_internal_13 = local_print_at_CellularAutomaton_internal_15
lw $t0, -64($fp)
sw $t0, -56($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_print_at_CellularAutomaton_i_0
# LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
lw $t0, -4($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# local_print_at_CellularAutomaton_internal_16 = GETATTRIBUTE columns CellularAutomaton
# LOCAL local_print_at_CellularAutomaton_internal_16 --> -68($fp)
lw $t0, 16($s1)
sw $t0, -68($fp)
# ARG local_print_at_CellularAutomaton_internal_16
# LOCAL local_print_at_CellularAutomaton_internal_16 --> -68($fp)
lw $t0, -68($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_13 --> -56($fp)
# LOCAL local_print_at_CellularAutomaton_internal_14 --> -60($fp)
# local_print_at_CellularAutomaton_internal_14 = VCALL local_print_at_CellularAutomaton_internal_13 substr
# Save new self pointer in $s1
lw $s1, -56($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 20($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -60($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_print_at_CellularAutomaton_internal_14
# LOCAL local_print_at_CellularAutomaton_internal_14 --> -60($fp)
lw $t0, -60($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_10 --> -44($fp)
# LOCAL local_print_at_CellularAutomaton_internal_11 --> -48($fp)
# local_print_at_CellularAutomaton_internal_11 = VCALL local_print_at_CellularAutomaton_internal_10 out_string
# Save new self pointer in $s1
lw $s1, -44($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 92($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -48($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_print_at_CellularAutomaton_internal_19 --> -80($fp)
# local_print_at_CellularAutomaton_internal_19 = SELF
sw $s1, -80($fp)
# LOCAL local_print_at_CellularAutomaton_internal_17 --> -72($fp)
# LOCAL local_print_at_CellularAutomaton_internal_19 --> -80($fp)
# local_print_at_CellularAutomaton_internal_17 = local_print_at_CellularAutomaton_internal_19
lw $t0, -80($fp)
sw $t0, -72($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_20 --> -84($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_5
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -84($fp)
# ARG local_print_at_CellularAutomaton_internal_20
# LOCAL local_print_at_CellularAutomaton_internal_20 --> -84($fp)
lw $t0, -84($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_print_at_CellularAutomaton_internal_17 --> -72($fp)
# LOCAL local_print_at_CellularAutomaton_internal_18 --> -76($fp)
# local_print_at_CellularAutomaton_internal_18 = VCALL local_print_at_CellularAutomaton_internal_17 out_string
# Save new self pointer in $s1
lw $s1, -72($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 92($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -76($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# local_print_at_CellularAutomaton_internal_22 = GETATTRIBUTE columns CellularAutomaton
# LOCAL local_print_at_CellularAutomaton_internal_22 --> -92($fp)
lw $t0, 16($s1)
sw $t0, -92($fp)
# LOCAL local_print_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
# LOCAL local_print_at_CellularAutomaton_internal_22 --> -92($fp)
# local_print_at_CellularAutomaton_internal_21 = local_print_at_CellularAutomaton_i_0 + local_print_at_CellularAutomaton_internal_22
lw $t1, -4($fp)
lw $t0, 12($t1)
lw $t1, -92($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -88($fp)
# LOCAL local_print_at_CellularAutomaton_i_0 --> -4($fp)
# LOCAL local_print_at_CellularAutomaton_internal_21 --> -88($fp)
# local_print_at_CellularAutomaton_i_0 = local_print_at_CellularAutomaton_internal_21
lw $t0, -88($fp)
sw $t0, -4($fp)
# GOTO label_WHILE_61
j label_WHILE_61
label_WHILE_END_62: 
   # LOCAL local_print_at_CellularAutomaton_internal_25 --> -104($fp)
   # local_print_at_CellularAutomaton_internal_25 = SELF
   sw $s1, -104($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_23 --> -96($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_25 --> -104($fp)
   # local_print_at_CellularAutomaton_internal_23 = local_print_at_CellularAutomaton_internal_25
   lw $t0, -104($fp)
   sw $t0, -96($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_6
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -108($fp)
   # ARG local_print_at_CellularAutomaton_internal_26
   # LOCAL local_print_at_CellularAutomaton_internal_26 --> -108($fp)
   lw $t0, -108($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_CellularAutomaton_internal_23 --> -96($fp)
   # LOCAL local_print_at_CellularAutomaton_internal_24 --> -100($fp)
   # local_print_at_CellularAutomaton_internal_24 = VCALL local_print_at_CellularAutomaton_internal_23 out_string
   # Save new self pointer in $s1
   lw $s1, -96($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -100($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_print_at_CellularAutomaton_internal_27 = SELF
   sw $s1, -112($fp)
   # RETURN local_print_at_CellularAutomaton_internal_27
   lw $v0, -112($fp)
   # Deallocate stack frame for function function_print_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 120
   jr $ra
   # Function END


# function_num_cells_at_CellularAutomaton implementation.
# @Params:
function_num_cells_at_CellularAutomaton: 
   # Allocate stack frame for function function_num_cells_at_CellularAutomaton.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_num_cells_at_CellularAutomaton_internal_2 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_num_cells_at_CellularAutomaton_internal_2 --> -12($fp)
   lw $t0, 24($s1)
   sw $t0, -12($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_num_cells_at_CellularAutomaton_internal_0 = local_num_cells_at_CellularAutomaton_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_0 --> -4($fp)
   # LOCAL local_num_cells_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_num_cells_at_CellularAutomaton_internal_1 = VCALL local_num_cells_at_CellularAutomaton_internal_0 length
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_num_cells_at_CellularAutomaton_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_num_cells_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cell_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_at_CellularAutomaton_position_0
function_cell_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_at_CellularAutomaton.
   subu $sp, $sp, 52
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 52
   # local_cell_at_CellularAutomaton_internal_4 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_cell_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, 20($s1)
   sw $t0, -20($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_cell_at_CellularAutomaton_internal_3 = local_cell_at_CellularAutomaton_internal_4 - local_cell_at_CellularAutomaton_internal_5
   lw $t1, -20($fp)
   lw $t0, 12($t1)
   lw $t1, -24($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_cell_at_CellularAutomaton_position_0 --> 0($fp)
   lw $a0, -16($fp)
   lw $a1, 0($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_cell_at_CellularAutomaton_internal_2 GOTO label_FALSE_67
   # IF_GREATER_ZERO local_cell_at_CellularAutomaton_internal_2 GOTO label_FALSE_67
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_67
   # IF_ZERO local_cell_at_CellularAutomaton_internal_2 GOTO label_FALSE_67
   # IF_ZERO local_cell_at_CellularAutomaton_internal_2 GOTO label_FALSE_67
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_67
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_68
j label_END_68
label_FALSE_67: 
   # LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_68: 
# LOCAL local_cell_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_cell_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_cell_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_65
# IF_ZERO local_cell_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_65
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_65
# LOCAL local_cell_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_7
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_cell_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_cell_at_CellularAutomaton_internal_6 --> -28($fp)
# local_cell_at_CellularAutomaton_internal_1 = local_cell_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_66
j label_ENDIF_66
label_FALSEIF_65: 
   # local_cell_at_CellularAutomaton_internal_9 = GETATTRIBUTE population_map CellularAutomaton
   # LOCAL local_cell_at_CellularAutomaton_internal_9 --> -40($fp)
   lw $t0, 24($s1)
   sw $t0, -40($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_cell_at_CellularAutomaton_internal_7 = local_cell_at_CellularAutomaton_internal_9
   lw $t0, -40($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_CellularAutomaton_position_0
   # PARAM param_cell_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cell_at_CellularAutomaton_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # ARG local_cell_at_CellularAutomaton_internal_10
   # LOCAL local_cell_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t0, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cell_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_at_CellularAutomaton_internal_8 = VCALL local_cell_at_CellularAutomaton_internal_7 substr
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 20($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_cell_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_cell_at_CellularAutomaton_internal_1 = local_cell_at_CellularAutomaton_internal_8
   lw $t0, -36($fp)
   sw $t0, -8($fp)
   label_ENDIF_66: 
# RETURN local_cell_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_cell_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 52
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_north_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_north_at_CellularAutomaton_position_0
function_north_at_CellularAutomaton: 
   # Allocate stack frame for function function_north_at_CellularAutomaton.
   subu $sp, $sp, 56
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 56
   # local_north_at_CellularAutomaton_internal_4 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_north_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, 16($s1)
   sw $t0, -20($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_north_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_north_at_CellularAutomaton_internal_3 = PARAM param_north_at_CellularAutomaton_position_0 - local_north_at_CellularAutomaton_internal_4
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -20($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $a0, -16($fp)
   lw $a1, -24($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_north_at_CellularAutomaton_internal_2 GOTO label_FALSE_71
   # IF_GREATER_ZERO local_north_at_CellularAutomaton_internal_2 GOTO label_FALSE_71
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_71
   # IF_ZERO local_north_at_CellularAutomaton_internal_2 GOTO label_FALSE_71
   # IF_ZERO local_north_at_CellularAutomaton_internal_2 GOTO label_FALSE_71
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_71
   # LOCAL local_north_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_72
j label_END_72
label_FALSE_71: 
   # LOCAL local_north_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_72: 
# LOCAL local_north_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_north_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_north_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_69
# IF_ZERO local_north_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_69
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_69
# LOCAL local_north_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_8
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_north_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_north_at_CellularAutomaton_internal_6 --> -28($fp)
# local_north_at_CellularAutomaton_internal_1 = local_north_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_70
j label_ENDIF_70
label_FALSEIF_69: 
   # LOCAL local_north_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_north_at_CellularAutomaton_internal_9 = SELF
   sw $s1, -40($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_north_at_CellularAutomaton_internal_7 = local_north_at_CellularAutomaton_internal_9
   lw $t0, -40($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_north_at_CellularAutomaton_internal_11 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_north_at_CellularAutomaton_internal_11 --> -48($fp)
   lw $t0, 16($s1)
   sw $t0, -48($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_10 --> -44($fp)
   # PARAM param_north_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_north_at_CellularAutomaton_internal_10 = PARAM param_north_at_CellularAutomaton_position_0 - local_north_at_CellularAutomaton_internal_11
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -48($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # ARG local_north_at_CellularAutomaton_internal_10
   # LOCAL local_north_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t0, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_north_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_north_at_CellularAutomaton_internal_8 = VCALL local_north_at_CellularAutomaton_internal_7 cell
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 100($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_north_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_north_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_north_at_CellularAutomaton_internal_1 = local_north_at_CellularAutomaton_internal_8
   lw $t0, -36($fp)
   sw $t0, -8($fp)
   label_ENDIF_70: 
# RETURN local_north_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_north_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 56
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_south_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_south_at_CellularAutomaton_position_0
function_south_at_CellularAutomaton: 
   # Allocate stack frame for function function_south_at_CellularAutomaton.
   subu $sp, $sp, 56
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 56
   # local_south_at_CellularAutomaton_internal_3 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_south_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t0, 20($s1)
   sw $t0, -16($fp)
   # local_south_at_CellularAutomaton_internal_5 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_south_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $t0, 16($s1)
   sw $t0, -24($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_4 --> -20($fp)
   # PARAM param_south_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_south_at_CellularAutomaton_internal_4 = PARAM param_south_at_CellularAutomaton_position_0 + local_south_at_CellularAutomaton_internal_5
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -24($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $a0, -16($fp)
   lw $a1, -20($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_south_at_CellularAutomaton_internal_2 GOTO label_FALSE_75
   # IF_GREATER_ZERO local_south_at_CellularAutomaton_internal_2 GOTO label_FALSE_75
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_75
   # IF_ZERO local_south_at_CellularAutomaton_internal_2 GOTO label_FALSE_75
   # IF_ZERO local_south_at_CellularAutomaton_internal_2 GOTO label_FALSE_75
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_75
   # LOCAL local_south_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_76
j label_END_76
label_FALSE_75: 
   # LOCAL local_south_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_76: 
# LOCAL local_south_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_south_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_south_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_73
# IF_ZERO local_south_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_73
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_73
# LOCAL local_south_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_9
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_south_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_south_at_CellularAutomaton_internal_6 --> -28($fp)
# local_south_at_CellularAutomaton_internal_1 = local_south_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_74
j label_ENDIF_74
label_FALSEIF_73: 
   # LOCAL local_south_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_south_at_CellularAutomaton_internal_9 = SELF
   sw $s1, -40($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_south_at_CellularAutomaton_internal_7 = local_south_at_CellularAutomaton_internal_9
   lw $t0, -40($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_south_at_CellularAutomaton_internal_11 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_south_at_CellularAutomaton_internal_11 --> -48($fp)
   lw $t0, 16($s1)
   sw $t0, -48($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_10 --> -44($fp)
   # PARAM param_south_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_south_at_CellularAutomaton_internal_10 = PARAM param_south_at_CellularAutomaton_position_0 + local_south_at_CellularAutomaton_internal_11
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -48($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # ARG local_south_at_CellularAutomaton_internal_10
   # LOCAL local_south_at_CellularAutomaton_internal_10 --> -44($fp)
   lw $t0, -44($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_south_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_south_at_CellularAutomaton_internal_8 = VCALL local_south_at_CellularAutomaton_internal_7 cell
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 100($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_south_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_south_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_south_at_CellularAutomaton_internal_1 = local_south_at_CellularAutomaton_internal_8
   lw $t0, -36($fp)
   sw $t0, -8($fp)
   label_ENDIF_74: 
# RETURN local_south_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_south_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 56
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_east_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_east_at_CellularAutomaton_position_0
function_east_at_CellularAutomaton: 
   # Allocate stack frame for function function_east_at_CellularAutomaton.
   subu $sp, $sp, 80
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 80
   # LOCAL local_east_at_CellularAutomaton_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -32($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_6 --> -28($fp)
   # PARAM param_east_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_east_at_CellularAutomaton_internal_6 = PARAM param_east_at_CellularAutomaton_position_0 + local_east_at_CellularAutomaton_internal_7
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -32($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # local_east_at_CellularAutomaton_internal_8 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_east_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t0, 16($s1)
   sw $t0, -36($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_6 --> -28($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_8 --> -36($fp)
   # local_east_at_CellularAutomaton_internal_5 = local_east_at_CellularAutomaton_internal_6 / local_east_at_CellularAutomaton_internal_8
   lw $t1, -28($fp)
   lw $t0, 12($t1)
   lw $t1, -36($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # local_east_at_CellularAutomaton_internal_9 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_east_at_CellularAutomaton_internal_9 --> -40($fp)
   lw $t0, 16($s1)
   sw $t0, -40($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_9 --> -40($fp)
   # local_east_at_CellularAutomaton_internal_4 = local_east_at_CellularAutomaton_internal_5 * local_east_at_CellularAutomaton_internal_9
   lw $t1, -24($fp)
   lw $t0, 12($t1)
   lw $t1, -40($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
   # PARAM param_east_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_east_at_CellularAutomaton_internal_10 = PARAM param_east_at_CellularAutomaton_position_0 + local_east_at_CellularAutomaton_internal_11
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -48($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # IF_ZERO local_east_at_CellularAutomaton_internal_4 GOTO label_FALSE_79
   # IF_ZERO local_east_at_CellularAutomaton_internal_4 GOTO label_FALSE_79
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_79
   # IF_ZERO local_east_at_CellularAutomaton_internal_10 GOTO label_FALSE_79
   # IF_ZERO local_east_at_CellularAutomaton_internal_10 GOTO label_FALSE_79
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_79
   # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # Comparing -20($fp) type with String
   la $v0, String
   lw $a0, -20($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_COMPARE_STRING_82
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_COMPARE_STRING_82
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_82
   # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # Comparing -20($fp) type with Bool
   la $v0, Bool
   lw $a0, -20($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_83
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_83
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_83
   # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # Comparing -20($fp) type with Int
   la $v0, Int
   lw $a0, -20($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_83
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_83
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_83
   # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
   # Load pointers and SUB
   lw $a0, -20($fp)
   lw $a1, -44($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_TRUE_80
   # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_TRUE_80
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_80
   # GOTO label_FALSE_79
   j label_FALSE_79
   label_COMPARE_BY_VALUE_83: 
      # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
      # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
      # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
      lw $a0, -20($fp)
      lw $a1, -44($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_TRUE_80
      # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_TRUE_80
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_80
      # GOTO label_FALSE_79
      j label_FALSE_79
      label_COMPARE_STRING_82: 
         # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
         # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
         # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
         # Load strings for comparison
         lw $v0, -20($fp)
         lw $v1, -44($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_CONTINUE_84
         # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_CONTINUE_84
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_84
         # GOTO label_FALSE_79
         j label_FALSE_79
         label_CONTINUE_84: 
            # LOCAL local_east_at_CellularAutomaton_internal_3 --> -16($fp)
            # LOCAL local_east_at_CellularAutomaton_internal_4 --> -20($fp)
            # LOCAL local_east_at_CellularAutomaton_internal_10 --> -44($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -20($fp)
            lw $v1, -44($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_85: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_86
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_85
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_86: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_TRUE_80
                  # IF_ZERO local_east_at_CellularAutomaton_internal_3 GOTO label_TRUE_80
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_80
                  label_FALSE_79: 
                     # LOCAL local_east_at_CellularAutomaton_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_81
j label_END_81
label_TRUE_80: 
   # LOCAL local_east_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_81: 
# LOCAL local_east_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_east_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_east_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_77
# IF_ZERO local_east_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_77
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_77
# LOCAL local_east_at_CellularAutomaton_internal_12 --> -52($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_10
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -52($fp)
# LOCAL local_east_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_east_at_CellularAutomaton_internal_12 --> -52($fp)
# local_east_at_CellularAutomaton_internal_1 = local_east_at_CellularAutomaton_internal_12
lw $t0, -52($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_78
j label_ENDIF_78
label_FALSEIF_77: 
   # LOCAL local_east_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_east_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_east_at_CellularAutomaton_internal_13 = local_east_at_CellularAutomaton_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_east_at_CellularAutomaton_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_16 --> -68($fp)
   # PARAM param_east_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_east_at_CellularAutomaton_internal_16 = PARAM param_east_at_CellularAutomaton_position_0 + local_east_at_CellularAutomaton_internal_17
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -72($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -68($fp)
   # ARG local_east_at_CellularAutomaton_internal_16
   # LOCAL local_east_at_CellularAutomaton_internal_16 --> -68($fp)
   lw $t0, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_east_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_east_at_CellularAutomaton_internal_14 = VCALL local_east_at_CellularAutomaton_internal_13 cell
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 100($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_east_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_east_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_east_at_CellularAutomaton_internal_1 = local_east_at_CellularAutomaton_internal_14
   lw $t0, -60($fp)
   sw $t0, -8($fp)
   label_ENDIF_78: 
# RETURN local_east_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_east_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 80
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_west_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_west_at_CellularAutomaton_position_0
function_west_at_CellularAutomaton: 
   # Allocate stack frame for function function_west_at_CellularAutomaton.
   subu $sp, $sp, 88
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 88
   # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_west_at_CellularAutomaton_position_0 GOTO label_FALSE_89
   # IF_ZERO param_west_at_CellularAutomaton_position_0 GOTO label_FALSE_89
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_89
   # IF_ZERO local_west_at_CellularAutomaton_internal_4 GOTO label_FALSE_89
   # IF_ZERO local_west_at_CellularAutomaton_internal_4 GOTO label_FALSE_89
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_89
   # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_COMPARE_STRING_92
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_COMPARE_STRING_92
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_92
   # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_93
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_93
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_93
   # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_93
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_93
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_93
   # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_TRUE_90
   # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_TRUE_90
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_90
   # GOTO label_FALSE_89
   j label_FALSE_89
   label_COMPARE_BY_VALUE_93: 
      # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
      # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
      # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_TRUE_90
      # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_TRUE_90
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_90
      # GOTO label_FALSE_89
      j label_FALSE_89
      label_COMPARE_STRING_92: 
         # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
         # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
         # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_CONTINUE_94
         # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_CONTINUE_94
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_94
         # GOTO label_FALSE_89
         j label_FALSE_89
         label_CONTINUE_94: 
            # LOCAL local_west_at_CellularAutomaton_internal_3 --> -16($fp)
            # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
            # LOCAL local_west_at_CellularAutomaton_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_95: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_96
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_95
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_96: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_TRUE_90
                  # IF_ZERO local_west_at_CellularAutomaton_internal_3 GOTO label_TRUE_90
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_90
                  label_FALSE_89: 
                     # LOCAL local_west_at_CellularAutomaton_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_91
j label_END_91
label_TRUE_90: 
   # LOCAL local_west_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_91: 
# LOCAL local_west_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_west_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_west_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_87
# IF_ZERO local_west_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_87
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_87
# LOCAL local_west_at_CellularAutomaton_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_11
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -24($fp)
# LOCAL local_west_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_west_at_CellularAutomaton_internal_5 --> -24($fp)
# local_west_at_CellularAutomaton_internal_1 = local_west_at_CellularAutomaton_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_88
j label_ENDIF_88
label_FALSEIF_87: 
   # local_west_at_CellularAutomaton_internal_12 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_west_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t0, 16($s1)
   sw $t0, -52($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_11 --> -48($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_west_at_CellularAutomaton_internal_11 = PARAM param_west_at_CellularAutomaton_position_0 / local_west_at_CellularAutomaton_internal_12
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -52($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   # local_west_at_CellularAutomaton_internal_13 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_west_at_CellularAutomaton_internal_13 --> -56($fp)
   lw $t0, 16($s1)
   sw $t0, -56($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_west_at_CellularAutomaton_internal_10 = local_west_at_CellularAutomaton_internal_11 * local_west_at_CellularAutomaton_internal_13
   lw $t1, -48($fp)
   lw $t0, 12($t1)
   lw $t1, -56($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_10 GOTO label_FALSE_99
   # IF_ZERO local_west_at_CellularAutomaton_internal_10 GOTO label_FALSE_99
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_99
   # IF_ZERO param_west_at_CellularAutomaton_position_0 GOTO label_FALSE_99
   # IF_ZERO param_west_at_CellularAutomaton_position_0 GOTO label_FALSE_99
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_99
   # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # Comparing -44($fp) type with String
   la $v0, String
   lw $a0, -44($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_COMPARE_STRING_102
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_COMPARE_STRING_102
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_102
   # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # Comparing -44($fp) type with Bool
   la $v0, Bool
   lw $a0, -44($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_COMPARE_BY_VALUE_103
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_COMPARE_BY_VALUE_103
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_103
   # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # Comparing -44($fp) type with Int
   la $v0, Int
   lw $a0, -44($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_COMPARE_BY_VALUE_103
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_COMPARE_BY_VALUE_103
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_103
   # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # Load pointers and SUB
   lw $a0, -44($fp)
   lw $a1, 0($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_TRUE_100
   # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_TRUE_100
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_100
   # GOTO label_FALSE_99
   j label_FALSE_99
   label_COMPARE_BY_VALUE_103: 
      # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
      # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
      # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
      lw $a0, -44($fp)
      lw $a1, 0($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_TRUE_100
      # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_TRUE_100
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_100
      # GOTO label_FALSE_99
      j label_FALSE_99
      label_COMPARE_STRING_102: 
         # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
         # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
         # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
         # Load strings for comparison
         lw $v0, -44($fp)
         lw $v1, 0($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_CONTINUE_104
         # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_CONTINUE_104
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_104
         # GOTO label_FALSE_99
         j label_FALSE_99
         label_CONTINUE_104: 
            # LOCAL local_west_at_CellularAutomaton_internal_9 --> -40($fp)
            # LOCAL local_west_at_CellularAutomaton_internal_10 --> -44($fp)
            # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -44($fp)
            lw $v1, 0($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_105: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_106
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_105
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_106: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_TRUE_100
                  # IF_ZERO local_west_at_CellularAutomaton_internal_9 GOTO label_TRUE_100
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_100
                  label_FALSE_99: 
                     # LOCAL local_west_at_CellularAutomaton_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_101
j label_END_101
label_TRUE_100: 
   # LOCAL local_west_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_101: 
# LOCAL local_west_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_west_at_CellularAutomaton_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_west_at_CellularAutomaton_internal_6 GOTO label_FALSEIF_97
# IF_ZERO local_west_at_CellularAutomaton_internal_6 GOTO label_FALSEIF_97
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_97
# LOCAL local_west_at_CellularAutomaton_internal_14 --> -60($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_12
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -60($fp)
# LOCAL local_west_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_west_at_CellularAutomaton_internal_14 --> -60($fp)
# local_west_at_CellularAutomaton_internal_7 = local_west_at_CellularAutomaton_internal_14
lw $t0, -60($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_98
j label_ENDIF_98
label_FALSEIF_97: 
   # LOCAL local_west_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_west_at_CellularAutomaton_internal_17 = SELF
   sw $s1, -72($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_15 --> -64($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_west_at_CellularAutomaton_internal_15 = local_west_at_CellularAutomaton_internal_17
   lw $t0, -72($fp)
   sw $t0, -64($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_west_at_CellularAutomaton_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_18 --> -76($fp)
   # PARAM param_west_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_west_at_CellularAutomaton_internal_18 = PARAM param_west_at_CellularAutomaton_position_0 - local_west_at_CellularAutomaton_internal_19
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -80($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   # ARG local_west_at_CellularAutomaton_internal_18
   # LOCAL local_west_at_CellularAutomaton_internal_18 --> -76($fp)
   lw $t0, -76($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_west_at_CellularAutomaton_internal_15 --> -64($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_west_at_CellularAutomaton_internal_16 = VCALL local_west_at_CellularAutomaton_internal_15 cell
   # Save new self pointer in $s1
   lw $s1, -64($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 100($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -68($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_west_at_CellularAutomaton_internal_7 --> -32($fp)
   # LOCAL local_west_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_west_at_CellularAutomaton_internal_7 = local_west_at_CellularAutomaton_internal_16
   lw $t0, -68($fp)
   sw $t0, -32($fp)
   label_ENDIF_98: 
# LOCAL local_west_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_west_at_CellularAutomaton_internal_7 --> -32($fp)
# local_west_at_CellularAutomaton_internal_1 = local_west_at_CellularAutomaton_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_88: 
# RETURN local_west_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_west_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 88
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_northwest_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_northwest_at_CellularAutomaton_position_0
function_northwest_at_CellularAutomaton: 
   # Allocate stack frame for function function_northwest_at_CellularAutomaton.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # local_northwest_at_CellularAutomaton_internal_4 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northwest_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, 16($s1)
   sw $t0, -20($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_northwest_at_CellularAutomaton_internal_3 = PARAM param_northwest_at_CellularAutomaton_position_0 - local_northwest_at_CellularAutomaton_internal_4
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -20($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $a0, -16($fp)
   lw $a1, -24($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_northwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_109
   # IF_GREATER_ZERO local_northwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_109
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_109
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_109
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_109
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_109
   # LOCAL local_northwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_110
j label_END_110
label_FALSE_109: 
   # LOCAL local_northwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_110: 
# LOCAL local_northwest_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_northwest_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_107
# IF_ZERO local_northwest_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_107
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_107
# LOCAL local_northwest_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_13
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_6 --> -28($fp)
# local_northwest_at_CellularAutomaton_internal_1 = local_northwest_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_108
j label_ENDIF_108
label_FALSEIF_107: 
   # local_northwest_at_CellularAutomaton_internal_13 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northwest_at_CellularAutomaton_internal_13 --> -56($fp)
   lw $t0, 16($s1)
   sw $t0, -56($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_12 --> -52($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_northwest_at_CellularAutomaton_internal_12 = PARAM param_northwest_at_CellularAutomaton_position_0 / local_northwest_at_CellularAutomaton_internal_13
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -56($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -52($fp)
   # local_northwest_at_CellularAutomaton_internal_14 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northwest_at_CellularAutomaton_internal_14 --> -60($fp)
   lw $t0, 16($s1)
   sw $t0, -60($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_northwest_at_CellularAutomaton_internal_11 = local_northwest_at_CellularAutomaton_internal_12 * local_northwest_at_CellularAutomaton_internal_14
   lw $t1, -52($fp)
   lw $t0, 12($t1)
   lw $t1, -60($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_11 GOTO label_FALSE_113
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_11 GOTO label_FALSE_113
   lw $t0, -48($fp)
   beq $t0, 0, label_FALSE_113
   # IF_ZERO param_northwest_at_CellularAutomaton_position_0 GOTO label_FALSE_113
   # IF_ZERO param_northwest_at_CellularAutomaton_position_0 GOTO label_FALSE_113
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_113
   # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with String
   la $v0, String
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_116
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_116
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_STRING_116
   # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Bool
   la $v0, Bool
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_117
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_117
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_117
   # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Int
   la $v0, Int
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_117
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_117
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_117
   # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # Load pointers and SUB
   lw $a0, -48($fp)
   lw $a1, 0($fp)
   sub $a0, $a0, $a1
   sw $a0, -44($fp)
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_114
   # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_114
   lw $t0, -44($fp)
   beq $t0, 0, label_TRUE_114
   # GOTO label_FALSE_113
   j label_FALSE_113
   label_COMPARE_BY_VALUE_117: 
      # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
      # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
      # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
      lw $a0, -48($fp)
      lw $a1, 0($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -44($fp)
      # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_114
      # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_114
      lw $t0, -44($fp)
      beq $t0, 0, label_TRUE_114
      # GOTO label_FALSE_113
      j label_FALSE_113
      label_COMPARE_STRING_116: 
         # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
         # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
         # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
         # Load strings for comparison
         lw $v0, -48($fp)
         lw $v1, 0($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -44($fp)
         # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_118
         # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_118
         lw $t0, -44($fp)
         beq $t0, 0, label_CONTINUE_118
         # GOTO label_FALSE_113
         j label_FALSE_113
         label_CONTINUE_118: 
            # LOCAL local_northwest_at_CellularAutomaton_internal_10 --> -44($fp)
            # LOCAL local_northwest_at_CellularAutomaton_internal_11 --> -48($fp)
            # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -48($fp)
            lw $v1, 0($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_119: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_120
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_119
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_120: 
                  # Store result
                  sw $a2, -44($fp)
                  # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_114
                  # IF_ZERO local_northwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_114
                  lw $t0, -44($fp)
                  beq $t0, 0, label_TRUE_114
                  label_FALSE_113: 
                     # LOCAL local_northwest_at_CellularAutomaton_internal_9 --> -40($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -40($fp)
                     # GOTO label_END_115
j label_END_115
label_TRUE_114: 
   # LOCAL local_northwest_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   label_END_115: 
# LOCAL local_northwest_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_9 --> -40($fp)
# Obtain value from -40($fp)
lw $v0, -40($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_northwest_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_111
# IF_ZERO local_northwest_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_111
lw $t0, -32($fp)
beq $t0, 0, label_FALSEIF_111
# LOCAL local_northwest_at_CellularAutomaton_internal_15 --> -64($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_14
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -64($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_15 --> -64($fp)
# local_northwest_at_CellularAutomaton_internal_8 = local_northwest_at_CellularAutomaton_internal_15
lw $t0, -64($fp)
sw $t0, -36($fp)
# GOTO label_ENDIF_112
j label_ENDIF_112
label_FALSEIF_111: 
   # LOCAL local_northwest_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_northwest_at_CellularAutomaton_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_16 --> -68($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_northwest_at_CellularAutomaton_internal_16 = local_northwest_at_CellularAutomaton_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_19 --> -80($fp)
   # PARAM param_northwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_northwest_at_CellularAutomaton_internal_19 = PARAM param_northwest_at_CellularAutomaton_position_0 - local_northwest_at_CellularAutomaton_internal_20
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -84($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # ARG local_northwest_at_CellularAutomaton_internal_19
   # LOCAL local_northwest_at_CellularAutomaton_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_16 --> -68($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_northwest_at_CellularAutomaton_internal_17 = VCALL local_northwest_at_CellularAutomaton_internal_16 north
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_northwest_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_northwest_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_northwest_at_CellularAutomaton_internal_8 = local_northwest_at_CellularAutomaton_internal_17
   lw $t0, -72($fp)
   sw $t0, -36($fp)
   label_ENDIF_112: 
# LOCAL local_northwest_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_northwest_at_CellularAutomaton_internal_8 --> -36($fp)
# local_northwest_at_CellularAutomaton_internal_1 = local_northwest_at_CellularAutomaton_internal_8
lw $t0, -36($fp)
sw $t0, -8($fp)
label_ENDIF_108: 
# RETURN local_northwest_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_northwest_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 92
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_northeast_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_northeast_at_CellularAutomaton_position_0
function_northeast_at_CellularAutomaton: 
   # Allocate stack frame for function function_northeast_at_CellularAutomaton.
   subu $sp, $sp, 108
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 108
   # local_northeast_at_CellularAutomaton_internal_4 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northeast_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, 16($s1)
   sw $t0, -20($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_3 --> -16($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_northeast_at_CellularAutomaton_internal_3 = PARAM param_northeast_at_CellularAutomaton_position_0 - local_northeast_at_CellularAutomaton_internal_4
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -20($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $a0, -16($fp)
   lw $a1, -24($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_northeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_123
   # IF_GREATER_ZERO local_northeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_123
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_123
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_123
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_123
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_123
   # LOCAL local_northeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_124
j label_END_124
label_FALSE_123: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_124: 
# LOCAL local_northeast_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_northeast_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_121
# IF_ZERO local_northeast_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_121
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_121
# LOCAL local_northeast_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_15
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_6 --> -28($fp)
# local_northeast_at_CellularAutomaton_internal_1 = local_northeast_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_122
j label_ENDIF_122
label_FALSEIF_121: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_13 --> -56($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_northeast_at_CellularAutomaton_internal_13 = PARAM param_northeast_at_CellularAutomaton_position_0 + local_northeast_at_CellularAutomaton_internal_14
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -60($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -56($fp)
   # local_northeast_at_CellularAutomaton_internal_15 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northeast_at_CellularAutomaton_internal_15 --> -64($fp)
   lw $t0, 16($s1)
   sw $t0, -64($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_northeast_at_CellularAutomaton_internal_12 = local_northeast_at_CellularAutomaton_internal_13 / local_northeast_at_CellularAutomaton_internal_15
   lw $t1, -56($fp)
   lw $t0, 12($t1)
   lw $t1, -64($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -52($fp)
   # local_northeast_at_CellularAutomaton_internal_16 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_northeast_at_CellularAutomaton_internal_16 --> -68($fp)
   lw $t0, 16($s1)
   sw $t0, -68($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_northeast_at_CellularAutomaton_internal_11 = local_northeast_at_CellularAutomaton_internal_12 * local_northeast_at_CellularAutomaton_internal_16
   lw $t1, -52($fp)
   lw $t0, 12($t1)
   lw $t1, -68($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_northeast_at_CellularAutomaton_internal_17 = PARAM param_northeast_at_CellularAutomaton_position_0 + local_northeast_at_CellularAutomaton_internal_18
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -76($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_11 GOTO label_FALSE_127
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_11 GOTO label_FALSE_127
   lw $t0, -48($fp)
   beq $t0, 0, label_FALSE_127
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_17 GOTO label_FALSE_127
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_17 GOTO label_FALSE_127
   lw $t0, -72($fp)
   beq $t0, 0, label_FALSE_127
   # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with String
   la $v0, String
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_130
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_130
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_STRING_130
   # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Bool
   la $v0, Bool
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_131
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_131
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_131
   # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Int
   la $v0, Int
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_131
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_131
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_131
   # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # Load pointers and SUB
   lw $a0, -48($fp)
   lw $a1, -72($fp)
   sub $a0, $a0, $a1
   sw $a0, -44($fp)
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_128
   # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_128
   lw $t0, -44($fp)
   beq $t0, 0, label_TRUE_128
   # GOTO label_FALSE_127
   j label_FALSE_127
   label_COMPARE_BY_VALUE_131: 
      # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
      # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
      # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
      lw $a0, -48($fp)
      lw $a1, -72($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -44($fp)
      # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_128
      # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_128
      lw $t0, -44($fp)
      beq $t0, 0, label_TRUE_128
      # GOTO label_FALSE_127
      j label_FALSE_127
      label_COMPARE_STRING_130: 
         # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
         # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
         # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
         # Load strings for comparison
         lw $v0, -48($fp)
         lw $v1, -72($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -44($fp)
         # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_132
         # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_132
         lw $t0, -44($fp)
         beq $t0, 0, label_CONTINUE_132
         # GOTO label_FALSE_127
         j label_FALSE_127
         label_CONTINUE_132: 
            # LOCAL local_northeast_at_CellularAutomaton_internal_10 --> -44($fp)
            # LOCAL local_northeast_at_CellularAutomaton_internal_11 --> -48($fp)
            # LOCAL local_northeast_at_CellularAutomaton_internal_17 --> -72($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -48($fp)
            lw $v1, -72($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_133: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_134
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_133
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_134: 
                  # Store result
                  sw $a2, -44($fp)
                  # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_128
                  # IF_ZERO local_northeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_128
                  lw $t0, -44($fp)
                  beq $t0, 0, label_TRUE_128
                  label_FALSE_127: 
                     # LOCAL local_northeast_at_CellularAutomaton_internal_9 --> -40($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -40($fp)
                     # GOTO label_END_129
j label_END_129
label_TRUE_128: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   label_END_129: 
# LOCAL local_northeast_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_9 --> -40($fp)
# Obtain value from -40($fp)
lw $v0, -40($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_northeast_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_125
# IF_ZERO local_northeast_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_125
lw $t0, -32($fp)
beq $t0, 0, label_FALSEIF_125
# LOCAL local_northeast_at_CellularAutomaton_internal_19 --> -80($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_16
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -80($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_19 --> -80($fp)
# local_northeast_at_CellularAutomaton_internal_8 = local_northeast_at_CellularAutomaton_internal_19
lw $t0, -80($fp)
sw $t0, -36($fp)
# GOTO label_ENDIF_126
j label_ENDIF_126
label_FALSEIF_125: 
   # LOCAL local_northeast_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_northeast_at_CellularAutomaton_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_northeast_at_CellularAutomaton_internal_20 = local_northeast_at_CellularAutomaton_internal_22
   lw $t0, -92($fp)
   sw $t0, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_24 --> -100($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -100($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_23 --> -96($fp)
   # PARAM param_northeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_24 --> -100($fp)
   # local_northeast_at_CellularAutomaton_internal_23 = PARAM param_northeast_at_CellularAutomaton_position_0 + local_northeast_at_CellularAutomaton_internal_24
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -100($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -96($fp)
   # ARG local_northeast_at_CellularAutomaton_internal_23
   # LOCAL local_northeast_at_CellularAutomaton_internal_23 --> -96($fp)
   lw $t0, -96($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_21 --> -88($fp)
   # local_northeast_at_CellularAutomaton_internal_21 = VCALL local_northeast_at_CellularAutomaton_internal_20 north
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_northeast_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_northeast_at_CellularAutomaton_internal_21 --> -88($fp)
   # local_northeast_at_CellularAutomaton_internal_8 = local_northeast_at_CellularAutomaton_internal_21
   lw $t0, -88($fp)
   sw $t0, -36($fp)
   label_ENDIF_126: 
# LOCAL local_northeast_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_northeast_at_CellularAutomaton_internal_8 --> -36($fp)
# local_northeast_at_CellularAutomaton_internal_1 = local_northeast_at_CellularAutomaton_internal_8
lw $t0, -36($fp)
sw $t0, -8($fp)
label_ENDIF_122: 
# RETURN local_northeast_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_northeast_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 108
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_southeast_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_southeast_at_CellularAutomaton_position_0
function_southeast_at_CellularAutomaton: 
   # Allocate stack frame for function function_southeast_at_CellularAutomaton.
   subu $sp, $sp, 108
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 108
   # local_southeast_at_CellularAutomaton_internal_3 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t0, 20($s1)
   sw $t0, -16($fp)
   # local_southeast_at_CellularAutomaton_internal_5 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $t0, 16($s1)
   sw $t0, -24($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_4 --> -20($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_southeast_at_CellularAutomaton_internal_4 = PARAM param_southeast_at_CellularAutomaton_position_0 + local_southeast_at_CellularAutomaton_internal_5
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -24($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $a0, -16($fp)
   lw $a1, -20($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_southeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_137
   # IF_GREATER_ZERO local_southeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_137
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_137
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_137
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_2 GOTO label_FALSE_137
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_137
   # LOCAL local_southeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_138
j label_END_138
label_FALSE_137: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_138: 
# LOCAL local_southeast_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_southeast_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_135
# IF_ZERO local_southeast_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_135
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_135
# LOCAL local_southeast_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_17
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_6 --> -28($fp)
# local_southeast_at_CellularAutomaton_internal_1 = local_southeast_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_136
j label_ENDIF_136
label_FALSEIF_135: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_13 --> -56($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_southeast_at_CellularAutomaton_internal_13 = PARAM param_southeast_at_CellularAutomaton_position_0 + local_southeast_at_CellularAutomaton_internal_14
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -60($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -56($fp)
   # local_southeast_at_CellularAutomaton_internal_15 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_15 --> -64($fp)
   lw $t0, 16($s1)
   sw $t0, -64($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_southeast_at_CellularAutomaton_internal_12 = local_southeast_at_CellularAutomaton_internal_13 / local_southeast_at_CellularAutomaton_internal_15
   lw $t1, -56($fp)
   lw $t0, 12($t1)
   lw $t1, -64($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -52($fp)
   # local_southeast_at_CellularAutomaton_internal_16 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southeast_at_CellularAutomaton_internal_16 --> -68($fp)
   lw $t0, 16($s1)
   sw $t0, -68($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_southeast_at_CellularAutomaton_internal_11 = local_southeast_at_CellularAutomaton_internal_12 * local_southeast_at_CellularAutomaton_internal_16
   lw $t1, -52($fp)
   lw $t0, 12($t1)
   lw $t1, -68($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_southeast_at_CellularAutomaton_internal_17 = PARAM param_southeast_at_CellularAutomaton_position_0 + local_southeast_at_CellularAutomaton_internal_18
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -76($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_11 GOTO label_FALSE_141
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_11 GOTO label_FALSE_141
   lw $t0, -48($fp)
   beq $t0, 0, label_FALSE_141
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_17 GOTO label_FALSE_141
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_17 GOTO label_FALSE_141
   lw $t0, -72($fp)
   beq $t0, 0, label_FALSE_141
   # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with String
   la $v0, String
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_144
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_144
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_STRING_144
   # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Bool
   la $v0, Bool
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_145
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_145
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_145
   # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Int
   la $v0, Int
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_145
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_145
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_145
   # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
   # Load pointers and SUB
   lw $a0, -48($fp)
   lw $a1, -72($fp)
   sub $a0, $a0, $a1
   sw $a0, -44($fp)
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_142
   # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_142
   lw $t0, -44($fp)
   beq $t0, 0, label_TRUE_142
   # GOTO label_FALSE_141
   j label_FALSE_141
   label_COMPARE_BY_VALUE_145: 
      # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
      # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
      # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
      lw $a0, -48($fp)
      lw $a1, -72($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -44($fp)
      # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_142
      # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_142
      lw $t0, -44($fp)
      beq $t0, 0, label_TRUE_142
      # GOTO label_FALSE_141
      j label_FALSE_141
      label_COMPARE_STRING_144: 
         # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
         # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
         # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
         # Load strings for comparison
         lw $v0, -48($fp)
         lw $v1, -72($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -44($fp)
         # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_146
         # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_146
         lw $t0, -44($fp)
         beq $t0, 0, label_CONTINUE_146
         # GOTO label_FALSE_141
         j label_FALSE_141
         label_CONTINUE_146: 
            # LOCAL local_southeast_at_CellularAutomaton_internal_10 --> -44($fp)
            # LOCAL local_southeast_at_CellularAutomaton_internal_11 --> -48($fp)
            # LOCAL local_southeast_at_CellularAutomaton_internal_17 --> -72($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -48($fp)
            lw $v1, -72($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_147: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_148
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_147
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_148: 
                  # Store result
                  sw $a2, -44($fp)
                  # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_142
                  # IF_ZERO local_southeast_at_CellularAutomaton_internal_10 GOTO label_TRUE_142
                  lw $t0, -44($fp)
                  beq $t0, 0, label_TRUE_142
                  label_FALSE_141: 
                     # LOCAL local_southeast_at_CellularAutomaton_internal_9 --> -40($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -40($fp)
                     # GOTO label_END_143
j label_END_143
label_TRUE_142: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   label_END_143: 
# LOCAL local_southeast_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_9 --> -40($fp)
# Obtain value from -40($fp)
lw $v0, -40($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_southeast_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_139
# IF_ZERO local_southeast_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_139
lw $t0, -32($fp)
beq $t0, 0, label_FALSEIF_139
# LOCAL local_southeast_at_CellularAutomaton_internal_19 --> -80($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_18
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -80($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_19 --> -80($fp)
# local_southeast_at_CellularAutomaton_internal_8 = local_southeast_at_CellularAutomaton_internal_19
lw $t0, -80($fp)
sw $t0, -36($fp)
# GOTO label_ENDIF_140
j label_ENDIF_140
label_FALSEIF_139: 
   # LOCAL local_southeast_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_southeast_at_CellularAutomaton_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_southeast_at_CellularAutomaton_internal_20 = local_southeast_at_CellularAutomaton_internal_22
   lw $t0, -92($fp)
   sw $t0, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_24 --> -100($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -100($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_23 --> -96($fp)
   # PARAM param_southeast_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_24 --> -100($fp)
   # local_southeast_at_CellularAutomaton_internal_23 = PARAM param_southeast_at_CellularAutomaton_position_0 + local_southeast_at_CellularAutomaton_internal_24
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -100($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -96($fp)
   # ARG local_southeast_at_CellularAutomaton_internal_23
   # LOCAL local_southeast_at_CellularAutomaton_internal_23 --> -96($fp)
   lw $t0, -96($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_21 --> -88($fp)
   # local_southeast_at_CellularAutomaton_internal_21 = VCALL local_southeast_at_CellularAutomaton_internal_20 south
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_southeast_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_southeast_at_CellularAutomaton_internal_21 --> -88($fp)
   # local_southeast_at_CellularAutomaton_internal_8 = local_southeast_at_CellularAutomaton_internal_21
   lw $t0, -88($fp)
   sw $t0, -36($fp)
   label_ENDIF_140: 
# LOCAL local_southeast_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_southeast_at_CellularAutomaton_internal_8 --> -36($fp)
# local_southeast_at_CellularAutomaton_internal_1 = local_southeast_at_CellularAutomaton_internal_8
lw $t0, -36($fp)
sw $t0, -8($fp)
label_ENDIF_136: 
# RETURN local_southeast_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_southeast_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 108
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_southwest_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_southwest_at_CellularAutomaton_position_0
function_southwest_at_CellularAutomaton: 
   # Allocate stack frame for function function_southwest_at_CellularAutomaton.
   subu $sp, $sp, 92
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 92
   # local_southwest_at_CellularAutomaton_internal_3 = GETATTRIBUTE board_size CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_3 --> -16($fp)
   lw $t0, 20($s1)
   sw $t0, -16($fp)
   # local_southwest_at_CellularAutomaton_internal_5 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_5 --> -24($fp)
   lw $t0, 16($s1)
   sw $t0, -24($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_4 --> -20($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_southwest_at_CellularAutomaton_internal_4 = PARAM param_southwest_at_CellularAutomaton_position_0 + local_southwest_at_CellularAutomaton_internal_5
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -24($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $a0, -16($fp)
   lw $a1, -20($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -12($fp)
   # IF_GREATER_ZERO local_southwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_151
   # IF_GREATER_ZERO local_southwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_151
   lw $t0, -12($fp)
   bgt $t0, 0, label_FALSE_151
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_151
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_2 GOTO label_FALSE_151
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_151
   # LOCAL local_southwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # GOTO label_END_152
j label_END_152
label_FALSE_151: 
   # LOCAL local_southwest_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_152: 
# LOCAL local_southwest_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_southwest_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_149
# IF_ZERO local_southwest_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_149
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_149
# LOCAL local_southwest_at_CellularAutomaton_internal_6 --> -28($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_19
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -28($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_6 --> -28($fp)
# local_southwest_at_CellularAutomaton_internal_1 = local_southwest_at_CellularAutomaton_internal_6
lw $t0, -28($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_150
j label_ENDIF_150
label_FALSEIF_149: 
   # local_southwest_at_CellularAutomaton_internal_13 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_13 --> -56($fp)
   lw $t0, 16($s1)
   sw $t0, -56($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_12 --> -52($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_southwest_at_CellularAutomaton_internal_12 = PARAM param_southwest_at_CellularAutomaton_position_0 / local_southwest_at_CellularAutomaton_internal_13
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -56($fp)
   lw $t2, 12($t1)
   div $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -52($fp)
   # local_southwest_at_CellularAutomaton_internal_14 = GETATTRIBUTE columns CellularAutomaton
   # LOCAL local_southwest_at_CellularAutomaton_internal_14 --> -60($fp)
   lw $t0, 16($s1)
   sw $t0, -60($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_southwest_at_CellularAutomaton_internal_11 = local_southwest_at_CellularAutomaton_internal_12 * local_southwest_at_CellularAutomaton_internal_14
   lw $t1, -52($fp)
   lw $t0, 12($t1)
   lw $t1, -60($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_11 GOTO label_FALSE_155
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_11 GOTO label_FALSE_155
   lw $t0, -48($fp)
   beq $t0, 0, label_FALSE_155
   # IF_ZERO param_southwest_at_CellularAutomaton_position_0 GOTO label_FALSE_155
   # IF_ZERO param_southwest_at_CellularAutomaton_position_0 GOTO label_FALSE_155
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_155
   # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with String
   la $v0, String
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_158
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_158
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_STRING_158
   # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Bool
   la $v0, Bool
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_159
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_159
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_159
   # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Int
   la $v0, Int
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_159
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_159
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_159
   # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # Load pointers and SUB
   lw $a0, -48($fp)
   lw $a1, 0($fp)
   sub $a0, $a0, $a1
   sw $a0, -44($fp)
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_156
   # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_156
   lw $t0, -44($fp)
   beq $t0, 0, label_TRUE_156
   # GOTO label_FALSE_155
   j label_FALSE_155
   label_COMPARE_BY_VALUE_159: 
      # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
      # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
      # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
      lw $a0, -48($fp)
      lw $a1, 0($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -44($fp)
      # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_156
      # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_156
      lw $t0, -44($fp)
      beq $t0, 0, label_TRUE_156
      # GOTO label_FALSE_155
      j label_FALSE_155
      label_COMPARE_STRING_158: 
         # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
         # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
         # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
         # Load strings for comparison
         lw $v0, -48($fp)
         lw $v1, 0($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -44($fp)
         # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_160
         # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_160
         lw $t0, -44($fp)
         beq $t0, 0, label_CONTINUE_160
         # GOTO label_FALSE_155
         j label_FALSE_155
         label_CONTINUE_160: 
            # LOCAL local_southwest_at_CellularAutomaton_internal_10 --> -44($fp)
            # LOCAL local_southwest_at_CellularAutomaton_internal_11 --> -48($fp)
            # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -48($fp)
            lw $v1, 0($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_161: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_162
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_161
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_162: 
                  # Store result
                  sw $a2, -44($fp)
                  # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_156
                  # IF_ZERO local_southwest_at_CellularAutomaton_internal_10 GOTO label_TRUE_156
                  lw $t0, -44($fp)
                  beq $t0, 0, label_TRUE_156
                  label_FALSE_155: 
                     # LOCAL local_southwest_at_CellularAutomaton_internal_9 --> -40($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -40($fp)
                     # GOTO label_END_157
j label_END_157
label_TRUE_156: 
   # LOCAL local_southwest_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   label_END_157: 
# LOCAL local_southwest_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_9 --> -40($fp)
# Obtain value from -40($fp)
lw $v0, -40($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_southwest_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_153
# IF_ZERO local_southwest_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_153
lw $t0, -32($fp)
beq $t0, 0, label_FALSEIF_153
# LOCAL local_southwest_at_CellularAutomaton_internal_15 --> -64($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_20
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -64($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_15 --> -64($fp)
# local_southwest_at_CellularAutomaton_internal_8 = local_southwest_at_CellularAutomaton_internal_15
lw $t0, -64($fp)
sw $t0, -36($fp)
# GOTO label_ENDIF_154
j label_ENDIF_154
label_FALSEIF_153: 
   # LOCAL local_southwest_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_southwest_at_CellularAutomaton_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_16 --> -68($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_southwest_at_CellularAutomaton_internal_16 = local_southwest_at_CellularAutomaton_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_19 --> -80($fp)
   # PARAM param_southwest_at_CellularAutomaton_position_0 --> 0($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_20 --> -84($fp)
   # local_southwest_at_CellularAutomaton_internal_19 = PARAM param_southwest_at_CellularAutomaton_position_0 - local_southwest_at_CellularAutomaton_internal_20
   lw $t1, 0($fp)
   lw $t0, 12($t1)
   lw $t1, -84($fp)
   lw $t2, 12($t1)
   sub $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   # ARG local_southwest_at_CellularAutomaton_internal_19
   # LOCAL local_southwest_at_CellularAutomaton_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_16 --> -68($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_southwest_at_CellularAutomaton_internal_17 = VCALL local_southwest_at_CellularAutomaton_internal_16 south
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_southwest_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_southwest_at_CellularAutomaton_internal_17 --> -72($fp)
   # local_southwest_at_CellularAutomaton_internal_8 = local_southwest_at_CellularAutomaton_internal_17
   lw $t0, -72($fp)
   sw $t0, -36($fp)
   label_ENDIF_154: 
# LOCAL local_southwest_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_southwest_at_CellularAutomaton_internal_8 --> -36($fp)
# local_southwest_at_CellularAutomaton_internal_1 = local_southwest_at_CellularAutomaton_internal_8
lw $t0, -36($fp)
sw $t0, -8($fp)
label_ENDIF_150: 
# RETURN local_southwest_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_southwest_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 92
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_neighbors_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_neighbors_at_CellularAutomaton_position_0
function_neighbors_at_CellularAutomaton: 
   # Allocate stack frame for function function_neighbors_at_CellularAutomaton.
   subu $sp, $sp, 356
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 356
   # LOCAL local_neighbors_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_neighbors_at_CellularAutomaton_internal_13 = SELF
   sw $s1, -56($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_neighbors_at_CellularAutomaton_internal_11 = local_neighbors_at_CellularAutomaton_internal_13
   lw $t0, -56($fp)
   sw $t0, -48($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_neighbors_at_CellularAutomaton_position_0
   # PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_11 --> -48($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # local_neighbors_at_CellularAutomaton_internal_12 = VCALL local_neighbors_at_CellularAutomaton_internal_11 north
   # Save new self pointer in $s1
   lw $s1, -48($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 88($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -52($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_21
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -60($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_12 GOTO label_FALSE_165
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_12 GOTO label_FALSE_165
   lw $t0, -52($fp)
   beq $t0, 0, label_FALSE_165
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_14 GOTO label_FALSE_165
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_14 GOTO label_FALSE_165
   lw $t0, -60($fp)
   beq $t0, 0, label_FALSE_165
   # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # Comparing -52($fp) type with String
   la $v0, String
   lw $a0, -52($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_168
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_COMPARE_STRING_168
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_STRING_168
   # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # Comparing -52($fp) type with Bool
   la $v0, Bool
   lw $a0, -52($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_169
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_169
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_169
   # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # Comparing -52($fp) type with Int
   la $v0, Int
   lw $a0, -52($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -44($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_169
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_COMPARE_BY_VALUE_169
   lw $t0, -44($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_169
   # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
   # Load pointers and SUB
   lw $a0, -52($fp)
   lw $a1, -60($fp)
   sub $a0, $a0, $a1
   sw $a0, -44($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_TRUE_166
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_TRUE_166
   lw $t0, -44($fp)
   beq $t0, 0, label_TRUE_166
   # GOTO label_FALSE_165
   j label_FALSE_165
   label_COMPARE_BY_VALUE_169: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
      lw $a0, -52($fp)
      lw $a1, -60($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -44($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_TRUE_166
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_TRUE_166
      lw $t0, -44($fp)
      beq $t0, 0, label_TRUE_166
      # GOTO label_FALSE_165
      j label_FALSE_165
      label_COMPARE_STRING_168: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
         # Load strings for comparison
         lw $v0, -52($fp)
         lw $v1, -60($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -44($fp)
         # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_170
         # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_CONTINUE_170
         lw $t0, -44($fp)
         beq $t0, 0, label_CONTINUE_170
         # GOTO label_FALSE_165
         j label_FALSE_165
         label_CONTINUE_170: 
            # LOCAL local_neighbors_at_CellularAutomaton_internal_10 --> -44($fp)
            # LOCAL local_neighbors_at_CellularAutomaton_internal_12 --> -52($fp)
            # LOCAL local_neighbors_at_CellularAutomaton_internal_14 --> -60($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -52($fp)
            lw $v1, -60($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_171: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_172
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_171
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_172: 
                  # Store result
                  sw $a2, -44($fp)
                  # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_TRUE_166
                  # IF_ZERO local_neighbors_at_CellularAutomaton_internal_10 GOTO label_TRUE_166
                  lw $t0, -44($fp)
                  beq $t0, 0, label_TRUE_166
                  label_FALSE_165: 
                     # LOCAL local_neighbors_at_CellularAutomaton_internal_9 --> -40($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -40($fp)
                     # GOTO label_END_167
j label_END_167
label_TRUE_166: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -40($fp)
   label_END_167: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_9 --> -40($fp)
# Obtain value from -40($fp)
lw $v0, -40($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_163
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_7 GOTO label_FALSEIF_163
lw $t0, -32($fp)
beq $t0, 0, label_FALSEIF_163
# LOCAL local_neighbors_at_CellularAutomaton_internal_15 --> -64($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -64($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_15 --> -64($fp)
# local_neighbors_at_CellularAutomaton_internal_8 = local_neighbors_at_CellularAutomaton_internal_15
lw $t0, -64($fp)
sw $t0, -36($fp)
# GOTO label_ENDIF_164
j label_ENDIF_164
label_FALSEIF_163: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -68($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_8 --> -36($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_neighbors_at_CellularAutomaton_internal_8 = local_neighbors_at_CellularAutomaton_internal_16
   lw $t0, -68($fp)
   sw $t0, -36($fp)
   label_ENDIF_164: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_23 --> -96($fp)
# local_neighbors_at_CellularAutomaton_internal_23 = SELF
sw $s1, -96($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_23 --> -96($fp)
# local_neighbors_at_CellularAutomaton_internal_21 = local_neighbors_at_CellularAutomaton_internal_23
lw $t0, -96($fp)
sw $t0, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# local_neighbors_at_CellularAutomaton_internal_22 = VCALL local_neighbors_at_CellularAutomaton_internal_21 south
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 72($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_22
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -100($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_22 GOTO label_FALSE_175
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_22 GOTO label_FALSE_175
lw $t0, -92($fp)
beq $t0, 0, label_FALSE_175
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_24 GOTO label_FALSE_175
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_24 GOTO label_FALSE_175
lw $t0, -100($fp)
beq $t0, 0, label_FALSE_175
# LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# Comparing -92($fp) type with String
la $v0, String
lw $a0, -92($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -84($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_COMPARE_STRING_178
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_COMPARE_STRING_178
lw $t0, -84($fp)
beq $t0, 0, label_COMPARE_STRING_178
# LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# Comparing -92($fp) type with Bool
la $v0, Bool
lw $a0, -92($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -84($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_179
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_179
lw $t0, -84($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_179
# LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# Comparing -92($fp) type with Int
la $v0, Int
lw $a0, -92($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -84($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_179
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_179
lw $t0, -84($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_179
# LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
# Load pointers and SUB
lw $a0, -92($fp)
lw $a1, -100($fp)
sub $a0, $a0, $a1
sw $a0, -84($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_176
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_176
lw $t0, -84($fp)
beq $t0, 0, label_TRUE_176
# GOTO label_FALSE_175
j label_FALSE_175
label_COMPARE_BY_VALUE_179: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
   lw $a0, -92($fp)
   lw $a1, -100($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -84($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_176
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_176
   lw $t0, -84($fp)
   beq $t0, 0, label_TRUE_176
   # GOTO label_FALSE_175
   j label_FALSE_175
   label_COMPARE_STRING_178: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
      # Load strings for comparison
      lw $v0, -92($fp)
      lw $v1, -100($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -84($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_CONTINUE_180
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_CONTINUE_180
      lw $t0, -84($fp)
      beq $t0, 0, label_CONTINUE_180
      # GOTO label_FALSE_175
      j label_FALSE_175
      label_CONTINUE_180: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_20 --> -84($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_22 --> -92($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_24 --> -100($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -92($fp)
         lw $v1, -100($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_181: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_182
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_181
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_182: 
               # Store result
               sw $a2, -84($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_176
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_20 GOTO label_TRUE_176
               lw $t0, -84($fp)
               beq $t0, 0, label_TRUE_176
               label_FALSE_175: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_19 --> -80($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -80($fp)
                  # GOTO label_END_177
j label_END_177
label_TRUE_176: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   label_END_177: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_17 --> -72($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_19 --> -80($fp)
# Obtain value from -80($fp)
lw $v0, -80($fp)
lw $v0, 12($v0)
sw $v0, -72($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_173
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_173
lw $t0, -72($fp)
beq $t0, 0, label_FALSEIF_173
# LOCAL local_neighbors_at_CellularAutomaton_internal_25 --> -104($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -104($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_18 --> -76($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_25 --> -104($fp)
# local_neighbors_at_CellularAutomaton_internal_18 = local_neighbors_at_CellularAutomaton_internal_25
lw $t0, -104($fp)
sw $t0, -76($fp)
# GOTO label_ENDIF_174
j label_ENDIF_174
label_FALSEIF_173: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -108($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_18 --> -76($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_26 --> -108($fp)
   # local_neighbors_at_CellularAutomaton_internal_18 = local_neighbors_at_CellularAutomaton_internal_26
   lw $t0, -108($fp)
   sw $t0, -76($fp)
   label_ENDIF_174: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_8 --> -36($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_18 --> -76($fp)
# local_neighbors_at_CellularAutomaton_internal_6 = local_neighbors_at_CellularAutomaton_internal_8 + local_neighbors_at_CellularAutomaton_internal_18
lw $t1, -36($fp)
lw $t0, 12($t1)
lw $t1, -76($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -28($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_33 --> -136($fp)
# local_neighbors_at_CellularAutomaton_internal_33 = SELF
sw $s1, -136($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_31 --> -128($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_33 --> -136($fp)
# local_neighbors_at_CellularAutomaton_internal_31 = local_neighbors_at_CellularAutomaton_internal_33
lw $t0, -136($fp)
sw $t0, -128($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_31 --> -128($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# local_neighbors_at_CellularAutomaton_internal_32 = VCALL local_neighbors_at_CellularAutomaton_internal_31 east
# Save new self pointer in $s1
lw $s1, -128($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 76($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -132($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_23
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -140($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_32 GOTO label_FALSE_185
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_32 GOTO label_FALSE_185
lw $t0, -132($fp)
beq $t0, 0, label_FALSE_185
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_34 GOTO label_FALSE_185
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_34 GOTO label_FALSE_185
lw $t0, -140($fp)
beq $t0, 0, label_FALSE_185
# LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# Comparing -132($fp) type with String
la $v0, String
lw $a0, -132($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -124($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_COMPARE_STRING_188
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_COMPARE_STRING_188
lw $t0, -124($fp)
beq $t0, 0, label_COMPARE_STRING_188
# LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# Comparing -132($fp) type with Bool
la $v0, Bool
lw $a0, -132($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -124($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_COMPARE_BY_VALUE_189
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_COMPARE_BY_VALUE_189
lw $t0, -124($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_189
# LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# Comparing -132($fp) type with Int
la $v0, Int
lw $a0, -132($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -124($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_COMPARE_BY_VALUE_189
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_COMPARE_BY_VALUE_189
lw $t0, -124($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_189
# LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
# Load pointers and SUB
lw $a0, -132($fp)
lw $a1, -140($fp)
sub $a0, $a0, $a1
sw $a0, -124($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_TRUE_186
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_TRUE_186
lw $t0, -124($fp)
beq $t0, 0, label_TRUE_186
# GOTO label_FALSE_185
j label_FALSE_185
label_COMPARE_BY_VALUE_189: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
   lw $a0, -132($fp)
   lw $a1, -140($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -124($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_TRUE_186
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_TRUE_186
   lw $t0, -124($fp)
   beq $t0, 0, label_TRUE_186
   # GOTO label_FALSE_185
   j label_FALSE_185
   label_COMPARE_STRING_188: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
      # Load strings for comparison
      lw $v0, -132($fp)
      lw $v1, -140($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -124($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_CONTINUE_190
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_CONTINUE_190
      lw $t0, -124($fp)
      beq $t0, 0, label_CONTINUE_190
      # GOTO label_FALSE_185
      j label_FALSE_185
      label_CONTINUE_190: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_30 --> -124($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_32 --> -132($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_34 --> -140($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -132($fp)
         lw $v1, -140($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_191: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_192
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_191
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_192: 
               # Store result
               sw $a2, -124($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_TRUE_186
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_30 GOTO label_TRUE_186
               lw $t0, -124($fp)
               beq $t0, 0, label_TRUE_186
               label_FALSE_185: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_29 --> -120($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -120($fp)
                  # GOTO label_END_187
j label_END_187
label_TRUE_186: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_29 --> -120($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -120($fp)
   label_END_187: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_27 --> -112($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_29 --> -120($fp)
# Obtain value from -120($fp)
lw $v0, -120($fp)
lw $v0, 12($v0)
sw $v0, -112($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_27 GOTO label_FALSEIF_183
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_27 GOTO label_FALSEIF_183
lw $t0, -112($fp)
beq $t0, 0, label_FALSEIF_183
# LOCAL local_neighbors_at_CellularAutomaton_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -144($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_28 --> -116($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_35 --> -144($fp)
# local_neighbors_at_CellularAutomaton_internal_28 = local_neighbors_at_CellularAutomaton_internal_35
lw $t0, -144($fp)
sw $t0, -116($fp)
# GOTO label_ENDIF_184
j label_ENDIF_184
label_FALSEIF_183: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -148($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_28 --> -116($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_36 --> -148($fp)
   # local_neighbors_at_CellularAutomaton_internal_28 = local_neighbors_at_CellularAutomaton_internal_36
   lw $t0, -148($fp)
   sw $t0, -116($fp)
   label_ENDIF_184: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_5 --> -24($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_6 --> -28($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_28 --> -116($fp)
# local_neighbors_at_CellularAutomaton_internal_5 = local_neighbors_at_CellularAutomaton_internal_6 + local_neighbors_at_CellularAutomaton_internal_28
lw $t1, -28($fp)
lw $t0, 12($t1)
lw $t1, -116($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -24($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_43 --> -176($fp)
# local_neighbors_at_CellularAutomaton_internal_43 = SELF
sw $s1, -176($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_41 --> -168($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_43 --> -176($fp)
# local_neighbors_at_CellularAutomaton_internal_41 = local_neighbors_at_CellularAutomaton_internal_43
lw $t0, -176($fp)
sw $t0, -168($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_41 --> -168($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# local_neighbors_at_CellularAutomaton_internal_42 = VCALL local_neighbors_at_CellularAutomaton_internal_41 west
# Save new self pointer in $s1
lw $s1, -168($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 32($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -172($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_24
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -180($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_42 GOTO label_FALSE_195
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_42 GOTO label_FALSE_195
lw $t0, -172($fp)
beq $t0, 0, label_FALSE_195
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_44 GOTO label_FALSE_195
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_44 GOTO label_FALSE_195
lw $t0, -180($fp)
beq $t0, 0, label_FALSE_195
# LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# Comparing -172($fp) type with String
la $v0, String
lw $a0, -172($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -164($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_COMPARE_STRING_198
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_COMPARE_STRING_198
lw $t0, -164($fp)
beq $t0, 0, label_COMPARE_STRING_198
# LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# Comparing -172($fp) type with Bool
la $v0, Bool
lw $a0, -172($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -164($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_COMPARE_BY_VALUE_199
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_COMPARE_BY_VALUE_199
lw $t0, -164($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_199
# LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# Comparing -172($fp) type with Int
la $v0, Int
lw $a0, -172($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -164($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_COMPARE_BY_VALUE_199
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_COMPARE_BY_VALUE_199
lw $t0, -164($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_199
# LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
# Load pointers and SUB
lw $a0, -172($fp)
lw $a1, -180($fp)
sub $a0, $a0, $a1
sw $a0, -164($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_TRUE_196
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_TRUE_196
lw $t0, -164($fp)
beq $t0, 0, label_TRUE_196
# GOTO label_FALSE_195
j label_FALSE_195
label_COMPARE_BY_VALUE_199: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
   lw $a0, -172($fp)
   lw $a1, -180($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -164($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_TRUE_196
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_TRUE_196
   lw $t0, -164($fp)
   beq $t0, 0, label_TRUE_196
   # GOTO label_FALSE_195
   j label_FALSE_195
   label_COMPARE_STRING_198: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
      # Load strings for comparison
      lw $v0, -172($fp)
      lw $v1, -180($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -164($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_CONTINUE_200
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_CONTINUE_200
      lw $t0, -164($fp)
      beq $t0, 0, label_CONTINUE_200
      # GOTO label_FALSE_195
      j label_FALSE_195
      label_CONTINUE_200: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_40 --> -164($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_42 --> -172($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_44 --> -180($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -172($fp)
         lw $v1, -180($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_201: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_202
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_201
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_202: 
               # Store result
               sw $a2, -164($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_TRUE_196
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_40 GOTO label_TRUE_196
               lw $t0, -164($fp)
               beq $t0, 0, label_TRUE_196
               label_FALSE_195: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_39 --> -160($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -160($fp)
                  # GOTO label_END_197
j label_END_197
label_TRUE_196: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_39 --> -160($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -160($fp)
   label_END_197: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_37 --> -152($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_39 --> -160($fp)
# Obtain value from -160($fp)
lw $v0, -160($fp)
lw $v0, 12($v0)
sw $v0, -152($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_37 GOTO label_FALSEIF_193
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_37 GOTO label_FALSEIF_193
lw $t0, -152($fp)
beq $t0, 0, label_FALSEIF_193
# LOCAL local_neighbors_at_CellularAutomaton_internal_45 --> -184($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -184($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_38 --> -156($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_45 --> -184($fp)
# local_neighbors_at_CellularAutomaton_internal_38 = local_neighbors_at_CellularAutomaton_internal_45
lw $t0, -184($fp)
sw $t0, -156($fp)
# GOTO label_ENDIF_194
j label_ENDIF_194
label_FALSEIF_193: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -188($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_38 --> -156($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_46 --> -188($fp)
   # local_neighbors_at_CellularAutomaton_internal_38 = local_neighbors_at_CellularAutomaton_internal_46
   lw $t0, -188($fp)
   sw $t0, -156($fp)
   label_ENDIF_194: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_4 --> -20($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_5 --> -24($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_38 --> -156($fp)
# local_neighbors_at_CellularAutomaton_internal_4 = local_neighbors_at_CellularAutomaton_internal_5 + local_neighbors_at_CellularAutomaton_internal_38
lw $t1, -24($fp)
lw $t0, 12($t1)
lw $t1, -156($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -20($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_53 --> -216($fp)
# local_neighbors_at_CellularAutomaton_internal_53 = SELF
sw $s1, -216($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_51 --> -208($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_53 --> -216($fp)
# local_neighbors_at_CellularAutomaton_internal_51 = local_neighbors_at_CellularAutomaton_internal_53
lw $t0, -216($fp)
sw $t0, -208($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_51 --> -208($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# local_neighbors_at_CellularAutomaton_internal_52 = VCALL local_neighbors_at_CellularAutomaton_internal_51 northeast
# Save new self pointer in $s1
lw $s1, -208($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 52($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -212($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_25
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -220($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_52 GOTO label_FALSE_205
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_52 GOTO label_FALSE_205
lw $t0, -212($fp)
beq $t0, 0, label_FALSE_205
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_54 GOTO label_FALSE_205
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_54 GOTO label_FALSE_205
lw $t0, -220($fp)
beq $t0, 0, label_FALSE_205
# LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# Comparing -212($fp) type with String
la $v0, String
lw $a0, -212($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -204($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_COMPARE_STRING_208
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_COMPARE_STRING_208
lw $t0, -204($fp)
beq $t0, 0, label_COMPARE_STRING_208
# LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# Comparing -212($fp) type with Bool
la $v0, Bool
lw $a0, -212($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -204($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_COMPARE_BY_VALUE_209
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_COMPARE_BY_VALUE_209
lw $t0, -204($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_209
# LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# Comparing -212($fp) type with Int
la $v0, Int
lw $a0, -212($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -204($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_COMPARE_BY_VALUE_209
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_COMPARE_BY_VALUE_209
lw $t0, -204($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_209
# LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
# Load pointers and SUB
lw $a0, -212($fp)
lw $a1, -220($fp)
sub $a0, $a0, $a1
sw $a0, -204($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_206
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_206
lw $t0, -204($fp)
beq $t0, 0, label_TRUE_206
# GOTO label_FALSE_205
j label_FALSE_205
label_COMPARE_BY_VALUE_209: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
   lw $a0, -212($fp)
   lw $a1, -220($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -204($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_206
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_206
   lw $t0, -204($fp)
   beq $t0, 0, label_TRUE_206
   # GOTO label_FALSE_205
   j label_FALSE_205
   label_COMPARE_STRING_208: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
      # Load strings for comparison
      lw $v0, -212($fp)
      lw $v1, -220($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -204($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_CONTINUE_210
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_CONTINUE_210
      lw $t0, -204($fp)
      beq $t0, 0, label_CONTINUE_210
      # GOTO label_FALSE_205
      j label_FALSE_205
      label_CONTINUE_210: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_50 --> -204($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_52 --> -212($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_54 --> -220($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -212($fp)
         lw $v1, -220($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_211: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_212
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_211
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_212: 
               # Store result
               sw $a2, -204($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_206
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_50 GOTO label_TRUE_206
               lw $t0, -204($fp)
               beq $t0, 0, label_TRUE_206
               label_FALSE_205: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_49 --> -200($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -200($fp)
                  # GOTO label_END_207
j label_END_207
label_TRUE_206: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_49 --> -200($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -200($fp)
   label_END_207: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_47 --> -192($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_49 --> -200($fp)
# Obtain value from -200($fp)
lw $v0, -200($fp)
lw $v0, 12($v0)
sw $v0, -192($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_47 GOTO label_FALSEIF_203
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_47 GOTO label_FALSEIF_203
lw $t0, -192($fp)
beq $t0, 0, label_FALSEIF_203
# LOCAL local_neighbors_at_CellularAutomaton_internal_55 --> -224($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -224($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_48 --> -196($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_55 --> -224($fp)
# local_neighbors_at_CellularAutomaton_internal_48 = local_neighbors_at_CellularAutomaton_internal_55
lw $t0, -224($fp)
sw $t0, -196($fp)
# GOTO label_ENDIF_204
j label_ENDIF_204
label_FALSEIF_203: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -228($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_48 --> -196($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_56 --> -228($fp)
   # local_neighbors_at_CellularAutomaton_internal_48 = local_neighbors_at_CellularAutomaton_internal_56
   lw $t0, -228($fp)
   sw $t0, -196($fp)
   label_ENDIF_204: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_4 --> -20($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_48 --> -196($fp)
# local_neighbors_at_CellularAutomaton_internal_3 = local_neighbors_at_CellularAutomaton_internal_4 + local_neighbors_at_CellularAutomaton_internal_48
lw $t1, -20($fp)
lw $t0, 12($t1)
lw $t1, -196($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -16($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_63 --> -256($fp)
# local_neighbors_at_CellularAutomaton_internal_63 = SELF
sw $s1, -256($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_61 --> -248($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_63 --> -256($fp)
# local_neighbors_at_CellularAutomaton_internal_61 = local_neighbors_at_CellularAutomaton_internal_63
lw $t0, -256($fp)
sw $t0, -248($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_61 --> -248($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
# local_neighbors_at_CellularAutomaton_internal_62 = VCALL local_neighbors_at_CellularAutomaton_internal_61 northwest
# Save new self pointer in $s1
lw $s1, -248($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 64($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -252($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_64 --> -260($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_26
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -260($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_62 GOTO label_FALSE_215
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_62 GOTO label_FALSE_215
lw $t0, -252($fp)
beq $t0, 0, label_FALSE_215
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_64 GOTO label_FALSE_215
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_64 GOTO label_FALSE_215
lw $t0, -260($fp)
beq $t0, 0, label_FALSE_215
# LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
# Comparing -252($fp) type with String
la $v0, String
lw $a0, -252($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -244($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_COMPARE_STRING_218
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_COMPARE_STRING_218
lw $t0, -244($fp)
beq $t0, 0, label_COMPARE_STRING_218
# LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
# Comparing -252($fp) type with Bool
la $v0, Bool
lw $a0, -252($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -244($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_COMPARE_BY_VALUE_219
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_COMPARE_BY_VALUE_219
lw $t0, -244($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_219
# LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
# Comparing -252($fp) type with Int
la $v0, Int
lw $a0, -252($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -244($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_COMPARE_BY_VALUE_219
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_COMPARE_BY_VALUE_219
lw $t0, -244($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_219
# LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_64 --> -260($fp)
# Load pointers and SUB
lw $a0, -252($fp)
lw $a1, -260($fp)
sub $a0, $a0, $a1
sw $a0, -244($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_TRUE_216
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_TRUE_216
lw $t0, -244($fp)
beq $t0, 0, label_TRUE_216
# GOTO label_FALSE_215
j label_FALSE_215
label_COMPARE_BY_VALUE_219: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_64 --> -260($fp)
   lw $a0, -252($fp)
   lw $a1, -260($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -244($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_TRUE_216
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_TRUE_216
   lw $t0, -244($fp)
   beq $t0, 0, label_TRUE_216
   # GOTO label_FALSE_215
   j label_FALSE_215
   label_COMPARE_STRING_218: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_64 --> -260($fp)
      # Load strings for comparison
      lw $v0, -252($fp)
      lw $v1, -260($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -244($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_CONTINUE_220
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_CONTINUE_220
      lw $t0, -244($fp)
      beq $t0, 0, label_CONTINUE_220
      # GOTO label_FALSE_215
      j label_FALSE_215
      label_CONTINUE_220: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_60 --> -244($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_62 --> -252($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_64 --> -260($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -252($fp)
         lw $v1, -260($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_221: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_222
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_221
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_222: 
               # Store result
               sw $a2, -244($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_TRUE_216
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_60 GOTO label_TRUE_216
               lw $t0, -244($fp)
               beq $t0, 0, label_TRUE_216
               label_FALSE_215: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_59 --> -240($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -240($fp)
                  # GOTO label_END_217
j label_END_217
label_TRUE_216: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_59 --> -240($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -240($fp)
   label_END_217: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_57 --> -232($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_59 --> -240($fp)
# Obtain value from -240($fp)
lw $v0, -240($fp)
lw $v0, 12($v0)
sw $v0, -232($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_57 GOTO label_FALSEIF_213
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_57 GOTO label_FALSEIF_213
lw $t0, -232($fp)
beq $t0, 0, label_FALSEIF_213
# LOCAL local_neighbors_at_CellularAutomaton_internal_65 --> -264($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -264($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_58 --> -236($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_65 --> -264($fp)
# local_neighbors_at_CellularAutomaton_internal_58 = local_neighbors_at_CellularAutomaton_internal_65
lw $t0, -264($fp)
sw $t0, -236($fp)
# GOTO label_ENDIF_214
j label_ENDIF_214
label_FALSEIF_213: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_66 --> -268($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -268($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_58 --> -236($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_66 --> -268($fp)
   # local_neighbors_at_CellularAutomaton_internal_58 = local_neighbors_at_CellularAutomaton_internal_66
   lw $t0, -268($fp)
   sw $t0, -236($fp)
   label_ENDIF_214: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_2 --> -12($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_3 --> -16($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_58 --> -236($fp)
# local_neighbors_at_CellularAutomaton_internal_2 = local_neighbors_at_CellularAutomaton_internal_3 + local_neighbors_at_CellularAutomaton_internal_58
lw $t1, -16($fp)
lw $t0, 12($t1)
lw $t1, -236($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -12($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_73 --> -296($fp)
# local_neighbors_at_CellularAutomaton_internal_73 = SELF
sw $s1, -296($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_71 --> -288($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_73 --> -296($fp)
# local_neighbors_at_CellularAutomaton_internal_71 = local_neighbors_at_CellularAutomaton_internal_73
lw $t0, -296($fp)
sw $t0, -288($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_71 --> -288($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
# local_neighbors_at_CellularAutomaton_internal_72 = VCALL local_neighbors_at_CellularAutomaton_internal_71 southeast
# Save new self pointer in $s1
lw $s1, -288($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 48($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -292($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_74 --> -300($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_27
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -300($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_72 GOTO label_FALSE_225
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_72 GOTO label_FALSE_225
lw $t0, -292($fp)
beq $t0, 0, label_FALSE_225
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_74 GOTO label_FALSE_225
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_74 GOTO label_FALSE_225
lw $t0, -300($fp)
beq $t0, 0, label_FALSE_225
# LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
# Comparing -292($fp) type with String
la $v0, String
lw $a0, -292($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -284($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_COMPARE_STRING_228
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_COMPARE_STRING_228
lw $t0, -284($fp)
beq $t0, 0, label_COMPARE_STRING_228
# LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
# Comparing -292($fp) type with Bool
la $v0, Bool
lw $a0, -292($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -284($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_COMPARE_BY_VALUE_229
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_COMPARE_BY_VALUE_229
lw $t0, -284($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_229
# LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
# Comparing -292($fp) type with Int
la $v0, Int
lw $a0, -292($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -284($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_COMPARE_BY_VALUE_229
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_COMPARE_BY_VALUE_229
lw $t0, -284($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_229
# LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_74 --> -300($fp)
# Load pointers and SUB
lw $a0, -292($fp)
lw $a1, -300($fp)
sub $a0, $a0, $a1
sw $a0, -284($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_TRUE_226
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_TRUE_226
lw $t0, -284($fp)
beq $t0, 0, label_TRUE_226
# GOTO label_FALSE_225
j label_FALSE_225
label_COMPARE_BY_VALUE_229: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_74 --> -300($fp)
   lw $a0, -292($fp)
   lw $a1, -300($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -284($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_TRUE_226
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_TRUE_226
   lw $t0, -284($fp)
   beq $t0, 0, label_TRUE_226
   # GOTO label_FALSE_225
   j label_FALSE_225
   label_COMPARE_STRING_228: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_74 --> -300($fp)
      # Load strings for comparison
      lw $v0, -292($fp)
      lw $v1, -300($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -284($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_CONTINUE_230
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_CONTINUE_230
      lw $t0, -284($fp)
      beq $t0, 0, label_CONTINUE_230
      # GOTO label_FALSE_225
      j label_FALSE_225
      label_CONTINUE_230: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_70 --> -284($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_72 --> -292($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_74 --> -300($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -292($fp)
         lw $v1, -300($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_231: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_232
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_231
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_232: 
               # Store result
               sw $a2, -284($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_TRUE_226
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_70 GOTO label_TRUE_226
               lw $t0, -284($fp)
               beq $t0, 0, label_TRUE_226
               label_FALSE_225: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_69 --> -280($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -280($fp)
                  # GOTO label_END_227
j label_END_227
label_TRUE_226: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_69 --> -280($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -280($fp)
   label_END_227: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_67 --> -272($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_69 --> -280($fp)
# Obtain value from -280($fp)
lw $v0, -280($fp)
lw $v0, 12($v0)
sw $v0, -272($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_67 GOTO label_FALSEIF_223
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_67 GOTO label_FALSEIF_223
lw $t0, -272($fp)
beq $t0, 0, label_FALSEIF_223
# LOCAL local_neighbors_at_CellularAutomaton_internal_75 --> -304($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -304($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_68 --> -276($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_75 --> -304($fp)
# local_neighbors_at_CellularAutomaton_internal_68 = local_neighbors_at_CellularAutomaton_internal_75
lw $t0, -304($fp)
sw $t0, -276($fp)
# GOTO label_ENDIF_224
j label_ENDIF_224
label_FALSEIF_223: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_76 --> -308($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -308($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_68 --> -276($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_76 --> -308($fp)
   # local_neighbors_at_CellularAutomaton_internal_68 = local_neighbors_at_CellularAutomaton_internal_76
   lw $t0, -308($fp)
   sw $t0, -276($fp)
   label_ENDIF_224: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_2 --> -12($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_68 --> -276($fp)
# local_neighbors_at_CellularAutomaton_internal_1 = local_neighbors_at_CellularAutomaton_internal_2 + local_neighbors_at_CellularAutomaton_internal_68
lw $t1, -12($fp)
lw $t0, 12($t1)
lw $t1, -276($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -8($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_83 --> -336($fp)
# local_neighbors_at_CellularAutomaton_internal_83 = SELF
sw $s1, -336($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_81 --> -328($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_83 --> -336($fp)
# local_neighbors_at_CellularAutomaton_internal_81 = local_neighbors_at_CellularAutomaton_internal_83
lw $t0, -336($fp)
sw $t0, -328($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_neighbors_at_CellularAutomaton_position_0
# PARAM param_neighbors_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_81 --> -328($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
# local_neighbors_at_CellularAutomaton_internal_82 = VCALL local_neighbors_at_CellularAutomaton_internal_81 southwest
# Save new self pointer in $s1
lw $s1, -328($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 8($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -332($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_neighbors_at_CellularAutomaton_internal_84 --> -340($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_28
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -340($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_82 GOTO label_FALSE_235
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_82 GOTO label_FALSE_235
lw $t0, -332($fp)
beq $t0, 0, label_FALSE_235
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_84 GOTO label_FALSE_235
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_84 GOTO label_FALSE_235
lw $t0, -340($fp)
beq $t0, 0, label_FALSE_235
# LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
# Comparing -332($fp) type with String
la $v0, String
lw $a0, -332($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -324($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_COMPARE_STRING_238
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_COMPARE_STRING_238
lw $t0, -324($fp)
beq $t0, 0, label_COMPARE_STRING_238
# LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
# Comparing -332($fp) type with Bool
la $v0, Bool
lw $a0, -332($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -324($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_COMPARE_BY_VALUE_239
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_COMPARE_BY_VALUE_239
lw $t0, -324($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_239
# LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
# Comparing -332($fp) type with Int
la $v0, Int
lw $a0, -332($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -324($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_COMPARE_BY_VALUE_239
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_COMPARE_BY_VALUE_239
lw $t0, -324($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_239
# LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_84 --> -340($fp)
# Load pointers and SUB
lw $a0, -332($fp)
lw $a1, -340($fp)
sub $a0, $a0, $a1
sw $a0, -324($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_TRUE_236
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_TRUE_236
lw $t0, -324($fp)
beq $t0, 0, label_TRUE_236
# GOTO label_FALSE_235
j label_FALSE_235
label_COMPARE_BY_VALUE_239: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_84 --> -340($fp)
   lw $a0, -332($fp)
   lw $a1, -340($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -324($fp)
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_TRUE_236
   # IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_TRUE_236
   lw $t0, -324($fp)
   beq $t0, 0, label_TRUE_236
   # GOTO label_FALSE_235
   j label_FALSE_235
   label_COMPARE_STRING_238: 
      # LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
      # LOCAL local_neighbors_at_CellularAutomaton_internal_84 --> -340($fp)
      # Load strings for comparison
      lw $v0, -332($fp)
      lw $v1, -340($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -324($fp)
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_CONTINUE_240
      # IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_CONTINUE_240
      lw $t0, -324($fp)
      beq $t0, 0, label_CONTINUE_240
      # GOTO label_FALSE_235
      j label_FALSE_235
      label_CONTINUE_240: 
         # LOCAL local_neighbors_at_CellularAutomaton_internal_80 --> -324($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_82 --> -332($fp)
         # LOCAL local_neighbors_at_CellularAutomaton_internal_84 --> -340($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -332($fp)
         lw $v1, -340($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_241: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_242
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_241
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_242: 
               # Store result
               sw $a2, -324($fp)
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_TRUE_236
               # IF_ZERO local_neighbors_at_CellularAutomaton_internal_80 GOTO label_TRUE_236
               lw $t0, -324($fp)
               beq $t0, 0, label_TRUE_236
               label_FALSE_235: 
                  # LOCAL local_neighbors_at_CellularAutomaton_internal_79 --> -320($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -320($fp)
                  # GOTO label_END_237
j label_END_237
label_TRUE_236: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_79 --> -320($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -320($fp)
   label_END_237: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_77 --> -312($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_79 --> -320($fp)
# Obtain value from -320($fp)
lw $v0, -320($fp)
lw $v0, 12($v0)
sw $v0, -312($fp)
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_77 GOTO label_FALSEIF_233
# IF_ZERO local_neighbors_at_CellularAutomaton_internal_77 GOTO label_FALSEIF_233
lw $t0, -312($fp)
beq $t0, 0, label_FALSEIF_233
# LOCAL local_neighbors_at_CellularAutomaton_internal_85 --> -344($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -344($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_78 --> -316($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_85 --> -344($fp)
# local_neighbors_at_CellularAutomaton_internal_78 = local_neighbors_at_CellularAutomaton_internal_85
lw $t0, -344($fp)
sw $t0, -316($fp)
# GOTO label_ENDIF_234
j label_ENDIF_234
label_FALSEIF_233: 
   # LOCAL local_neighbors_at_CellularAutomaton_internal_86 --> -348($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -348($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_78 --> -316($fp)
   # LOCAL local_neighbors_at_CellularAutomaton_internal_86 --> -348($fp)
   # local_neighbors_at_CellularAutomaton_internal_78 = local_neighbors_at_CellularAutomaton_internal_86
   lw $t0, -348($fp)
   sw $t0, -316($fp)
   label_ENDIF_234: 
# LOCAL local_neighbors_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_neighbors_at_CellularAutomaton_internal_78 --> -316($fp)
# local_neighbors_at_CellularAutomaton_internal_0 = local_neighbors_at_CellularAutomaton_internal_1 + local_neighbors_at_CellularAutomaton_internal_78
lw $t1, -8($fp)
lw $t0, 12($t1)
lw $t1, -316($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -4($fp)
# RETURN local_neighbors_at_CellularAutomaton_internal_0
lw $v0, -4($fp)
# Deallocate stack frame for function function_neighbors_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 356
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_cell_at_next_evolution_at_CellularAutomaton implementation.
# @Params:
# 	0($fp) = param_cell_at_next_evolution_at_CellularAutomaton_position_0
function_cell_at_next_evolution_at_CellularAutomaton: 
   # Allocate stack frame for function function_cell_at_next_evolution_at_CellularAutomaton.
   subu $sp, $sp, 120
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 120
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_4 = local_cell_at_next_evolution_at_CellularAutomaton_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
   # PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 --> -20($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_5 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_4 neighbors
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 3
   sw $t0, 12($v0)
   sw $v0, -32($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_5 GOTO label_FALSE_245
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_5 GOTO label_FALSE_245
   lw $t0, -24($fp)
   beq $t0, 0, label_FALSE_245
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_7 GOTO label_FALSE_245
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_7 GOTO label_FALSE_245
   lw $t0, -32($fp)
   beq $t0, 0, label_FALSE_245
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
   # Comparing -24($fp) type with String
   la $v0, String
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_COMPARE_STRING_248
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_COMPARE_STRING_248
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_248
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Bool
   la $v0, Bool
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_249
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_249
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_249
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Int
   la $v0, Int
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_249
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_COMPARE_BY_VALUE_249
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_249
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
   # Load pointers and SUB
   lw $a0, -24($fp)
   lw $a1, -32($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_TRUE_246
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_TRUE_246
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_246
   # GOTO label_FALSE_245
   j label_FALSE_245
   label_COMPARE_BY_VALUE_249: 
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
      lw $a0, -24($fp)
      lw $a1, -32($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_TRUE_246
      # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_TRUE_246
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_246
      # GOTO label_FALSE_245
      j label_FALSE_245
      label_COMPARE_STRING_248: 
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
         # Load strings for comparison
         lw $v0, -24($fp)
         lw $v1, -32($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_CONTINUE_250
         # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_CONTINUE_250
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_250
         # GOTO label_FALSE_245
         j label_FALSE_245
         label_CONTINUE_250: 
            # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_3 --> -16($fp)
            # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_5 --> -24($fp)
            # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_7 --> -32($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -24($fp)
            lw $v1, -32($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_251: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_252
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_251
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_252: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_TRUE_246
                  # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_3 GOTO label_TRUE_246
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_246
                  label_FALSE_245: 
                     # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_247
j label_END_247
label_TRUE_246: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_247: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_0 --> -4($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_243
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_0 GOTO label_FALSEIF_243
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_243
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 --> -36($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_29
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -36($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_8 --> -36($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_1 = local_cell_at_next_evolution_at_CellularAutomaton_internal_8
lw $t0, -36($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_244
j label_ENDIF_244
label_FALSEIF_243: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_13 = local_cell_at_next_evolution_at_CellularAutomaton_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
   # PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_14 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_13 neighbors
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -68($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_14 GOTO label_FALSE_255
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_14 GOTO label_FALSE_255
   lw $t0, -60($fp)
   beq $t0, 0, label_FALSE_255
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_16 GOTO label_FALSE_255
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_16 GOTO label_FALSE_255
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_255
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
   # Comparing -60($fp) type with String
   la $v0, String
   lw $a0, -60($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_COMPARE_STRING_258
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_COMPARE_STRING_258
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_STRING_258
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
   # Comparing -60($fp) type with Bool
   la $v0, Bool
   lw $a0, -60($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_COMPARE_BY_VALUE_259
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_COMPARE_BY_VALUE_259
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_259
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
   # Comparing -60($fp) type with Int
   la $v0, Int
   lw $a0, -60($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -52($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_COMPARE_BY_VALUE_259
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_COMPARE_BY_VALUE_259
   lw $t0, -52($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_259
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, -60($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -52($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_256
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_256
   lw $t0, -52($fp)
   beq $t0, 0, label_TRUE_256
   # GOTO label_FALSE_255
   j label_FALSE_255
   label_COMPARE_BY_VALUE_259: 
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
      lw $a0, -60($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -52($fp)
      # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_256
      # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_256
      lw $t0, -52($fp)
      beq $t0, 0, label_TRUE_256
      # GOTO label_FALSE_255
      j label_FALSE_255
      label_COMPARE_STRING_258: 
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, -60($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -52($fp)
         # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_CONTINUE_260
         # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_CONTINUE_260
         lw $t0, -52($fp)
         beq $t0, 0, label_CONTINUE_260
         # GOTO label_FALSE_255
         j label_FALSE_255
         label_CONTINUE_260: 
            # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_12 --> -52($fp)
            # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_14 --> -60($fp)
            # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -60($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_261: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_262
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_261
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_262: 
                  # Store result
                  sw $a2, -52($fp)
                  # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_256
                  # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_12 GOTO label_TRUE_256
                  lw $t0, -52($fp)
                  beq $t0, 0, label_TRUE_256
                  label_FALSE_255: 
                     # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -48($fp)
                     # GOTO label_END_257
j label_END_257
label_TRUE_256: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -48($fp)
   label_END_257: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_11 --> -48($fp)
# Obtain value from -48($fp)
lw $v0, -48($fp)
lw $v0, 12($v0)
sw $v0, -40($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_9 GOTO label_FALSEIF_253
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_9 GOTO label_FALSEIF_253
lw $t0, -40($fp)
beq $t0, 0, label_FALSEIF_253
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_23 --> -96($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_23 = SELF
sw $s1, -96($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_23 --> -96($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_21 = local_cell_at_next_evolution_at_CellularAutomaton_internal_23
lw $t0, -96($fp)
sw $t0, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG param_cell_at_next_evolution_at_CellularAutomaton_position_0
# PARAM param_cell_at_next_evolution_at_CellularAutomaton_position_0 --> 0($fp)
lw $t0, 0($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_21 --> -88($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_22 = VCALL local_cell_at_next_evolution_at_CellularAutomaton_internal_21 cell
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 100($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_30
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -100($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_22 GOTO label_FALSE_265
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_22 GOTO label_FALSE_265
lw $t0, -92($fp)
beq $t0, 0, label_FALSE_265
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_24 GOTO label_FALSE_265
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_24 GOTO label_FALSE_265
lw $t0, -100($fp)
beq $t0, 0, label_FALSE_265
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# Comparing -92($fp) type with String
la $v0, String
lw $a0, -92($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -84($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_COMPARE_STRING_268
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_COMPARE_STRING_268
lw $t0, -84($fp)
beq $t0, 0, label_COMPARE_STRING_268
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# Comparing -92($fp) type with Bool
la $v0, Bool
lw $a0, -92($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -84($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_269
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_269
lw $t0, -84($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_269
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# Comparing -92($fp) type with Int
la $v0, Int
lw $a0, -92($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -84($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_269
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_COMPARE_BY_VALUE_269
lw $t0, -84($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_269
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
# Load pointers and SUB
lw $a0, -92($fp)
lw $a1, -100($fp)
sub $a0, $a0, $a1
sw $a0, -84($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_TRUE_266
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_TRUE_266
lw $t0, -84($fp)
beq $t0, 0, label_TRUE_266
# GOTO label_FALSE_265
j label_FALSE_265
label_COMPARE_BY_VALUE_269: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
   lw $a0, -92($fp)
   lw $a1, -100($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -84($fp)
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_TRUE_266
   # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_TRUE_266
   lw $t0, -84($fp)
   beq $t0, 0, label_TRUE_266
   # GOTO label_FALSE_265
   j label_FALSE_265
   label_COMPARE_STRING_268: 
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
      # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
      # Load strings for comparison
      lw $v0, -92($fp)
      lw $v1, -100($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -84($fp)
      # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_CONTINUE_270
      # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_CONTINUE_270
      lw $t0, -84($fp)
      beq $t0, 0, label_CONTINUE_270
      # GOTO label_FALSE_265
      j label_FALSE_265
      label_CONTINUE_270: 
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_20 --> -84($fp)
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_22 --> -92($fp)
         # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_24 --> -100($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -92($fp)
         lw $v1, -100($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_271: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_272
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_271
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_272: 
               # Store result
               sw $a2, -84($fp)
               # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_TRUE_266
               # IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_20 GOTO label_TRUE_266
               lw $t0, -84($fp)
               beq $t0, 0, label_TRUE_266
               label_FALSE_265: 
                  # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -80($fp)
                  # GOTO label_END_267
j label_END_267
label_TRUE_266: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -80($fp)
   label_END_267: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_17 --> -72($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_19 --> -80($fp)
# Obtain value from -80($fp)
lw $v0, -80($fp)
lw $v0, 12($v0)
sw $v0, -72($fp)
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_263
# IF_ZERO local_cell_at_next_evolution_at_CellularAutomaton_internal_17 GOTO label_FALSEIF_263
lw $t0, -72($fp)
beq $t0, 0, label_FALSEIF_263
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_25 --> -104($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_31
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -104($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_25 --> -104($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_18 = local_cell_at_next_evolution_at_CellularAutomaton_internal_25
lw $t0, -104($fp)
sw $t0, -76($fp)
# GOTO label_ENDIF_264
j label_ENDIF_264
label_FALSEIF_263: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_32
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -108($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_26 --> -108($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_18 = local_cell_at_next_evolution_at_CellularAutomaton_internal_26
   lw $t0, -108($fp)
   sw $t0, -76($fp)
   label_ENDIF_264: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_18 --> -76($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_10 = local_cell_at_next_evolution_at_CellularAutomaton_internal_18
lw $t0, -76($fp)
sw $t0, -44($fp)
# GOTO label_ENDIF_254
j label_ENDIF_254
label_FALSEIF_253: 
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_27 --> -112($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_33
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -112($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
   # LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_cell_at_next_evolution_at_CellularAutomaton_internal_10 = local_cell_at_next_evolution_at_CellularAutomaton_internal_27
   lw $t0, -112($fp)
   sw $t0, -44($fp)
   label_ENDIF_254: 
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_1 --> -8($fp)
# LOCAL local_cell_at_next_evolution_at_CellularAutomaton_internal_10 --> -44($fp)
# local_cell_at_next_evolution_at_CellularAutomaton_internal_1 = local_cell_at_next_evolution_at_CellularAutomaton_internal_10
lw $t0, -44($fp)
sw $t0, -8($fp)
label_ENDIF_244: 
# RETURN local_cell_at_next_evolution_at_CellularAutomaton_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_cell_at_next_evolution_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 120
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_evolve_at_CellularAutomaton implementation.
# @Params:
function_evolve_at_CellularAutomaton: 
   # Allocate stack frame for function function_evolve_at_CellularAutomaton.
   subu $sp, $sp, 76
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 76
   # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_1 --> -8($fp)
   # local_evolve_at_CellularAutomaton_position_0 = local_evolve_at_CellularAutomaton_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_evolve_at_CellularAutomaton_num_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_evolve_at_CellularAutomaton_internal_5 = SELF
   sw $s1, -24($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_5 --> -24($fp)
   # local_evolve_at_CellularAutomaton_internal_3 = local_evolve_at_CellularAutomaton_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_3 --> -16($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_evolve_at_CellularAutomaton_internal_4 = VCALL local_evolve_at_CellularAutomaton_internal_3 num_cells
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 60($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_evolve_at_CellularAutomaton_num_2 --> -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_internal_4 --> -20($fp)
   # local_evolve_at_CellularAutomaton_num_2 = local_evolve_at_CellularAutomaton_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # LOCAL local_evolve_at_CellularAutomaton_temp_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -28($fp)
   label_WHILE_273: 
      # LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
      # LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
      # LOCAL local_evolve_at_CellularAutomaton_num_2 --> -12($fp)
      lw $a0, -4($fp)
      lw $a1, -12($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -36($fp)
      # IF_GREATER_ZERO local_evolve_at_CellularAutomaton_internal_8 GOTO label_FALSE_275
      # IF_GREATER_ZERO local_evolve_at_CellularAutomaton_internal_8 GOTO label_FALSE_275
      lw $t0, -36($fp)
      bgt $t0, 0, label_FALSE_275
      # IF_ZERO local_evolve_at_CellularAutomaton_internal_8 GOTO label_FALSE_275
      # IF_ZERO local_evolve_at_CellularAutomaton_internal_8 GOTO label_FALSE_275
      lw $t0, -36($fp)
      beq $t0, 0, label_FALSE_275
      # LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -36($fp)
      # GOTO label_END_276
j label_END_276
label_FALSE_275: 
   # LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_276: 
# LOCAL local_evolve_at_CellularAutomaton_internal_7 --> -32($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_evolve_at_CellularAutomaton_internal_7 GOTO label_WHILE_END_274
# IF_ZERO local_evolve_at_CellularAutomaton_internal_7 GOTO label_WHILE_END_274
lw $t0, -32($fp)
beq $t0, 0, label_WHILE_END_274
# LOCAL local_evolve_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_evolve_at_CellularAutomaton_temp_6 --> -28($fp)
# local_evolve_at_CellularAutomaton_internal_9 = local_evolve_at_CellularAutomaton_temp_6
lw $t0, -28($fp)
sw $t0, -40($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_13 --> -56($fp)
# local_evolve_at_CellularAutomaton_internal_13 = SELF
sw $s1, -56($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_11 --> -48($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_13 --> -56($fp)
# local_evolve_at_CellularAutomaton_internal_11 = local_evolve_at_CellularAutomaton_internal_13
lw $t0, -56($fp)
sw $t0, -48($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_evolve_at_CellularAutomaton_position_0
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
lw $t0, -4($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_11 --> -48($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_12 --> -52($fp)
# local_evolve_at_CellularAutomaton_internal_12 = VCALL local_evolve_at_CellularAutomaton_internal_11 cell_at_next_evolution
# Save new self pointer in $s1
lw $s1, -48($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 12($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -52($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_evolve_at_CellularAutomaton_internal_12
# LOCAL local_evolve_at_CellularAutomaton_internal_12 --> -52($fp)
lw $t0, -52($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_evolve_at_CellularAutomaton_internal_9 --> -40($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_10 --> -44($fp)
# local_evolve_at_CellularAutomaton_internal_10 = VCALL local_evolve_at_CellularAutomaton_internal_9 concat
# Save new self pointer in $s1
lw $s1, -40($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 44($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -44($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_evolve_at_CellularAutomaton_temp_6 --> -28($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_10 --> -44($fp)
# local_evolve_at_CellularAutomaton_temp_6 = local_evolve_at_CellularAutomaton_internal_10
lw $t0, -44($fp)
sw $t0, -28($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_15 --> -64($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -64($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_14 --> -60($fp)
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_15 --> -64($fp)
# local_evolve_at_CellularAutomaton_internal_14 = local_evolve_at_CellularAutomaton_position_0 + local_evolve_at_CellularAutomaton_internal_15
lw $t1, -4($fp)
lw $t0, 12($t1)
lw $t1, -64($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -60($fp)
# LOCAL local_evolve_at_CellularAutomaton_position_0 --> -4($fp)
# LOCAL local_evolve_at_CellularAutomaton_internal_14 --> -60($fp)
# local_evolve_at_CellularAutomaton_position_0 = local_evolve_at_CellularAutomaton_internal_14
lw $t0, -60($fp)
sw $t0, -4($fp)
# GOTO label_WHILE_273
j label_WHILE_273
label_WHILE_END_274: 
   # 
   # LOCAL local_evolve_at_CellularAutomaton_temp_6 --> -28($fp)
   lw $t0, -28($fp)
   sw $t0, 24($s1)
   # LOCAL local_evolve_at_CellularAutomaton_internal_16 --> -68($fp)
   # local_evolve_at_CellularAutomaton_internal_16 = SELF
   sw $s1, -68($fp)
   # RETURN local_evolve_at_CellularAutomaton_internal_16
   lw $v0, -68($fp)
   # Deallocate stack frame for function function_evolve_at_CellularAutomaton.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 76
   jr $ra
   # Function END


# function_option_at_CellularAutomaton implementation.
# @Params:
function_option_at_CellularAutomaton: 
   # Allocate stack frame for function function_option_at_CellularAutomaton.
   subu $sp, $sp, 916
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 916
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_option_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_option_at_CellularAutomaton_internal_1 = local_option_at_CellularAutomaton_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_34
   sw $t0, 12($v0)
   li $t0, 24
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # ARG local_option_at_CellularAutomaton_internal_4
   # LOCAL local_option_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_option_at_CellularAutomaton_internal_2 = VCALL local_option_at_CellularAutomaton_internal_1 out_string
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_option_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_option_at_CellularAutomaton_internal_5 = local_option_at_CellularAutomaton_internal_7
   lw $t0, -32($fp)
   sw $t0, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_35
   sw $t0, 12($v0)
   li $t0, 13
   sw $t0, 16($v0)
   sw $v0, -36($fp)
   # ARG local_option_at_CellularAutomaton_internal_8
   # LOCAL local_option_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_option_at_CellularAutomaton_internal_6 = VCALL local_option_at_CellularAutomaton_internal_5 out_string
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_option_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_option_at_CellularAutomaton_internal_9 = local_option_at_CellularAutomaton_internal_11
   lw $t0, -48($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_36
   sw $t0, 12($v0)
   li $t0, 48
   sw $t0, 16($v0)
   sw $v0, -52($fp)
   # ARG local_option_at_CellularAutomaton_internal_12
   # LOCAL local_option_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t0, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_option_at_CellularAutomaton_internal_10 = VCALL local_option_at_CellularAutomaton_internal_9 out_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_option_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_option_at_CellularAutomaton_internal_13 = local_option_at_CellularAutomaton_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_37
   sw $t0, 12($v0)
   li $t0, 48
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # ARG local_option_at_CellularAutomaton_internal_16
   # LOCAL local_option_at_CellularAutomaton_internal_16 --> -68($fp)
   lw $t0, -68($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_option_at_CellularAutomaton_internal_14 = VCALL local_option_at_CellularAutomaton_internal_13 out_string
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_option_at_CellularAutomaton_internal_19 = SELF
   sw $s1, -80($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_19 --> -80($fp)
   # local_option_at_CellularAutomaton_internal_17 = local_option_at_CellularAutomaton_internal_19
   lw $t0, -80($fp)
   sw $t0, -72($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_38
   sw $t0, 12($v0)
   li $t0, 10
   sw $t0, 16($v0)
   sw $v0, -84($fp)
   # ARG local_option_at_CellularAutomaton_internal_20
   # LOCAL local_option_at_CellularAutomaton_internal_20 --> -84($fp)
   lw $t0, -84($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_18 --> -76($fp)
   # local_option_at_CellularAutomaton_internal_18 = VCALL local_option_at_CellularAutomaton_internal_17 out_string
   # Save new self pointer in $s1
   lw $s1, -72($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -76($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_23 --> -96($fp)
   # local_option_at_CellularAutomaton_internal_23 = SELF
   sw $s1, -96($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_21 --> -88($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_23 --> -96($fp)
   # local_option_at_CellularAutomaton_internal_21 = local_option_at_CellularAutomaton_internal_23
   lw $t0, -96($fp)
   sw $t0, -88($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_24 --> -100($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_39
   sw $t0, 12($v0)
   li $t0, 26
   sw $t0, 16($v0)
   sw $v0, -100($fp)
   # ARG local_option_at_CellularAutomaton_internal_24
   # LOCAL local_option_at_CellularAutomaton_internal_24 --> -100($fp)
   lw $t0, -100($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_21 --> -88($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_option_at_CellularAutomaton_internal_22 = VCALL local_option_at_CellularAutomaton_internal_21 out_string
   # Save new self pointer in $s1
   lw $s1, -88($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -92($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_option_at_CellularAutomaton_internal_27 = SELF
   sw $s1, -112($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_25 --> -104($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_27 --> -112($fp)
   # local_option_at_CellularAutomaton_internal_25 = local_option_at_CellularAutomaton_internal_27
   lw $t0, -112($fp)
   sw $t0, -104($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_40
   sw $t0, 12($v0)
   li $t0, 22
   sw $t0, 16($v0)
   sw $v0, -116($fp)
   # ARG local_option_at_CellularAutomaton_internal_28
   # LOCAL local_option_at_CellularAutomaton_internal_28 --> -116($fp)
   lw $t0, -116($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_25 --> -104($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_26 --> -108($fp)
   # local_option_at_CellularAutomaton_internal_26 = VCALL local_option_at_CellularAutomaton_internal_25 out_string
   # Save new self pointer in $s1
   lw $s1, -104($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -108($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_31 --> -128($fp)
   # local_option_at_CellularAutomaton_internal_31 = SELF
   sw $s1, -128($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_29 --> -120($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_31 --> -128($fp)
   # local_option_at_CellularAutomaton_internal_29 = local_option_at_CellularAutomaton_internal_31
   lw $t0, -128($fp)
   sw $t0, -120($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_41
   sw $t0, 12($v0)
   li $t0, 28
   sw $t0, 16($v0)
   sw $v0, -132($fp)
   # ARG local_option_at_CellularAutomaton_internal_32
   # LOCAL local_option_at_CellularAutomaton_internal_32 --> -132($fp)
   lw $t0, -132($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_29 --> -120($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_30 --> -124($fp)
   # local_option_at_CellularAutomaton_internal_30 = VCALL local_option_at_CellularAutomaton_internal_29 out_string
   # Save new self pointer in $s1
   lw $s1, -120($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -124($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_35 --> -144($fp)
   # local_option_at_CellularAutomaton_internal_35 = SELF
   sw $s1, -144($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_33 --> -136($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_35 --> -144($fp)
   # local_option_at_CellularAutomaton_internal_33 = local_option_at_CellularAutomaton_internal_35
   lw $t0, -144($fp)
   sw $t0, -136($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_42
   sw $t0, 12($v0)
   li $t0, 25
   sw $t0, 16($v0)
   sw $v0, -148($fp)
   # ARG local_option_at_CellularAutomaton_internal_36
   # LOCAL local_option_at_CellularAutomaton_internal_36 --> -148($fp)
   lw $t0, -148($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_33 --> -136($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_34 --> -140($fp)
   # local_option_at_CellularAutomaton_internal_34 = VCALL local_option_at_CellularAutomaton_internal_33 out_string
   # Save new self pointer in $s1
   lw $s1, -136($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -140($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_39 --> -160($fp)
   # local_option_at_CellularAutomaton_internal_39 = SELF
   sw $s1, -160($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_37 --> -152($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_39 --> -160($fp)
   # local_option_at_CellularAutomaton_internal_37 = local_option_at_CellularAutomaton_internal_39
   lw $t0, -160($fp)
   sw $t0, -152($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_43
   sw $t0, 12($v0)
   li $t0, 11
   sw $t0, 16($v0)
   sw $v0, -164($fp)
   # ARG local_option_at_CellularAutomaton_internal_40
   # LOCAL local_option_at_CellularAutomaton_internal_40 --> -164($fp)
   lw $t0, -164($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_37 --> -152($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_38 --> -156($fp)
   # local_option_at_CellularAutomaton_internal_38 = VCALL local_option_at_CellularAutomaton_internal_37 out_string
   # Save new self pointer in $s1
   lw $s1, -152($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -156($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_43 --> -176($fp)
   # local_option_at_CellularAutomaton_internal_43 = SELF
   sw $s1, -176($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_41 --> -168($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_43 --> -176($fp)
   # local_option_at_CellularAutomaton_internal_41 = local_option_at_CellularAutomaton_internal_43
   lw $t0, -176($fp)
   sw $t0, -168($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_44
   sw $t0, 12($v0)
   li $t0, 21
   sw $t0, 16($v0)
   sw $v0, -180($fp)
   # ARG local_option_at_CellularAutomaton_internal_44
   # LOCAL local_option_at_CellularAutomaton_internal_44 --> -180($fp)
   lw $t0, -180($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_41 --> -168($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_42 --> -172($fp)
   # local_option_at_CellularAutomaton_internal_42 = VCALL local_option_at_CellularAutomaton_internal_41 out_string
   # Save new self pointer in $s1
   lw $s1, -168($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -172($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_47 --> -192($fp)
   # local_option_at_CellularAutomaton_internal_47 = SELF
   sw $s1, -192($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_45 --> -184($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_47 --> -192($fp)
   # local_option_at_CellularAutomaton_internal_45 = local_option_at_CellularAutomaton_internal_47
   lw $t0, -192($fp)
   sw $t0, -184($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_48 --> -196($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_45
   sw $t0, 12($v0)
   li $t0, 32
   sw $t0, 16($v0)
   sw $v0, -196($fp)
   # ARG local_option_at_CellularAutomaton_internal_48
   # LOCAL local_option_at_CellularAutomaton_internal_48 --> -196($fp)
   lw $t0, -196($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_45 --> -184($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_46 --> -188($fp)
   # local_option_at_CellularAutomaton_internal_46 = VCALL local_option_at_CellularAutomaton_internal_45 out_string
   # Save new self pointer in $s1
   lw $s1, -184($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -188($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_51 --> -208($fp)
   # local_option_at_CellularAutomaton_internal_51 = SELF
   sw $s1, -208($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_49 --> -200($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_51 --> -208($fp)
   # local_option_at_CellularAutomaton_internal_49 = local_option_at_CellularAutomaton_internal_51
   lw $t0, -208($fp)
   sw $t0, -200($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_46
   sw $t0, 12($v0)
   li $t0, 18
   sw $t0, 16($v0)
   sw $v0, -212($fp)
   # ARG local_option_at_CellularAutomaton_internal_52
   # LOCAL local_option_at_CellularAutomaton_internal_52 --> -212($fp)
   lw $t0, -212($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_49 --> -200($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_50 --> -204($fp)
   # local_option_at_CellularAutomaton_internal_50 = VCALL local_option_at_CellularAutomaton_internal_49 out_string
   # Save new self pointer in $s1
   lw $s1, -200($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -204($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_55 --> -224($fp)
   # local_option_at_CellularAutomaton_internal_55 = SELF
   sw $s1, -224($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_53 --> -216($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_55 --> -224($fp)
   # local_option_at_CellularAutomaton_internal_53 = local_option_at_CellularAutomaton_internal_55
   lw $t0, -224($fp)
   sw $t0, -216($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_47
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -228($fp)
   # ARG local_option_at_CellularAutomaton_internal_56
   # LOCAL local_option_at_CellularAutomaton_internal_56 --> -228($fp)
   lw $t0, -228($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_53 --> -216($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_54 --> -220($fp)
   # local_option_at_CellularAutomaton_internal_54 = VCALL local_option_at_CellularAutomaton_internal_53 out_string
   # Save new self pointer in $s1
   lw $s1, -216($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -220($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_59 --> -240($fp)
   # local_option_at_CellularAutomaton_internal_59 = SELF
   sw $s1, -240($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_57 --> -232($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_59 --> -240($fp)
   # local_option_at_CellularAutomaton_internal_57 = local_option_at_CellularAutomaton_internal_59
   lw $t0, -240($fp)
   sw $t0, -232($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_60 --> -244($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_48
   sw $t0, 12($v0)
   li $t0, 17
   sw $t0, 16($v0)
   sw $v0, -244($fp)
   # ARG local_option_at_CellularAutomaton_internal_60
   # LOCAL local_option_at_CellularAutomaton_internal_60 --> -244($fp)
   lw $t0, -244($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_57 --> -232($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_58 --> -236($fp)
   # local_option_at_CellularAutomaton_internal_58 = VCALL local_option_at_CellularAutomaton_internal_57 out_string
   # Save new self pointer in $s1
   lw $s1, -232($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -236($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_63 --> -256($fp)
   # local_option_at_CellularAutomaton_internal_63 = SELF
   sw $s1, -256($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_61 --> -248($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_63 --> -256($fp)
   # local_option_at_CellularAutomaton_internal_61 = local_option_at_CellularAutomaton_internal_63
   lw $t0, -256($fp)
   sw $t0, -248($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_64 --> -260($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_49
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -260($fp)
   # ARG local_option_at_CellularAutomaton_internal_64
   # LOCAL local_option_at_CellularAutomaton_internal_64 --> -260($fp)
   lw $t0, -260($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_61 --> -248($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_62 --> -252($fp)
   # local_option_at_CellularAutomaton_internal_62 = VCALL local_option_at_CellularAutomaton_internal_61 out_string
   # Save new self pointer in $s1
   lw $s1, -248($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -252($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_67 --> -272($fp)
   # local_option_at_CellularAutomaton_internal_67 = SELF
   sw $s1, -272($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_65 --> -264($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_67 --> -272($fp)
   # local_option_at_CellularAutomaton_internal_65 = local_option_at_CellularAutomaton_internal_67
   lw $t0, -272($fp)
   sw $t0, -264($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_68 --> -276($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_50
   sw $t0, 12($v0)
   li $t0, 13
   sw $t0, 16($v0)
   sw $v0, -276($fp)
   # ARG local_option_at_CellularAutomaton_internal_68
   # LOCAL local_option_at_CellularAutomaton_internal_68 --> -276($fp)
   lw $t0, -276($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_65 --> -264($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_66 --> -268($fp)
   # local_option_at_CellularAutomaton_internal_66 = VCALL local_option_at_CellularAutomaton_internal_65 out_string
   # Save new self pointer in $s1
   lw $s1, -264($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -268($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_71 --> -288($fp)
   # local_option_at_CellularAutomaton_internal_71 = SELF
   sw $s1, -288($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_69 --> -280($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_71 --> -288($fp)
   # local_option_at_CellularAutomaton_internal_69 = local_option_at_CellularAutomaton_internal_71
   lw $t0, -288($fp)
   sw $t0, -280($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_72 --> -292($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_51
   sw $t0, 12($v0)
   li $t0, 13
   sw $t0, 16($v0)
   sw $v0, -292($fp)
   # ARG local_option_at_CellularAutomaton_internal_72
   # LOCAL local_option_at_CellularAutomaton_internal_72 --> -292($fp)
   lw $t0, -292($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_69 --> -280($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_70 --> -284($fp)
   # local_option_at_CellularAutomaton_internal_70 = VCALL local_option_at_CellularAutomaton_internal_69 out_string
   # Save new self pointer in $s1
   lw $s1, -280($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -284($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_75 --> -304($fp)
   # local_option_at_CellularAutomaton_internal_75 = SELF
   sw $s1, -304($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_73 --> -296($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_75 --> -304($fp)
   # local_option_at_CellularAutomaton_internal_73 = local_option_at_CellularAutomaton_internal_75
   lw $t0, -304($fp)
   sw $t0, -296($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_76 --> -308($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_52
   sw $t0, 12($v0)
   li $t0, 12
   sw $t0, 16($v0)
   sw $v0, -308($fp)
   # ARG local_option_at_CellularAutomaton_internal_76
   # LOCAL local_option_at_CellularAutomaton_internal_76 --> -308($fp)
   lw $t0, -308($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_73 --> -296($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_74 --> -300($fp)
   # local_option_at_CellularAutomaton_internal_74 = VCALL local_option_at_CellularAutomaton_internal_73 out_string
   # Save new self pointer in $s1
   lw $s1, -296($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -300($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_79 --> -320($fp)
   # local_option_at_CellularAutomaton_internal_79 = SELF
   sw $s1, -320($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_77 --> -312($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_79 --> -320($fp)
   # local_option_at_CellularAutomaton_internal_77 = local_option_at_CellularAutomaton_internal_79
   lw $t0, -320($fp)
   sw $t0, -312($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_80 --> -324($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_53
   sw $t0, 12($v0)
   li $t0, 13
   sw $t0, 16($v0)
   sw $v0, -324($fp)
   # ARG local_option_at_CellularAutomaton_internal_80
   # LOCAL local_option_at_CellularAutomaton_internal_80 --> -324($fp)
   lw $t0, -324($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_77 --> -312($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_78 --> -316($fp)
   # local_option_at_CellularAutomaton_internal_78 = VCALL local_option_at_CellularAutomaton_internal_77 out_string
   # Save new self pointer in $s1
   lw $s1, -312($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -316($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_83 --> -336($fp)
   # local_option_at_CellularAutomaton_internal_83 = SELF
   sw $s1, -336($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_81 --> -328($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_83 --> -336($fp)
   # local_option_at_CellularAutomaton_internal_81 = local_option_at_CellularAutomaton_internal_83
   lw $t0, -336($fp)
   sw $t0, -328($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_84 --> -340($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_54
   sw $t0, 12($v0)
   li $t0, 13
   sw $t0, 16($v0)
   sw $v0, -340($fp)
   # ARG local_option_at_CellularAutomaton_internal_84
   # LOCAL local_option_at_CellularAutomaton_internal_84 --> -340($fp)
   lw $t0, -340($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_81 --> -328($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_82 --> -332($fp)
   # local_option_at_CellularAutomaton_internal_82 = VCALL local_option_at_CellularAutomaton_internal_81 out_string
   # Save new self pointer in $s1
   lw $s1, -328($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -332($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_87 --> -352($fp)
   # local_option_at_CellularAutomaton_internal_87 = SELF
   sw $s1, -352($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_85 --> -344($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_87 --> -352($fp)
   # local_option_at_CellularAutomaton_internal_85 = local_option_at_CellularAutomaton_internal_87
   lw $t0, -352($fp)
   sw $t0, -344($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_88 --> -356($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_55
   sw $t0, 12($v0)
   li $t0, 13
   sw $t0, 16($v0)
   sw $v0, -356($fp)
   # ARG local_option_at_CellularAutomaton_internal_88
   # LOCAL local_option_at_CellularAutomaton_internal_88 --> -356($fp)
   lw $t0, -356($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_85 --> -344($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_86 --> -348($fp)
   # local_option_at_CellularAutomaton_internal_86 = VCALL local_option_at_CellularAutomaton_internal_85 out_string
   # Save new self pointer in $s1
   lw $s1, -344($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -348($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_91 --> -368($fp)
   # local_option_at_CellularAutomaton_internal_91 = SELF
   sw $s1, -368($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_89 --> -360($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_91 --> -368($fp)
   # local_option_at_CellularAutomaton_internal_89 = local_option_at_CellularAutomaton_internal_91
   lw $t0, -368($fp)
   sw $t0, -360($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_92 --> -372($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_56
   sw $t0, 12($v0)
   li $t0, 15
   sw $t0, 16($v0)
   sw $v0, -372($fp)
   # ARG local_option_at_CellularAutomaton_internal_92
   # LOCAL local_option_at_CellularAutomaton_internal_92 --> -372($fp)
   lw $t0, -372($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_89 --> -360($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_90 --> -364($fp)
   # local_option_at_CellularAutomaton_internal_90 = VCALL local_option_at_CellularAutomaton_internal_89 out_string
   # Save new self pointer in $s1
   lw $s1, -360($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -364($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_95 --> -384($fp)
   # local_option_at_CellularAutomaton_internal_95 = SELF
   sw $s1, -384($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_93 --> -376($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_95 --> -384($fp)
   # local_option_at_CellularAutomaton_internal_93 = local_option_at_CellularAutomaton_internal_95
   lw $t0, -384($fp)
   sw $t0, -376($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_93 --> -376($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_94 --> -380($fp)
   # local_option_at_CellularAutomaton_internal_94 = VCALL local_option_at_CellularAutomaton_internal_93 in_int
   # Save new self pointer in $s1
   lw $s1, -376($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 0($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -380($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_94 --> -380($fp)
   # local_option_at_CellularAutomaton_num_0 = local_option_at_CellularAutomaton_internal_94
   lw $t0, -380($fp)
   sw $t0, -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_98 --> -396($fp)
   # local_option_at_CellularAutomaton_internal_98 = SELF
   sw $s1, -396($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_96 --> -388($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_98 --> -396($fp)
   # local_option_at_CellularAutomaton_internal_96 = local_option_at_CellularAutomaton_internal_98
   lw $t0, -396($fp)
   sw $t0, -388($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_99 --> -400($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_57
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -400($fp)
   # ARG local_option_at_CellularAutomaton_internal_99
   # LOCAL local_option_at_CellularAutomaton_internal_99 --> -400($fp)
   lw $t0, -400($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_option_at_CellularAutomaton_internal_96 --> -388($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_97 --> -392($fp)
   # local_option_at_CellularAutomaton_internal_97 = VCALL local_option_at_CellularAutomaton_internal_96 out_string
   # Save new self pointer in $s1
   lw $s1, -388($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -392($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -420($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_279
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_279
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_279
   # IF_ZERO local_option_at_CellularAutomaton_internal_104 GOTO label_FALSE_279
   # IF_ZERO local_option_at_CellularAutomaton_internal_104 GOTO label_FALSE_279
   lw $t0, -420($fp)
   beq $t0, 0, label_FALSE_279
   # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -416($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_COMPARE_STRING_282
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_COMPARE_STRING_282
   lw $t0, -416($fp)
   beq $t0, 0, label_COMPARE_STRING_282
   # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -416($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_COMPARE_BY_VALUE_283
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_COMPARE_BY_VALUE_283
   lw $t0, -416($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_283
   # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -416($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_COMPARE_BY_VALUE_283
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_COMPARE_BY_VALUE_283
   lw $t0, -416($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_283
   # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -420($fp)
   sub $a0, $a0, $a1
   sw $a0, -416($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_TRUE_280
   # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_TRUE_280
   lw $t0, -416($fp)
   beq $t0, 0, label_TRUE_280
   # GOTO label_FALSE_279
   j label_FALSE_279
   label_COMPARE_BY_VALUE_283: 
      # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
      lw $a0, -4($fp)
      lw $a1, -420($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -416($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_TRUE_280
      # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_TRUE_280
      lw $t0, -416($fp)
      beq $t0, 0, label_TRUE_280
      # GOTO label_FALSE_279
      j label_FALSE_279
      label_COMPARE_STRING_282: 
         # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -420($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -416($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_CONTINUE_284
         # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_CONTINUE_284
         lw $t0, -416($fp)
         beq $t0, 0, label_CONTINUE_284
         # GOTO label_FALSE_279
         j label_FALSE_279
         label_CONTINUE_284: 
            # LOCAL local_option_at_CellularAutomaton_internal_103 --> -416($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_104 --> -420($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -420($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_285: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_286
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_285
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_286: 
                  # Store result
                  sw $a2, -416($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_TRUE_280
                  # IF_ZERO local_option_at_CellularAutomaton_internal_103 GOTO label_TRUE_280
                  lw $t0, -416($fp)
                  beq $t0, 0, label_TRUE_280
                  label_FALSE_279: 
                     # LOCAL local_option_at_CellularAutomaton_internal_102 --> -412($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -412($fp)
                     # GOTO label_END_281
j label_END_281
label_TRUE_280: 
   # LOCAL local_option_at_CellularAutomaton_internal_102 --> -412($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -412($fp)
   label_END_281: 
# LOCAL local_option_at_CellularAutomaton_internal_100 --> -404($fp)
# LOCAL local_option_at_CellularAutomaton_internal_102 --> -412($fp)
# Obtain value from -412($fp)
lw $v0, -412($fp)
lw $v0, 12($v0)
sw $v0, -404($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_100 GOTO label_FALSEIF_277
# IF_ZERO local_option_at_CellularAutomaton_internal_100 GOTO label_FALSEIF_277
lw $t0, -404($fp)
beq $t0, 0, label_FALSEIF_277
# LOCAL local_option_at_CellularAutomaton_internal_105 --> -424($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_58
sw $t0, 12($v0)
li $t0, 20
sw $t0, 16($v0)
sw $v0, -424($fp)
# LOCAL local_option_at_CellularAutomaton_internal_101 --> -408($fp)
# LOCAL local_option_at_CellularAutomaton_internal_105 --> -424($fp)
# local_option_at_CellularAutomaton_internal_101 = local_option_at_CellularAutomaton_internal_105
lw $t0, -424($fp)
sw $t0, -408($fp)
# GOTO label_ENDIF_278
j label_ENDIF_278
label_FALSEIF_277: 
   # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 2
   sw $t0, 12($v0)
   sw $v0, -444($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_289
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_289
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_289
   # IF_ZERO local_option_at_CellularAutomaton_internal_110 GOTO label_FALSE_289
   # IF_ZERO local_option_at_CellularAutomaton_internal_110 GOTO label_FALSE_289
   lw $t0, -444($fp)
   beq $t0, 0, label_FALSE_289
   # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -440($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_COMPARE_STRING_292
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_COMPARE_STRING_292
   lw $t0, -440($fp)
   beq $t0, 0, label_COMPARE_STRING_292
   # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -440($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_COMPARE_BY_VALUE_293
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_COMPARE_BY_VALUE_293
   lw $t0, -440($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_293
   # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -440($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_COMPARE_BY_VALUE_293
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_COMPARE_BY_VALUE_293
   lw $t0, -440($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_293
   # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -444($fp)
   sub $a0, $a0, $a1
   sw $a0, -440($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_TRUE_290
   # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_TRUE_290
   lw $t0, -440($fp)
   beq $t0, 0, label_TRUE_290
   # GOTO label_FALSE_289
   j label_FALSE_289
   label_COMPARE_BY_VALUE_293: 
      # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
      lw $a0, -4($fp)
      lw $a1, -444($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -440($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_TRUE_290
      # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_TRUE_290
      lw $t0, -440($fp)
      beq $t0, 0, label_TRUE_290
      # GOTO label_FALSE_289
      j label_FALSE_289
      label_COMPARE_STRING_292: 
         # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -444($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -440($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_CONTINUE_294
         # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_CONTINUE_294
         lw $t0, -440($fp)
         beq $t0, 0, label_CONTINUE_294
         # GOTO label_FALSE_289
         j label_FALSE_289
         label_CONTINUE_294: 
            # LOCAL local_option_at_CellularAutomaton_internal_109 --> -440($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_110 --> -444($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -444($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_295: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_296
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_295
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_296: 
                  # Store result
                  sw $a2, -440($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_TRUE_290
                  # IF_ZERO local_option_at_CellularAutomaton_internal_109 GOTO label_TRUE_290
                  lw $t0, -440($fp)
                  beq $t0, 0, label_TRUE_290
                  label_FALSE_289: 
                     # LOCAL local_option_at_CellularAutomaton_internal_108 --> -436($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -436($fp)
                     # GOTO label_END_291
j label_END_291
label_TRUE_290: 
   # LOCAL local_option_at_CellularAutomaton_internal_108 --> -436($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -436($fp)
   label_END_291: 
# LOCAL local_option_at_CellularAutomaton_internal_106 --> -428($fp)
# LOCAL local_option_at_CellularAutomaton_internal_108 --> -436($fp)
# Obtain value from -436($fp)
lw $v0, -436($fp)
lw $v0, 12($v0)
sw $v0, -428($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_106 GOTO label_FALSEIF_287
# IF_ZERO local_option_at_CellularAutomaton_internal_106 GOTO label_FALSEIF_287
lw $t0, -428($fp)
beq $t0, 0, label_FALSEIF_287
# LOCAL local_option_at_CellularAutomaton_internal_111 --> -448($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_59
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -448($fp)
# LOCAL local_option_at_CellularAutomaton_internal_107 --> -432($fp)
# LOCAL local_option_at_CellularAutomaton_internal_111 --> -448($fp)
# local_option_at_CellularAutomaton_internal_107 = local_option_at_CellularAutomaton_internal_111
lw $t0, -448($fp)
sw $t0, -432($fp)
# GOTO label_ENDIF_288
j label_ENDIF_288
label_FALSEIF_287: 
   # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 3
   sw $t0, 12($v0)
   sw $v0, -468($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_299
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_299
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_299
   # IF_ZERO local_option_at_CellularAutomaton_internal_116 GOTO label_FALSE_299
   # IF_ZERO local_option_at_CellularAutomaton_internal_116 GOTO label_FALSE_299
   lw $t0, -468($fp)
   beq $t0, 0, label_FALSE_299
   # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -464($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_COMPARE_STRING_302
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_COMPARE_STRING_302
   lw $t0, -464($fp)
   beq $t0, 0, label_COMPARE_STRING_302
   # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -464($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_COMPARE_BY_VALUE_303
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_COMPARE_BY_VALUE_303
   lw $t0, -464($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_303
   # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -464($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_COMPARE_BY_VALUE_303
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_COMPARE_BY_VALUE_303
   lw $t0, -464($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_303
   # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -468($fp)
   sub $a0, $a0, $a1
   sw $a0, -464($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_TRUE_300
   # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_TRUE_300
   lw $t0, -464($fp)
   beq $t0, 0, label_TRUE_300
   # GOTO label_FALSE_299
   j label_FALSE_299
   label_COMPARE_BY_VALUE_303: 
      # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
      lw $a0, -4($fp)
      lw $a1, -468($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -464($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_TRUE_300
      # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_TRUE_300
      lw $t0, -464($fp)
      beq $t0, 0, label_TRUE_300
      # GOTO label_FALSE_299
      j label_FALSE_299
      label_COMPARE_STRING_302: 
         # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -468($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -464($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_CONTINUE_304
         # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_CONTINUE_304
         lw $t0, -464($fp)
         beq $t0, 0, label_CONTINUE_304
         # GOTO label_FALSE_299
         j label_FALSE_299
         label_CONTINUE_304: 
            # LOCAL local_option_at_CellularAutomaton_internal_115 --> -464($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_116 --> -468($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -468($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_305: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_306
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_305
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_306: 
                  # Store result
                  sw $a2, -464($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_TRUE_300
                  # IF_ZERO local_option_at_CellularAutomaton_internal_115 GOTO label_TRUE_300
                  lw $t0, -464($fp)
                  beq $t0, 0, label_TRUE_300
                  label_FALSE_299: 
                     # LOCAL local_option_at_CellularAutomaton_internal_114 --> -460($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -460($fp)
                     # GOTO label_END_301
j label_END_301
label_TRUE_300: 
   # LOCAL local_option_at_CellularAutomaton_internal_114 --> -460($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -460($fp)
   label_END_301: 
# LOCAL local_option_at_CellularAutomaton_internal_112 --> -452($fp)
# LOCAL local_option_at_CellularAutomaton_internal_114 --> -460($fp)
# Obtain value from -460($fp)
lw $v0, -460($fp)
lw $v0, 12($v0)
sw $v0, -452($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_112 GOTO label_FALSEIF_297
# IF_ZERO local_option_at_CellularAutomaton_internal_112 GOTO label_FALSEIF_297
lw $t0, -452($fp)
beq $t0, 0, label_FALSEIF_297
# LOCAL local_option_at_CellularAutomaton_internal_117 --> -472($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_60
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -472($fp)
# LOCAL local_option_at_CellularAutomaton_internal_113 --> -456($fp)
# LOCAL local_option_at_CellularAutomaton_internal_117 --> -472($fp)
# local_option_at_CellularAutomaton_internal_113 = local_option_at_CellularAutomaton_internal_117
lw $t0, -472($fp)
sw $t0, -456($fp)
# GOTO label_ENDIF_298
j label_ENDIF_298
label_FALSEIF_297: 
   # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 4
   sw $t0, 12($v0)
   sw $v0, -492($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_309
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_309
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_309
   # IF_ZERO local_option_at_CellularAutomaton_internal_122 GOTO label_FALSE_309
   # IF_ZERO local_option_at_CellularAutomaton_internal_122 GOTO label_FALSE_309
   lw $t0, -492($fp)
   beq $t0, 0, label_FALSE_309
   # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -488($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_COMPARE_STRING_312
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_COMPARE_STRING_312
   lw $t0, -488($fp)
   beq $t0, 0, label_COMPARE_STRING_312
   # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -488($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_COMPARE_BY_VALUE_313
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_COMPARE_BY_VALUE_313
   lw $t0, -488($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_313
   # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -488($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_COMPARE_BY_VALUE_313
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_COMPARE_BY_VALUE_313
   lw $t0, -488($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_313
   # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -492($fp)
   sub $a0, $a0, $a1
   sw $a0, -488($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_TRUE_310
   # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_TRUE_310
   lw $t0, -488($fp)
   beq $t0, 0, label_TRUE_310
   # GOTO label_FALSE_309
   j label_FALSE_309
   label_COMPARE_BY_VALUE_313: 
      # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
      lw $a0, -4($fp)
      lw $a1, -492($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -488($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_TRUE_310
      # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_TRUE_310
      lw $t0, -488($fp)
      beq $t0, 0, label_TRUE_310
      # GOTO label_FALSE_309
      j label_FALSE_309
      label_COMPARE_STRING_312: 
         # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -492($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -488($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_CONTINUE_314
         # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_CONTINUE_314
         lw $t0, -488($fp)
         beq $t0, 0, label_CONTINUE_314
         # GOTO label_FALSE_309
         j label_FALSE_309
         label_CONTINUE_314: 
            # LOCAL local_option_at_CellularAutomaton_internal_121 --> -488($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_122 --> -492($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -492($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_315: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_316
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_315
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_316: 
                  # Store result
                  sw $a2, -488($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_TRUE_310
                  # IF_ZERO local_option_at_CellularAutomaton_internal_121 GOTO label_TRUE_310
                  lw $t0, -488($fp)
                  beq $t0, 0, label_TRUE_310
                  label_FALSE_309: 
                     # LOCAL local_option_at_CellularAutomaton_internal_120 --> -484($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -484($fp)
                     # GOTO label_END_311
j label_END_311
label_TRUE_310: 
   # LOCAL local_option_at_CellularAutomaton_internal_120 --> -484($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -484($fp)
   label_END_311: 
# LOCAL local_option_at_CellularAutomaton_internal_118 --> -476($fp)
# LOCAL local_option_at_CellularAutomaton_internal_120 --> -484($fp)
# Obtain value from -484($fp)
lw $v0, -484($fp)
lw $v0, 12($v0)
sw $v0, -476($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_118 GOTO label_FALSEIF_307
# IF_ZERO local_option_at_CellularAutomaton_internal_118 GOTO label_FALSEIF_307
lw $t0, -476($fp)
beq $t0, 0, label_FALSEIF_307
# LOCAL local_option_at_CellularAutomaton_internal_123 --> -496($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_61
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -496($fp)
# LOCAL local_option_at_CellularAutomaton_internal_119 --> -480($fp)
# LOCAL local_option_at_CellularAutomaton_internal_123 --> -496($fp)
# local_option_at_CellularAutomaton_internal_119 = local_option_at_CellularAutomaton_internal_123
lw $t0, -496($fp)
sw $t0, -480($fp)
# GOTO label_ENDIF_308
j label_ENDIF_308
label_FALSEIF_307: 
   # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 5
   sw $t0, 12($v0)
   sw $v0, -516($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_319
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_319
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_319
   # IF_ZERO local_option_at_CellularAutomaton_internal_128 GOTO label_FALSE_319
   # IF_ZERO local_option_at_CellularAutomaton_internal_128 GOTO label_FALSE_319
   lw $t0, -516($fp)
   beq $t0, 0, label_FALSE_319
   # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -512($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_COMPARE_STRING_322
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_COMPARE_STRING_322
   lw $t0, -512($fp)
   beq $t0, 0, label_COMPARE_STRING_322
   # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -512($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_COMPARE_BY_VALUE_323
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_COMPARE_BY_VALUE_323
   lw $t0, -512($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_323
   # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -512($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_COMPARE_BY_VALUE_323
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_COMPARE_BY_VALUE_323
   lw $t0, -512($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_323
   # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -516($fp)
   sub $a0, $a0, $a1
   sw $a0, -512($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_TRUE_320
   # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_TRUE_320
   lw $t0, -512($fp)
   beq $t0, 0, label_TRUE_320
   # GOTO label_FALSE_319
   j label_FALSE_319
   label_COMPARE_BY_VALUE_323: 
      # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
      lw $a0, -4($fp)
      lw $a1, -516($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -512($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_TRUE_320
      # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_TRUE_320
      lw $t0, -512($fp)
      beq $t0, 0, label_TRUE_320
      # GOTO label_FALSE_319
      j label_FALSE_319
      label_COMPARE_STRING_322: 
         # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -516($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -512($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_CONTINUE_324
         # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_CONTINUE_324
         lw $t0, -512($fp)
         beq $t0, 0, label_CONTINUE_324
         # GOTO label_FALSE_319
         j label_FALSE_319
         label_CONTINUE_324: 
            # LOCAL local_option_at_CellularAutomaton_internal_127 --> -512($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_128 --> -516($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -516($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_325: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_326
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_325
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_326: 
                  # Store result
                  sw $a2, -512($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_TRUE_320
                  # IF_ZERO local_option_at_CellularAutomaton_internal_127 GOTO label_TRUE_320
                  lw $t0, -512($fp)
                  beq $t0, 0, label_TRUE_320
                  label_FALSE_319: 
                     # LOCAL local_option_at_CellularAutomaton_internal_126 --> -508($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -508($fp)
                     # GOTO label_END_321
j label_END_321
label_TRUE_320: 
   # LOCAL local_option_at_CellularAutomaton_internal_126 --> -508($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -508($fp)
   label_END_321: 
# LOCAL local_option_at_CellularAutomaton_internal_124 --> -500($fp)
# LOCAL local_option_at_CellularAutomaton_internal_126 --> -508($fp)
# Obtain value from -508($fp)
lw $v0, -508($fp)
lw $v0, 12($v0)
sw $v0, -500($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_124 GOTO label_FALSEIF_317
# IF_ZERO local_option_at_CellularAutomaton_internal_124 GOTO label_FALSEIF_317
lw $t0, -500($fp)
beq $t0, 0, label_FALSEIF_317
# LOCAL local_option_at_CellularAutomaton_internal_129 --> -520($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_62
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -520($fp)
# LOCAL local_option_at_CellularAutomaton_internal_125 --> -504($fp)
# LOCAL local_option_at_CellularAutomaton_internal_129 --> -520($fp)
# local_option_at_CellularAutomaton_internal_125 = local_option_at_CellularAutomaton_internal_129
lw $t0, -520($fp)
sw $t0, -504($fp)
# GOTO label_ENDIF_318
j label_ENDIF_318
label_FALSEIF_317: 
   # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 6
   sw $t0, 12($v0)
   sw $v0, -540($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_329
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_329
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_329
   # IF_ZERO local_option_at_CellularAutomaton_internal_134 GOTO label_FALSE_329
   # IF_ZERO local_option_at_CellularAutomaton_internal_134 GOTO label_FALSE_329
   lw $t0, -540($fp)
   beq $t0, 0, label_FALSE_329
   # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -536($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_COMPARE_STRING_332
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_COMPARE_STRING_332
   lw $t0, -536($fp)
   beq $t0, 0, label_COMPARE_STRING_332
   # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -536($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_COMPARE_BY_VALUE_333
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_COMPARE_BY_VALUE_333
   lw $t0, -536($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_333
   # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -536($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_COMPARE_BY_VALUE_333
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_COMPARE_BY_VALUE_333
   lw $t0, -536($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_333
   # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -540($fp)
   sub $a0, $a0, $a1
   sw $a0, -536($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_TRUE_330
   # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_TRUE_330
   lw $t0, -536($fp)
   beq $t0, 0, label_TRUE_330
   # GOTO label_FALSE_329
   j label_FALSE_329
   label_COMPARE_BY_VALUE_333: 
      # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
      lw $a0, -4($fp)
      lw $a1, -540($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -536($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_TRUE_330
      # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_TRUE_330
      lw $t0, -536($fp)
      beq $t0, 0, label_TRUE_330
      # GOTO label_FALSE_329
      j label_FALSE_329
      label_COMPARE_STRING_332: 
         # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -540($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -536($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_CONTINUE_334
         # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_CONTINUE_334
         lw $t0, -536($fp)
         beq $t0, 0, label_CONTINUE_334
         # GOTO label_FALSE_329
         j label_FALSE_329
         label_CONTINUE_334: 
            # LOCAL local_option_at_CellularAutomaton_internal_133 --> -536($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_134 --> -540($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -540($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_335: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_336
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_335
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_336: 
                  # Store result
                  sw $a2, -536($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_TRUE_330
                  # IF_ZERO local_option_at_CellularAutomaton_internal_133 GOTO label_TRUE_330
                  lw $t0, -536($fp)
                  beq $t0, 0, label_TRUE_330
                  label_FALSE_329: 
                     # LOCAL local_option_at_CellularAutomaton_internal_132 --> -532($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -532($fp)
                     # GOTO label_END_331
j label_END_331
label_TRUE_330: 
   # LOCAL local_option_at_CellularAutomaton_internal_132 --> -532($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -532($fp)
   label_END_331: 
# LOCAL local_option_at_CellularAutomaton_internal_130 --> -524($fp)
# LOCAL local_option_at_CellularAutomaton_internal_132 --> -532($fp)
# Obtain value from -532($fp)
lw $v0, -532($fp)
lw $v0, 12($v0)
sw $v0, -524($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_130 GOTO label_FALSEIF_327
# IF_ZERO local_option_at_CellularAutomaton_internal_130 GOTO label_FALSEIF_327
lw $t0, -524($fp)
beq $t0, 0, label_FALSEIF_327
# LOCAL local_option_at_CellularAutomaton_internal_135 --> -544($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_63
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -544($fp)
# LOCAL local_option_at_CellularAutomaton_internal_131 --> -528($fp)
# LOCAL local_option_at_CellularAutomaton_internal_135 --> -544($fp)
# local_option_at_CellularAutomaton_internal_131 = local_option_at_CellularAutomaton_internal_135
lw $t0, -544($fp)
sw $t0, -528($fp)
# GOTO label_ENDIF_328
j label_ENDIF_328
label_FALSEIF_327: 
   # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 7
   sw $t0, 12($v0)
   sw $v0, -564($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_339
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_339
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_339
   # IF_ZERO local_option_at_CellularAutomaton_internal_140 GOTO label_FALSE_339
   # IF_ZERO local_option_at_CellularAutomaton_internal_140 GOTO label_FALSE_339
   lw $t0, -564($fp)
   beq $t0, 0, label_FALSE_339
   # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -560($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_COMPARE_STRING_342
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_COMPARE_STRING_342
   lw $t0, -560($fp)
   beq $t0, 0, label_COMPARE_STRING_342
   # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -560($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_COMPARE_BY_VALUE_343
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_COMPARE_BY_VALUE_343
   lw $t0, -560($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_343
   # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -560($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_COMPARE_BY_VALUE_343
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_COMPARE_BY_VALUE_343
   lw $t0, -560($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_343
   # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -564($fp)
   sub $a0, $a0, $a1
   sw $a0, -560($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_TRUE_340
   # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_TRUE_340
   lw $t0, -560($fp)
   beq $t0, 0, label_TRUE_340
   # GOTO label_FALSE_339
   j label_FALSE_339
   label_COMPARE_BY_VALUE_343: 
      # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
      lw $a0, -4($fp)
      lw $a1, -564($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -560($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_TRUE_340
      # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_TRUE_340
      lw $t0, -560($fp)
      beq $t0, 0, label_TRUE_340
      # GOTO label_FALSE_339
      j label_FALSE_339
      label_COMPARE_STRING_342: 
         # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -564($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -560($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_CONTINUE_344
         # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_CONTINUE_344
         lw $t0, -560($fp)
         beq $t0, 0, label_CONTINUE_344
         # GOTO label_FALSE_339
         j label_FALSE_339
         label_CONTINUE_344: 
            # LOCAL local_option_at_CellularAutomaton_internal_139 --> -560($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_140 --> -564($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -564($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_345: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_346
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_345
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_346: 
                  # Store result
                  sw $a2, -560($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_TRUE_340
                  # IF_ZERO local_option_at_CellularAutomaton_internal_139 GOTO label_TRUE_340
                  lw $t0, -560($fp)
                  beq $t0, 0, label_TRUE_340
                  label_FALSE_339: 
                     # LOCAL local_option_at_CellularAutomaton_internal_138 --> -556($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -556($fp)
                     # GOTO label_END_341
j label_END_341
label_TRUE_340: 
   # LOCAL local_option_at_CellularAutomaton_internal_138 --> -556($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -556($fp)
   label_END_341: 
# LOCAL local_option_at_CellularAutomaton_internal_136 --> -548($fp)
# LOCAL local_option_at_CellularAutomaton_internal_138 --> -556($fp)
# Obtain value from -556($fp)
lw $v0, -556($fp)
lw $v0, 12($v0)
sw $v0, -548($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_136 GOTO label_FALSEIF_337
# IF_ZERO local_option_at_CellularAutomaton_internal_136 GOTO label_FALSEIF_337
lw $t0, -548($fp)
beq $t0, 0, label_FALSEIF_337
# LOCAL local_option_at_CellularAutomaton_internal_141 --> -568($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_64
sw $t0, 12($v0)
li $t0, 20
sw $t0, 16($v0)
sw $v0, -568($fp)
# LOCAL local_option_at_CellularAutomaton_internal_137 --> -552($fp)
# LOCAL local_option_at_CellularAutomaton_internal_141 --> -568($fp)
# local_option_at_CellularAutomaton_internal_137 = local_option_at_CellularAutomaton_internal_141
lw $t0, -568($fp)
sw $t0, -552($fp)
# GOTO label_ENDIF_338
j label_ENDIF_338
label_FALSEIF_337: 
   # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 8
   sw $t0, 12($v0)
   sw $v0, -588($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_349
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_349
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_349
   # IF_ZERO local_option_at_CellularAutomaton_internal_146 GOTO label_FALSE_349
   # IF_ZERO local_option_at_CellularAutomaton_internal_146 GOTO label_FALSE_349
   lw $t0, -588($fp)
   beq $t0, 0, label_FALSE_349
   # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -584($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_COMPARE_STRING_352
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_COMPARE_STRING_352
   lw $t0, -584($fp)
   beq $t0, 0, label_COMPARE_STRING_352
   # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -584($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_COMPARE_BY_VALUE_353
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_COMPARE_BY_VALUE_353
   lw $t0, -584($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_353
   # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -584($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_COMPARE_BY_VALUE_353
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_COMPARE_BY_VALUE_353
   lw $t0, -584($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_353
   # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -588($fp)
   sub $a0, $a0, $a1
   sw $a0, -584($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_TRUE_350
   # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_TRUE_350
   lw $t0, -584($fp)
   beq $t0, 0, label_TRUE_350
   # GOTO label_FALSE_349
   j label_FALSE_349
   label_COMPARE_BY_VALUE_353: 
      # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
      lw $a0, -4($fp)
      lw $a1, -588($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -584($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_TRUE_350
      # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_TRUE_350
      lw $t0, -584($fp)
      beq $t0, 0, label_TRUE_350
      # GOTO label_FALSE_349
      j label_FALSE_349
      label_COMPARE_STRING_352: 
         # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -588($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -584($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_CONTINUE_354
         # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_CONTINUE_354
         lw $t0, -584($fp)
         beq $t0, 0, label_CONTINUE_354
         # GOTO label_FALSE_349
         j label_FALSE_349
         label_CONTINUE_354: 
            # LOCAL local_option_at_CellularAutomaton_internal_145 --> -584($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_146 --> -588($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -588($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_355: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_356
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_355
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_356: 
                  # Store result
                  sw $a2, -584($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_TRUE_350
                  # IF_ZERO local_option_at_CellularAutomaton_internal_145 GOTO label_TRUE_350
                  lw $t0, -584($fp)
                  beq $t0, 0, label_TRUE_350
                  label_FALSE_349: 
                     # LOCAL local_option_at_CellularAutomaton_internal_144 --> -580($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -580($fp)
                     # GOTO label_END_351
j label_END_351
label_TRUE_350: 
   # LOCAL local_option_at_CellularAutomaton_internal_144 --> -580($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -580($fp)
   label_END_351: 
# LOCAL local_option_at_CellularAutomaton_internal_142 --> -572($fp)
# LOCAL local_option_at_CellularAutomaton_internal_144 --> -580($fp)
# Obtain value from -580($fp)
lw $v0, -580($fp)
lw $v0, 12($v0)
sw $v0, -572($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_142 GOTO label_FALSEIF_347
# IF_ZERO local_option_at_CellularAutomaton_internal_142 GOTO label_FALSEIF_347
lw $t0, -572($fp)
beq $t0, 0, label_FALSEIF_347
# LOCAL local_option_at_CellularAutomaton_internal_147 --> -592($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_65
sw $t0, 12($v0)
li $t0, 20
sw $t0, 16($v0)
sw $v0, -592($fp)
# LOCAL local_option_at_CellularAutomaton_internal_143 --> -576($fp)
# LOCAL local_option_at_CellularAutomaton_internal_147 --> -592($fp)
# local_option_at_CellularAutomaton_internal_143 = local_option_at_CellularAutomaton_internal_147
lw $t0, -592($fp)
sw $t0, -576($fp)
# GOTO label_ENDIF_348
j label_ENDIF_348
label_FALSEIF_347: 
   # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 9
   sw $t0, 12($v0)
   sw $v0, -612($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_359
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_359
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_359
   # IF_ZERO local_option_at_CellularAutomaton_internal_152 GOTO label_FALSE_359
   # IF_ZERO local_option_at_CellularAutomaton_internal_152 GOTO label_FALSE_359
   lw $t0, -612($fp)
   beq $t0, 0, label_FALSE_359
   # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -608($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_COMPARE_STRING_362
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_COMPARE_STRING_362
   lw $t0, -608($fp)
   beq $t0, 0, label_COMPARE_STRING_362
   # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -608($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_COMPARE_BY_VALUE_363
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_COMPARE_BY_VALUE_363
   lw $t0, -608($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_363
   # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -608($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_COMPARE_BY_VALUE_363
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_COMPARE_BY_VALUE_363
   lw $t0, -608($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_363
   # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -612($fp)
   sub $a0, $a0, $a1
   sw $a0, -608($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_TRUE_360
   # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_TRUE_360
   lw $t0, -608($fp)
   beq $t0, 0, label_TRUE_360
   # GOTO label_FALSE_359
   j label_FALSE_359
   label_COMPARE_BY_VALUE_363: 
      # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
      lw $a0, -4($fp)
      lw $a1, -612($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -608($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_TRUE_360
      # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_TRUE_360
      lw $t0, -608($fp)
      beq $t0, 0, label_TRUE_360
      # GOTO label_FALSE_359
      j label_FALSE_359
      label_COMPARE_STRING_362: 
         # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -612($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -608($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_CONTINUE_364
         # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_CONTINUE_364
         lw $t0, -608($fp)
         beq $t0, 0, label_CONTINUE_364
         # GOTO label_FALSE_359
         j label_FALSE_359
         label_CONTINUE_364: 
            # LOCAL local_option_at_CellularAutomaton_internal_151 --> -608($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_152 --> -612($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -612($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_365: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_366
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_365
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_366: 
                  # Store result
                  sw $a2, -608($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_TRUE_360
                  # IF_ZERO local_option_at_CellularAutomaton_internal_151 GOTO label_TRUE_360
                  lw $t0, -608($fp)
                  beq $t0, 0, label_TRUE_360
                  label_FALSE_359: 
                     # LOCAL local_option_at_CellularAutomaton_internal_150 --> -604($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -604($fp)
                     # GOTO label_END_361
j label_END_361
label_TRUE_360: 
   # LOCAL local_option_at_CellularAutomaton_internal_150 --> -604($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -604($fp)
   label_END_361: 
# LOCAL local_option_at_CellularAutomaton_internal_148 --> -596($fp)
# LOCAL local_option_at_CellularAutomaton_internal_150 --> -604($fp)
# Obtain value from -604($fp)
lw $v0, -604($fp)
lw $v0, 12($v0)
sw $v0, -596($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_148 GOTO label_FALSEIF_357
# IF_ZERO local_option_at_CellularAutomaton_internal_148 GOTO label_FALSEIF_357
lw $t0, -596($fp)
beq $t0, 0, label_FALSEIF_357
# LOCAL local_option_at_CellularAutomaton_internal_153 --> -616($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_66
sw $t0, 12($v0)
li $t0, 15
sw $t0, 16($v0)
sw $v0, -616($fp)
# LOCAL local_option_at_CellularAutomaton_internal_149 --> -600($fp)
# LOCAL local_option_at_CellularAutomaton_internal_153 --> -616($fp)
# local_option_at_CellularAutomaton_internal_149 = local_option_at_CellularAutomaton_internal_153
lw $t0, -616($fp)
sw $t0, -600($fp)
# GOTO label_ENDIF_358
j label_ENDIF_358
label_FALSEIF_357: 
   # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 10
   sw $t0, 12($v0)
   sw $v0, -636($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_369
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_369
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_369
   # IF_ZERO local_option_at_CellularAutomaton_internal_158 GOTO label_FALSE_369
   # IF_ZERO local_option_at_CellularAutomaton_internal_158 GOTO label_FALSE_369
   lw $t0, -636($fp)
   beq $t0, 0, label_FALSE_369
   # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -632($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_COMPARE_STRING_372
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_COMPARE_STRING_372
   lw $t0, -632($fp)
   beq $t0, 0, label_COMPARE_STRING_372
   # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -632($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_COMPARE_BY_VALUE_373
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_COMPARE_BY_VALUE_373
   lw $t0, -632($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_373
   # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -632($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_COMPARE_BY_VALUE_373
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_COMPARE_BY_VALUE_373
   lw $t0, -632($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_373
   # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -636($fp)
   sub $a0, $a0, $a1
   sw $a0, -632($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_TRUE_370
   # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_TRUE_370
   lw $t0, -632($fp)
   beq $t0, 0, label_TRUE_370
   # GOTO label_FALSE_369
   j label_FALSE_369
   label_COMPARE_BY_VALUE_373: 
      # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
      lw $a0, -4($fp)
      lw $a1, -636($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -632($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_TRUE_370
      # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_TRUE_370
      lw $t0, -632($fp)
      beq $t0, 0, label_TRUE_370
      # GOTO label_FALSE_369
      j label_FALSE_369
      label_COMPARE_STRING_372: 
         # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -636($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -632($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_CONTINUE_374
         # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_CONTINUE_374
         lw $t0, -632($fp)
         beq $t0, 0, label_CONTINUE_374
         # GOTO label_FALSE_369
         j label_FALSE_369
         label_CONTINUE_374: 
            # LOCAL local_option_at_CellularAutomaton_internal_157 --> -632($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_158 --> -636($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -636($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_375: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_376
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_375
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_376: 
                  # Store result
                  sw $a2, -632($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_TRUE_370
                  # IF_ZERO local_option_at_CellularAutomaton_internal_157 GOTO label_TRUE_370
                  lw $t0, -632($fp)
                  beq $t0, 0, label_TRUE_370
                  label_FALSE_369: 
                     # LOCAL local_option_at_CellularAutomaton_internal_156 --> -628($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -628($fp)
                     # GOTO label_END_371
j label_END_371
label_TRUE_370: 
   # LOCAL local_option_at_CellularAutomaton_internal_156 --> -628($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -628($fp)
   label_END_371: 
# LOCAL local_option_at_CellularAutomaton_internal_154 --> -620($fp)
# LOCAL local_option_at_CellularAutomaton_internal_156 --> -628($fp)
# Obtain value from -628($fp)
lw $v0, -628($fp)
lw $v0, 12($v0)
sw $v0, -620($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_154 GOTO label_FALSEIF_367
# IF_ZERO local_option_at_CellularAutomaton_internal_154 GOTO label_FALSEIF_367
lw $t0, -620($fp)
beq $t0, 0, label_FALSEIF_367
# LOCAL local_option_at_CellularAutomaton_internal_159 --> -640($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_67
sw $t0, 12($v0)
li $t0, 15
sw $t0, 16($v0)
sw $v0, -640($fp)
# LOCAL local_option_at_CellularAutomaton_internal_155 --> -624($fp)
# LOCAL local_option_at_CellularAutomaton_internal_159 --> -640($fp)
# local_option_at_CellularAutomaton_internal_155 = local_option_at_CellularAutomaton_internal_159
lw $t0, -640($fp)
sw $t0, -624($fp)
# GOTO label_ENDIF_368
j label_ENDIF_368
label_FALSEIF_367: 
   # LOCAL local_option_at_CellularAutomaton_internal_164 --> -660($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 11
   sw $t0, 12($v0)
   sw $v0, -660($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_379
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_379
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_379
   # IF_ZERO local_option_at_CellularAutomaton_internal_164 GOTO label_FALSE_379
   # IF_ZERO local_option_at_CellularAutomaton_internal_164 GOTO label_FALSE_379
   lw $t0, -660($fp)
   beq $t0, 0, label_FALSE_379
   # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -656($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_COMPARE_STRING_382
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_COMPARE_STRING_382
   lw $t0, -656($fp)
   beq $t0, 0, label_COMPARE_STRING_382
   # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -656($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_COMPARE_BY_VALUE_383
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_COMPARE_BY_VALUE_383
   lw $t0, -656($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_383
   # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -656($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_COMPARE_BY_VALUE_383
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_COMPARE_BY_VALUE_383
   lw $t0, -656($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_383
   # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_164 --> -660($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -660($fp)
   sub $a0, $a0, $a1
   sw $a0, -656($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_TRUE_380
   # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_TRUE_380
   lw $t0, -656($fp)
   beq $t0, 0, label_TRUE_380
   # GOTO label_FALSE_379
   j label_FALSE_379
   label_COMPARE_BY_VALUE_383: 
      # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_164 --> -660($fp)
      lw $a0, -4($fp)
      lw $a1, -660($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -656($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_TRUE_380
      # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_TRUE_380
      lw $t0, -656($fp)
      beq $t0, 0, label_TRUE_380
      # GOTO label_FALSE_379
      j label_FALSE_379
      label_COMPARE_STRING_382: 
         # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_164 --> -660($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -660($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -656($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_CONTINUE_384
         # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_CONTINUE_384
         lw $t0, -656($fp)
         beq $t0, 0, label_CONTINUE_384
         # GOTO label_FALSE_379
         j label_FALSE_379
         label_CONTINUE_384: 
            # LOCAL local_option_at_CellularAutomaton_internal_163 --> -656($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_164 --> -660($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -660($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_385: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_386
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_385
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_386: 
                  # Store result
                  sw $a2, -656($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_TRUE_380
                  # IF_ZERO local_option_at_CellularAutomaton_internal_163 GOTO label_TRUE_380
                  lw $t0, -656($fp)
                  beq $t0, 0, label_TRUE_380
                  label_FALSE_379: 
                     # LOCAL local_option_at_CellularAutomaton_internal_162 --> -652($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -652($fp)
                     # GOTO label_END_381
j label_END_381
label_TRUE_380: 
   # LOCAL local_option_at_CellularAutomaton_internal_162 --> -652($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -652($fp)
   label_END_381: 
# LOCAL local_option_at_CellularAutomaton_internal_160 --> -644($fp)
# LOCAL local_option_at_CellularAutomaton_internal_162 --> -652($fp)
# Obtain value from -652($fp)
lw $v0, -652($fp)
lw $v0, 12($v0)
sw $v0, -644($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_160 GOTO label_FALSEIF_377
# IF_ZERO local_option_at_CellularAutomaton_internal_160 GOTO label_FALSEIF_377
lw $t0, -644($fp)
beq $t0, 0, label_FALSEIF_377
# LOCAL local_option_at_CellularAutomaton_internal_165 --> -664($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_68
sw $t0, 12($v0)
li $t0, 15
sw $t0, 16($v0)
sw $v0, -664($fp)
# LOCAL local_option_at_CellularAutomaton_internal_161 --> -648($fp)
# LOCAL local_option_at_CellularAutomaton_internal_165 --> -664($fp)
# local_option_at_CellularAutomaton_internal_161 = local_option_at_CellularAutomaton_internal_165
lw $t0, -664($fp)
sw $t0, -648($fp)
# GOTO label_ENDIF_378
j label_ENDIF_378
label_FALSEIF_377: 
   # LOCAL local_option_at_CellularAutomaton_internal_170 --> -684($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 12
   sw $t0, 12($v0)
   sw $v0, -684($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_389
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_389
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_389
   # IF_ZERO local_option_at_CellularAutomaton_internal_170 GOTO label_FALSE_389
   # IF_ZERO local_option_at_CellularAutomaton_internal_170 GOTO label_FALSE_389
   lw $t0, -684($fp)
   beq $t0, 0, label_FALSE_389
   # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -680($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_COMPARE_STRING_392
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_COMPARE_STRING_392
   lw $t0, -680($fp)
   beq $t0, 0, label_COMPARE_STRING_392
   # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -680($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_COMPARE_BY_VALUE_393
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_COMPARE_BY_VALUE_393
   lw $t0, -680($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_393
   # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -680($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_COMPARE_BY_VALUE_393
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_COMPARE_BY_VALUE_393
   lw $t0, -680($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_393
   # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_170 --> -684($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -684($fp)
   sub $a0, $a0, $a1
   sw $a0, -680($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_TRUE_390
   # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_TRUE_390
   lw $t0, -680($fp)
   beq $t0, 0, label_TRUE_390
   # GOTO label_FALSE_389
   j label_FALSE_389
   label_COMPARE_BY_VALUE_393: 
      # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_170 --> -684($fp)
      lw $a0, -4($fp)
      lw $a1, -684($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -680($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_TRUE_390
      # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_TRUE_390
      lw $t0, -680($fp)
      beq $t0, 0, label_TRUE_390
      # GOTO label_FALSE_389
      j label_FALSE_389
      label_COMPARE_STRING_392: 
         # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_170 --> -684($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -684($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -680($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_CONTINUE_394
         # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_CONTINUE_394
         lw $t0, -680($fp)
         beq $t0, 0, label_CONTINUE_394
         # GOTO label_FALSE_389
         j label_FALSE_389
         label_CONTINUE_394: 
            # LOCAL local_option_at_CellularAutomaton_internal_169 --> -680($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_170 --> -684($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -684($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_395: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_396
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_395
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_396: 
                  # Store result
                  sw $a2, -680($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_TRUE_390
                  # IF_ZERO local_option_at_CellularAutomaton_internal_169 GOTO label_TRUE_390
                  lw $t0, -680($fp)
                  beq $t0, 0, label_TRUE_390
                  label_FALSE_389: 
                     # LOCAL local_option_at_CellularAutomaton_internal_168 --> -676($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -676($fp)
                     # GOTO label_END_391
j label_END_391
label_TRUE_390: 
   # LOCAL local_option_at_CellularAutomaton_internal_168 --> -676($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -676($fp)
   label_END_391: 
# LOCAL local_option_at_CellularAutomaton_internal_166 --> -668($fp)
# LOCAL local_option_at_CellularAutomaton_internal_168 --> -676($fp)
# Obtain value from -676($fp)
lw $v0, -676($fp)
lw $v0, 12($v0)
sw $v0, -668($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_166 GOTO label_FALSEIF_387
# IF_ZERO local_option_at_CellularAutomaton_internal_166 GOTO label_FALSEIF_387
lw $t0, -668($fp)
beq $t0, 0, label_FALSEIF_387
# LOCAL local_option_at_CellularAutomaton_internal_171 --> -688($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_69
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -688($fp)
# LOCAL local_option_at_CellularAutomaton_internal_167 --> -672($fp)
# LOCAL local_option_at_CellularAutomaton_internal_171 --> -688($fp)
# local_option_at_CellularAutomaton_internal_167 = local_option_at_CellularAutomaton_internal_171
lw $t0, -688($fp)
sw $t0, -672($fp)
# GOTO label_ENDIF_388
j label_ENDIF_388
label_FALSEIF_387: 
   # LOCAL local_option_at_CellularAutomaton_internal_176 --> -708($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 13
   sw $t0, 12($v0)
   sw $v0, -708($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_399
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_399
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_399
   # IF_ZERO local_option_at_CellularAutomaton_internal_176 GOTO label_FALSE_399
   # IF_ZERO local_option_at_CellularAutomaton_internal_176 GOTO label_FALSE_399
   lw $t0, -708($fp)
   beq $t0, 0, label_FALSE_399
   # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -704($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_COMPARE_STRING_402
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_COMPARE_STRING_402
   lw $t0, -704($fp)
   beq $t0, 0, label_COMPARE_STRING_402
   # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -704($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_COMPARE_BY_VALUE_403
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_COMPARE_BY_VALUE_403
   lw $t0, -704($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_403
   # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -704($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_COMPARE_BY_VALUE_403
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_COMPARE_BY_VALUE_403
   lw $t0, -704($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_403
   # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_176 --> -708($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -708($fp)
   sub $a0, $a0, $a1
   sw $a0, -704($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_TRUE_400
   # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_TRUE_400
   lw $t0, -704($fp)
   beq $t0, 0, label_TRUE_400
   # GOTO label_FALSE_399
   j label_FALSE_399
   label_COMPARE_BY_VALUE_403: 
      # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_176 --> -708($fp)
      lw $a0, -4($fp)
      lw $a1, -708($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -704($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_TRUE_400
      # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_TRUE_400
      lw $t0, -704($fp)
      beq $t0, 0, label_TRUE_400
      # GOTO label_FALSE_399
      j label_FALSE_399
      label_COMPARE_STRING_402: 
         # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_176 --> -708($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -708($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -704($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_CONTINUE_404
         # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_CONTINUE_404
         lw $t0, -704($fp)
         beq $t0, 0, label_CONTINUE_404
         # GOTO label_FALSE_399
         j label_FALSE_399
         label_CONTINUE_404: 
            # LOCAL local_option_at_CellularAutomaton_internal_175 --> -704($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_176 --> -708($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -708($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_405: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_406
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_405
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_406: 
                  # Store result
                  sw $a2, -704($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_TRUE_400
                  # IF_ZERO local_option_at_CellularAutomaton_internal_175 GOTO label_TRUE_400
                  lw $t0, -704($fp)
                  beq $t0, 0, label_TRUE_400
                  label_FALSE_399: 
                     # LOCAL local_option_at_CellularAutomaton_internal_174 --> -700($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -700($fp)
                     # GOTO label_END_401
j label_END_401
label_TRUE_400: 
   # LOCAL local_option_at_CellularAutomaton_internal_174 --> -700($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -700($fp)
   label_END_401: 
# LOCAL local_option_at_CellularAutomaton_internal_172 --> -692($fp)
# LOCAL local_option_at_CellularAutomaton_internal_174 --> -700($fp)
# Obtain value from -700($fp)
lw $v0, -700($fp)
lw $v0, 12($v0)
sw $v0, -692($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_172 GOTO label_FALSEIF_397
# IF_ZERO local_option_at_CellularAutomaton_internal_172 GOTO label_FALSEIF_397
lw $t0, -692($fp)
beq $t0, 0, label_FALSEIF_397
# LOCAL local_option_at_CellularAutomaton_internal_177 --> -712($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_70
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -712($fp)
# LOCAL local_option_at_CellularAutomaton_internal_173 --> -696($fp)
# LOCAL local_option_at_CellularAutomaton_internal_177 --> -712($fp)
# local_option_at_CellularAutomaton_internal_173 = local_option_at_CellularAutomaton_internal_177
lw $t0, -712($fp)
sw $t0, -696($fp)
# GOTO label_ENDIF_398
j label_ENDIF_398
label_FALSEIF_397: 
   # LOCAL local_option_at_CellularAutomaton_internal_182 --> -732($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 14
   sw $t0, 12($v0)
   sw $v0, -732($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_409
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_409
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_409
   # IF_ZERO local_option_at_CellularAutomaton_internal_182 GOTO label_FALSE_409
   # IF_ZERO local_option_at_CellularAutomaton_internal_182 GOTO label_FALSE_409
   lw $t0, -732($fp)
   beq $t0, 0, label_FALSE_409
   # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -728($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_COMPARE_STRING_412
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_COMPARE_STRING_412
   lw $t0, -728($fp)
   beq $t0, 0, label_COMPARE_STRING_412
   # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -728($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_COMPARE_BY_VALUE_413
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_COMPARE_BY_VALUE_413
   lw $t0, -728($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_413
   # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -728($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_COMPARE_BY_VALUE_413
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_COMPARE_BY_VALUE_413
   lw $t0, -728($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_413
   # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_182 --> -732($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -732($fp)
   sub $a0, $a0, $a1
   sw $a0, -728($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_TRUE_410
   # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_TRUE_410
   lw $t0, -728($fp)
   beq $t0, 0, label_TRUE_410
   # GOTO label_FALSE_409
   j label_FALSE_409
   label_COMPARE_BY_VALUE_413: 
      # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_182 --> -732($fp)
      lw $a0, -4($fp)
      lw $a1, -732($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -728($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_TRUE_410
      # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_TRUE_410
      lw $t0, -728($fp)
      beq $t0, 0, label_TRUE_410
      # GOTO label_FALSE_409
      j label_FALSE_409
      label_COMPARE_STRING_412: 
         # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_182 --> -732($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -732($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -728($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_CONTINUE_414
         # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_CONTINUE_414
         lw $t0, -728($fp)
         beq $t0, 0, label_CONTINUE_414
         # GOTO label_FALSE_409
         j label_FALSE_409
         label_CONTINUE_414: 
            # LOCAL local_option_at_CellularAutomaton_internal_181 --> -728($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_182 --> -732($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -732($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_415: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_416
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_415
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_416: 
                  # Store result
                  sw $a2, -728($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_TRUE_410
                  # IF_ZERO local_option_at_CellularAutomaton_internal_181 GOTO label_TRUE_410
                  lw $t0, -728($fp)
                  beq $t0, 0, label_TRUE_410
                  label_FALSE_409: 
                     # LOCAL local_option_at_CellularAutomaton_internal_180 --> -724($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -724($fp)
                     # GOTO label_END_411
j label_END_411
label_TRUE_410: 
   # LOCAL local_option_at_CellularAutomaton_internal_180 --> -724($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -724($fp)
   label_END_411: 
# LOCAL local_option_at_CellularAutomaton_internal_178 --> -716($fp)
# LOCAL local_option_at_CellularAutomaton_internal_180 --> -724($fp)
# Obtain value from -724($fp)
lw $v0, -724($fp)
lw $v0, 12($v0)
sw $v0, -716($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_178 GOTO label_FALSEIF_407
# IF_ZERO local_option_at_CellularAutomaton_internal_178 GOTO label_FALSEIF_407
lw $t0, -716($fp)
beq $t0, 0, label_FALSEIF_407
# LOCAL local_option_at_CellularAutomaton_internal_183 --> -736($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_71
sw $t0, 12($v0)
li $t0, 25
sw $t0, 16($v0)
sw $v0, -736($fp)
# LOCAL local_option_at_CellularAutomaton_internal_179 --> -720($fp)
# LOCAL local_option_at_CellularAutomaton_internal_183 --> -736($fp)
# local_option_at_CellularAutomaton_internal_179 = local_option_at_CellularAutomaton_internal_183
lw $t0, -736($fp)
sw $t0, -720($fp)
# GOTO label_ENDIF_408
j label_ENDIF_408
label_FALSEIF_407: 
   # LOCAL local_option_at_CellularAutomaton_internal_188 --> -756($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 15
   sw $t0, 12($v0)
   sw $v0, -756($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_419
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_419
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_419
   # IF_ZERO local_option_at_CellularAutomaton_internal_188 GOTO label_FALSE_419
   # IF_ZERO local_option_at_CellularAutomaton_internal_188 GOTO label_FALSE_419
   lw $t0, -756($fp)
   beq $t0, 0, label_FALSE_419
   # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -752($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_COMPARE_STRING_422
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_COMPARE_STRING_422
   lw $t0, -752($fp)
   beq $t0, 0, label_COMPARE_STRING_422
   # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -752($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_COMPARE_BY_VALUE_423
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_COMPARE_BY_VALUE_423
   lw $t0, -752($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_423
   # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -752($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_COMPARE_BY_VALUE_423
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_COMPARE_BY_VALUE_423
   lw $t0, -752($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_423
   # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_188 --> -756($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -756($fp)
   sub $a0, $a0, $a1
   sw $a0, -752($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_TRUE_420
   # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_TRUE_420
   lw $t0, -752($fp)
   beq $t0, 0, label_TRUE_420
   # GOTO label_FALSE_419
   j label_FALSE_419
   label_COMPARE_BY_VALUE_423: 
      # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_188 --> -756($fp)
      lw $a0, -4($fp)
      lw $a1, -756($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -752($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_TRUE_420
      # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_TRUE_420
      lw $t0, -752($fp)
      beq $t0, 0, label_TRUE_420
      # GOTO label_FALSE_419
      j label_FALSE_419
      label_COMPARE_STRING_422: 
         # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_188 --> -756($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -756($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -752($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_CONTINUE_424
         # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_CONTINUE_424
         lw $t0, -752($fp)
         beq $t0, 0, label_CONTINUE_424
         # GOTO label_FALSE_419
         j label_FALSE_419
         label_CONTINUE_424: 
            # LOCAL local_option_at_CellularAutomaton_internal_187 --> -752($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_188 --> -756($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -756($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_425: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_426
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_425
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_426: 
                  # Store result
                  sw $a2, -752($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_TRUE_420
                  # IF_ZERO local_option_at_CellularAutomaton_internal_187 GOTO label_TRUE_420
                  lw $t0, -752($fp)
                  beq $t0, 0, label_TRUE_420
                  label_FALSE_419: 
                     # LOCAL local_option_at_CellularAutomaton_internal_186 --> -748($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -748($fp)
                     # GOTO label_END_421
j label_END_421
label_TRUE_420: 
   # LOCAL local_option_at_CellularAutomaton_internal_186 --> -748($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -748($fp)
   label_END_421: 
# LOCAL local_option_at_CellularAutomaton_internal_184 --> -740($fp)
# LOCAL local_option_at_CellularAutomaton_internal_186 --> -748($fp)
# Obtain value from -748($fp)
lw $v0, -748($fp)
lw $v0, 12($v0)
sw $v0, -740($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_184 GOTO label_FALSEIF_417
# IF_ZERO local_option_at_CellularAutomaton_internal_184 GOTO label_FALSEIF_417
lw $t0, -740($fp)
beq $t0, 0, label_FALSEIF_417
# LOCAL local_option_at_CellularAutomaton_internal_189 --> -760($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_72
sw $t0, 12($v0)
li $t0, 21
sw $t0, 16($v0)
sw $v0, -760($fp)
# LOCAL local_option_at_CellularAutomaton_internal_185 --> -744($fp)
# LOCAL local_option_at_CellularAutomaton_internal_189 --> -760($fp)
# local_option_at_CellularAutomaton_internal_185 = local_option_at_CellularAutomaton_internal_189
lw $t0, -760($fp)
sw $t0, -744($fp)
# GOTO label_ENDIF_418
j label_ENDIF_418
label_FALSEIF_417: 
   # LOCAL local_option_at_CellularAutomaton_internal_194 --> -780($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 16
   sw $t0, 12($v0)
   sw $v0, -780($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_429
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_429
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_429
   # IF_ZERO local_option_at_CellularAutomaton_internal_194 GOTO label_FALSE_429
   # IF_ZERO local_option_at_CellularAutomaton_internal_194 GOTO label_FALSE_429
   lw $t0, -780($fp)
   beq $t0, 0, label_FALSE_429
   # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -776($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_COMPARE_STRING_432
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_COMPARE_STRING_432
   lw $t0, -776($fp)
   beq $t0, 0, label_COMPARE_STRING_432
   # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -776($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_COMPARE_BY_VALUE_433
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_COMPARE_BY_VALUE_433
   lw $t0, -776($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_433
   # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -776($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_COMPARE_BY_VALUE_433
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_COMPARE_BY_VALUE_433
   lw $t0, -776($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_433
   # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_194 --> -780($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -780($fp)
   sub $a0, $a0, $a1
   sw $a0, -776($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_TRUE_430
   # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_TRUE_430
   lw $t0, -776($fp)
   beq $t0, 0, label_TRUE_430
   # GOTO label_FALSE_429
   j label_FALSE_429
   label_COMPARE_BY_VALUE_433: 
      # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_194 --> -780($fp)
      lw $a0, -4($fp)
      lw $a1, -780($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -776($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_TRUE_430
      # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_TRUE_430
      lw $t0, -776($fp)
      beq $t0, 0, label_TRUE_430
      # GOTO label_FALSE_429
      j label_FALSE_429
      label_COMPARE_STRING_432: 
         # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_194 --> -780($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -780($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -776($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_CONTINUE_434
         # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_CONTINUE_434
         lw $t0, -776($fp)
         beq $t0, 0, label_CONTINUE_434
         # GOTO label_FALSE_429
         j label_FALSE_429
         label_CONTINUE_434: 
            # LOCAL local_option_at_CellularAutomaton_internal_193 --> -776($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_194 --> -780($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -780($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_435: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_436
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_435
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_436: 
                  # Store result
                  sw $a2, -776($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_TRUE_430
                  # IF_ZERO local_option_at_CellularAutomaton_internal_193 GOTO label_TRUE_430
                  lw $t0, -776($fp)
                  beq $t0, 0, label_TRUE_430
                  label_FALSE_429: 
                     # LOCAL local_option_at_CellularAutomaton_internal_192 --> -772($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -772($fp)
                     # GOTO label_END_431
j label_END_431
label_TRUE_430: 
   # LOCAL local_option_at_CellularAutomaton_internal_192 --> -772($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -772($fp)
   label_END_431: 
# LOCAL local_option_at_CellularAutomaton_internal_190 --> -764($fp)
# LOCAL local_option_at_CellularAutomaton_internal_192 --> -772($fp)
# Obtain value from -772($fp)
lw $v0, -772($fp)
lw $v0, 12($v0)
sw $v0, -764($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_190 GOTO label_FALSEIF_427
# IF_ZERO local_option_at_CellularAutomaton_internal_190 GOTO label_FALSEIF_427
lw $t0, -764($fp)
beq $t0, 0, label_FALSEIF_427
# LOCAL local_option_at_CellularAutomaton_internal_195 --> -784($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_73
sw $t0, 12($v0)
li $t0, 21
sw $t0, 16($v0)
sw $v0, -784($fp)
# LOCAL local_option_at_CellularAutomaton_internal_191 --> -768($fp)
# LOCAL local_option_at_CellularAutomaton_internal_195 --> -784($fp)
# local_option_at_CellularAutomaton_internal_191 = local_option_at_CellularAutomaton_internal_195
lw $t0, -784($fp)
sw $t0, -768($fp)
# GOTO label_ENDIF_428
j label_ENDIF_428
label_FALSEIF_427: 
   # LOCAL local_option_at_CellularAutomaton_internal_200 --> -804($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 17
   sw $t0, 12($v0)
   sw $v0, -804($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_439
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_439
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_439
   # IF_ZERO local_option_at_CellularAutomaton_internal_200 GOTO label_FALSE_439
   # IF_ZERO local_option_at_CellularAutomaton_internal_200 GOTO label_FALSE_439
   lw $t0, -804($fp)
   beq $t0, 0, label_FALSE_439
   # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -800($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_COMPARE_STRING_442
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_COMPARE_STRING_442
   lw $t0, -800($fp)
   beq $t0, 0, label_COMPARE_STRING_442
   # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -800($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_COMPARE_BY_VALUE_443
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_COMPARE_BY_VALUE_443
   lw $t0, -800($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_443
   # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -800($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_COMPARE_BY_VALUE_443
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_COMPARE_BY_VALUE_443
   lw $t0, -800($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_443
   # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_200 --> -804($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -804($fp)
   sub $a0, $a0, $a1
   sw $a0, -800($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_TRUE_440
   # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_TRUE_440
   lw $t0, -800($fp)
   beq $t0, 0, label_TRUE_440
   # GOTO label_FALSE_439
   j label_FALSE_439
   label_COMPARE_BY_VALUE_443: 
      # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_200 --> -804($fp)
      lw $a0, -4($fp)
      lw $a1, -804($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -800($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_TRUE_440
      # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_TRUE_440
      lw $t0, -800($fp)
      beq $t0, 0, label_TRUE_440
      # GOTO label_FALSE_439
      j label_FALSE_439
      label_COMPARE_STRING_442: 
         # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_200 --> -804($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -804($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -800($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_CONTINUE_444
         # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_CONTINUE_444
         lw $t0, -800($fp)
         beq $t0, 0, label_CONTINUE_444
         # GOTO label_FALSE_439
         j label_FALSE_439
         label_CONTINUE_444: 
            # LOCAL local_option_at_CellularAutomaton_internal_199 --> -800($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_200 --> -804($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -804($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_445: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_446
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_445
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_446: 
                  # Store result
                  sw $a2, -800($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_TRUE_440
                  # IF_ZERO local_option_at_CellularAutomaton_internal_199 GOTO label_TRUE_440
                  lw $t0, -800($fp)
                  beq $t0, 0, label_TRUE_440
                  label_FALSE_439: 
                     # LOCAL local_option_at_CellularAutomaton_internal_198 --> -796($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -796($fp)
                     # GOTO label_END_441
j label_END_441
label_TRUE_440: 
   # LOCAL local_option_at_CellularAutomaton_internal_198 --> -796($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -796($fp)
   label_END_441: 
# LOCAL local_option_at_CellularAutomaton_internal_196 --> -788($fp)
# LOCAL local_option_at_CellularAutomaton_internal_198 --> -796($fp)
# Obtain value from -796($fp)
lw $v0, -796($fp)
lw $v0, 12($v0)
sw $v0, -788($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_196 GOTO label_FALSEIF_437
# IF_ZERO local_option_at_CellularAutomaton_internal_196 GOTO label_FALSEIF_437
lw $t0, -788($fp)
beq $t0, 0, label_FALSEIF_437
# LOCAL local_option_at_CellularAutomaton_internal_201 --> -808($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_74
sw $t0, 12($v0)
li $t0, 28
sw $t0, 16($v0)
sw $v0, -808($fp)
# LOCAL local_option_at_CellularAutomaton_internal_197 --> -792($fp)
# LOCAL local_option_at_CellularAutomaton_internal_201 --> -808($fp)
# local_option_at_CellularAutomaton_internal_197 = local_option_at_CellularAutomaton_internal_201
lw $t0, -808($fp)
sw $t0, -792($fp)
# GOTO label_ENDIF_438
j label_ENDIF_438
label_FALSEIF_437: 
   # LOCAL local_option_at_CellularAutomaton_internal_206 --> -828($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 18
   sw $t0, 12($v0)
   sw $v0, -828($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_449
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_449
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_449
   # IF_ZERO local_option_at_CellularAutomaton_internal_206 GOTO label_FALSE_449
   # IF_ZERO local_option_at_CellularAutomaton_internal_206 GOTO label_FALSE_449
   lw $t0, -828($fp)
   beq $t0, 0, label_FALSE_449
   # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -824($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_COMPARE_STRING_452
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_COMPARE_STRING_452
   lw $t0, -824($fp)
   beq $t0, 0, label_COMPARE_STRING_452
   # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -824($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_COMPARE_BY_VALUE_453
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_COMPARE_BY_VALUE_453
   lw $t0, -824($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_453
   # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -824($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_COMPARE_BY_VALUE_453
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_COMPARE_BY_VALUE_453
   lw $t0, -824($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_453
   # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_206 --> -828($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -828($fp)
   sub $a0, $a0, $a1
   sw $a0, -824($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_TRUE_450
   # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_TRUE_450
   lw $t0, -824($fp)
   beq $t0, 0, label_TRUE_450
   # GOTO label_FALSE_449
   j label_FALSE_449
   label_COMPARE_BY_VALUE_453: 
      # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_206 --> -828($fp)
      lw $a0, -4($fp)
      lw $a1, -828($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -824($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_TRUE_450
      # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_TRUE_450
      lw $t0, -824($fp)
      beq $t0, 0, label_TRUE_450
      # GOTO label_FALSE_449
      j label_FALSE_449
      label_COMPARE_STRING_452: 
         # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_206 --> -828($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -828($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -824($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_CONTINUE_454
         # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_CONTINUE_454
         lw $t0, -824($fp)
         beq $t0, 0, label_CONTINUE_454
         # GOTO label_FALSE_449
         j label_FALSE_449
         label_CONTINUE_454: 
            # LOCAL local_option_at_CellularAutomaton_internal_205 --> -824($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_206 --> -828($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -828($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_455: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_456
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_455
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_456: 
                  # Store result
                  sw $a2, -824($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_TRUE_450
                  # IF_ZERO local_option_at_CellularAutomaton_internal_205 GOTO label_TRUE_450
                  lw $t0, -824($fp)
                  beq $t0, 0, label_TRUE_450
                  label_FALSE_449: 
                     # LOCAL local_option_at_CellularAutomaton_internal_204 --> -820($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -820($fp)
                     # GOTO label_END_451
j label_END_451
label_TRUE_450: 
   # LOCAL local_option_at_CellularAutomaton_internal_204 --> -820($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -820($fp)
   label_END_451: 
# LOCAL local_option_at_CellularAutomaton_internal_202 --> -812($fp)
# LOCAL local_option_at_CellularAutomaton_internal_204 --> -820($fp)
# Obtain value from -820($fp)
lw $v0, -820($fp)
lw $v0, 12($v0)
sw $v0, -812($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_202 GOTO label_FALSEIF_447
# IF_ZERO local_option_at_CellularAutomaton_internal_202 GOTO label_FALSEIF_447
lw $t0, -812($fp)
beq $t0, 0, label_FALSEIF_447
# LOCAL local_option_at_CellularAutomaton_internal_207 --> -832($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_75
sw $t0, 12($v0)
li $t0, 28
sw $t0, 16($v0)
sw $v0, -832($fp)
# LOCAL local_option_at_CellularAutomaton_internal_203 --> -816($fp)
# LOCAL local_option_at_CellularAutomaton_internal_207 --> -832($fp)
# local_option_at_CellularAutomaton_internal_203 = local_option_at_CellularAutomaton_internal_207
lw $t0, -832($fp)
sw $t0, -816($fp)
# GOTO label_ENDIF_448
j label_ENDIF_448
label_FALSEIF_447: 
   # LOCAL local_option_at_CellularAutomaton_internal_212 --> -852($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 19
   sw $t0, 12($v0)
   sw $v0, -852($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_459
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_459
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_459
   # IF_ZERO local_option_at_CellularAutomaton_internal_212 GOTO label_FALSE_459
   # IF_ZERO local_option_at_CellularAutomaton_internal_212 GOTO label_FALSE_459
   lw $t0, -852($fp)
   beq $t0, 0, label_FALSE_459
   # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -848($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_COMPARE_STRING_462
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_COMPARE_STRING_462
   lw $t0, -848($fp)
   beq $t0, 0, label_COMPARE_STRING_462
   # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -848($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_COMPARE_BY_VALUE_463
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_COMPARE_BY_VALUE_463
   lw $t0, -848($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_463
   # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -848($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_COMPARE_BY_VALUE_463
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_COMPARE_BY_VALUE_463
   lw $t0, -848($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_463
   # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_212 --> -852($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -852($fp)
   sub $a0, $a0, $a1
   sw $a0, -848($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_TRUE_460
   # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_TRUE_460
   lw $t0, -848($fp)
   beq $t0, 0, label_TRUE_460
   # GOTO label_FALSE_459
   j label_FALSE_459
   label_COMPARE_BY_VALUE_463: 
      # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_212 --> -852($fp)
      lw $a0, -4($fp)
      lw $a1, -852($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -848($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_TRUE_460
      # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_TRUE_460
      lw $t0, -848($fp)
      beq $t0, 0, label_TRUE_460
      # GOTO label_FALSE_459
      j label_FALSE_459
      label_COMPARE_STRING_462: 
         # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_212 --> -852($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -852($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -848($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_CONTINUE_464
         # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_CONTINUE_464
         lw $t0, -848($fp)
         beq $t0, 0, label_CONTINUE_464
         # GOTO label_FALSE_459
         j label_FALSE_459
         label_CONTINUE_464: 
            # LOCAL local_option_at_CellularAutomaton_internal_211 --> -848($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_212 --> -852($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -852($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_465: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_466
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_465
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_466: 
                  # Store result
                  sw $a2, -848($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_TRUE_460
                  # IF_ZERO local_option_at_CellularAutomaton_internal_211 GOTO label_TRUE_460
                  lw $t0, -848($fp)
                  beq $t0, 0, label_TRUE_460
                  label_FALSE_459: 
                     # LOCAL local_option_at_CellularAutomaton_internal_210 --> -844($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -844($fp)
                     # GOTO label_END_461
j label_END_461
label_TRUE_460: 
   # LOCAL local_option_at_CellularAutomaton_internal_210 --> -844($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -844($fp)
   label_END_461: 
# LOCAL local_option_at_CellularAutomaton_internal_208 --> -836($fp)
# LOCAL local_option_at_CellularAutomaton_internal_210 --> -844($fp)
# Obtain value from -844($fp)
lw $v0, -844($fp)
lw $v0, 12($v0)
sw $v0, -836($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_208 GOTO label_FALSEIF_457
# IF_ZERO local_option_at_CellularAutomaton_internal_208 GOTO label_FALSEIF_457
lw $t0, -836($fp)
beq $t0, 0, label_FALSEIF_457
# LOCAL local_option_at_CellularAutomaton_internal_213 --> -856($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_76
sw $t0, 12($v0)
li $t0, 16
sw $t0, 16($v0)
sw $v0, -856($fp)
# LOCAL local_option_at_CellularAutomaton_internal_209 --> -840($fp)
# LOCAL local_option_at_CellularAutomaton_internal_213 --> -856($fp)
# local_option_at_CellularAutomaton_internal_209 = local_option_at_CellularAutomaton_internal_213
lw $t0, -856($fp)
sw $t0, -840($fp)
# GOTO label_ENDIF_458
j label_ENDIF_458
label_FALSEIF_457: 
   # LOCAL local_option_at_CellularAutomaton_internal_218 --> -876($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 20
   sw $t0, 12($v0)
   sw $v0, -876($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_469
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_469
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_469
   # IF_ZERO local_option_at_CellularAutomaton_internal_218 GOTO label_FALSE_469
   # IF_ZERO local_option_at_CellularAutomaton_internal_218 GOTO label_FALSE_469
   lw $t0, -876($fp)
   beq $t0, 0, label_FALSE_469
   # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -872($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_COMPARE_STRING_472
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_COMPARE_STRING_472
   lw $t0, -872($fp)
   beq $t0, 0, label_COMPARE_STRING_472
   # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -872($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_COMPARE_BY_VALUE_473
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_COMPARE_BY_VALUE_473
   lw $t0, -872($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_473
   # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -872($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_COMPARE_BY_VALUE_473
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_COMPARE_BY_VALUE_473
   lw $t0, -872($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_473
   # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_218 --> -876($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -876($fp)
   sub $a0, $a0, $a1
   sw $a0, -872($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_TRUE_470
   # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_TRUE_470
   lw $t0, -872($fp)
   beq $t0, 0, label_TRUE_470
   # GOTO label_FALSE_469
   j label_FALSE_469
   label_COMPARE_BY_VALUE_473: 
      # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_218 --> -876($fp)
      lw $a0, -4($fp)
      lw $a1, -876($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -872($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_TRUE_470
      # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_TRUE_470
      lw $t0, -872($fp)
      beq $t0, 0, label_TRUE_470
      # GOTO label_FALSE_469
      j label_FALSE_469
      label_COMPARE_STRING_472: 
         # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_218 --> -876($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -876($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -872($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_CONTINUE_474
         # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_CONTINUE_474
         lw $t0, -872($fp)
         beq $t0, 0, label_CONTINUE_474
         # GOTO label_FALSE_469
         j label_FALSE_469
         label_CONTINUE_474: 
            # LOCAL local_option_at_CellularAutomaton_internal_217 --> -872($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_218 --> -876($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -876($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_475: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_476
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_475
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_476: 
                  # Store result
                  sw $a2, -872($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_TRUE_470
                  # IF_ZERO local_option_at_CellularAutomaton_internal_217 GOTO label_TRUE_470
                  lw $t0, -872($fp)
                  beq $t0, 0, label_TRUE_470
                  label_FALSE_469: 
                     # LOCAL local_option_at_CellularAutomaton_internal_216 --> -868($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -868($fp)
                     # GOTO label_END_471
j label_END_471
label_TRUE_470: 
   # LOCAL local_option_at_CellularAutomaton_internal_216 --> -868($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -868($fp)
   label_END_471: 
# LOCAL local_option_at_CellularAutomaton_internal_214 --> -860($fp)
# LOCAL local_option_at_CellularAutomaton_internal_216 --> -868($fp)
# Obtain value from -868($fp)
lw $v0, -868($fp)
lw $v0, 12($v0)
sw $v0, -860($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_214 GOTO label_FALSEIF_467
# IF_ZERO local_option_at_CellularAutomaton_internal_214 GOTO label_FALSEIF_467
lw $t0, -860($fp)
beq $t0, 0, label_FALSEIF_467
# LOCAL local_option_at_CellularAutomaton_internal_219 --> -880($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_77
sw $t0, 12($v0)
li $t0, 28
sw $t0, 16($v0)
sw $v0, -880($fp)
# LOCAL local_option_at_CellularAutomaton_internal_215 --> -864($fp)
# LOCAL local_option_at_CellularAutomaton_internal_219 --> -880($fp)
# local_option_at_CellularAutomaton_internal_215 = local_option_at_CellularAutomaton_internal_219
lw $t0, -880($fp)
sw $t0, -864($fp)
# GOTO label_ENDIF_468
j label_ENDIF_468
label_FALSEIF_467: 
   # LOCAL local_option_at_CellularAutomaton_internal_224 --> -900($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 21
   sw $t0, 12($v0)
   sw $v0, -900($fp)
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_479
   # IF_ZERO local_option_at_CellularAutomaton_num_0 GOTO label_FALSE_479
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_479
   # IF_ZERO local_option_at_CellularAutomaton_internal_224 GOTO label_FALSE_479
   # IF_ZERO local_option_at_CellularAutomaton_internal_224 GOTO label_FALSE_479
   lw $t0, -900($fp)
   beq $t0, 0, label_FALSE_479
   # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -896($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_COMPARE_STRING_482
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_COMPARE_STRING_482
   lw $t0, -896($fp)
   beq $t0, 0, label_COMPARE_STRING_482
   # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -896($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_COMPARE_BY_VALUE_483
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_COMPARE_BY_VALUE_483
   lw $t0, -896($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_483
   # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -896($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_COMPARE_BY_VALUE_483
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_COMPARE_BY_VALUE_483
   lw $t0, -896($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_483
   # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
   # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_224 --> -900($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -900($fp)
   sub $a0, $a0, $a1
   sw $a0, -896($fp)
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_TRUE_480
   # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_TRUE_480
   lw $t0, -896($fp)
   beq $t0, 0, label_TRUE_480
   # GOTO label_FALSE_479
   j label_FALSE_479
   label_COMPARE_BY_VALUE_483: 
      # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
      # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
      # LOCAL local_option_at_CellularAutomaton_internal_224 --> -900($fp)
      lw $a0, -4($fp)
      lw $a1, -900($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -896($fp)
      # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_TRUE_480
      # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_TRUE_480
      lw $t0, -896($fp)
      beq $t0, 0, label_TRUE_480
      # GOTO label_FALSE_479
      j label_FALSE_479
      label_COMPARE_STRING_482: 
         # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
         # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
         # LOCAL local_option_at_CellularAutomaton_internal_224 --> -900($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -900($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -896($fp)
         # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_CONTINUE_484
         # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_CONTINUE_484
         lw $t0, -896($fp)
         beq $t0, 0, label_CONTINUE_484
         # GOTO label_FALSE_479
         j label_FALSE_479
         label_CONTINUE_484: 
            # LOCAL local_option_at_CellularAutomaton_internal_223 --> -896($fp)
            # LOCAL local_option_at_CellularAutomaton_num_0 --> -4($fp)
            # LOCAL local_option_at_CellularAutomaton_internal_224 --> -900($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -900($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_485: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_486
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_485
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_486: 
                  # Store result
                  sw $a2, -896($fp)
                  # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_TRUE_480
                  # IF_ZERO local_option_at_CellularAutomaton_internal_223 GOTO label_TRUE_480
                  lw $t0, -896($fp)
                  beq $t0, 0, label_TRUE_480
                  label_FALSE_479: 
                     # LOCAL local_option_at_CellularAutomaton_internal_222 --> -892($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -892($fp)
                     # GOTO label_END_481
j label_END_481
label_TRUE_480: 
   # LOCAL local_option_at_CellularAutomaton_internal_222 --> -892($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -892($fp)
   label_END_481: 
# LOCAL local_option_at_CellularAutomaton_internal_220 --> -884($fp)
# LOCAL local_option_at_CellularAutomaton_internal_222 --> -892($fp)
# Obtain value from -892($fp)
lw $v0, -892($fp)
lw $v0, 12($v0)
sw $v0, -884($fp)
# IF_ZERO local_option_at_CellularAutomaton_internal_220 GOTO label_FALSEIF_477
# IF_ZERO local_option_at_CellularAutomaton_internal_220 GOTO label_FALSEIF_477
lw $t0, -884($fp)
beq $t0, 0, label_FALSEIF_477
# LOCAL local_option_at_CellularAutomaton_internal_225 --> -904($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_78
sw $t0, 12($v0)
li $t0, 28
sw $t0, 16($v0)
sw $v0, -904($fp)
# LOCAL local_option_at_CellularAutomaton_internal_221 --> -888($fp)
# LOCAL local_option_at_CellularAutomaton_internal_225 --> -904($fp)
# local_option_at_CellularAutomaton_internal_221 = local_option_at_CellularAutomaton_internal_225
lw $t0, -904($fp)
sw $t0, -888($fp)
# GOTO label_ENDIF_478
j label_ENDIF_478
label_FALSEIF_477: 
   # LOCAL local_option_at_CellularAutomaton_internal_226 --> -908($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_79
   sw $t0, 12($v0)
   li $t0, 25
   sw $t0, 16($v0)
   sw $v0, -908($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_221 --> -888($fp)
   # LOCAL local_option_at_CellularAutomaton_internal_226 --> -908($fp)
   # local_option_at_CellularAutomaton_internal_221 = local_option_at_CellularAutomaton_internal_226
   lw $t0, -908($fp)
   sw $t0, -888($fp)
   label_ENDIF_478: 
# LOCAL local_option_at_CellularAutomaton_internal_215 --> -864($fp)
# LOCAL local_option_at_CellularAutomaton_internal_221 --> -888($fp)
# local_option_at_CellularAutomaton_internal_215 = local_option_at_CellularAutomaton_internal_221
lw $t0, -888($fp)
sw $t0, -864($fp)
label_ENDIF_468: 
# LOCAL local_option_at_CellularAutomaton_internal_209 --> -840($fp)
# LOCAL local_option_at_CellularAutomaton_internal_215 --> -864($fp)
# local_option_at_CellularAutomaton_internal_209 = local_option_at_CellularAutomaton_internal_215
lw $t0, -864($fp)
sw $t0, -840($fp)
label_ENDIF_458: 
# LOCAL local_option_at_CellularAutomaton_internal_203 --> -816($fp)
# LOCAL local_option_at_CellularAutomaton_internal_209 --> -840($fp)
# local_option_at_CellularAutomaton_internal_203 = local_option_at_CellularAutomaton_internal_209
lw $t0, -840($fp)
sw $t0, -816($fp)
label_ENDIF_448: 
# LOCAL local_option_at_CellularAutomaton_internal_197 --> -792($fp)
# LOCAL local_option_at_CellularAutomaton_internal_203 --> -816($fp)
# local_option_at_CellularAutomaton_internal_197 = local_option_at_CellularAutomaton_internal_203
lw $t0, -816($fp)
sw $t0, -792($fp)
label_ENDIF_438: 
# LOCAL local_option_at_CellularAutomaton_internal_191 --> -768($fp)
# LOCAL local_option_at_CellularAutomaton_internal_197 --> -792($fp)
# local_option_at_CellularAutomaton_internal_191 = local_option_at_CellularAutomaton_internal_197
lw $t0, -792($fp)
sw $t0, -768($fp)
label_ENDIF_428: 
# LOCAL local_option_at_CellularAutomaton_internal_185 --> -744($fp)
# LOCAL local_option_at_CellularAutomaton_internal_191 --> -768($fp)
# local_option_at_CellularAutomaton_internal_185 = local_option_at_CellularAutomaton_internal_191
lw $t0, -768($fp)
sw $t0, -744($fp)
label_ENDIF_418: 
# LOCAL local_option_at_CellularAutomaton_internal_179 --> -720($fp)
# LOCAL local_option_at_CellularAutomaton_internal_185 --> -744($fp)
# local_option_at_CellularAutomaton_internal_179 = local_option_at_CellularAutomaton_internal_185
lw $t0, -744($fp)
sw $t0, -720($fp)
label_ENDIF_408: 
# LOCAL local_option_at_CellularAutomaton_internal_173 --> -696($fp)
# LOCAL local_option_at_CellularAutomaton_internal_179 --> -720($fp)
# local_option_at_CellularAutomaton_internal_173 = local_option_at_CellularAutomaton_internal_179
lw $t0, -720($fp)
sw $t0, -696($fp)
label_ENDIF_398: 
# LOCAL local_option_at_CellularAutomaton_internal_167 --> -672($fp)
# LOCAL local_option_at_CellularAutomaton_internal_173 --> -696($fp)
# local_option_at_CellularAutomaton_internal_167 = local_option_at_CellularAutomaton_internal_173
lw $t0, -696($fp)
sw $t0, -672($fp)
label_ENDIF_388: 
# LOCAL local_option_at_CellularAutomaton_internal_161 --> -648($fp)
# LOCAL local_option_at_CellularAutomaton_internal_167 --> -672($fp)
# local_option_at_CellularAutomaton_internal_161 = local_option_at_CellularAutomaton_internal_167
lw $t0, -672($fp)
sw $t0, -648($fp)
label_ENDIF_378: 
# LOCAL local_option_at_CellularAutomaton_internal_155 --> -624($fp)
# LOCAL local_option_at_CellularAutomaton_internal_161 --> -648($fp)
# local_option_at_CellularAutomaton_internal_155 = local_option_at_CellularAutomaton_internal_161
lw $t0, -648($fp)
sw $t0, -624($fp)
label_ENDIF_368: 
# LOCAL local_option_at_CellularAutomaton_internal_149 --> -600($fp)
# LOCAL local_option_at_CellularAutomaton_internal_155 --> -624($fp)
# local_option_at_CellularAutomaton_internal_149 = local_option_at_CellularAutomaton_internal_155
lw $t0, -624($fp)
sw $t0, -600($fp)
label_ENDIF_358: 
# LOCAL local_option_at_CellularAutomaton_internal_143 --> -576($fp)
# LOCAL local_option_at_CellularAutomaton_internal_149 --> -600($fp)
# local_option_at_CellularAutomaton_internal_143 = local_option_at_CellularAutomaton_internal_149
lw $t0, -600($fp)
sw $t0, -576($fp)
label_ENDIF_348: 
# LOCAL local_option_at_CellularAutomaton_internal_137 --> -552($fp)
# LOCAL local_option_at_CellularAutomaton_internal_143 --> -576($fp)
# local_option_at_CellularAutomaton_internal_137 = local_option_at_CellularAutomaton_internal_143
lw $t0, -576($fp)
sw $t0, -552($fp)
label_ENDIF_338: 
# LOCAL local_option_at_CellularAutomaton_internal_131 --> -528($fp)
# LOCAL local_option_at_CellularAutomaton_internal_137 --> -552($fp)
# local_option_at_CellularAutomaton_internal_131 = local_option_at_CellularAutomaton_internal_137
lw $t0, -552($fp)
sw $t0, -528($fp)
label_ENDIF_328: 
# LOCAL local_option_at_CellularAutomaton_internal_125 --> -504($fp)
# LOCAL local_option_at_CellularAutomaton_internal_131 --> -528($fp)
# local_option_at_CellularAutomaton_internal_125 = local_option_at_CellularAutomaton_internal_131
lw $t0, -528($fp)
sw $t0, -504($fp)
label_ENDIF_318: 
# LOCAL local_option_at_CellularAutomaton_internal_119 --> -480($fp)
# LOCAL local_option_at_CellularAutomaton_internal_125 --> -504($fp)
# local_option_at_CellularAutomaton_internal_119 = local_option_at_CellularAutomaton_internal_125
lw $t0, -504($fp)
sw $t0, -480($fp)
label_ENDIF_308: 
# LOCAL local_option_at_CellularAutomaton_internal_113 --> -456($fp)
# LOCAL local_option_at_CellularAutomaton_internal_119 --> -480($fp)
# local_option_at_CellularAutomaton_internal_113 = local_option_at_CellularAutomaton_internal_119
lw $t0, -480($fp)
sw $t0, -456($fp)
label_ENDIF_298: 
# LOCAL local_option_at_CellularAutomaton_internal_107 --> -432($fp)
# LOCAL local_option_at_CellularAutomaton_internal_113 --> -456($fp)
# local_option_at_CellularAutomaton_internal_107 = local_option_at_CellularAutomaton_internal_113
lw $t0, -456($fp)
sw $t0, -432($fp)
label_ENDIF_288: 
# LOCAL local_option_at_CellularAutomaton_internal_101 --> -408($fp)
# LOCAL local_option_at_CellularAutomaton_internal_107 --> -432($fp)
# local_option_at_CellularAutomaton_internal_101 = local_option_at_CellularAutomaton_internal_107
lw $t0, -432($fp)
sw $t0, -408($fp)
label_ENDIF_278: 
# RETURN local_option_at_CellularAutomaton_internal_101
lw $v0, -408($fp)
# Deallocate stack frame for function function_option_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 916
jr $ra
# Function END


# function_prompt_at_CellularAutomaton implementation.
# @Params:
function_prompt_at_CellularAutomaton: 
   # Allocate stack frame for function function_prompt_at_CellularAutomaton.
   subu $sp, $sp, 100
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 100
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt_at_CellularAutomaton_internal_1 = local_prompt_at_CellularAutomaton_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_80
   sw $t0, 12($v0)
   li $t0, 54
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # ARG local_prompt_at_CellularAutomaton_internal_4
   # LOCAL local_prompt_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_prompt_at_CellularAutomaton_internal_2 = VCALL local_prompt_at_CellularAutomaton_internal_1 out_string
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt_at_CellularAutomaton_internal_5 = local_prompt_at_CellularAutomaton_internal_7
   lw $t0, -32($fp)
   sw $t0, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_81
   sw $t0, 12($v0)
   li $t0, 49
   sw $t0, 16($v0)
   sw $v0, -36($fp)
   # ARG local_prompt_at_CellularAutomaton_internal_8
   # LOCAL local_prompt_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_prompt_at_CellularAutomaton_internal_6 = VCALL local_prompt_at_CellularAutomaton_internal_5 out_string
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt_at_CellularAutomaton_internal_9 = local_prompt_at_CellularAutomaton_internal_11
   lw $t0, -48($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_prompt_at_CellularAutomaton_internal_10 = VCALL local_prompt_at_CellularAutomaton_internal_9 in_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_prompt_at_CellularAutomaton_ans_0 = local_prompt_at_CellularAutomaton_internal_10
   lw $t0, -44($fp)
   sw $t0, -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt_at_CellularAutomaton_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt_at_CellularAutomaton_internal_12 = local_prompt_at_CellularAutomaton_internal_14
   lw $t0, -60($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_82
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -64($fp)
   # ARG local_prompt_at_CellularAutomaton_internal_15
   # LOCAL local_prompt_at_CellularAutomaton_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_12 --> -52($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_13 --> -56($fp)
   # local_prompt_at_CellularAutomaton_internal_13 = VCALL local_prompt_at_CellularAutomaton_internal_12 out_string
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_83
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -84($fp)
   # IF_ZERO local_prompt_at_CellularAutomaton_ans_0 GOTO label_FALSE_489
   # IF_ZERO local_prompt_at_CellularAutomaton_ans_0 GOTO label_FALSE_489
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_489
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_20 GOTO label_FALSE_489
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_20 GOTO label_FALSE_489
   lw $t0, -84($fp)
   beq $t0, 0, label_FALSE_489
   # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -80($fp)
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_COMPARE_STRING_492
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_COMPARE_STRING_492
   lw $t0, -80($fp)
   beq $t0, 0, label_COMPARE_STRING_492
   # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -80($fp)
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_493
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_493
   lw $t0, -80($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_493
   # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -80($fp)
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_493
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_493
   lw $t0, -80($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_493
   # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -84($fp)
   sub $a0, $a0, $a1
   sw $a0, -80($fp)
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_TRUE_490
   # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_TRUE_490
   lw $t0, -80($fp)
   beq $t0, 0, label_TRUE_490
   # GOTO label_FALSE_489
   j label_FALSE_489
   label_COMPARE_BY_VALUE_493: 
      # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
      # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
      # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
      lw $a0, -4($fp)
      lw $a1, -84($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -80($fp)
      # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_TRUE_490
      # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_TRUE_490
      lw $t0, -80($fp)
      beq $t0, 0, label_TRUE_490
      # GOTO label_FALSE_489
      j label_FALSE_489
      label_COMPARE_STRING_492: 
         # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
         # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
         # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -84($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -80($fp)
         # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_CONTINUE_494
         # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_CONTINUE_494
         lw $t0, -80($fp)
         beq $t0, 0, label_CONTINUE_494
         # GOTO label_FALSE_489
         j label_FALSE_489
         label_CONTINUE_494: 
            # LOCAL local_prompt_at_CellularAutomaton_internal_19 --> -80($fp)
            # LOCAL local_prompt_at_CellularAutomaton_ans_0 --> -4($fp)
            # LOCAL local_prompt_at_CellularAutomaton_internal_20 --> -84($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -84($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_495: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_496
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_495
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_496: 
                  # Store result
                  sw $a2, -80($fp)
                  # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_TRUE_490
                  # IF_ZERO local_prompt_at_CellularAutomaton_internal_19 GOTO label_TRUE_490
                  lw $t0, -80($fp)
                  beq $t0, 0, label_TRUE_490
                  label_FALSE_489: 
                     # LOCAL local_prompt_at_CellularAutomaton_internal_18 --> -76($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -76($fp)
                     # GOTO label_END_491
j label_END_491
label_TRUE_490: 
   # LOCAL local_prompt_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   label_END_491: 
# LOCAL local_prompt_at_CellularAutomaton_internal_16 --> -68($fp)
# LOCAL local_prompt_at_CellularAutomaton_internal_18 --> -76($fp)
# Obtain value from -76($fp)
lw $v0, -76($fp)
lw $v0, 12($v0)
sw $v0, -68($fp)
# IF_ZERO local_prompt_at_CellularAutomaton_internal_16 GOTO label_FALSEIF_487
# IF_ZERO local_prompt_at_CellularAutomaton_internal_16 GOTO label_FALSEIF_487
lw $t0, -68($fp)
beq $t0, 0, label_FALSEIF_487
# LOCAL local_prompt_at_CellularAutomaton_internal_21 --> -88($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -88($fp)
# LOCAL local_prompt_at_CellularAutomaton_internal_17 --> -72($fp)
# LOCAL local_prompt_at_CellularAutomaton_internal_21 --> -88($fp)
# local_prompt_at_CellularAutomaton_internal_17 = local_prompt_at_CellularAutomaton_internal_21
lw $t0, -88($fp)
sw $t0, -72($fp)
# GOTO label_ENDIF_488
j label_ENDIF_488
label_FALSEIF_487: 
   # LOCAL local_prompt_at_CellularAutomaton_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -92($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_prompt_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_prompt_at_CellularAutomaton_internal_17 = local_prompt_at_CellularAutomaton_internal_22
   lw $t0, -92($fp)
   sw $t0, -72($fp)
   label_ENDIF_488: 
# RETURN local_prompt_at_CellularAutomaton_internal_17
lw $v0, -72($fp)
# Deallocate stack frame for function function_prompt_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 100
jr $ra
# Function END


# function_prompt2_at_CellularAutomaton implementation.
# @Params:
function_prompt2_at_CellularAutomaton: 
   # Allocate stack frame for function function_prompt2_at_CellularAutomaton.
   subu $sp, $sp, 100
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 100
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt2_at_CellularAutomaton_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_3 --> -16($fp)
   # local_prompt2_at_CellularAutomaton_internal_1 = local_prompt2_at_CellularAutomaton_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_84
   sw $t0, 12($v0)
   li $t0, 2
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # ARG local_prompt2_at_CellularAutomaton_internal_4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_1 --> -8($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_2 --> -12($fp)
   # local_prompt2_at_CellularAutomaton_internal_2 = VCALL local_prompt2_at_CellularAutomaton_internal_1 out_string
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt2_at_CellularAutomaton_internal_7 = SELF
   sw $s1, -32($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_7 --> -32($fp)
   # local_prompt2_at_CellularAutomaton_internal_5 = local_prompt2_at_CellularAutomaton_internal_7
   lw $t0, -32($fp)
   sw $t0, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_85
   sw $t0, 12($v0)
   li $t0, 48
   sw $t0, 16($v0)
   sw $v0, -36($fp)
   # ARG local_prompt2_at_CellularAutomaton_internal_8
   # LOCAL local_prompt2_at_CellularAutomaton_internal_8 --> -36($fp)
   lw $t0, -36($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_5 --> -24($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_6 --> -28($fp)
   # local_prompt2_at_CellularAutomaton_internal_6 = VCALL local_prompt2_at_CellularAutomaton_internal_5 out_string
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt2_at_CellularAutomaton_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_11 --> -48($fp)
   # local_prompt2_at_CellularAutomaton_internal_9 = local_prompt2_at_CellularAutomaton_internal_11
   lw $t0, -48($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_12 --> -52($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_86
   sw $t0, 12($v0)
   li $t0, 49
   sw $t0, 16($v0)
   sw $v0, -52($fp)
   # ARG local_prompt2_at_CellularAutomaton_internal_12
   # LOCAL local_prompt2_at_CellularAutomaton_internal_12 --> -52($fp)
   lw $t0, -52($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_9 --> -40($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_10 --> -44($fp)
   # local_prompt2_at_CellularAutomaton_internal_10 = VCALL local_prompt2_at_CellularAutomaton_internal_9 out_string
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_prompt2_at_CellularAutomaton_internal_15 = SELF
   sw $s1, -64($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_15 --> -64($fp)
   # local_prompt2_at_CellularAutomaton_internal_13 = local_prompt2_at_CellularAutomaton_internal_15
   lw $t0, -64($fp)
   sw $t0, -56($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_13 --> -56($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt2_at_CellularAutomaton_internal_14 = VCALL local_prompt2_at_CellularAutomaton_internal_13 in_string
   # Save new self pointer in $s1
   lw $s1, -56($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -60($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_14 --> -60($fp)
   # local_prompt2_at_CellularAutomaton_ans_0 = local_prompt2_at_CellularAutomaton_internal_14
   lw $t0, -60($fp)
   sw $t0, -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_87
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -84($fp)
   # IF_ZERO local_prompt2_at_CellularAutomaton_ans_0 GOTO label_FALSE_499
   # IF_ZERO local_prompt2_at_CellularAutomaton_ans_0 GOTO label_FALSE_499
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSE_499
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_20 GOTO label_FALSE_499
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_20 GOTO label_FALSE_499
   lw $t0, -84($fp)
   beq $t0, 0, label_FALSE_499
   # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # Comparing -4($fp) type with String
   la $v0, String
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -80($fp)
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_COMPARE_STRING_502
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_COMPARE_STRING_502
   lw $t0, -80($fp)
   beq $t0, 0, label_COMPARE_STRING_502
   # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # Comparing -4($fp) type with Bool
   la $v0, Bool
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -80($fp)
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_503
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_503
   lw $t0, -80($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_503
   # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # Comparing -4($fp) type with Int
   la $v0, Int
   lw $a0, -4($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -80($fp)
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_503
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_COMPARE_BY_VALUE_503
   lw $t0, -80($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_503
   # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
   # Load pointers and SUB
   lw $a0, -4($fp)
   lw $a1, -84($fp)
   sub $a0, $a0, $a1
   sw $a0, -80($fp)
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_TRUE_500
   # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_TRUE_500
   lw $t0, -80($fp)
   beq $t0, 0, label_TRUE_500
   # GOTO label_FALSE_499
   j label_FALSE_499
   label_COMPARE_BY_VALUE_503: 
      # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
      # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
      # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
      lw $a0, -4($fp)
      lw $a1, -84($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -80($fp)
      # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_TRUE_500
      # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_TRUE_500
      lw $t0, -80($fp)
      beq $t0, 0, label_TRUE_500
      # GOTO label_FALSE_499
      j label_FALSE_499
      label_COMPARE_STRING_502: 
         # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
         # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
         # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
         # Load strings for comparison
         lw $v0, -4($fp)
         lw $v1, -84($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -80($fp)
         # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_CONTINUE_504
         # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_CONTINUE_504
         lw $t0, -80($fp)
         beq $t0, 0, label_CONTINUE_504
         # GOTO label_FALSE_499
         j label_FALSE_499
         label_CONTINUE_504: 
            # LOCAL local_prompt2_at_CellularAutomaton_internal_19 --> -80($fp)
            # LOCAL local_prompt2_at_CellularAutomaton_ans_0 --> -4($fp)
            # LOCAL local_prompt2_at_CellularAutomaton_internal_20 --> -84($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -4($fp)
            lw $v1, -84($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_505: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_506
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_505
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_506: 
                  # Store result
                  sw $a2, -80($fp)
                  # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_TRUE_500
                  # IF_ZERO local_prompt2_at_CellularAutomaton_internal_19 GOTO label_TRUE_500
                  lw $t0, -80($fp)
                  beq $t0, 0, label_TRUE_500
                  label_FALSE_499: 
                     # LOCAL local_prompt2_at_CellularAutomaton_internal_18 --> -76($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -76($fp)
                     # GOTO label_END_501
j label_END_501
label_TRUE_500: 
   # LOCAL local_prompt2_at_CellularAutomaton_internal_18 --> -76($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -76($fp)
   label_END_501: 
# LOCAL local_prompt2_at_CellularAutomaton_internal_16 --> -68($fp)
# LOCAL local_prompt2_at_CellularAutomaton_internal_18 --> -76($fp)
# Obtain value from -76($fp)
lw $v0, -76($fp)
lw $v0, 12($v0)
sw $v0, -68($fp)
# IF_ZERO local_prompt2_at_CellularAutomaton_internal_16 GOTO label_FALSEIF_497
# IF_ZERO local_prompt2_at_CellularAutomaton_internal_16 GOTO label_FALSEIF_497
lw $t0, -68($fp)
beq $t0, 0, label_FALSEIF_497
# LOCAL local_prompt2_at_CellularAutomaton_internal_21 --> -88($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -88($fp)
# LOCAL local_prompt2_at_CellularAutomaton_internal_17 --> -72($fp)
# LOCAL local_prompt2_at_CellularAutomaton_internal_21 --> -88($fp)
# local_prompt2_at_CellularAutomaton_internal_17 = local_prompt2_at_CellularAutomaton_internal_21
lw $t0, -88($fp)
sw $t0, -72($fp)
# GOTO label_ENDIF_498
j label_ENDIF_498
label_FALSEIF_497: 
   # LOCAL local_prompt2_at_CellularAutomaton_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -92($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_17 --> -72($fp)
   # LOCAL local_prompt2_at_CellularAutomaton_internal_22 --> -92($fp)
   # local_prompt2_at_CellularAutomaton_internal_17 = local_prompt2_at_CellularAutomaton_internal_22
   lw $t0, -92($fp)
   sw $t0, -72($fp)
   label_ENDIF_498: 
# RETURN local_prompt2_at_CellularAutomaton_internal_17
lw $v0, -72($fp)
# Deallocate stack frame for function function_prompt2_at_CellularAutomaton.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 100
jr $ra
# Function END


# __Main__attrib__cells__init implementation.
# @Params:
__Main__attrib__cells__init: 
   # Allocate stack frame for function __Main__attrib__cells__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __Main__attrib__cells__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 160
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 160
   # LOCAL local_main_at_Main_continue_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_main_at_Main_choice_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -8($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_4 = SELF
   sw $s1, -20($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_2 = local_main_at_Main_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_88
   sw $t0, 12($v0)
   li $t0, 29
   sw $t0, 16($v0)
   sw $v0, -24($fp)
   # ARG local_main_at_Main_internal_5
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   lw $t0, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = VCALL local_main_at_Main_internal_2 out_string
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_8 = SELF
   sw $s1, -36($fp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # local_main_at_Main_internal_6 = local_main_at_Main_internal_8
   lw $t0, -36($fp)
   sw $t0, -28($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_89
   sw $t0, 12($v0)
   li $t0, 47
   sw $t0, 16($v0)
   sw $v0, -40($fp)
   # ARG local_main_at_Main_internal_9
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   lw $t0, -40($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_6 --> -28($fp)
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # local_main_at_Main_internal_7 = VCALL local_main_at_Main_internal_6 out_string
   # Save new self pointer in $s1
   lw $s1, -28($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -32($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   label_WHILE_507: 
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # local_main_at_Main_internal_13 = SELF
      sw $s1, -56($fp)
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # LOCAL local_main_at_Main_internal_13 --> -56($fp)
      # local_main_at_Main_internal_11 = local_main_at_Main_internal_13
      lw $t0, -56($fp)
      sw $t0, -48($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # LOCAL local_main_at_Main_internal_12 --> -52($fp)
      # local_main_at_Main_internal_12 = VCALL local_main_at_Main_internal_11 prompt2
      # Save new self pointer in $s1
      lw $s1, -48($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 108($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -52($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_internal_10 --> -44($fp)
      # LOCAL local_main_at_Main_internal_12 --> -52($fp)
      # Obtain value from -52($fp)
      lw $v0, -52($fp)
      lw $v0, 12($v0)
      sw $v0, -44($fp)
      # IF_ZERO local_main_at_Main_internal_10 GOTO label_WHILE_END_508
      # IF_ZERO local_main_at_Main_internal_10 GOTO label_WHILE_END_508
      lw $t0, -44($fp)
      beq $t0, 0, label_WHILE_END_508
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -60($fp)
      # LOCAL local_main_at_Main_continue_0 --> -4($fp)
      # LOCAL local_main_at_Main_internal_14 --> -60($fp)
      # local_main_at_Main_continue_0 = local_main_at_Main_internal_14
      lw $t0, -60($fp)
      sw $t0, -4($fp)
      # LOCAL local_main_at_Main_internal_17 --> -72($fp)
      # local_main_at_Main_internal_17 = SELF
      sw $s1, -72($fp)
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      # LOCAL local_main_at_Main_internal_17 --> -72($fp)
      # local_main_at_Main_internal_15 = local_main_at_Main_internal_17
      lw $t0, -72($fp)
      sw $t0, -64($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      # LOCAL local_main_at_Main_internal_16 --> -68($fp)
      # local_main_at_Main_internal_16 = VCALL local_main_at_Main_internal_15 option
      # Save new self pointer in $s1
      lw $s1, -64($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 96($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -68($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_main_at_Main_choice_1 --> -8($fp)
      # LOCAL local_main_at_Main_internal_16 --> -68($fp)
      # local_main_at_Main_choice_1 = local_main_at_Main_internal_16
      lw $t0, -68($fp)
      sw $t0, -8($fp)
      # LOCAL local_main_at_Main_internal_20 --> -84($fp)
      # local_main_at_Main_internal_20 = ALLOCATE CellularAutomaton
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type name
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, CellularAutomaton
      sw $t0, 12($v0)
      li $t0, 17
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 28 bytes of memory
      li $a0, 28
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, CellularAutomaton_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 24
      sw $t0, 8($v0)
      move $t1, $v0
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      move $s1, $v0
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __Board__attrib__rows__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 12($t1)
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __Board__attrib__columns__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 16($t1)
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __Board__attrib__board_size__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 20($t1)
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __CellularAutomaton__attrib__population_map__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 24($t1)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      sw $t1, -84($fp)
      # LOCAL local_main_at_Main_internal_18 --> -76($fp)
      # LOCAL local_main_at_Main_internal_20 --> -84($fp)
      # local_main_at_Main_internal_18 = local_main_at_Main_internal_20
      lw $t0, -84($fp)
      sw $t0, -76($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # ARG local_main_at_Main_choice_1
      # LOCAL local_main_at_Main_choice_1 --> -8($fp)
      lw $t0, -8($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_main_at_Main_internal_18 --> -76($fp)
      # LOCAL local_main_at_Main_internal_19 --> -80($fp)
      # local_main_at_Main_internal_19 = VCALL local_main_at_Main_internal_18 init
      # Save new self pointer in $s1
      lw $s1, -76($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 68($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -80($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # 
      # LOCAL local_main_at_Main_internal_19 --> -80($fp)
      lw $t0, -80($fp)
      sw $t0, 28($s1)
      # local_main_at_Main_internal_23 = GETATTRIBUTE cells Main
      # LOCAL local_main_at_Main_internal_23 --> -96($fp)
      lw $t0, 28($s1)
      sw $t0, -96($fp)
      # LOCAL local_main_at_Main_internal_21 --> -88($fp)
      # LOCAL local_main_at_Main_internal_23 --> -96($fp)
      # local_main_at_Main_internal_21 = local_main_at_Main_internal_23
      lw $t0, -96($fp)
      sw $t0, -88($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_main_at_Main_internal_21 --> -88($fp)
      # LOCAL local_main_at_Main_internal_22 --> -92($fp)
      # local_main_at_Main_internal_22 = VCALL local_main_at_Main_internal_21 print
      # Save new self pointer in $s1
      lw $s1, -88($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 80($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -92($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      label_WHILE_509: 
         # LOCAL local_main_at_Main_internal_24 --> -100($fp)
         # LOCAL local_main_at_Main_continue_0 --> -4($fp)
         # Obtain value from -4($fp)
         lw $v0, -4($fp)
         lw $v0, 12($v0)
         sw $v0, -100($fp)
         # IF_ZERO local_main_at_Main_internal_24 GOTO label_WHILE_END_510
         # IF_ZERO local_main_at_Main_internal_24 GOTO label_WHILE_END_510
         lw $t0, -100($fp)
         beq $t0, 0, label_WHILE_END_510
         # LOCAL local_main_at_Main_internal_29 --> -120($fp)
         # local_main_at_Main_internal_29 = SELF
         sw $s1, -120($fp)
         # LOCAL local_main_at_Main_internal_27 --> -112($fp)
         # LOCAL local_main_at_Main_internal_29 --> -120($fp)
         # local_main_at_Main_internal_27 = local_main_at_Main_internal_29
         lw $t0, -120($fp)
         sw $t0, -112($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_27 --> -112($fp)
         # LOCAL local_main_at_Main_internal_28 --> -116($fp)
         # local_main_at_Main_internal_28 = VCALL local_main_at_Main_internal_27 prompt
         # Save new self pointer in $s1
         lw $s1, -112($fp)
         # Get pointer to type
         lw $t0, 4($s1)
         # Get pointer to type's VTABLE
         lw $t0, 0($t0)
         # Get pointer to function address
         lw $t0, 24($t0)
         # Call function. Result is on $v0
         jalr $t0
         sw $v0, -116($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # LOCAL local_main_at_Main_internal_25 --> -104($fp)
         # LOCAL local_main_at_Main_internal_28 --> -116($fp)
         # Obtain value from -116($fp)
         lw $v0, -116($fp)
         lw $v0, 12($v0)
         sw $v0, -104($fp)
         # IF_ZERO local_main_at_Main_internal_25 GOTO label_FALSEIF_511
         # IF_ZERO local_main_at_Main_internal_25 GOTO label_FALSEIF_511
         lw $t0, -104($fp)
         beq $t0, 0, label_FALSEIF_511
         # local_main_at_Main_internal_32 = GETATTRIBUTE cells Main
         # LOCAL local_main_at_Main_internal_32 --> -132($fp)
         lw $t0, 28($s1)
         sw $t0, -132($fp)
         # LOCAL local_main_at_Main_internal_30 --> -124($fp)
         # LOCAL local_main_at_Main_internal_32 --> -132($fp)
         # local_main_at_Main_internal_30 = local_main_at_Main_internal_32
         lw $t0, -132($fp)
         sw $t0, -124($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_30 --> -124($fp)
         # LOCAL local_main_at_Main_internal_31 --> -128($fp)
         # local_main_at_Main_internal_31 = VCALL local_main_at_Main_internal_30 evolve
         # Save new self pointer in $s1
         lw $s1, -124($fp)
         # Get pointer to type
         lw $t0, 4($s1)
         # Get pointer to type's VTABLE
         lw $t0, 0($t0)
         # Get pointer to function address
         lw $t0, 120($t0)
         # Call function. Result is on $v0
         jalr $t0
         sw $v0, -128($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # local_main_at_Main_internal_35 = GETATTRIBUTE cells Main
         # LOCAL local_main_at_Main_internal_35 --> -144($fp)
         lw $t0, 28($s1)
         sw $t0, -144($fp)
         # LOCAL local_main_at_Main_internal_33 --> -136($fp)
         # LOCAL local_main_at_Main_internal_35 --> -144($fp)
         # local_main_at_Main_internal_33 = local_main_at_Main_internal_35
         lw $t0, -144($fp)
         sw $t0, -136($fp)
         # Push register s1 into stack
         subu $sp, $sp, 4
         sw $s1, 0($sp)
         # LOCAL local_main_at_Main_internal_33 --> -136($fp)
         # LOCAL local_main_at_Main_internal_34 --> -140($fp)
         # local_main_at_Main_internal_34 = VCALL local_main_at_Main_internal_33 print
         # Save new self pointer in $s1
         lw $s1, -136($fp)
         # Get pointer to type
         lw $t0, 4($s1)
         # Get pointer to type's VTABLE
         lw $t0, 0($t0)
         # Get pointer to function address
         lw $t0, 80($t0)
         # Call function. Result is on $v0
         jalr $t0
         sw $v0, -140($fp)
         # Pop 4 bytes from stack into register s1
         lw $s1, 0($sp)
         addu $sp, $sp, 4
         # LOCAL local_main_at_Main_internal_26 --> -108($fp)
         # LOCAL local_main_at_Main_internal_34 --> -140($fp)
         # local_main_at_Main_internal_26 = local_main_at_Main_internal_34
         lw $t0, -140($fp)
         sw $t0, -108($fp)
         # GOTO label_ENDIF_512
j label_ENDIF_512
label_FALSEIF_511: 
   # LOCAL local_main_at_Main_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -148($fp)
   # LOCAL local_main_at_Main_continue_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_36 --> -148($fp)
   # local_main_at_Main_continue_0 = local_main_at_Main_internal_36
   lw $t0, -148($fp)
   sw $t0, -4($fp)
   # LOCAL local_main_at_Main_internal_26 --> -108($fp)
   # local_main_at_Main_internal_26 = 
   label_ENDIF_512: 
# GOTO label_WHILE_509
j label_WHILE_509
label_WHILE_END_510: 
   # GOTO label_WHILE_507
   j label_WHILE_507
   label_WHILE_END_508: 
      # LOCAL local_main_at_Main_internal_37 --> -152($fp)
      # local_main_at_Main_internal_37 = SELF
      sw $s1, -152($fp)
      # RETURN local_main_at_Main_internal_37
      lw $v0, -152($fp)
      # Deallocate stack frame for function function_main_at_Main.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 160
      jr $ra
      # Function END

