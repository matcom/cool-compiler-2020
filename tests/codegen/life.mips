.text
.globl main
main:
# Save method directions in the methods array
la $v0, methods
la $t9, entry
sw $t9, 0($v0)
la $t9, function_abort_Object
sw $t9, 4($v0)
la $t9, function_type_name_Object
sw $t9, 8($v0)
la $t9, function_copy_Object
sw $t9, 12($v0)
la $t9, function_out_string_IO
sw $t9, 16($v0)
la $t9, function_out_int_IO
sw $t9, 20($v0)
la $t9, function_in_int_IO
sw $t9, 24($v0)
la $t9, function_in_string_IO
sw $t9, 28($v0)
la $t9, function_length_String
sw $t9, 32($v0)
la $t9, function_concat_String
sw $t9, 36($v0)
la $t9, function_substr_String
sw $t9, 40($v0)
la $t9, function_type_name_String
sw $t9, 44($v0)
la $t9, function_copy_String
sw $t9, 48($v0)
la $t9, function_type_name_Int
sw $t9, 52($v0)
la $t9, function_copy_Int
sw $t9, 56($v0)
la $t9, function_type_name_Bool
sw $t9, 60($v0)
la $t9, function_copy_Bool
sw $t9, 64($v0)
la $t9, function_abort_String
sw $t9, 68($v0)
la $t9, function_abort_Int
sw $t9, 72($v0)
la $t9, function_abort_Bool
sw $t9, 76($v0)
la $t9, function_Board_Board
sw $t9, 80($v0)
la $t9, function_size_of_board_Board
sw $t9, 84($v0)
la $t9, function_board_init_Board
sw $t9, 88($v0)
la $t9, function_CellularAutomaton_CellularAutomaton
sw $t9, 92($v0)
la $t9, function_init_CellularAutomaton
sw $t9, 96($v0)
la $t9, function_print_CellularAutomaton
sw $t9, 100($v0)
la $t9, function_num_cells_CellularAutomaton
sw $t9, 104($v0)
la $t9, function_cell_CellularAutomaton
sw $t9, 108($v0)
la $t9, function_north_CellularAutomaton
sw $t9, 112($v0)
la $t9, function_south_CellularAutomaton
sw $t9, 116($v0)
la $t9, function_east_CellularAutomaton
sw $t9, 120($v0)
la $t9, function_west_CellularAutomaton
sw $t9, 124($v0)
la $t9, function_northwest_CellularAutomaton
sw $t9, 128($v0)
la $t9, function_northeast_CellularAutomaton
sw $t9, 132($v0)
la $t9, function_southeast_CellularAutomaton
sw $t9, 136($v0)
la $t9, function_southwest_CellularAutomaton
sw $t9, 140($v0)
la $t9, function_neighbors_CellularAutomaton
sw $t9, 144($v0)
la $t9, function_cell_at_next_evolution_CellularAutomaton
sw $t9, 148($v0)
la $t9, function_evolve_CellularAutomaton
sw $t9, 152($v0)
la $t9, function_option_CellularAutomaton
sw $t9, 156($v0)
la $t9, function_prompt_CellularAutomaton
sw $t9, 160($v0)
la $t9, function_prompt2_CellularAutomaton
sw $t9, 164($v0)
la $t9, function_Main_Main
sw $t9, 168($v0)
la $t9, function_main_Main
sw $t9, 172($v0)
# Save types directions in the types array
la $t9, types
# Save space to locate the type info
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_String
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 0($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 28
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_length_String in a0
lw $a0, 32($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_concat_String in a0
lw $a0, 36($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_substr_String in a0
lw $a0, 40($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_abort_String in a0
lw $a0, 68($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_type_name_String in a0
lw $a0, 44($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_copy_String in a0
lw $a0, 48($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Int
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 4($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Int in a0
lw $a0, 72($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Int in a0
lw $a0, 52($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Int in a0
lw $a0, 56($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Object
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 8($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bool
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 12($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Bool in a0
lw $a0, 76($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Bool in a0
lw $a0, 60($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Bool in a0
lw $a0, 64($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_IO
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 16($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Board
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 20($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 44
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_size_of_board_Board in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_board_init_Board in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Board_Board in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_CellularAutomaton
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 24($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 120
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_size_of_board_Board in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_board_init_Board in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Board_Board in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_init_CellularAutomaton in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_print_CellularAutomaton in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_num_cells_CellularAutomaton in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_cell_CellularAutomaton in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_north_CellularAutomaton in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
# Save the direction of the method function_south_CellularAutomaton in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 64($v0)
# Save the direction of the method function_east_CellularAutomaton in a0
lw $a0, 120($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 68($v0)
# Save the direction of the method function_west_CellularAutomaton in a0
lw $a0, 124($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 72($v0)
# Save the direction of the method function_northwest_CellularAutomaton in a0
lw $a0, 128($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 76($v0)
# Save the direction of the method function_northeast_CellularAutomaton in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 80($v0)
# Save the direction of the method function_southeast_CellularAutomaton in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 84($v0)
# Save the direction of the method function_southwest_CellularAutomaton in a0
lw $a0, 140($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 88($v0)
# Save the direction of the method function_neighbors_CellularAutomaton in a0
lw $a0, 144($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 92($v0)
# Save the direction of the method function_cell_at_next_evolution_CellularAutomaton in a0
lw $a0, 148($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 96($v0)
# Save the direction of the method function_evolve_CellularAutomaton in a0
lw $a0, 152($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 100($v0)
# Save the direction of the method function_option_CellularAutomaton in a0
lw $a0, 156($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 104($v0)
# Save the direction of the method function_prompt_CellularAutomaton in a0
lw $a0, 160($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 108($v0)
# Save the direction of the method function_prompt2_CellularAutomaton in a0
lw $a0, 164($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 112($v0)
# Save the direction of the method function_CellularAutomaton_CellularAutomaton in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 116($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Main
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 28($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 128
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_size_of_board_Board in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_board_init_Board in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Board_Board in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_init_CellularAutomaton in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_print_CellularAutomaton in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_num_cells_CellularAutomaton in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_cell_CellularAutomaton in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_north_CellularAutomaton in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
# Save the direction of the method function_south_CellularAutomaton in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 64($v0)
# Save the direction of the method function_east_CellularAutomaton in a0
lw $a0, 120($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 68($v0)
# Save the direction of the method function_west_CellularAutomaton in a0
lw $a0, 124($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 72($v0)
# Save the direction of the method function_northwest_CellularAutomaton in a0
lw $a0, 128($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 76($v0)
# Save the direction of the method function_northeast_CellularAutomaton in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 80($v0)
# Save the direction of the method function_southeast_CellularAutomaton in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 84($v0)
# Save the direction of the method function_southwest_CellularAutomaton in a0
lw $a0, 140($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 88($v0)
# Save the direction of the method function_neighbors_CellularAutomaton in a0
lw $a0, 144($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 92($v0)
# Save the direction of the method function_cell_at_next_evolution_CellularAutomaton in a0
lw $a0, 148($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 96($v0)
# Save the direction of the method function_evolve_CellularAutomaton in a0
lw $a0, 152($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 100($v0)
# Save the direction of the method function_option_CellularAutomaton in a0
lw $a0, 156($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 104($v0)
# Save the direction of the method function_prompt_CellularAutomaton in a0
lw $a0, 160($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 108($v0)
# Save the direction of the method function_prompt2_CellularAutomaton in a0
lw $a0, 164($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 112($v0)
# Save the direction of the method function_CellularAutomaton_CellularAutomaton in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 116($v0)
# Save the direction of the method function_main_Main in a0
lw $a0, 172($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 120($v0)
# Save the direction of the method function_Main_Main in a0
lw $a0, 168($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 124($v0)
sw $v0, 8($t8)
# Copying parents
lw $v0, 0($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 4($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 8($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 12($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 16($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 20($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 24($t9)
lw $t8, 20($t9)
sw $t8, 4($v0)
lw $v0, 28($t9)
lw $t8, 24($t9)
sw $t8, 4($v0)

entry:
# Gets the params from the stack
move $fp, $sp
# Gets the frame pointer from the stack
# Updates stack pointer pushing local__internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local__internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 32
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Main
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 32
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
# This function will consume the arguments
jal function_Main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# Static Dispatch of the method main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
li $v0, 0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Object_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_abort_Object_self_0
move $t1, $t0
sw $t1, -4($fp)
# Exiting the program
li $t8, 0
# Printing abort message
li $v0, 4
la $a0, abort_msg
syscall
li $v0, 4
lw $a0, 0($t0)
syscall
li $v0, 4
la $a0, new_line
syscall
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)
sw $t1, -4($fp)

function_type_name_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_type_name_Object_result_0 <- Type of self
lw $t1, 0($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t9, 4($t0)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
move $a0, $t9
syscall
move $t1, $v0
# Loop to copy every field of the previous object
# t8 the register to loop
li $t8, 0
loop_0:
# In t9 is stored the size of the object
bge $t8, $t9, exit_0
lw $a0, ($t0)
sw $a0, ($v0)
addi $v0, $v0, 4
addi $t0, $t0, 4
# Increase loop counter
addi $t8, $t8, 4
j loop_0
exit_0:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_out_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_string_String_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_string_String_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing a string
li $v0, 4
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_out_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value number
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_int_IO_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_int_IO_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing an int
li $v0, 1
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_in_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_int_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Reading a int
li $v0, 5
syscall
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_in_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_string_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t0, $v0
# Reading a string
# Putting buffer in a0
move $a0, $t0
# Putting length of string in a1
li $a1, 356
li $v0, 8
syscall
# Walks to eliminate the newline
move $t9, $t0
start_1:
lb $t8, 0($t9)
beqz $t8, end_1
add $t9, $t9, 1
j start_1
end_1:
addiu $t9, $t9, -1
sb $0, ($t9)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_length_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_length_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
move $t8, $t0
# Determining the length of a string
loop_2:
lb $t9, 0($t8)
beq $t9, $zero, end_2
addi $t8, $t8, 1
j loop_2
end_2:
sub $t1, $t8, $t0
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_concat_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_concat_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -8($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t2
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
# Concatenate second string on result buffer
move $a0, $t1
move $a1, $v0
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_3
# Definition of strcopier
strcopier:
# In a0 is the source and in a1 is the destination
loop_3:
lb $t8, ($a0)
beq $t8, $zero, end_3
addiu $a0, $a0, 1
sb $t8, ($a1)
addiu $a1, $a1, 1
b loop_3
end_3:
move $v0, $a1
jr $ra
finish_3:
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_substr_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value begin
addiu $fp, $fp, 4
# Pops the register with the param value end
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_substr_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
lw $t3, -8($fp)
# Getting the substring of a node
# Move to the first position in the string
li $v0, 0
move $t8, $t3
start_4:
lb $t9, 0($t8)
beqz $t9, error_4
addi $v0, 1
bgt $v0, $t0, end_len_4
addi $t8, 1
j start_4
end_len_4:
# Saving dest to iterate over him
move $v0, $t2
loop_4:
sub $t9, $v0, $t2
beq $t9, $t1, end_4
lb $t9, 0($t8)
beqz $t9, error_4
sb $t9, 0($v0)
addi $t8, $t8, 1
addi $v0, $v0, 1
j loop_4
error_4:
la $a0, index_error
li $v0, 4
move $a0, $t3
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 1
move $a0, $t1
syscall
j .raise
end_4:
sb $0, 0($v0)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_type_name_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_String_result_0 type_String
la $t0, type_String
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t1, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t1
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_5
finish_5:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Int_result_0 type_Int
la $t0, type_Int
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_Int_result_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Bool_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Bool_result_0 type_Bool
la $t0, type_Bool
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_result_Bool_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_result_Bool_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_String_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self string_abort
la $t0, string_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Int_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self int_abort
la $t0, int_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Bool_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self bool_abort
la $t0, bool_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_Board_Board:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Board_Board_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . rows <- SET 0
li $t9, 0
sw $t9, 12($t0)
# self . columns <- SET 0
li $t9, 0
sw $t9, 16($t0)
# self . board_size <- SET 0
li $t9, 0
sw $t9, 20($t0)
lw $t1, -4($fp)
# Moving self to local_Board_Board_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_size_of_board_Board:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value initial
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_size_of_board_Board_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_size_of_board_Board_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_size_of_board_Board_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -12($fp)
# local_size_of_board_Board_internal_1 <- Type of initial
la $t1, type_String
lw $t2, -16($fp)
# Saves in local_size_of_board_Board_internal_2 data_0
la $t2, data_0
# local_size_of_board_Board_internal_1 <- local_size_of_board_Board_internal_1 = local_size_of_board_Board_internal_2
move $t8, $t1
move $t9, $t2
loop_6:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_6
beqz $a1, mismatch_6
seq $v0, $a0, $a1
beqz $v0, mismatch_6
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_6
mismatch_6:
li $v0, 0
j end_6
check_6:
bnez $a1, mismatch_6
li $v0, 1
end_6:
move $t1, $v0
# If not local_size_of_board_Board_internal_1 goto continue__60
sw $t0, -0($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
beqz $t1, continue__60
la $a0, dispatch_error
j .raise
continue__60:
lw $t0, -8($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_board_init_Board:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value start
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_board_init_Board_size_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_board_init_Board_internal_21 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_size_of_board_Board
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_board_init_Board_internal_1 to local_board_init_Board_size_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -16($fp)
# local_board_init_Board_internal_2 <- local_board_init_Board_size_0 = 15
li $t9, 15
seq $t2, $t1, $t9
# If local_board_init_Board_internal_2 goto true__82
sw $t0, -12($fp)
sw $t1, -8($fp)
sw $t2, -16($fp)
bnez $t2, true__82
lw $t0, -8($fp)
lw $t1, -24($fp)
# local_board_init_Board_internal_4 <- local_board_init_Board_size_0 = 16
li $t9, 16
seq $t1, $t0, $t9
# If local_board_init_Board_internal_4 goto true__86
sw $t0, -8($fp)
sw $t1, -24($fp)
bnez $t1, true__86
lw $t0, -8($fp)
lw $t1, -32($fp)
# local_board_init_Board_internal_6 <- local_board_init_Board_size_0 = 20
li $t9, 20
seq $t1, $t0, $t9
# If local_board_init_Board_internal_6 goto true__90
sw $t0, -8($fp)
sw $t1, -32($fp)
bnez $t1, true__90
lw $t0, -8($fp)
lw $t1, -40($fp)
# local_board_init_Board_internal_8 <- local_board_init_Board_size_0 = 21
li $t9, 21
seq $t1, $t0, $t9
# If local_board_init_Board_internal_8 goto true__94
sw $t0, -8($fp)
sw $t1, -40($fp)
bnez $t1, true__94
lw $t0, -8($fp)
lw $t1, -48($fp)
# local_board_init_Board_internal_10 <- local_board_init_Board_size_0 = 25
li $t9, 25
seq $t1, $t0, $t9
# If local_board_init_Board_internal_10 goto true__98
sw $t0, -8($fp)
sw $t1, -48($fp)
bnez $t1, true__98
lw $t0, -8($fp)
lw $t1, -56($fp)
# local_board_init_Board_internal_12 <- local_board_init_Board_size_0 = 28
li $t9, 28
seq $t1, $t0, $t9
# If local_board_init_Board_internal_12 goto true__102
sw $t0, -8($fp)
sw $t1, -56($fp)
bnez $t1, true__102
lw $t0, -4($fp)
# self . rows <- SET 5
li $t9, 5
sw $t9, 12($t0)
# self . columns <- SET 5
li $t9, 5
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -64($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_14
move $t2, $t1
sw $t2, -64($fp)
lw $t3, -60($fp)
# Moving local_board_init_Board_internal_14 to local_board_init_Board_internal_13
move $t3, $t2
sw $t3, -60($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -64($fp)
sw $t3, -60($fp)
j end__102
true__102:
lw $t0, -4($fp)
# self . rows <- SET 7
li $t9, 7
sw $t9, 12($t0)
# self . columns <- SET 4
li $t9, 4
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -68($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_15
move $t2, $t1
sw $t2, -68($fp)
lw $t3, -60($fp)
# Moving local_board_init_Board_internal_15 to local_board_init_Board_internal_13
move $t3, $t2
sw $t3, -60($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -68($fp)
sw $t3, -60($fp)
end__102:
lw $t0, -60($fp)
lw $t1, -52($fp)
# Moving local_board_init_Board_internal_13 to local_board_init_Board_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -60($fp)
sw $t1, -52($fp)
j end__98
true__98:
lw $t0, -4($fp)
# self . rows <- SET 5
li $t9, 5
sw $t9, 12($t0)
# self . columns <- SET 5
li $t9, 5
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -72($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_16
move $t2, $t1
sw $t2, -72($fp)
lw $t3, -52($fp)
# Moving local_board_init_Board_internal_16 to local_board_init_Board_internal_11
move $t3, $t2
sw $t3, -52($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -72($fp)
sw $t3, -52($fp)
end__98:
lw $t0, -52($fp)
lw $t1, -44($fp)
# Moving local_board_init_Board_internal_11 to local_board_init_Board_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -52($fp)
sw $t1, -44($fp)
j end__94
true__94:
lw $t0, -4($fp)
# self . rows <- SET 3
li $t9, 3
sw $t9, 12($t0)
# self . columns <- SET 7
li $t9, 7
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -76($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_17
move $t2, $t1
sw $t2, -76($fp)
lw $t3, -44($fp)
# Moving local_board_init_Board_internal_17 to local_board_init_Board_internal_9
move $t3, $t2
sw $t3, -44($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -76($fp)
sw $t3, -44($fp)
end__94:
lw $t0, -44($fp)
lw $t1, -36($fp)
# Moving local_board_init_Board_internal_9 to local_board_init_Board_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -44($fp)
sw $t1, -36($fp)
j end__90
true__90:
lw $t0, -4($fp)
# self . rows <- SET 4
li $t9, 4
sw $t9, 12($t0)
# self . columns <- SET 5
li $t9, 5
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -80($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_18
move $t2, $t1
sw $t2, -80($fp)
lw $t3, -36($fp)
# Moving local_board_init_Board_internal_18 to local_board_init_Board_internal_7
move $t3, $t2
sw $t3, -36($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -80($fp)
sw $t3, -36($fp)
end__90:
lw $t0, -36($fp)
lw $t1, -28($fp)
# Moving local_board_init_Board_internal_7 to local_board_init_Board_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -36($fp)
sw $t1, -28($fp)
j end__86
true__86:
lw $t0, -4($fp)
# self . rows <- SET 4
li $t9, 4
sw $t9, 12($t0)
# self . columns <- SET 4
li $t9, 4
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -84($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_19
move $t2, $t1
sw $t2, -84($fp)
lw $t3, -28($fp)
# Moving local_board_init_Board_internal_19 to local_board_init_Board_internal_5
move $t3, $t2
sw $t3, -28($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -84($fp)
sw $t3, -28($fp)
end__86:
lw $t0, -28($fp)
lw $t1, -20($fp)
# Moving local_board_init_Board_internal_5 to local_board_init_Board_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -28($fp)
sw $t1, -20($fp)
j end__82
true__82:
lw $t0, -4($fp)
# self . rows <- SET 3
li $t9, 3
sw $t9, 12($t0)
# self . columns <- SET 5
li $t9, 5
sw $t9, 16($t0)
lw $t1, -8($fp)
# self . board_size <- SET local_board_init_Board_size_0
sw $t1, 20($t0)
lw $t2, -88($fp)
# Moving local_board_init_Board_size_0 to local_board_init_Board_internal_20
move $t2, $t1
sw $t2, -88($fp)
lw $t3, -20($fp)
# Moving local_board_init_Board_internal_20 to local_board_init_Board_internal_3
move $t3, $t2
sw $t3, -20($fp)
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -88($fp)
sw $t3, -20($fp)
end__82:
lw $t0, -4($fp)
lw $t1, -92($fp)
# Moving self to local_board_init_Board_internal_21
move $t1, $t0
sw $t1, -92($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -92($fp)
# Removing all locals from stack
addiu $sp, $sp, 96
jr $ra


function_CellularAutomaton_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_CellularAutomaton_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_CellularAutomaton_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . rows <- SET 0
li $t9, 0
sw $t9, 12($t0)
# self . columns <- SET 0
li $t9, 0
sw $t9, 16($t0)
# self . board_size <- SET 0
li $t9, 0
sw $t9, 20($t0)
lw $t1, -4($fp)
# Saves in local_CellularAutomaton_CellularAutomaton_internal_0 data_1
la $t1, data_1
# self . population_map <- SET local_CellularAutomaton_CellularAutomaton_internal_0
sw $t1, 24($t0)
lw $t2, -8($fp)
# Moving self to local_CellularAutomaton_CellularAutomaton_internal_1
move $t2, $t0
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_init_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value map
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_init_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_init_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# self . population_map <- SET map
sw $t0, 24($t1)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_board_init_Board
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -12($fp)
# Moving self to local_init_CellularAutomaton_internal_1
move $t2, $t1
sw $t2, -12($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_print_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_CellularAutomaton_i_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_num_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_board_size_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_population_map_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_columns_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_columns_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_CellularAutomaton_internal_20 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 0 to local_print_CellularAutomaton_i_0
li $t0, 0
sw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_print_CellularAutomaton_board_size_2 <- GET self . board_size
lw $t2, 20($t1)
lw $t3, -8($fp)
# Moving local_print_CellularAutomaton_board_size_2 to local_print_CellularAutomaton_num_1
move $t3, $t2
sw $t3, -8($fp)
lw $t4, -16($fp)
# Saves in local_print_CellularAutomaton_internal_3 data_2
la $t4, data_2
lw $t5, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
sw $t4, -16($fp)
sw $t5, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t1, $v0
sw $t0, -20($fp)
sw $t1, -24($fp)
start__210:
lw $t0, -4($fp)
lw $t1, -8($fp)
lw $t2, -28($fp)
# local_print_CellularAutomaton_internal_6 <- local_print_CellularAutomaton_i_0 < local_print_CellularAutomaton_num_1
slt $t2, $t0, $t1
# If not local_print_CellularAutomaton_internal_6 goto end__210
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -28($fp)
beqz $t2, end__210
lw $t0, -0($fp)
lw $t1, -32($fp)
# local_print_CellularAutomaton_population_map_7 <- GET self . population_map
lw $t1, 24($t0)
lw $t2, -36($fp)
# local_print_CellularAutomaton_columns_8 <- GET self . columns
lw $t2, 16($t0)
lw $t3, -44($fp)
# local_print_CellularAutomaton_internal_10 <- Type of local_print_CellularAutomaton_population_map_7
la $t3, type_String
lw $t4, -48($fp)
# Saves in local_print_CellularAutomaton_internal_11 data_0
la $t4, data_0
# local_print_CellularAutomaton_internal_10 <- local_print_CellularAutomaton_internal_10 = local_print_CellularAutomaton_internal_11
move $t8, $t3
move $t9, $t4
loop_7:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_7
beqz $a1, mismatch_7
seq $v0, $a0, $a1
beqz $v0, mismatch_7
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_7
mismatch_7:
li $v0, 0
j end_7
check_7:
bnez $a1, mismatch_7
li $v0, 1
end_7:
move $t3, $v0
# If not local_print_CellularAutomaton_internal_10 goto continue__225
sw $t0, -0($fp)
sw $t1, -32($fp)
sw $t2, -36($fp)
sw $t3, -44($fp)
sw $t4, -48($fp)
beqz $t3, continue__225
la $a0, dispatch_error
j .raise
continue__225:
lw $t0, -40($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -36($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -4($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -32($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -36($fp)
sw $t2, -4($fp)
sw $t3, -32($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -0($fp)
sw $t2, -52($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -56($fp)
# Saves in local_print_CellularAutomaton_internal_13 data_3
la $t1, data_3
lw $t2, -0($fp)
lw $t3, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -52($fp)
sw $t1, -56($fp)
sw $t2, -0($fp)
sw $t3, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -68($fp)
# local_print_CellularAutomaton_columns_16 <- GET self . columns
lw $t2, 16($t1)
lw $t3, -4($fp)
lw $t4, -64($fp)
# local_print_CellularAutomaton_internal_15 <- local_print_CellularAutomaton_i_0 + local_print_CellularAutomaton_columns_16
add $t4, $t3, $t2
# Moving local_print_CellularAutomaton_internal_15 to local_print_CellularAutomaton_i_0
move $t3, $t4
sw $t3, -4($fp)
lw $t5, -72($fp)
# Moving local_print_CellularAutomaton_internal_15 to local_print_CellularAutomaton_internal_17
move $t5, $t4
sw $t5, -72($fp)
lw $t6, -24($fp)
# Moving local_print_CellularAutomaton_internal_17 to local_print_CellularAutomaton_internal_5
move $t6, $t5
sw $t6, -24($fp)
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
sw $t3, -4($fp)
sw $t4, -64($fp)
sw $t5, -72($fp)
sw $t6, -24($fp)
j start__210
end__210:
lw $t0, -76($fp)
# Saves in local_print_CellularAutomaton_internal_18 data_4
la $t0, data_4
lw $t1, -0($fp)
lw $t2, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -76($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -84($fp)
# Moving self to local_print_CellularAutomaton_internal_20
move $t2, $t1
sw $t2, -84($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -80($fp)
sw $t1, -0($fp)
sw $t2, -84($fp)
# Removing all locals from stack
addiu $sp, $sp, 88
jr $ra


function_num_cells_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_num_cells_CellularAutomaton_population_map_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_num_cells_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_num_cells_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_num_cells_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_num_cells_CellularAutomaton_population_map_0 <- GET self . population_map
lw $t1, 24($t0)
lw $t2, -12($fp)
# local_num_cells_CellularAutomaton_internal_2 <- Type of local_num_cells_CellularAutomaton_population_map_0
la $t2, type_String
lw $t3, -16($fp)
# Saves in local_num_cells_CellularAutomaton_internal_3 data_0
la $t3, data_0
# local_num_cells_CellularAutomaton_internal_2 <- local_num_cells_CellularAutomaton_internal_2 = local_num_cells_CellularAutomaton_internal_3
move $t8, $t2
move $t9, $t3
loop_8:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_8
beqz $a1, mismatch_8
seq $v0, $a0, $a1
beqz $v0, mismatch_8
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_8
mismatch_8:
li $v0, 0
j end_8
check_8:
bnez $a1, mismatch_8
li $v0, 1
end_8:
move $t2, $v0
# If not local_num_cells_CellularAutomaton_internal_2 goto continue__271
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
beqz $t2, continue__271
la $a0, dispatch_error
j .raise
continue__271:
lw $t0, -8($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -4($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_cell_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_board_size_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_population_map_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -16($fp)
# local_cell_CellularAutomaton_board_size_2 <- GET self . board_size
lw $t1, 20($t0)
lw $t2, -12($fp)
# local_cell_CellularAutomaton_internal_1 <- local_cell_CellularAutomaton_board_size_2 - 1
addi $t2, $t1, -1
lw $t3, -0($fp)
lw $t4, -8($fp)
# local_cell_CellularAutomaton_internal_0 <- local_cell_CellularAutomaton_internal_1 < position
slt $t4, $t2, $t3
# If local_cell_CellularAutomaton_internal_0 goto true__291
sw $t0, -4($fp)
sw $t1, -16($fp)
sw $t2, -12($fp)
sw $t3, -0($fp)
sw $t4, -8($fp)
bnez $t4, true__291
lw $t0, -4($fp)
lw $t1, -24($fp)
# local_cell_CellularAutomaton_population_map_4 <- GET self . population_map
lw $t1, 24($t0)
lw $t2, -32($fp)
# local_cell_CellularAutomaton_internal_6 <- Type of local_cell_CellularAutomaton_population_map_4
la $t2, type_String
lw $t3, -36($fp)
# Saves in local_cell_CellularAutomaton_internal_7 data_0
la $t3, data_0
# local_cell_CellularAutomaton_internal_6 <- local_cell_CellularAutomaton_internal_6 = local_cell_CellularAutomaton_internal_7
move $t8, $t2
move $t9, $t3
loop_9:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_9
beqz $a1, mismatch_9
seq $v0, $a0, $a1
beqz $v0, mismatch_9
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_9
mismatch_9:
li $v0, 0
j end_9
check_9:
bnez $a1, mismatch_9
li $v0, 1
end_9:
move $t2, $v0
# If not local_cell_CellularAutomaton_internal_6 goto continue__299
sw $t0, -4($fp)
sw $t1, -24($fp)
sw $t2, -32($fp)
sw $t3, -36($fp)
beqz $t2, continue__299
la $a0, dispatch_error
j .raise
continue__299:
lw $t0, -28($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -24($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -0($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_cell_CellularAutomaton_internal_5 to local_cell_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -28($fp)
sw $t1, -20($fp)
j end__291
true__291:
lw $t0, -40($fp)
# Saves in local_cell_CellularAutomaton_internal_8 data_5
la $t0, data_5
lw $t1, -20($fp)
# Moving local_cell_CellularAutomaton_internal_8 to local_cell_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -40($fp)
sw $t1, -20($fp)
end__291:
lw $t0, -20($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 44
jr $ra


function_north_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_north_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_columns_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_columns_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_north_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -16($fp)
# local_north_CellularAutomaton_columns_2 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -12($fp)
# local_north_CellularAutomaton_internal_1 <- position - local_north_CellularAutomaton_columns_2
sub $t3, $t2, $t1
lw $t4, -8($fp)
# local_north_CellularAutomaton_internal_0 <- local_north_CellularAutomaton_internal_1 < 0
li $t9, 0
slt $t4, $t3, $t9
# If local_north_CellularAutomaton_internal_0 goto true__327
sw $t0, -4($fp)
sw $t1, -16($fp)
sw $t2, -0($fp)
sw $t3, -12($fp)
sw $t4, -8($fp)
bnez $t4, true__327
lw $t0, -4($fp)
lw $t1, -28($fp)
# local_north_CellularAutomaton_columns_5 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -24($fp)
# local_north_CellularAutomaton_internal_4 <- position - local_north_CellularAutomaton_columns_5
sub $t3, $t2, $t1
lw $t4, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cell_CellularAutomaton
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
sw $t4, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_north_CellularAutomaton_internal_6 to local_north_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -32($fp)
sw $t1, -20($fp)
j end__327
true__327:
lw $t0, -36($fp)
# Saves in local_north_CellularAutomaton_internal_7 data_6
la $t0, data_6
lw $t1, -20($fp)
# Moving local_north_CellularAutomaton_internal_7 to local_north_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -36($fp)
sw $t1, -20($fp)
end__327:
lw $t0, -20($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_south_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_south_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_board_size_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_columns_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_columns_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_south_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# local_south_CellularAutomaton_board_size_1 <- GET self . board_size
lw $t1, 20($t0)
lw $t2, -20($fp)
# local_south_CellularAutomaton_columns_3 <- GET self . columns
lw $t2, 16($t0)
lw $t3, -0($fp)
lw $t4, -16($fp)
# local_south_CellularAutomaton_internal_2 <- position + local_south_CellularAutomaton_columns_3
add $t4, $t3, $t2
lw $t5, -8($fp)
# local_south_CellularAutomaton_internal_0 <- local_south_CellularAutomaton_board_size_1 < local_south_CellularAutomaton_internal_2
slt $t5, $t1, $t4
# If local_south_CellularAutomaton_internal_0 goto true__357
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -20($fp)
sw $t3, -0($fp)
sw $t4, -16($fp)
sw $t5, -8($fp)
bnez $t5, true__357
lw $t0, -4($fp)
lw $t1, -32($fp)
# local_south_CellularAutomaton_columns_6 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -28($fp)
# local_south_CellularAutomaton_internal_5 <- position + local_south_CellularAutomaton_columns_6
add $t3, $t2, $t1
lw $t4, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cell_CellularAutomaton
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -32($fp)
sw $t2, -0($fp)
sw $t3, -28($fp)
sw $t4, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_south_CellularAutomaton_internal_7 to local_south_CellularAutomaton_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -36($fp)
sw $t1, -24($fp)
j end__357
true__357:
lw $t0, -40($fp)
# Saves in local_south_CellularAutomaton_internal_8 data_7
la $t0, data_7
lw $t1, -24($fp)
# Moving local_south_CellularAutomaton_internal_8 to local_south_CellularAutomaton_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -40($fp)
sw $t1, -24($fp)
end__357:
lw $t0, -24($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 44
jr $ra


function_east_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_east_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_columns_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_columns_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_east_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -20($fp)
# local_east_CellularAutomaton_internal_3 <- position + 1
addi $t1, $t0, 1
lw $t2, -4($fp)
lw $t3, -24($fp)
# local_east_CellularAutomaton_columns_4 <- GET self . columns
lw $t3, 16($t2)
lw $t4, -16($fp)
# local_east_CellularAutomaton_internal_2 <- local_east_CellularAutomaton_internal_3 / local_east_CellularAutomaton_columns_4
la $a0, zero_error
beqz $t3, .raise
div $t1, $t3
mflo $t4
lw $t5, -28($fp)
# local_east_CellularAutomaton_columns_5 <- GET self . columns
lw $t5, 16($t2)
lw $t6, -12($fp)
# local_east_CellularAutomaton_internal_1 <- local_east_CellularAutomaton_internal_2 * local_east_CellularAutomaton_columns_5
mult $t4, $t5
mflo $t6
lw $t7, -32($fp)
# local_east_CellularAutomaton_internal_6 <- position + 1
addi $t7, $t0, 1
lw $a1, -8($fp)
# local_east_CellularAutomaton_internal_0 <- local_east_CellularAutomaton_internal_1 = local_east_CellularAutomaton_internal_6
seq $a1, $t6, $t7
# If local_east_CellularAutomaton_internal_0 goto true__393
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -4($fp)
sw $t3, -24($fp)
sw $t4, -16($fp)
sw $t5, -28($fp)
sw $t6, -12($fp)
sw $t7, -32($fp)
sw $a1, -8($fp)
bnez $a1, true__393
lw $t0, -0($fp)
lw $t1, -40($fp)
# local_east_CellularAutomaton_internal_8 <- position + 1
addi $t1, $t0, 1
lw $t2, -4($fp)
lw $t3, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cell_CellularAutomaton
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -4($fp)
sw $t3, -44($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_east_CellularAutomaton_internal_9 to local_east_CellularAutomaton_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -44($fp)
sw $t1, -36($fp)
j end__393
true__393:
lw $t0, -48($fp)
# Saves in local_east_CellularAutomaton_internal_10 data_8
la $t0, data_8
lw $t1, -36($fp)
# Moving local_east_CellularAutomaton_internal_10 to local_east_CellularAutomaton_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -48($fp)
sw $t1, -36($fp)
end__393:
lw $t0, -36($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 52
jr $ra


function_west_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_west_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_columns_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_columns_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_west_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_west_CellularAutomaton_internal_0 <- position = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_west_CellularAutomaton_internal_0 goto true__415
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__415
lw $t0, -4($fp)
lw $t1, -28($fp)
# local_west_CellularAutomaton_columns_5 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -24($fp)
# local_west_CellularAutomaton_internal_4 <- position / local_west_CellularAutomaton_columns_5
la $a0, zero_error
beqz $t1, .raise
div $t2, $t1
mflo $t3
lw $t4, -32($fp)
# local_west_CellularAutomaton_columns_6 <- GET self . columns
lw $t4, 16($t0)
lw $t5, -20($fp)
# local_west_CellularAutomaton_internal_3 <- local_west_CellularAutomaton_internal_4 * local_west_CellularAutomaton_columns_6
mult $t3, $t4
mflo $t5
lw $t6, -16($fp)
# local_west_CellularAutomaton_internal_2 <- local_west_CellularAutomaton_internal_3 = position
seq $t6, $t5, $t2
# If local_west_CellularAutomaton_internal_2 goto true__427
sw $t0, -4($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
sw $t4, -32($fp)
sw $t5, -20($fp)
sw $t6, -16($fp)
bnez $t6, true__427
lw $t0, -0($fp)
lw $t1, -40($fp)
# local_west_CellularAutomaton_internal_8 <- position - 1
addi $t1, $t0, -1
lw $t2, -4($fp)
lw $t3, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cell_CellularAutomaton
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -4($fp)
sw $t3, -44($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_west_CellularAutomaton_internal_9 to local_west_CellularAutomaton_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -44($fp)
sw $t1, -36($fp)
j end__427
true__427:
lw $t0, -48($fp)
# Saves in local_west_CellularAutomaton_internal_10 data_9
la $t0, data_9
lw $t1, -36($fp)
# Moving local_west_CellularAutomaton_internal_10 to local_west_CellularAutomaton_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -48($fp)
sw $t1, -36($fp)
end__427:
lw $t0, -36($fp)
lw $t1, -12($fp)
# Moving local_west_CellularAutomaton_internal_7 to local_west_CellularAutomaton_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -36($fp)
sw $t1, -12($fp)
j end__415
true__415:
lw $t0, -52($fp)
# Saves in local_west_CellularAutomaton_internal_11 data_10
la $t0, data_10
lw $t1, -12($fp)
# Moving local_west_CellularAutomaton_internal_11 to local_west_CellularAutomaton_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -52($fp)
sw $t1, -12($fp)
end__415:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_northwest_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_columns_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_columns_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_columns_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northwest_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -16($fp)
# local_northwest_CellularAutomaton_columns_2 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -12($fp)
# local_northwest_CellularAutomaton_internal_1 <- position - local_northwest_CellularAutomaton_columns_2
sub $t3, $t2, $t1
lw $t4, -8($fp)
# local_northwest_CellularAutomaton_internal_0 <- local_northwest_CellularAutomaton_internal_1 < 0
li $t9, 0
slt $t4, $t3, $t9
# If local_northwest_CellularAutomaton_internal_0 goto true__461
sw $t0, -4($fp)
sw $t1, -16($fp)
sw $t2, -0($fp)
sw $t3, -12($fp)
sw $t4, -8($fp)
bnez $t4, true__461
lw $t0, -4($fp)
lw $t1, -36($fp)
# local_northwest_CellularAutomaton_columns_7 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -32($fp)
# local_northwest_CellularAutomaton_internal_6 <- position / local_northwest_CellularAutomaton_columns_7
la $a0, zero_error
beqz $t1, .raise
div $t2, $t1
mflo $t3
lw $t4, -40($fp)
# local_northwest_CellularAutomaton_columns_8 <- GET self . columns
lw $t4, 16($t0)
lw $t5, -28($fp)
# local_northwest_CellularAutomaton_internal_5 <- local_northwest_CellularAutomaton_internal_6 * local_northwest_CellularAutomaton_columns_8
mult $t3, $t4
mflo $t5
lw $t6, -24($fp)
# local_northwest_CellularAutomaton_internal_4 <- local_northwest_CellularAutomaton_internal_5 = position
seq $t6, $t5, $t2
# If local_northwest_CellularAutomaton_internal_4 goto true__473
sw $t0, -4($fp)
sw $t1, -36($fp)
sw $t2, -0($fp)
sw $t3, -32($fp)
sw $t4, -40($fp)
sw $t5, -28($fp)
sw $t6, -24($fp)
bnez $t6, true__473
lw $t0, -0($fp)
lw $t1, -48($fp)
# local_northwest_CellularAutomaton_internal_10 <- position - 1
addi $t1, $t0, -1
lw $t2, -4($fp)
lw $t3, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_north_CellularAutomaton
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -48($fp)
sw $t2, -4($fp)
sw $t3, -52($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Moving local_northwest_CellularAutomaton_internal_11 to local_northwest_CellularAutomaton_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -52($fp)
sw $t1, -44($fp)
j end__473
true__473:
lw $t0, -56($fp)
# Saves in local_northwest_CellularAutomaton_internal_12 data_11
la $t0, data_11
lw $t1, -44($fp)
# Moving local_northwest_CellularAutomaton_internal_12 to local_northwest_CellularAutomaton_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -56($fp)
sw $t1, -44($fp)
end__473:
lw $t0, -44($fp)
lw $t1, -20($fp)
# Moving local_northwest_CellularAutomaton_internal_9 to local_northwest_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -44($fp)
sw $t1, -20($fp)
j end__461
true__461:
lw $t0, -60($fp)
# Saves in local_northwest_CellularAutomaton_internal_13 data_12
la $t0, data_12
lw $t1, -20($fp)
# Moving local_northwest_CellularAutomaton_internal_13 to local_northwest_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -60($fp)
sw $t1, -20($fp)
end__461:
lw $t0, -20($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 64
jr $ra


function_northeast_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_columns_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_columns_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_columns_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_northeast_CellularAutomaton_internal_15 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -16($fp)
# local_northeast_CellularAutomaton_columns_2 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -12($fp)
# local_northeast_CellularAutomaton_internal_1 <- position - local_northeast_CellularAutomaton_columns_2
sub $t3, $t2, $t1
lw $t4, -8($fp)
# local_northeast_CellularAutomaton_internal_0 <- local_northeast_CellularAutomaton_internal_1 < 0
li $t9, 0
slt $t4, $t3, $t9
# If local_northeast_CellularAutomaton_internal_0 goto true__507
sw $t0, -4($fp)
sw $t1, -16($fp)
sw $t2, -0($fp)
sw $t3, -12($fp)
sw $t4, -8($fp)
bnez $t4, true__507
lw $t0, -0($fp)
lw $t1, -36($fp)
# local_northeast_CellularAutomaton_internal_7 <- position + 1
addi $t1, $t0, 1
lw $t2, -4($fp)
lw $t3, -40($fp)
# local_northeast_CellularAutomaton_columns_8 <- GET self . columns
lw $t3, 16($t2)
lw $t4, -32($fp)
# local_northeast_CellularAutomaton_internal_6 <- local_northeast_CellularAutomaton_internal_7 / local_northeast_CellularAutomaton_columns_8
la $a0, zero_error
beqz $t3, .raise
div $t1, $t3
mflo $t4
lw $t5, -44($fp)
# local_northeast_CellularAutomaton_columns_9 <- GET self . columns
lw $t5, 16($t2)
lw $t6, -28($fp)
# local_northeast_CellularAutomaton_internal_5 <- local_northeast_CellularAutomaton_internal_6 * local_northeast_CellularAutomaton_columns_9
mult $t4, $t5
mflo $t6
lw $t7, -48($fp)
# local_northeast_CellularAutomaton_internal_10 <- position + 1
addi $t7, $t0, 1
lw $a1, -24($fp)
# local_northeast_CellularAutomaton_internal_4 <- local_northeast_CellularAutomaton_internal_5 = local_northeast_CellularAutomaton_internal_10
seq $a1, $t6, $t7
# If local_northeast_CellularAutomaton_internal_4 goto true__523
sw $t0, -0($fp)
sw $t1, -36($fp)
sw $t2, -4($fp)
sw $t3, -40($fp)
sw $t4, -32($fp)
sw $t5, -44($fp)
sw $t6, -28($fp)
sw $t7, -48($fp)
sw $a1, -24($fp)
bnez $a1, true__523
lw $t0, -0($fp)
lw $t1, -56($fp)
# local_northeast_CellularAutomaton_internal_12 <- position + 1
addi $t1, $t0, 1
lw $t2, -4($fp)
lw $t3, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_north_CellularAutomaton
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -56($fp)
sw $t2, -4($fp)
sw $t3, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_northeast_CellularAutomaton_internal_13 to local_northeast_CellularAutomaton_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -60($fp)
sw $t1, -52($fp)
j end__523
true__523:
lw $t0, -64($fp)
# Saves in local_northeast_CellularAutomaton_internal_14 data_13
la $t0, data_13
lw $t1, -52($fp)
# Moving local_northeast_CellularAutomaton_internal_14 to local_northeast_CellularAutomaton_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -64($fp)
sw $t1, -52($fp)
end__523:
lw $t0, -52($fp)
lw $t1, -20($fp)
# Moving local_northeast_CellularAutomaton_internal_11 to local_northeast_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -52($fp)
sw $t1, -20($fp)
j end__507
true__507:
lw $t0, -68($fp)
# Saves in local_northeast_CellularAutomaton_internal_15 data_14
la $t0, data_14
lw $t1, -20($fp)
# Moving local_northeast_CellularAutomaton_internal_15 to local_northeast_CellularAutomaton_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -68($fp)
sw $t1, -20($fp)
end__507:
lw $t0, -20($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 72
jr $ra


function_southeast_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_board_size_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_columns_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_columns_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_columns_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southeast_CellularAutomaton_internal_16 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# local_southeast_CellularAutomaton_board_size_1 <- GET self . board_size
lw $t1, 20($t0)
lw $t2, -20($fp)
# local_southeast_CellularAutomaton_columns_3 <- GET self . columns
lw $t2, 16($t0)
lw $t3, -0($fp)
lw $t4, -16($fp)
# local_southeast_CellularAutomaton_internal_2 <- position + local_southeast_CellularAutomaton_columns_3
add $t4, $t3, $t2
lw $t5, -8($fp)
# local_southeast_CellularAutomaton_internal_0 <- local_southeast_CellularAutomaton_board_size_1 < local_southeast_CellularAutomaton_internal_2
slt $t5, $t1, $t4
# If local_southeast_CellularAutomaton_internal_0 goto true__559
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -20($fp)
sw $t3, -0($fp)
sw $t4, -16($fp)
sw $t5, -8($fp)
bnez $t5, true__559
lw $t0, -0($fp)
lw $t1, -40($fp)
# local_southeast_CellularAutomaton_internal_8 <- position + 1
addi $t1, $t0, 1
lw $t2, -4($fp)
lw $t3, -44($fp)
# local_southeast_CellularAutomaton_columns_9 <- GET self . columns
lw $t3, 16($t2)
lw $t4, -36($fp)
# local_southeast_CellularAutomaton_internal_7 <- local_southeast_CellularAutomaton_internal_8 / local_southeast_CellularAutomaton_columns_9
la $a0, zero_error
beqz $t3, .raise
div $t1, $t3
mflo $t4
lw $t5, -48($fp)
# local_southeast_CellularAutomaton_columns_10 <- GET self . columns
lw $t5, 16($t2)
lw $t6, -32($fp)
# local_southeast_CellularAutomaton_internal_6 <- local_southeast_CellularAutomaton_internal_7 * local_southeast_CellularAutomaton_columns_10
mult $t4, $t5
mflo $t6
lw $t7, -52($fp)
# local_southeast_CellularAutomaton_internal_11 <- position + 1
addi $t7, $t0, 1
lw $a1, -28($fp)
# local_southeast_CellularAutomaton_internal_5 <- local_southeast_CellularAutomaton_internal_6 = local_southeast_CellularAutomaton_internal_11
seq $a1, $t6, $t7
# If local_southeast_CellularAutomaton_internal_5 goto true__575
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -4($fp)
sw $t3, -44($fp)
sw $t4, -36($fp)
sw $t5, -48($fp)
sw $t6, -32($fp)
sw $t7, -52($fp)
sw $a1, -28($fp)
bnez $a1, true__575
lw $t0, -0($fp)
lw $t1, -60($fp)
# local_southeast_CellularAutomaton_internal_13 <- position + 1
addi $t1, $t0, 1
lw $t2, -4($fp)
lw $t3, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_south_CellularAutomaton
lw $t8, 64($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -60($fp)
sw $t2, -4($fp)
sw $t3, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -56($fp)
# Moving local_southeast_CellularAutomaton_internal_14 to local_southeast_CellularAutomaton_internal_12
move $t1, $t0
sw $t1, -56($fp)
sw $t0, -64($fp)
sw $t1, -56($fp)
j end__575
true__575:
lw $t0, -68($fp)
# Saves in local_southeast_CellularAutomaton_internal_15 data_15
la $t0, data_15
lw $t1, -56($fp)
# Moving local_southeast_CellularAutomaton_internal_15 to local_southeast_CellularAutomaton_internal_12
move $t1, $t0
sw $t1, -56($fp)
sw $t0, -68($fp)
sw $t1, -56($fp)
end__575:
lw $t0, -56($fp)
lw $t1, -24($fp)
# Moving local_southeast_CellularAutomaton_internal_12 to local_southeast_CellularAutomaton_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -56($fp)
sw $t1, -24($fp)
j end__559
true__559:
lw $t0, -72($fp)
# Saves in local_southeast_CellularAutomaton_internal_16 data_16
la $t0, data_16
lw $t1, -24($fp)
# Moving local_southeast_CellularAutomaton_internal_16 to local_southeast_CellularAutomaton_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -72($fp)
sw $t1, -24($fp)
end__559:
lw $t0, -24($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 76
jr $ra


function_southwest_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_board_size_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_columns_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_columns_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_columns_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_southwest_CellularAutomaton_internal_14 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# local_southwest_CellularAutomaton_board_size_1 <- GET self . board_size
lw $t1, 20($t0)
lw $t2, -20($fp)
# local_southwest_CellularAutomaton_columns_3 <- GET self . columns
lw $t2, 16($t0)
lw $t3, -0($fp)
lw $t4, -16($fp)
# local_southwest_CellularAutomaton_internal_2 <- position + local_southwest_CellularAutomaton_columns_3
add $t4, $t3, $t2
lw $t5, -8($fp)
# local_southwest_CellularAutomaton_internal_0 <- local_southwest_CellularAutomaton_board_size_1 < local_southwest_CellularAutomaton_internal_2
slt $t5, $t1, $t4
# If local_southwest_CellularAutomaton_internal_0 goto true__611
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -20($fp)
sw $t3, -0($fp)
sw $t4, -16($fp)
sw $t5, -8($fp)
bnez $t5, true__611
lw $t0, -4($fp)
lw $t1, -40($fp)
# local_southwest_CellularAutomaton_columns_8 <- GET self . columns
lw $t1, 16($t0)
lw $t2, -0($fp)
lw $t3, -36($fp)
# local_southwest_CellularAutomaton_internal_7 <- position / local_southwest_CellularAutomaton_columns_8
la $a0, zero_error
beqz $t1, .raise
div $t2, $t1
mflo $t3
lw $t4, -44($fp)
# local_southwest_CellularAutomaton_columns_9 <- GET self . columns
lw $t4, 16($t0)
lw $t5, -32($fp)
# local_southwest_CellularAutomaton_internal_6 <- local_southwest_CellularAutomaton_internal_7 * local_southwest_CellularAutomaton_columns_9
mult $t3, $t4
mflo $t5
lw $t6, -28($fp)
# local_southwest_CellularAutomaton_internal_5 <- local_southwest_CellularAutomaton_internal_6 = position
seq $t6, $t5, $t2
# If local_southwest_CellularAutomaton_internal_5 goto true__623
sw $t0, -4($fp)
sw $t1, -40($fp)
sw $t2, -0($fp)
sw $t3, -36($fp)
sw $t4, -44($fp)
sw $t5, -32($fp)
sw $t6, -28($fp)
bnez $t6, true__623
lw $t0, -0($fp)
lw $t1, -52($fp)
# local_southwest_CellularAutomaton_internal_11 <- position - 1
addi $t1, $t0, -1
lw $t2, -4($fp)
lw $t3, -56($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_south_CellularAutomaton
lw $t8, 64($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -52($fp)
sw $t2, -4($fp)
sw $t3, -56($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -48($fp)
# Moving local_southwest_CellularAutomaton_internal_12 to local_southwest_CellularAutomaton_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -56($fp)
sw $t1, -48($fp)
j end__623
true__623:
lw $t0, -60($fp)
# Saves in local_southwest_CellularAutomaton_internal_13 data_17
la $t0, data_17
lw $t1, -48($fp)
# Moving local_southwest_CellularAutomaton_internal_13 to local_southwest_CellularAutomaton_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -60($fp)
sw $t1, -48($fp)
end__623:
lw $t0, -48($fp)
lw $t1, -24($fp)
# Moving local_southwest_CellularAutomaton_internal_10 to local_southwest_CellularAutomaton_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -48($fp)
sw $t1, -24($fp)
j end__611
true__611:
lw $t0, -64($fp)
# Saves in local_southwest_CellularAutomaton_internal_14 data_18
la $t0, data_18
lw $t1, -24($fp)
# Moving local_southwest_CellularAutomaton_internal_14 to local_southwest_CellularAutomaton_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -64($fp)
sw $t1, -24($fp)
end__611:
lw $t0, -24($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 68
jr $ra


function_neighbors_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_neighbors_CellularAutomaton_internal_39 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_north_CellularAutomaton
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -40($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_neighbors_CellularAutomaton_internal_9 data_19
la $t1, data_19
lw $t2, -36($fp)
# local_neighbors_CellularAutomaton_internal_7 <- local_neighbors_CellularAutomaton_internal_8 = local_neighbors_CellularAutomaton_internal_9
move $t8, $t0
move $t9, $t1
loop_10:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_10
beqz $a1, mismatch_10
seq $v0, $a0, $a1
beqz $v0, mismatch_10
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_10
mismatch_10:
li $v0, 0
j end_10
check_10:
bnez $a1, mismatch_10
li $v0, 1
end_10:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_7 goto true__667
sw $t0, -40($fp)
sw $t1, -44($fp)
sw $t2, -36($fp)
bnez $t2, true__667
lw $t0, -48($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_10
li $t0, 0
sw $t0, -48($fp)
sw $t0, -48($fp)
j end__667
true__667:
lw $t0, -48($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_10
li $t0, 1
sw $t0, -48($fp)
sw $t0, -48($fp)
end__667:
lw $t0, -4($fp)
lw $t1, -56($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_south_CellularAutomaton
lw $t8, 64($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -56($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -60($fp)
# Saves in local_neighbors_CellularAutomaton_internal_13 data_20
la $t1, data_20
lw $t2, -52($fp)
# local_neighbors_CellularAutomaton_internal_11 <- local_neighbors_CellularAutomaton_internal_12 = local_neighbors_CellularAutomaton_internal_13
move $t8, $t0
move $t9, $t1
loop_11:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_11
beqz $a1, mismatch_11
seq $v0, $a0, $a1
beqz $v0, mismatch_11
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_11
mismatch_11:
li $v0, 0
j end_11
check_11:
bnez $a1, mismatch_11
li $v0, 1
end_11:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_11 goto true__683
sw $t0, -56($fp)
sw $t1, -60($fp)
sw $t2, -52($fp)
bnez $t2, true__683
lw $t0, -64($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_14
li $t0, 0
sw $t0, -64($fp)
sw $t0, -64($fp)
j end__683
true__683:
lw $t0, -64($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_14
li $t0, 1
sw $t0, -64($fp)
sw $t0, -64($fp)
end__683:
lw $t0, -48($fp)
lw $t1, -64($fp)
lw $t2, -32($fp)
# local_neighbors_CellularAutomaton_internal_6 <- local_neighbors_CellularAutomaton_internal_10 + local_neighbors_CellularAutomaton_internal_14
add $t2, $t0, $t1
lw $t3, -4($fp)
lw $t4, -72($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_east_CellularAutomaton
lw $t8, 68($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t5, -0($fp)
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -64($fp)
sw $t2, -32($fp)
sw $t3, -4($fp)
sw $t4, -72($fp)
sw $t5, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -72($fp)
# saves the return value
move $t0, $v0
lw $t1, -76($fp)
# Saves in local_neighbors_CellularAutomaton_internal_17 data_21
la $t1, data_21
lw $t2, -68($fp)
# local_neighbors_CellularAutomaton_internal_15 <- local_neighbors_CellularAutomaton_internal_16 = local_neighbors_CellularAutomaton_internal_17
move $t8, $t0
move $t9, $t1
loop_12:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_12
beqz $a1, mismatch_12
seq $v0, $a0, $a1
beqz $v0, mismatch_12
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_12
mismatch_12:
li $v0, 0
j end_12
check_12:
bnez $a1, mismatch_12
li $v0, 1
end_12:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_15 goto true__700
sw $t0, -72($fp)
sw $t1, -76($fp)
sw $t2, -68($fp)
bnez $t2, true__700
lw $t0, -80($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_18
li $t0, 0
sw $t0, -80($fp)
sw $t0, -80($fp)
j end__700
true__700:
lw $t0, -80($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_18
li $t0, 1
sw $t0, -80($fp)
sw $t0, -80($fp)
end__700:
lw $t0, -32($fp)
lw $t1, -80($fp)
lw $t2, -28($fp)
# local_neighbors_CellularAutomaton_internal_5 <- local_neighbors_CellularAutomaton_internal_6 + local_neighbors_CellularAutomaton_internal_18
add $t2, $t0, $t1
lw $t3, -4($fp)
lw $t4, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_west_CellularAutomaton
lw $t8, 72($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t5, -0($fp)
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -80($fp)
sw $t2, -28($fp)
sw $t3, -4($fp)
sw $t4, -88($fp)
sw $t5, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -92($fp)
# Saves in local_neighbors_CellularAutomaton_internal_21 data_22
la $t1, data_22
lw $t2, -84($fp)
# local_neighbors_CellularAutomaton_internal_19 <- local_neighbors_CellularAutomaton_internal_20 = local_neighbors_CellularAutomaton_internal_21
move $t8, $t0
move $t9, $t1
loop_13:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_13
beqz $a1, mismatch_13
seq $v0, $a0, $a1
beqz $v0, mismatch_13
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_13
mismatch_13:
li $v0, 0
j end_13
check_13:
bnez $a1, mismatch_13
li $v0, 1
end_13:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_19 goto true__717
sw $t0, -88($fp)
sw $t1, -92($fp)
sw $t2, -84($fp)
bnez $t2, true__717
lw $t0, -96($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_22
li $t0, 0
sw $t0, -96($fp)
sw $t0, -96($fp)
j end__717
true__717:
lw $t0, -96($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_22
li $t0, 1
sw $t0, -96($fp)
sw $t0, -96($fp)
end__717:
lw $t0, -28($fp)
lw $t1, -96($fp)
lw $t2, -24($fp)
# local_neighbors_CellularAutomaton_internal_4 <- local_neighbors_CellularAutomaton_internal_5 + local_neighbors_CellularAutomaton_internal_22
add $t2, $t0, $t1
lw $t3, -4($fp)
lw $t4, -104($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_northeast_CellularAutomaton
lw $t8, 80($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t5, -0($fp)
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -96($fp)
sw $t2, -24($fp)
sw $t3, -4($fp)
sw $t4, -104($fp)
sw $t5, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -104($fp)
# saves the return value
move $t0, $v0
lw $t1, -108($fp)
# Saves in local_neighbors_CellularAutomaton_internal_25 data_23
la $t1, data_23
lw $t2, -100($fp)
# local_neighbors_CellularAutomaton_internal_23 <- local_neighbors_CellularAutomaton_internal_24 = local_neighbors_CellularAutomaton_internal_25
move $t8, $t0
move $t9, $t1
loop_14:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_14
beqz $a1, mismatch_14
seq $v0, $a0, $a1
beqz $v0, mismatch_14
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_14
mismatch_14:
li $v0, 0
j end_14
check_14:
bnez $a1, mismatch_14
li $v0, 1
end_14:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_23 goto true__734
sw $t0, -104($fp)
sw $t1, -108($fp)
sw $t2, -100($fp)
bnez $t2, true__734
lw $t0, -112($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_26
li $t0, 0
sw $t0, -112($fp)
sw $t0, -112($fp)
j end__734
true__734:
lw $t0, -112($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_26
li $t0, 1
sw $t0, -112($fp)
sw $t0, -112($fp)
end__734:
lw $t0, -24($fp)
lw $t1, -112($fp)
lw $t2, -20($fp)
# local_neighbors_CellularAutomaton_internal_3 <- local_neighbors_CellularAutomaton_internal_4 + local_neighbors_CellularAutomaton_internal_26
add $t2, $t0, $t1
lw $t3, -4($fp)
lw $t4, -120($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_northwest_CellularAutomaton
lw $t8, 76($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t5, -0($fp)
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -112($fp)
sw $t2, -20($fp)
sw $t3, -4($fp)
sw $t4, -120($fp)
sw $t5, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -120($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
# Saves in local_neighbors_CellularAutomaton_internal_29 data_24
la $t1, data_24
lw $t2, -116($fp)
# local_neighbors_CellularAutomaton_internal_27 <- local_neighbors_CellularAutomaton_internal_28 = local_neighbors_CellularAutomaton_internal_29
move $t8, $t0
move $t9, $t1
loop_15:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_15
beqz $a1, mismatch_15
seq $v0, $a0, $a1
beqz $v0, mismatch_15
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_15
mismatch_15:
li $v0, 0
j end_15
check_15:
bnez $a1, mismatch_15
li $v0, 1
end_15:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_27 goto true__751
sw $t0, -120($fp)
sw $t1, -124($fp)
sw $t2, -116($fp)
bnez $t2, true__751
lw $t0, -128($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_30
li $t0, 0
sw $t0, -128($fp)
sw $t0, -128($fp)
j end__751
true__751:
lw $t0, -128($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_30
li $t0, 1
sw $t0, -128($fp)
sw $t0, -128($fp)
end__751:
lw $t0, -20($fp)
lw $t1, -128($fp)
lw $t2, -16($fp)
# local_neighbors_CellularAutomaton_internal_2 <- local_neighbors_CellularAutomaton_internal_3 + local_neighbors_CellularAutomaton_internal_30
add $t2, $t0, $t1
lw $t3, -4($fp)
lw $t4, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_southeast_CellularAutomaton
lw $t8, 84($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t5, -0($fp)
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -128($fp)
sw $t2, -16($fp)
sw $t3, -4($fp)
sw $t4, -136($fp)
sw $t5, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -140($fp)
# Saves in local_neighbors_CellularAutomaton_internal_33 data_25
la $t1, data_25
lw $t2, -132($fp)
# local_neighbors_CellularAutomaton_internal_31 <- local_neighbors_CellularAutomaton_internal_32 = local_neighbors_CellularAutomaton_internal_33
move $t8, $t0
move $t9, $t1
loop_16:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_16
beqz $a1, mismatch_16
seq $v0, $a0, $a1
beqz $v0, mismatch_16
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_16
mismatch_16:
li $v0, 0
j end_16
check_16:
bnez $a1, mismatch_16
li $v0, 1
end_16:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_31 goto true__768
sw $t0, -136($fp)
sw $t1, -140($fp)
sw $t2, -132($fp)
bnez $t2, true__768
lw $t0, -144($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_34
li $t0, 0
sw $t0, -144($fp)
sw $t0, -144($fp)
j end__768
true__768:
lw $t0, -144($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_34
li $t0, 1
sw $t0, -144($fp)
sw $t0, -144($fp)
end__768:
lw $t0, -16($fp)
lw $t1, -144($fp)
lw $t2, -12($fp)
# local_neighbors_CellularAutomaton_internal_1 <- local_neighbors_CellularAutomaton_internal_2 + local_neighbors_CellularAutomaton_internal_34
add $t2, $t0, $t1
lw $t3, -4($fp)
lw $t4, -152($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_southwest_CellularAutomaton
lw $t8, 88($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t5, -0($fp)
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -144($fp)
sw $t2, -12($fp)
sw $t3, -4($fp)
sw $t4, -152($fp)
sw $t5, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -152($fp)
# saves the return value
move $t0, $v0
lw $t1, -156($fp)
# Saves in local_neighbors_CellularAutomaton_internal_37 data_26
la $t1, data_26
lw $t2, -148($fp)
# local_neighbors_CellularAutomaton_internal_35 <- local_neighbors_CellularAutomaton_internal_36 = local_neighbors_CellularAutomaton_internal_37
move $t8, $t0
move $t9, $t1
loop_17:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_17
beqz $a1, mismatch_17
seq $v0, $a0, $a1
beqz $v0, mismatch_17
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_17
mismatch_17:
li $v0, 0
j end_17
check_17:
bnez $a1, mismatch_17
li $v0, 1
end_17:
move $t2, $v0
# If local_neighbors_CellularAutomaton_internal_35 goto true__785
sw $t0, -152($fp)
sw $t1, -156($fp)
sw $t2, -148($fp)
bnez $t2, true__785
lw $t0, -160($fp)
# Moving 0 to local_neighbors_CellularAutomaton_internal_38
li $t0, 0
sw $t0, -160($fp)
sw $t0, -160($fp)
j end__785
true__785:
lw $t0, -160($fp)
# Moving 1 to local_neighbors_CellularAutomaton_internal_38
li $t0, 1
sw $t0, -160($fp)
sw $t0, -160($fp)
end__785:
lw $t0, -12($fp)
lw $t1, -160($fp)
lw $t2, -8($fp)
# local_neighbors_CellularAutomaton_internal_0 <- local_neighbors_CellularAutomaton_internal_1 + local_neighbors_CellularAutomaton_internal_38
add $t2, $t0, $t1
lw $t3, -164($fp)
# Moving local_neighbors_CellularAutomaton_internal_0 to local_neighbors_CellularAutomaton_internal_39
move $t3, $t2
sw $t3, -164($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -160($fp)
sw $t2, -8($fp)
sw $t3, -164($fp)
# Removing all locals from stack
addiu $sp, $sp, 168
jr $ra


function_cell_at_next_evolution_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value position
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cell_at_next_evolution_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_neighbors_CellularAutomaton
lw $t8, 92($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# local_cell_at_next_evolution_CellularAutomaton_internal_0 <- local_cell_at_next_evolution_CellularAutomaton_internal_1 = 3
li $t9, 3
seq $t1, $t0, $t9
# If local_cell_at_next_evolution_CellularAutomaton_internal_0 goto true__805
sw $t0, -12($fp)
sw $t1, -8($fp)
bnez $t1, true__805
lw $t0, -4($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_neighbors_CellularAutomaton
lw $t8, 92($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -24($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# local_cell_at_next_evolution_CellularAutomaton_internal_3 <- local_cell_at_next_evolution_CellularAutomaton_internal_4 = 2
li $t9, 2
seq $t1, $t0, $t9
# If local_cell_at_next_evolution_CellularAutomaton_internal_3 goto true__813
sw $t0, -24($fp)
sw $t1, -20($fp)
bnez $t1, true__813
lw $t0, -32($fp)
# Saves in local_cell_at_next_evolution_CellularAutomaton_internal_6 data_27
la $t0, data_27
lw $t1, -28($fp)
# Moving local_cell_at_next_evolution_CellularAutomaton_internal_6 to local_cell_at_next_evolution_CellularAutomaton_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -32($fp)
sw $t1, -28($fp)
j end__813
true__813:
lw $t0, -4($fp)
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cell_CellularAutomaton
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -40($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_cell_at_next_evolution_CellularAutomaton_internal_9 data_28
la $t1, data_28
lw $t2, -36($fp)
# local_cell_at_next_evolution_CellularAutomaton_internal_7 <- local_cell_at_next_evolution_CellularAutomaton_internal_8 = local_cell_at_next_evolution_CellularAutomaton_internal_9
move $t8, $t0
move $t9, $t1
loop_18:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_18
beqz $a1, mismatch_18
seq $v0, $a0, $a1
beqz $v0, mismatch_18
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_18
mismatch_18:
li $v0, 0
j end_18
check_18:
bnez $a1, mismatch_18
li $v0, 1
end_18:
move $t2, $v0
# If local_cell_at_next_evolution_CellularAutomaton_internal_7 goto true__830
sw $t0, -40($fp)
sw $t1, -44($fp)
sw $t2, -36($fp)
bnez $t2, true__830
lw $t0, -52($fp)
# Saves in local_cell_at_next_evolution_CellularAutomaton_internal_11 data_29
la $t0, data_29
lw $t1, -48($fp)
# Moving local_cell_at_next_evolution_CellularAutomaton_internal_11 to local_cell_at_next_evolution_CellularAutomaton_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -52($fp)
sw $t1, -48($fp)
j end__830
true__830:
lw $t0, -56($fp)
# Saves in local_cell_at_next_evolution_CellularAutomaton_internal_12 data_30
la $t0, data_30
lw $t1, -48($fp)
# Moving local_cell_at_next_evolution_CellularAutomaton_internal_12 to local_cell_at_next_evolution_CellularAutomaton_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -56($fp)
sw $t1, -48($fp)
end__830:
lw $t0, -48($fp)
lw $t1, -28($fp)
# Moving local_cell_at_next_evolution_CellularAutomaton_internal_10 to local_cell_at_next_evolution_CellularAutomaton_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -48($fp)
sw $t1, -28($fp)
end__813:
lw $t0, -28($fp)
lw $t1, -16($fp)
# Moving local_cell_at_next_evolution_CellularAutomaton_internal_5 to local_cell_at_next_evolution_CellularAutomaton_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -28($fp)
sw $t1, -16($fp)
j end__805
true__805:
lw $t0, -60($fp)
# Saves in local_cell_at_next_evolution_CellularAutomaton_internal_13 data_31
la $t0, data_31
lw $t1, -16($fp)
# Moving local_cell_at_next_evolution_CellularAutomaton_internal_13 to local_cell_at_next_evolution_CellularAutomaton_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -60($fp)
sw $t1, -16($fp)
end__805:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 64
jr $ra


function_evolve_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_evolve_CellularAutomaton_position_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_num_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_temp_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_evolve_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 0 to local_evolve_CellularAutomaton_position_0
li $t0, 0
sw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_num_cells_CellularAutomaton
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_evolve_CellularAutomaton_internal_2 to local_evolve_CellularAutomaton_num_1
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -20($fp)
# Saves in local_evolve_CellularAutomaton_internal_4 data_32
la $t2, data_32
lw $t3, -16($fp)
# Moving local_evolve_CellularAutomaton_internal_4 to local_evolve_CellularAutomaton_temp_3
move $t3, $t2
sw $t3, -16($fp)
lw $t4, -24($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t4, $v0
sw $t0, -12($fp)
sw $t1, -8($fp)
sw $t2, -20($fp)
sw $t3, -16($fp)
sw $t4, -24($fp)
start__868:
lw $t0, -4($fp)
lw $t1, -8($fp)
lw $t2, -28($fp)
# local_evolve_CellularAutomaton_internal_6 <- local_evolve_CellularAutomaton_position_0 < local_evolve_CellularAutomaton_num_1
slt $t2, $t0, $t1
# If not local_evolve_CellularAutomaton_internal_6 goto end__868
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -28($fp)
beqz $t2, end__868
lw $t0, -0($fp)
lw $t1, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cell_at_next_evolution_CellularAutomaton
lw $t8, 96($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -4($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -32($fp)
sw $t2, -4($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
lw $t2, -40($fp)
# local_evolve_CellularAutomaton_internal_9 <- Type of local_evolve_CellularAutomaton_temp_3
la $t2, type_String
lw $t3, -44($fp)
# Saves in local_evolve_CellularAutomaton_internal_10 data_0
la $t3, data_0
# local_evolve_CellularAutomaton_internal_9 <- local_evolve_CellularAutomaton_internal_9 = local_evolve_CellularAutomaton_internal_10
move $t8, $t2
move $t9, $t3
loop_19:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_19
beqz $a1, mismatch_19
seq $v0, $a0, $a1
beqz $v0, mismatch_19
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_19
mismatch_19:
li $v0, 0
j end_19
check_19:
bnez $a1, mismatch_19
li $v0, 1
end_19:
move $t2, $v0
# If not local_evolve_CellularAutomaton_internal_9 goto continue__881
sw $t0, -32($fp)
sw $t1, -16($fp)
sw $t2, -40($fp)
sw $t3, -44($fp)
beqz $t2, continue__881
la $a0, dispatch_error
j .raise
continue__881:
lw $t0, -36($fp)
# Static Dispatch of the method concat
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -32($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -16($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -32($fp)
sw $t2, -16($fp)
# This function will consume the arguments
jal function_concat_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# Moving local_evolve_CellularAutomaton_internal_8 to local_evolve_CellularAutomaton_temp_3
move $t1, $t0
sw $t1, -16($fp)
lw $t2, -4($fp)
lw $t3, -48($fp)
# local_evolve_CellularAutomaton_internal_11 <- local_evolve_CellularAutomaton_position_0 + 1
addi $t3, $t2, 1
# Moving local_evolve_CellularAutomaton_internal_11 to local_evolve_CellularAutomaton_position_0
move $t2, $t3
sw $t2, -4($fp)
lw $t4, -52($fp)
# Moving local_evolve_CellularAutomaton_internal_11 to local_evolve_CellularAutomaton_internal_12
move $t4, $t3
sw $t4, -52($fp)
lw $t5, -24($fp)
# Moving local_evolve_CellularAutomaton_internal_12 to local_evolve_CellularAutomaton_internal_5
move $t5, $t4
sw $t5, -24($fp)
sw $t0, -36($fp)
sw $t1, -16($fp)
sw $t2, -4($fp)
sw $t3, -48($fp)
sw $t4, -52($fp)
sw $t5, -24($fp)
j start__868
end__868:
lw $t0, -16($fp)
lw $t1, -0($fp)
# self . population_map <- SET local_evolve_CellularAutomaton_temp_3
sw $t0, 24($t1)
lw $t2, -56($fp)
# Moving self to local_evolve_CellularAutomaton_internal_13
move $t2, $t1
sw $t2, -56($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
sw $t2, -56($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_option_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_option_CellularAutomaton_num_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_53 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_54 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_55 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_56 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_57 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_58 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_59 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_60 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_61 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_62 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_63 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_64 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_65 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_66 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_67 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_68 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_69 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_70 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_71 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_72 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_73 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_74 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_75 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_76 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_77 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_78 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_79 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_80 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_81 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_82 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_83 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_84 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_85 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_86 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_87 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_88 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_89 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_90 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_91 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_92 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_93 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_94 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_95 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_96 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_97 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_98 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_99 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_100 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_101 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_102 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_103 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_104 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_105 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_106 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_107 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_108 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_109 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_110 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_111 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_112 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_113 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_114 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_option_CellularAutomaton_internal_115 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 0 to local_option_CellularAutomaton_num_0
li $t0, 0
sw $t0, -4($fp)
lw $t1, -8($fp)
# Saves in local_option_CellularAutomaton_internal_1 data_33
la $t1, data_33
lw $t2, -0($fp)
lw $t3, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
sw $t3, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# Saves in local_option_CellularAutomaton_internal_3 data_34
la $t1, data_34
lw $t2, -0($fp)
lw $t3, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -16($fp)
sw $t2, -0($fp)
sw $t3, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Saves in local_option_CellularAutomaton_internal_5 data_35
la $t1, data_35
lw $t2, -0($fp)
lw $t3, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -0($fp)
sw $t3, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Saves in local_option_CellularAutomaton_internal_7 data_36
la $t1, data_36
lw $t2, -0($fp)
lw $t3, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -32($fp)
sw $t2, -0($fp)
sw $t3, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Saves in local_option_CellularAutomaton_internal_9 data_37
la $t1, data_37
lw $t2, -0($fp)
lw $t3, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -40($fp)
sw $t2, -0($fp)
sw $t3, -44($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -48($fp)
# Saves in local_option_CellularAutomaton_internal_11 data_38
la $t1, data_38
lw $t2, -0($fp)
lw $t3, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -44($fp)
sw $t1, -48($fp)
sw $t2, -0($fp)
sw $t3, -52($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -56($fp)
# Saves in local_option_CellularAutomaton_internal_13 data_39
la $t1, data_39
lw $t2, -0($fp)
lw $t3, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -52($fp)
sw $t1, -56($fp)
sw $t2, -0($fp)
sw $t3, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Saves in local_option_CellularAutomaton_internal_15 data_40
la $t1, data_40
lw $t2, -0($fp)
lw $t3, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -60($fp)
sw $t1, -64($fp)
sw $t2, -0($fp)
sw $t3, -68($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Saves in local_option_CellularAutomaton_internal_17 data_41
la $t1, data_41
lw $t2, -0($fp)
lw $t3, -76($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -68($fp)
sw $t1, -72($fp)
sw $t2, -0($fp)
sw $t3, -76($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -76($fp)
# saves the return value
move $t0, $v0
lw $t1, -80($fp)
# Saves in local_option_CellularAutomaton_internal_19 data_42
la $t1, data_42
lw $t2, -0($fp)
lw $t3, -84($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -76($fp)
sw $t1, -80($fp)
sw $t2, -0($fp)
sw $t3, -84($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -84($fp)
# saves the return value
move $t0, $v0
lw $t1, -88($fp)
# Saves in local_option_CellularAutomaton_internal_21 data_43
la $t1, data_43
lw $t2, -0($fp)
lw $t3, -92($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -84($fp)
sw $t1, -88($fp)
sw $t2, -0($fp)
sw $t3, -92($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -92($fp)
# saves the return value
move $t0, $v0
lw $t1, -96($fp)
# Saves in local_option_CellularAutomaton_internal_23 data_44
la $t1, data_44
lw $t2, -0($fp)
lw $t3, -100($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -92($fp)
sw $t1, -96($fp)
sw $t2, -0($fp)
sw $t3, -100($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -100($fp)
# saves the return value
move $t0, $v0
lw $t1, -104($fp)
# Saves in local_option_CellularAutomaton_internal_25 data_45
la $t1, data_45
lw $t2, -0($fp)
lw $t3, -108($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -100($fp)
sw $t1, -104($fp)
sw $t2, -0($fp)
sw $t3, -108($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -108($fp)
# saves the return value
move $t0, $v0
lw $t1, -112($fp)
# Saves in local_option_CellularAutomaton_internal_27 data_46
la $t1, data_46
lw $t2, -0($fp)
lw $t3, -116($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -108($fp)
sw $t1, -112($fp)
sw $t2, -0($fp)
sw $t3, -116($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -116($fp)
# saves the return value
move $t0, $v0
lw $t1, -120($fp)
# Saves in local_option_CellularAutomaton_internal_29 data_47
la $t1, data_47
lw $t2, -0($fp)
lw $t3, -124($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -116($fp)
sw $t1, -120($fp)
sw $t2, -0($fp)
sw $t3, -124($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -124($fp)
# saves the return value
move $t0, $v0
lw $t1, -128($fp)
# Saves in local_option_CellularAutomaton_internal_31 data_48
la $t1, data_48
lw $t2, -0($fp)
lw $t3, -132($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -124($fp)
sw $t1, -128($fp)
sw $t2, -0($fp)
sw $t3, -132($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -132($fp)
# saves the return value
move $t0, $v0
lw $t1, -136($fp)
# Saves in local_option_CellularAutomaton_internal_33 data_49
la $t1, data_49
lw $t2, -0($fp)
lw $t3, -140($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -136($fp)
sw $t2, -0($fp)
sw $t3, -140($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -140($fp)
# saves the return value
move $t0, $v0
lw $t1, -144($fp)
# Saves in local_option_CellularAutomaton_internal_35 data_50
la $t1, data_50
lw $t2, -0($fp)
lw $t3, -148($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -140($fp)
sw $t1, -144($fp)
sw $t2, -0($fp)
sw $t3, -148($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -148($fp)
# saves the return value
move $t0, $v0
lw $t1, -152($fp)
# Saves in local_option_CellularAutomaton_internal_37 data_51
la $t1, data_51
lw $t2, -0($fp)
lw $t3, -156($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -148($fp)
sw $t1, -152($fp)
sw $t2, -0($fp)
sw $t3, -156($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -156($fp)
# saves the return value
move $t0, $v0
lw $t1, -160($fp)
# Saves in local_option_CellularAutomaton_internal_39 data_52
la $t1, data_52
lw $t2, -0($fp)
lw $t3, -164($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -156($fp)
sw $t1, -160($fp)
sw $t2, -0($fp)
sw $t3, -164($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -164($fp)
# saves the return value
move $t0, $v0
lw $t1, -168($fp)
# Saves in local_option_CellularAutomaton_internal_41 data_53
la $t1, data_53
lw $t2, -0($fp)
lw $t3, -172($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -164($fp)
sw $t1, -168($fp)
sw $t2, -0($fp)
sw $t3, -172($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -172($fp)
# saves the return value
move $t0, $v0
lw $t1, -176($fp)
# Saves in local_option_CellularAutomaton_internal_43 data_54
la $t1, data_54
lw $t2, -0($fp)
lw $t3, -180($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -172($fp)
sw $t1, -176($fp)
sw $t2, -0($fp)
sw $t3, -180($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -180($fp)
# saves the return value
move $t0, $v0
lw $t1, -184($fp)
# Saves in local_option_CellularAutomaton_internal_45 data_55
la $t1, data_55
lw $t2, -0($fp)
lw $t3, -188($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -180($fp)
sw $t1, -184($fp)
sw $t2, -0($fp)
sw $t3, -188($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -188($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -192($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_int_IO
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -188($fp)
sw $t1, -0($fp)
sw $t2, -192($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -192($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_option_CellularAutomaton_internal_47 to local_option_CellularAutomaton_num_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -196($fp)
# Saves in local_option_CellularAutomaton_internal_48 data_56
la $t2, data_56
lw $t3, -0($fp)
lw $t4, -200($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -192($fp)
sw $t1, -4($fp)
sw $t2, -196($fp)
sw $t3, -0($fp)
sw $t4, -200($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -200($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -204($fp)
# local_option_CellularAutomaton_internal_50 <- local_option_CellularAutomaton_num_0 = 1
li $t9, 1
seq $t2, $t1, $t9
# If local_option_CellularAutomaton_internal_50 goto true__1082
sw $t0, -200($fp)
sw $t1, -4($fp)
sw $t2, -204($fp)
bnez $t2, true__1082
lw $t0, -4($fp)
lw $t1, -212($fp)
# local_option_CellularAutomaton_internal_52 <- local_option_CellularAutomaton_num_0 = 2
li $t9, 2
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_52 goto true__1086
sw $t0, -4($fp)
sw $t1, -212($fp)
bnez $t1, true__1086
lw $t0, -4($fp)
lw $t1, -220($fp)
# local_option_CellularAutomaton_internal_54 <- local_option_CellularAutomaton_num_0 = 3
li $t9, 3
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_54 goto true__1090
sw $t0, -4($fp)
sw $t1, -220($fp)
bnez $t1, true__1090
lw $t0, -4($fp)
lw $t1, -228($fp)
# local_option_CellularAutomaton_internal_56 <- local_option_CellularAutomaton_num_0 = 4
li $t9, 4
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_56 goto true__1094
sw $t0, -4($fp)
sw $t1, -228($fp)
bnez $t1, true__1094
lw $t0, -4($fp)
lw $t1, -236($fp)
# local_option_CellularAutomaton_internal_58 <- local_option_CellularAutomaton_num_0 = 5
li $t9, 5
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_58 goto true__1098
sw $t0, -4($fp)
sw $t1, -236($fp)
bnez $t1, true__1098
lw $t0, -4($fp)
lw $t1, -244($fp)
# local_option_CellularAutomaton_internal_60 <- local_option_CellularAutomaton_num_0 = 6
li $t9, 6
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_60 goto true__1102
sw $t0, -4($fp)
sw $t1, -244($fp)
bnez $t1, true__1102
lw $t0, -4($fp)
lw $t1, -252($fp)
# local_option_CellularAutomaton_internal_62 <- local_option_CellularAutomaton_num_0 = 7
li $t9, 7
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_62 goto true__1106
sw $t0, -4($fp)
sw $t1, -252($fp)
bnez $t1, true__1106
lw $t0, -4($fp)
lw $t1, -260($fp)
# local_option_CellularAutomaton_internal_64 <- local_option_CellularAutomaton_num_0 = 8
li $t9, 8
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_64 goto true__1110
sw $t0, -4($fp)
sw $t1, -260($fp)
bnez $t1, true__1110
lw $t0, -4($fp)
lw $t1, -268($fp)
# local_option_CellularAutomaton_internal_66 <- local_option_CellularAutomaton_num_0 = 9
li $t9, 9
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_66 goto true__1114
sw $t0, -4($fp)
sw $t1, -268($fp)
bnez $t1, true__1114
lw $t0, -4($fp)
lw $t1, -276($fp)
# local_option_CellularAutomaton_internal_68 <- local_option_CellularAutomaton_num_0 = 10
li $t9, 10
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_68 goto true__1118
sw $t0, -4($fp)
sw $t1, -276($fp)
bnez $t1, true__1118
lw $t0, -4($fp)
lw $t1, -284($fp)
# local_option_CellularAutomaton_internal_70 <- local_option_CellularAutomaton_num_0 = 11
li $t9, 11
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_70 goto true__1122
sw $t0, -4($fp)
sw $t1, -284($fp)
bnez $t1, true__1122
lw $t0, -4($fp)
lw $t1, -292($fp)
# local_option_CellularAutomaton_internal_72 <- local_option_CellularAutomaton_num_0 = 12
li $t9, 12
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_72 goto true__1126
sw $t0, -4($fp)
sw $t1, -292($fp)
bnez $t1, true__1126
lw $t0, -4($fp)
lw $t1, -300($fp)
# local_option_CellularAutomaton_internal_74 <- local_option_CellularAutomaton_num_0 = 13
li $t9, 13
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_74 goto true__1130
sw $t0, -4($fp)
sw $t1, -300($fp)
bnez $t1, true__1130
lw $t0, -4($fp)
lw $t1, -308($fp)
# local_option_CellularAutomaton_internal_76 <- local_option_CellularAutomaton_num_0 = 14
li $t9, 14
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_76 goto true__1134
sw $t0, -4($fp)
sw $t1, -308($fp)
bnez $t1, true__1134
lw $t0, -4($fp)
lw $t1, -316($fp)
# local_option_CellularAutomaton_internal_78 <- local_option_CellularAutomaton_num_0 = 15
li $t9, 15
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_78 goto true__1138
sw $t0, -4($fp)
sw $t1, -316($fp)
bnez $t1, true__1138
lw $t0, -4($fp)
lw $t1, -324($fp)
# local_option_CellularAutomaton_internal_80 <- local_option_CellularAutomaton_num_0 = 16
li $t9, 16
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_80 goto true__1142
sw $t0, -4($fp)
sw $t1, -324($fp)
bnez $t1, true__1142
lw $t0, -4($fp)
lw $t1, -332($fp)
# local_option_CellularAutomaton_internal_82 <- local_option_CellularAutomaton_num_0 = 17
li $t9, 17
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_82 goto true__1146
sw $t0, -4($fp)
sw $t1, -332($fp)
bnez $t1, true__1146
lw $t0, -4($fp)
lw $t1, -340($fp)
# local_option_CellularAutomaton_internal_84 <- local_option_CellularAutomaton_num_0 = 18
li $t9, 18
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_84 goto true__1150
sw $t0, -4($fp)
sw $t1, -340($fp)
bnez $t1, true__1150
lw $t0, -4($fp)
lw $t1, -348($fp)
# local_option_CellularAutomaton_internal_86 <- local_option_CellularAutomaton_num_0 = 19
li $t9, 19
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_86 goto true__1154
sw $t0, -4($fp)
sw $t1, -348($fp)
bnez $t1, true__1154
lw $t0, -4($fp)
lw $t1, -356($fp)
# local_option_CellularAutomaton_internal_88 <- local_option_CellularAutomaton_num_0 = 20
li $t9, 20
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_88 goto true__1158
sw $t0, -4($fp)
sw $t1, -356($fp)
bnez $t1, true__1158
lw $t0, -4($fp)
lw $t1, -364($fp)
# local_option_CellularAutomaton_internal_90 <- local_option_CellularAutomaton_num_0 = 21
li $t9, 21
seq $t1, $t0, $t9
# If local_option_CellularAutomaton_internal_90 goto true__1162
sw $t0, -4($fp)
sw $t1, -364($fp)
bnez $t1, true__1162
lw $t0, -372($fp)
# Saves in local_option_CellularAutomaton_internal_92 data_57
la $t0, data_57
lw $t1, -368($fp)
# Moving local_option_CellularAutomaton_internal_92 to local_option_CellularAutomaton_internal_91
move $t1, $t0
sw $t1, -368($fp)
sw $t0, -372($fp)
sw $t1, -368($fp)
j end__1162
true__1162:
lw $t0, -376($fp)
# Saves in local_option_CellularAutomaton_internal_93 data_58
la $t0, data_58
lw $t1, -368($fp)
# Moving local_option_CellularAutomaton_internal_93 to local_option_CellularAutomaton_internal_91
move $t1, $t0
sw $t1, -368($fp)
sw $t0, -376($fp)
sw $t1, -368($fp)
end__1162:
lw $t0, -368($fp)
lw $t1, -360($fp)
# Moving local_option_CellularAutomaton_internal_91 to local_option_CellularAutomaton_internal_89
move $t1, $t0
sw $t1, -360($fp)
sw $t0, -368($fp)
sw $t1, -360($fp)
j end__1158
true__1158:
lw $t0, -380($fp)
# Saves in local_option_CellularAutomaton_internal_94 data_59
la $t0, data_59
lw $t1, -360($fp)
# Moving local_option_CellularAutomaton_internal_94 to local_option_CellularAutomaton_internal_89
move $t1, $t0
sw $t1, -360($fp)
sw $t0, -380($fp)
sw $t1, -360($fp)
end__1158:
lw $t0, -360($fp)
lw $t1, -352($fp)
# Moving local_option_CellularAutomaton_internal_89 to local_option_CellularAutomaton_internal_87
move $t1, $t0
sw $t1, -352($fp)
sw $t0, -360($fp)
sw $t1, -352($fp)
j end__1154
true__1154:
lw $t0, -384($fp)
# Saves in local_option_CellularAutomaton_internal_95 data_60
la $t0, data_60
lw $t1, -352($fp)
# Moving local_option_CellularAutomaton_internal_95 to local_option_CellularAutomaton_internal_87
move $t1, $t0
sw $t1, -352($fp)
sw $t0, -384($fp)
sw $t1, -352($fp)
end__1154:
lw $t0, -352($fp)
lw $t1, -344($fp)
# Moving local_option_CellularAutomaton_internal_87 to local_option_CellularAutomaton_internal_85
move $t1, $t0
sw $t1, -344($fp)
sw $t0, -352($fp)
sw $t1, -344($fp)
j end__1150
true__1150:
lw $t0, -388($fp)
# Saves in local_option_CellularAutomaton_internal_96 data_61
la $t0, data_61
lw $t1, -344($fp)
# Moving local_option_CellularAutomaton_internal_96 to local_option_CellularAutomaton_internal_85
move $t1, $t0
sw $t1, -344($fp)
sw $t0, -388($fp)
sw $t1, -344($fp)
end__1150:
lw $t0, -344($fp)
lw $t1, -336($fp)
# Moving local_option_CellularAutomaton_internal_85 to local_option_CellularAutomaton_internal_83
move $t1, $t0
sw $t1, -336($fp)
sw $t0, -344($fp)
sw $t1, -336($fp)
j end__1146
true__1146:
lw $t0, -392($fp)
# Saves in local_option_CellularAutomaton_internal_97 data_62
la $t0, data_62
lw $t1, -336($fp)
# Moving local_option_CellularAutomaton_internal_97 to local_option_CellularAutomaton_internal_83
move $t1, $t0
sw $t1, -336($fp)
sw $t0, -392($fp)
sw $t1, -336($fp)
end__1146:
lw $t0, -336($fp)
lw $t1, -328($fp)
# Moving local_option_CellularAutomaton_internal_83 to local_option_CellularAutomaton_internal_81
move $t1, $t0
sw $t1, -328($fp)
sw $t0, -336($fp)
sw $t1, -328($fp)
j end__1142
true__1142:
lw $t0, -396($fp)
# Saves in local_option_CellularAutomaton_internal_98 data_63
la $t0, data_63
lw $t1, -328($fp)
# Moving local_option_CellularAutomaton_internal_98 to local_option_CellularAutomaton_internal_81
move $t1, $t0
sw $t1, -328($fp)
sw $t0, -396($fp)
sw $t1, -328($fp)
end__1142:
lw $t0, -328($fp)
lw $t1, -320($fp)
# Moving local_option_CellularAutomaton_internal_81 to local_option_CellularAutomaton_internal_79
move $t1, $t0
sw $t1, -320($fp)
sw $t0, -328($fp)
sw $t1, -320($fp)
j end__1138
true__1138:
lw $t0, -400($fp)
# Saves in local_option_CellularAutomaton_internal_99 data_64
la $t0, data_64
lw $t1, -320($fp)
# Moving local_option_CellularAutomaton_internal_99 to local_option_CellularAutomaton_internal_79
move $t1, $t0
sw $t1, -320($fp)
sw $t0, -400($fp)
sw $t1, -320($fp)
end__1138:
lw $t0, -320($fp)
lw $t1, -312($fp)
# Moving local_option_CellularAutomaton_internal_79 to local_option_CellularAutomaton_internal_77
move $t1, $t0
sw $t1, -312($fp)
sw $t0, -320($fp)
sw $t1, -312($fp)
j end__1134
true__1134:
lw $t0, -404($fp)
# Saves in local_option_CellularAutomaton_internal_100 data_65
la $t0, data_65
lw $t1, -312($fp)
# Moving local_option_CellularAutomaton_internal_100 to local_option_CellularAutomaton_internal_77
move $t1, $t0
sw $t1, -312($fp)
sw $t0, -404($fp)
sw $t1, -312($fp)
end__1134:
lw $t0, -312($fp)
lw $t1, -304($fp)
# Moving local_option_CellularAutomaton_internal_77 to local_option_CellularAutomaton_internal_75
move $t1, $t0
sw $t1, -304($fp)
sw $t0, -312($fp)
sw $t1, -304($fp)
j end__1130
true__1130:
lw $t0, -408($fp)
# Saves in local_option_CellularAutomaton_internal_101 data_66
la $t0, data_66
lw $t1, -304($fp)
# Moving local_option_CellularAutomaton_internal_101 to local_option_CellularAutomaton_internal_75
move $t1, $t0
sw $t1, -304($fp)
sw $t0, -408($fp)
sw $t1, -304($fp)
end__1130:
lw $t0, -304($fp)
lw $t1, -296($fp)
# Moving local_option_CellularAutomaton_internal_75 to local_option_CellularAutomaton_internal_73
move $t1, $t0
sw $t1, -296($fp)
sw $t0, -304($fp)
sw $t1, -296($fp)
j end__1126
true__1126:
lw $t0, -412($fp)
# Saves in local_option_CellularAutomaton_internal_102 data_67
la $t0, data_67
lw $t1, -296($fp)
# Moving local_option_CellularAutomaton_internal_102 to local_option_CellularAutomaton_internal_73
move $t1, $t0
sw $t1, -296($fp)
sw $t0, -412($fp)
sw $t1, -296($fp)
end__1126:
lw $t0, -296($fp)
lw $t1, -288($fp)
# Moving local_option_CellularAutomaton_internal_73 to local_option_CellularAutomaton_internal_71
move $t1, $t0
sw $t1, -288($fp)
sw $t0, -296($fp)
sw $t1, -288($fp)
j end__1122
true__1122:
lw $t0, -416($fp)
# Saves in local_option_CellularAutomaton_internal_103 data_68
la $t0, data_68
lw $t1, -288($fp)
# Moving local_option_CellularAutomaton_internal_103 to local_option_CellularAutomaton_internal_71
move $t1, $t0
sw $t1, -288($fp)
sw $t0, -416($fp)
sw $t1, -288($fp)
end__1122:
lw $t0, -288($fp)
lw $t1, -280($fp)
# Moving local_option_CellularAutomaton_internal_71 to local_option_CellularAutomaton_internal_69
move $t1, $t0
sw $t1, -280($fp)
sw $t0, -288($fp)
sw $t1, -280($fp)
j end__1118
true__1118:
lw $t0, -420($fp)
# Saves in local_option_CellularAutomaton_internal_104 data_69
la $t0, data_69
lw $t1, -280($fp)
# Moving local_option_CellularAutomaton_internal_104 to local_option_CellularAutomaton_internal_69
move $t1, $t0
sw $t1, -280($fp)
sw $t0, -420($fp)
sw $t1, -280($fp)
end__1118:
lw $t0, -280($fp)
lw $t1, -272($fp)
# Moving local_option_CellularAutomaton_internal_69 to local_option_CellularAutomaton_internal_67
move $t1, $t0
sw $t1, -272($fp)
sw $t0, -280($fp)
sw $t1, -272($fp)
j end__1114
true__1114:
lw $t0, -424($fp)
# Saves in local_option_CellularAutomaton_internal_105 data_70
la $t0, data_70
lw $t1, -272($fp)
# Moving local_option_CellularAutomaton_internal_105 to local_option_CellularAutomaton_internal_67
move $t1, $t0
sw $t1, -272($fp)
sw $t0, -424($fp)
sw $t1, -272($fp)
end__1114:
lw $t0, -272($fp)
lw $t1, -264($fp)
# Moving local_option_CellularAutomaton_internal_67 to local_option_CellularAutomaton_internal_65
move $t1, $t0
sw $t1, -264($fp)
sw $t0, -272($fp)
sw $t1, -264($fp)
j end__1110
true__1110:
lw $t0, -428($fp)
# Saves in local_option_CellularAutomaton_internal_106 data_71
la $t0, data_71
lw $t1, -264($fp)
# Moving local_option_CellularAutomaton_internal_106 to local_option_CellularAutomaton_internal_65
move $t1, $t0
sw $t1, -264($fp)
sw $t0, -428($fp)
sw $t1, -264($fp)
end__1110:
lw $t0, -264($fp)
lw $t1, -256($fp)
# Moving local_option_CellularAutomaton_internal_65 to local_option_CellularAutomaton_internal_63
move $t1, $t0
sw $t1, -256($fp)
sw $t0, -264($fp)
sw $t1, -256($fp)
j end__1106
true__1106:
lw $t0, -432($fp)
# Saves in local_option_CellularAutomaton_internal_107 data_72
la $t0, data_72
lw $t1, -256($fp)
# Moving local_option_CellularAutomaton_internal_107 to local_option_CellularAutomaton_internal_63
move $t1, $t0
sw $t1, -256($fp)
sw $t0, -432($fp)
sw $t1, -256($fp)
end__1106:
lw $t0, -256($fp)
lw $t1, -248($fp)
# Moving local_option_CellularAutomaton_internal_63 to local_option_CellularAutomaton_internal_61
move $t1, $t0
sw $t1, -248($fp)
sw $t0, -256($fp)
sw $t1, -248($fp)
j end__1102
true__1102:
lw $t0, -436($fp)
# Saves in local_option_CellularAutomaton_internal_108 data_73
la $t0, data_73
lw $t1, -248($fp)
# Moving local_option_CellularAutomaton_internal_108 to local_option_CellularAutomaton_internal_61
move $t1, $t0
sw $t1, -248($fp)
sw $t0, -436($fp)
sw $t1, -248($fp)
end__1102:
lw $t0, -248($fp)
lw $t1, -240($fp)
# Moving local_option_CellularAutomaton_internal_61 to local_option_CellularAutomaton_internal_59
move $t1, $t0
sw $t1, -240($fp)
sw $t0, -248($fp)
sw $t1, -240($fp)
j end__1098
true__1098:
lw $t0, -440($fp)
# Saves in local_option_CellularAutomaton_internal_109 data_74
la $t0, data_74
lw $t1, -240($fp)
# Moving local_option_CellularAutomaton_internal_109 to local_option_CellularAutomaton_internal_59
move $t1, $t0
sw $t1, -240($fp)
sw $t0, -440($fp)
sw $t1, -240($fp)
end__1098:
lw $t0, -240($fp)
lw $t1, -232($fp)
# Moving local_option_CellularAutomaton_internal_59 to local_option_CellularAutomaton_internal_57
move $t1, $t0
sw $t1, -232($fp)
sw $t0, -240($fp)
sw $t1, -232($fp)
j end__1094
true__1094:
lw $t0, -444($fp)
# Saves in local_option_CellularAutomaton_internal_110 data_75
la $t0, data_75
lw $t1, -232($fp)
# Moving local_option_CellularAutomaton_internal_110 to local_option_CellularAutomaton_internal_57
move $t1, $t0
sw $t1, -232($fp)
sw $t0, -444($fp)
sw $t1, -232($fp)
end__1094:
lw $t0, -232($fp)
lw $t1, -224($fp)
# Moving local_option_CellularAutomaton_internal_57 to local_option_CellularAutomaton_internal_55
move $t1, $t0
sw $t1, -224($fp)
sw $t0, -232($fp)
sw $t1, -224($fp)
j end__1090
true__1090:
lw $t0, -448($fp)
# Saves in local_option_CellularAutomaton_internal_111 data_76
la $t0, data_76
lw $t1, -224($fp)
# Moving local_option_CellularAutomaton_internal_111 to local_option_CellularAutomaton_internal_55
move $t1, $t0
sw $t1, -224($fp)
sw $t0, -448($fp)
sw $t1, -224($fp)
end__1090:
lw $t0, -224($fp)
lw $t1, -216($fp)
# Moving local_option_CellularAutomaton_internal_55 to local_option_CellularAutomaton_internal_53
move $t1, $t0
sw $t1, -216($fp)
sw $t0, -224($fp)
sw $t1, -216($fp)
j end__1086
true__1086:
lw $t0, -452($fp)
# Saves in local_option_CellularAutomaton_internal_112 data_77
la $t0, data_77
lw $t1, -216($fp)
# Moving local_option_CellularAutomaton_internal_112 to local_option_CellularAutomaton_internal_53
move $t1, $t0
sw $t1, -216($fp)
sw $t0, -452($fp)
sw $t1, -216($fp)
end__1086:
lw $t0, -216($fp)
lw $t1, -208($fp)
# Moving local_option_CellularAutomaton_internal_53 to local_option_CellularAutomaton_internal_51
move $t1, $t0
sw $t1, -208($fp)
sw $t0, -216($fp)
sw $t1, -208($fp)
j end__1082
true__1082:
lw $t0, -456($fp)
# Saves in local_option_CellularAutomaton_internal_113 data_78
la $t0, data_78
lw $t1, -208($fp)
# Moving local_option_CellularAutomaton_internal_113 to local_option_CellularAutomaton_internal_51
move $t1, $t0
sw $t1, -208($fp)
sw $t0, -456($fp)
sw $t1, -208($fp)
end__1082:
lw $t0, -208($fp)
lw $t1, -460($fp)
# Moving local_option_CellularAutomaton_internal_51 to local_option_CellularAutomaton_internal_114
move $t1, $t0
sw $t1, -460($fp)
lw $t2, -464($fp)
# Moving local_option_CellularAutomaton_internal_114 to local_option_CellularAutomaton_internal_115
move $t2, $t1
sw $t2, -464($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -208($fp)
sw $t1, -460($fp)
sw $t2, -464($fp)
# Removing all locals from stack
addiu $sp, $sp, 468
jr $ra


function_prompt_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_prompt_CellularAutomaton_ans_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_CellularAutomaton_internal_13 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Saves in local_prompt_CellularAutomaton_internal_1 data_79
la $t0, data_79
lw $t1, -4($fp)
# Moving local_prompt_CellularAutomaton_internal_1 to local_prompt_CellularAutomaton_ans_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -12($fp)
# Saves in local_prompt_CellularAutomaton_internal_2 data_80
la $t2, data_80
lw $t3, -0($fp)
lw $t4, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -0($fp)
sw $t4, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Saves in local_prompt_CellularAutomaton_internal_4 data_81
la $t1, data_81
lw $t2, -0($fp)
lw $t3, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -0($fp)
sw $t2, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_prompt_CellularAutomaton_internal_6 to local_prompt_CellularAutomaton_ans_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -32($fp)
# Saves in local_prompt_CellularAutomaton_internal_7 data_82
la $t2, data_82
lw $t3, -0($fp)
lw $t4, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -4($fp)
sw $t2, -32($fp)
sw $t3, -0($fp)
sw $t4, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_prompt_CellularAutomaton_internal_10 data_83
la $t1, data_83
lw $t2, -4($fp)
lw $t3, -40($fp)
# local_prompt_CellularAutomaton_internal_9 <- local_prompt_CellularAutomaton_ans_0 = local_prompt_CellularAutomaton_internal_10
move $t8, $t2
move $t9, $t1
loop_20:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_20
beqz $a1, mismatch_20
seq $v0, $a0, $a1
beqz $v0, mismatch_20
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_20
mismatch_20:
li $v0, 0
j end_20
check_20:
bnez $a1, mismatch_20
li $v0, 1
end_20:
move $t3, $v0
# If local_prompt_CellularAutomaton_internal_9 goto true__1377
sw $t0, -36($fp)
sw $t1, -44($fp)
sw $t2, -4($fp)
sw $t3, -40($fp)
bnez $t3, true__1377
lw $t0, -48($fp)
# Moving 1 to local_prompt_CellularAutomaton_internal_11
li $t0, 1
sw $t0, -48($fp)
sw $t0, -48($fp)
j end__1377
true__1377:
lw $t0, -48($fp)
# Moving 0 to local_prompt_CellularAutomaton_internal_11
li $t0, 0
sw $t0, -48($fp)
sw $t0, -48($fp)
end__1377:
lw $t0, -48($fp)
lw $t1, -52($fp)
# Moving local_prompt_CellularAutomaton_internal_11 to local_prompt_CellularAutomaton_internal_12
move $t1, $t0
sw $t1, -52($fp)
lw $t2, -56($fp)
# Moving local_prompt_CellularAutomaton_internal_12 to local_prompt_CellularAutomaton_internal_13
move $t2, $t1
sw $t2, -56($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
sw $t2, -56($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_prompt2_CellularAutomaton:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_prompt2_CellularAutomaton_ans_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt2_CellularAutomaton_internal_12 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Saves in local_prompt2_CellularAutomaton_internal_1 data_84
la $t0, data_84
lw $t1, -4($fp)
# Moving local_prompt2_CellularAutomaton_internal_1 to local_prompt2_CellularAutomaton_ans_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -12($fp)
# Saves in local_prompt2_CellularAutomaton_internal_2 data_85
la $t2, data_85
lw $t3, -0($fp)
lw $t4, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -0($fp)
sw $t4, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Saves in local_prompt2_CellularAutomaton_internal_4 data_86
la $t1, data_86
lw $t2, -0($fp)
lw $t3, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Saves in local_prompt2_CellularAutomaton_internal_6 data_87
la $t1, data_87
lw $t2, -0($fp)
lw $t3, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
sw $t3, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -0($fp)
sw $t2, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_prompt2_CellularAutomaton_internal_8 to local_prompt2_CellularAutomaton_ans_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -44($fp)
# Saves in local_prompt2_CellularAutomaton_internal_10 data_88
la $t2, data_88
lw $t3, -40($fp)
# local_prompt2_CellularAutomaton_internal_9 <- local_prompt2_CellularAutomaton_ans_0 = local_prompt2_CellularAutomaton_internal_10
move $t8, $t1
move $t9, $t2
loop_21:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_21
beqz $a1, mismatch_21
seq $v0, $a0, $a1
beqz $v0, mismatch_21
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_21
mismatch_21:
li $v0, 0
j end_21
check_21:
bnez $a1, mismatch_21
li $v0, 1
end_21:
move $t3, $v0
# If local_prompt2_CellularAutomaton_internal_9 goto true__1426
sw $t0, -36($fp)
sw $t1, -4($fp)
sw $t2, -44($fp)
sw $t3, -40($fp)
bnez $t3, true__1426
lw $t0, -48($fp)
# Moving 0 to local_prompt2_CellularAutomaton_internal_11
li $t0, 0
sw $t0, -48($fp)
sw $t0, -48($fp)
j end__1426
true__1426:
lw $t0, -48($fp)
# Moving 1 to local_prompt2_CellularAutomaton_internal_11
li $t0, 1
sw $t0, -48($fp)
sw $t0, -48($fp)
end__1426:
lw $t0, -48($fp)
lw $t1, -52($fp)
# Moving local_prompt2_CellularAutomaton_internal_11 to local_prompt2_CellularAutomaton_internal_12
move $t1, $t0
sw $t1, -52($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_Main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_cells_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . rows <- SET 0
li $t9, 0
sw $t9, 12($t0)
# self . columns <- SET 0
li $t9, 0
sw $t9, 16($t0)
# self . board_size <- SET 0
li $t9, 0
sw $t9, 20($t0)
lw $t1, -4($fp)
# Saves in local_Main_Main_internal_0 data_89
la $t1, data_89
# self . population_map <- SET local_Main_Main_internal_0
sw $t1, 24($t0)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
# self . cells <- SET local_Main_Main_cells_1
sw $t2, 28($t0)
lw $t3, -12($fp)
# Moving self to local_Main_Main_internal_2
move $t3, $t0
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_main_Main_continue_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_choice_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_cells_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_cells_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_cells_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_32 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 0 to local_main_Main_continue_0
li $t0, 0
sw $t0, -4($fp)
lw $t1, -12($fp)
# Saves in local_main_Main_internal_2 data_90
la $t1, data_90
lw $t2, -8($fp)
# Moving local_main_Main_internal_2 to local_main_Main_choice_1
move $t2, $t1
sw $t2, -8($fp)
lw $t3, -16($fp)
# Saves in local_main_Main_internal_3 data_91
la $t3, data_91
lw $t4, -0($fp)
lw $t5, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t4)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -8($fp)
sw $t3, -16($fp)
sw $t4, -0($fp)
sw $t5, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Saves in local_main_Main_internal_5 data_92
la $t1, data_92
lw $t2, -0($fp)
lw $t3, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -0($fp)
sw $t3, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t1, $v0
sw $t0, -28($fp)
sw $t1, -32($fp)
start__1474:
lw $t0, -0($fp)
lw $t1, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_prompt2_CellularAutomaton
lw $t8, 112($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
# If not local_main_Main_internal_8 goto end__1474
sw $t0, -36($fp)
beqz $t0, end__1474
lw $t0, -4($fp)
# Moving 1 to local_main_Main_continue_0
li $t0, 1
sw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_option_CellularAutomaton
lw $t8, 104($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_main_Main_internal_9 to local_main_Main_choice_1
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -44($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 28
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_CellularAutomaton
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 28
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method CellularAutomaton
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -8($fp)
sw $t2, -44($fp)
# This function will consume the arguments
jal function_CellularAutomaton_CellularAutomaton
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# local_main_Main_internal_12 <- Type of local_main_Main_internal_10
lw $t1, 0($t0)
lw $t2, -56($fp)
# Saves in local_main_Main_internal_13 data_0
la $t2, data_0
# local_main_Main_internal_12 <- local_main_Main_internal_12 = local_main_Main_internal_13
move $t8, $t1
move $t9, $t2
loop_22:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_22
beqz $a1, mismatch_22
seq $v0, $a0, $a1
beqz $v0, mismatch_22
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_22
mismatch_22:
li $v0, 0
j end_22
check_22:
bnez $a1, mismatch_22
li $v0, 1
end_22:
move $t1, $v0
# If not local_main_Main_internal_12 goto continue__1492
sw $t0, -44($fp)
sw $t1, -52($fp)
sw $t2, -56($fp)
beqz $t1, continue__1492
la $a0, dispatch_error
j .raise
continue__1492:
lw $t0, -44($fp)
lw $t1, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_init_CellularAutomaton
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -44($fp)
sw $t1, -48($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . cells <- SET local_main_Main_internal_11
sw $t0, 28($t1)
lw $t2, -60($fp)
# local_main_Main_cells_14 <- GET self . cells
lw $t2, 28($t1)
lw $t3, -68($fp)
# local_main_Main_internal_16 <- Type of local_main_Main_cells_14
lw $t3, 0($t2)
lw $t4, -72($fp)
# Saves in local_main_Main_internal_17 data_0
la $t4, data_0
# local_main_Main_internal_16 <- local_main_Main_internal_16 = local_main_Main_internal_17
move $t8, $t3
move $t9, $t4
loop_23:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_23
beqz $a1, mismatch_23
seq $v0, $a0, $a1
beqz $v0, mismatch_23
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_23
mismatch_23:
li $v0, 0
j end_23
check_23:
bnez $a1, mismatch_23
li $v0, 1
end_23:
move $t3, $v0
# If not local_main_Main_internal_16 goto continue__1507
sw $t0, -48($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
sw $t3, -68($fp)
sw $t4, -72($fp)
beqz $t3, continue__1507
la $a0, dispatch_error
j .raise
continue__1507:
lw $t0, -60($fp)
lw $t1, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_CellularAutomaton
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -60($fp)
sw $t1, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -76($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t1, $v0
sw $t0, -64($fp)
sw $t1, -76($fp)
start__1517:
lw $t0, -4($fp)
# If not local_main_Main_continue_0 goto end__1517
sw $t0, -4($fp)
beqz $t0, end__1517
lw $t0, -0($fp)
lw $t1, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_prompt_CellularAutomaton
lw $t8, 108($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
# If local_main_Main_internal_19 goto true__1524
sw $t0, -80($fp)
bnez $t0, true__1524
lw $t0, -4($fp)
# Moving 0 to local_main_Main_continue_0
li $t0, 0
sw $t0, -4($fp)
lw $t1, -84($fp)
# Moving 0 to local_main_Main_internal_20
li $t1, 0
sw $t1, -84($fp)
sw $t0, -4($fp)
sw $t1, -84($fp)
j end__1524
true__1524:
lw $t0, -0($fp)
lw $t1, -88($fp)
# local_main_Main_cells_21 <- GET self . cells
lw $t1, 28($t0)
lw $t2, -96($fp)
# local_main_Main_internal_23 <- Type of local_main_Main_cells_21
lw $t2, 0($t1)
lw $t3, -100($fp)
# Saves in local_main_Main_internal_24 data_0
la $t3, data_0
# local_main_Main_internal_23 <- local_main_Main_internal_23 = local_main_Main_internal_24
move $t8, $t2
move $t9, $t3
loop_24:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_24
beqz $a1, mismatch_24
seq $v0, $a0, $a1
beqz $v0, mismatch_24
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_24
mismatch_24:
li $v0, 0
j end_24
check_24:
bnez $a1, mismatch_24
li $v0, 1
end_24:
move $t2, $v0
# If not local_main_Main_internal_23 goto continue__1534
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -96($fp)
sw $t3, -100($fp)
beqz $t2, continue__1534
la $a0, dispatch_error
j .raise
continue__1534:
lw $t0, -88($fp)
lw $t1, -92($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_evolve_CellularAutomaton
lw $t8, 100($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -88($fp)
sw $t1, -92($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -92($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -104($fp)
# local_main_Main_cells_25 <- GET self . cells
lw $t2, 28($t1)
lw $t3, -112($fp)
# local_main_Main_internal_27 <- Type of local_main_Main_cells_25
lw $t3, 0($t2)
lw $t4, -116($fp)
# Saves in local_main_Main_internal_28 data_0
la $t4, data_0
# local_main_Main_internal_27 <- local_main_Main_internal_27 = local_main_Main_internal_28
move $t8, $t3
move $t9, $t4
loop_25:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_25
beqz $a1, mismatch_25
seq $v0, $a0, $a1
beqz $v0, mismatch_25
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_25
mismatch_25:
li $v0, 0
j end_25
check_25:
bnez $a1, mismatch_25
li $v0, 1
end_25:
move $t3, $v0
# If not local_main_Main_internal_27 goto continue__1548
sw $t0, -92($fp)
sw $t1, -0($fp)
sw $t2, -104($fp)
sw $t3, -112($fp)
sw $t4, -116($fp)
beqz $t3, continue__1548
la $a0, dispatch_error
j .raise
continue__1548:
lw $t0, -104($fp)
lw $t1, -108($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_CellularAutomaton
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -104($fp)
sw $t1, -108($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -108($fp)
# saves the return value
move $t0, $v0
lw $t1, -120($fp)
# Moving local_main_Main_internal_26 to local_main_Main_internal_29
move $t1, $t0
sw $t1, -120($fp)
lw $t2, -84($fp)
# Moving local_main_Main_internal_29 to local_main_Main_internal_20
move $t2, $t1
sw $t2, -84($fp)
sw $t0, -108($fp)
sw $t1, -120($fp)
sw $t2, -84($fp)
end__1524:
lw $t0, -84($fp)
lw $t1, -76($fp)
# Moving local_main_Main_internal_20 to local_main_Main_internal_18
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -84($fp)
sw $t1, -76($fp)
j start__1517
end__1517:
lw $t0, -76($fp)
lw $t1, -124($fp)
# Moving local_main_Main_internal_18 to local_main_Main_internal_30
move $t1, $t0
sw $t1, -124($fp)
lw $t2, -32($fp)
# Moving local_main_Main_internal_30 to local_main_Main_internal_7
move $t2, $t1
sw $t2, -32($fp)
sw $t0, -76($fp)
sw $t1, -124($fp)
sw $t2, -32($fp)
j start__1474
end__1474:
lw $t0, -0($fp)
lw $t1, -128($fp)
# Moving self to local_main_Main_internal_31
move $t1, $t0
sw $t1, -128($fp)
lw $t2, -132($fp)
# Moving local_main_Main_internal_31 to local_main_Main_internal_32
move $t2, $t1
sw $t2, -132($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -128($fp)
sw $t2, -132($fp)
# Removing all locals from stack
addiu $sp, $sp, 136
jr $ra

# Raise exception method
.raise:
li $v0, 4
syscall
li $v0, 17
li $a0, 1
syscall

.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "
"
string_abort: .asciiz "Abort called from class String
"
int_abort: .asciiz "Abort called from class Int
"
bool_abort: .asciiz "Abort called from class Bool
"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_Board: .asciiz "Board"
type_CellularAutomaton: .asciiz "CellularAutomaton"
type_Main: .asciiz "Main"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz ""
data_2: .asciiz "
"
data_3: .asciiz "
"
data_4: .asciiz "
"
data_5: .asciiz " "
data_6: .asciiz " "
data_7: .asciiz " "
data_8: .asciiz " "
data_9: .asciiz " "
data_10: .asciiz " "
data_11: .asciiz " "
data_12: .asciiz " "
data_13: .asciiz " "
data_14: .asciiz " "
data_15: .asciiz " "
data_16: .asciiz " "
data_17: .asciiz " "
data_18: .asciiz " "
data_19: .asciiz "X"
data_20: .asciiz "X"
data_21: .asciiz "X"
data_22: .asciiz "X"
data_23: .asciiz "X"
data_24: .asciiz "X"
data_25: .asciiz "X"
data_26: .asciiz "X"
data_27: .asciiz "-"
data_28: .asciiz "X"
data_29: .asciiz "-"
data_30: .asciiz "X"
data_31: .asciiz "X"
data_32: .asciiz ""
data_33: .asciiz "
Please chose a number:
"
data_34: .asciiz "	1: A cross
"
data_35: .asciiz "	2: A slash from the upper left to lower right
"
data_36: .asciiz "	3: A slash from the upper right to lower left
"
data_37: .asciiz "	4: An X
"
data_38: .asciiz "	5: A greater than sign 
"
data_39: .asciiz "	6: A less than sign
"
data_40: .asciiz "	7: Two greater than signs
"
data_41: .asciiz "	8: Two less than signs
"
data_42: .asciiz "	9: A 'V'
"
data_43: .asciiz "	10: An inverse 'V'
"
data_44: .asciiz "	11: Numbers 9 and 10 combined
"
data_45: .asciiz "	12: A full grid
"
data_46: .asciiz "	13: A 'T'
"
data_47: .asciiz "	14: A plus '+'
"
data_48: .asciiz "	15: A 'W'
"
data_49: .asciiz "	16: An 'M'
"
data_50: .asciiz "	17: An 'E'
"
data_51: .asciiz "	18: A '3'
"
data_52: .asciiz "	19: An 'O'
"
data_53: .asciiz "	20: An '8'
"
data_54: .asciiz "	21: An 'S'
"
data_55: .asciiz "Your choice => "
data_56: .asciiz "
"
data_57: .asciiz "                         "
data_58: .asciiz " XXXX   X    XX    X   XXXX "
data_59: .asciiz " XX X  XX  X XX X  XX  X XX "
data_60: .asciiz " XX X  XX  X XX "
data_61: .asciiz "XXX    X   X  X    X   XXXX "
data_62: .asciiz "XXXXX   X   XXXXX   X   XXXX"
data_63: .asciiz "  X X   X X X X     X"
data_64: .asciiz "X     X X X X   X X  "
data_65: .asciiz "  X    X  XXXXX  X    X  "
data_66: .asciiz "XXXXX  X    X    X    X  "
data_67: .asciiz "XXXXXXXXXXXXXXXXXXXXXXXXX"
data_68: .asciiz "X X X X X X X X"
data_69: .asciiz "  X   X X X   X"
data_70: .asciiz "X   X X X   X  "
data_71: .asciiz " X  XX  X  X  X     "
data_72: .asciiz "X  X  X  XX  X      "
data_73: .asciiz "    X   X   X     X     X"
data_74: .asciiz "X     X     X   X   X    "
data_75: .asciiz "X   X X X   X   X X X   X"
data_76: .asciiz "X     X     X     X     X"
data_77: .asciiz "    X   X   X   X   X    "
data_78: .asciiz " XX  XXXX XXXX  XX  "
data_79: .asciiz ""
data_80: .asciiz "Would you like to continue with the next generation? 
"
data_81: .asciiz "Please use lowercase y or n for your answer [y]: "
data_82: .asciiz "
"
data_83: .asciiz "n"
data_84: .asciiz ""
data_85: .asciiz "

"
data_86: .asciiz "Would you like to choose a background pattern? 
"
data_87: .asciiz "Please use lowercase y or n for your answer [n]: "
data_88: .asciiz "y"
data_89: .asciiz ""
data_90: .asciiz ""
data_91: .asciiz "Welcome to the Game of Life.
"
data_92: .asciiz "There are many initial states to choose from. 
"
zero_error: .asciiz "Division by zero error
"
case_void_error: .asciiz "Case on void error
"
dispatch_error: .asciiz "Dispatch on void error
"
case_error: .asciiz "Case statement without a matching branch error
"
index_error: .asciiz "Substring out of range error
"
heap_error: .asciiz "Heap overflow error
"