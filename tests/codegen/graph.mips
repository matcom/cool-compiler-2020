
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:39 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
BoolOp:   .asciiz    "BoolOp"
# Function END
Graph:   .asciiz    "Graph"
# Function END
Parse:   .asciiz    "Parse"
# Function END
Main:   .asciiz    "Main"
# Function END
VList:   .asciiz    "VList"
# Function END
VCons:   .asciiz    "VCons"
# Function END
EList:   .asciiz    "EList"
# Function END
ECons:   .asciiz    "ECons"
# Function END
Edge:   .asciiz    "Edge"
# Function END
Vertice:   .asciiz    "Vertice"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, dummy, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_type_name_at_Object, dummy, dummy, function_copy_at_Object, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_type_name_at_Object, dummy, dummy, function_copy_at_Object, function_abort_at_Object, dummy, dummy, dummy, dummy, function_length_at_String, dummy, dummy, dummy, dummy, dummy, dummy, function_substr_at_String, dummy, dummy, dummy, dummy, dummy, function_concat_at_String, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_type_name_at_Object, dummy, dummy, function_copy_at_Object, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    function_type_name_at_Object, dummy, dummy, function_copy_at_Object, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type BoolOp ****
BoolOp_vtable:   .word    function_type_name_at_Object, dummy, dummy, function_copy_at_Object, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_and_at_BoolOp, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_or_at_BoolOp, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type BoolOp ****
BoolOp_start: 
   BoolOp_vtable_pointer:   .word    BoolOp_vtable
   # Function END
BoolOp_end: 
# 


#  **** VTABLE for type Graph ****
Graph_vtable:   .word    function_type_name_at_Object, dummy, dummy, function_copy_at_Object, function_abort_at_Object, dummy, dummy, function_print_V_at_Graph, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_print_E_at_Graph, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_add_vertice_at_Graph
# Function END
# 


#  **** Type RECORD for type Graph ****
Graph_start: 
   Graph_vtable_pointer:   .word    Graph_vtable
   # Function END
Graph_end: 
# 


#  **** VTABLE for type Parse ****
Parse_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, dummy, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, dummy, dummy, function_parse_line_at_Parse, dummy, dummy, function_a2i_at_Parse, dummy, dummy, dummy, dummy, dummy, function_read_input_at_Parse, function_in_string_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, function_a2i_aux_at_Parse, function_out_string_at_IO, dummy, dummy, function_c2i_at_Parse, dummy
# Function END
# 


#  **** Type RECORD for type Parse ****
Parse_start: 
   Parse_vtable_pointer:   .word    Parse_vtable
   # Function END
Parse_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, dummy, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, dummy, dummy, function_parse_line_at_Parse, dummy, dummy, function_a2i_at_Parse, dummy, dummy, function_main_at_Main, dummy, dummy, function_read_input_at_Parse, function_in_string_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, function_a2i_aux_at_Parse, function_out_string_at_IO, dummy, dummy, function_c2i_at_Parse, dummy
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


#  **** VTABLE for type VList ****
VList_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, dummy, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, function_head_at_VList, dummy, dummy, dummy, dummy, dummy, function_cons_at_VList, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_tail_at_VList, dummy, function_print_at_VList, function_isNil_at_VList, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type VList ****
VList_start: 
   VList_vtable_pointer:   .word    VList_vtable
   # Function END
VList_end: 
# 


#  **** VTABLE for type VCons ****
VCons_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, function_init_at_VCons, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, function_head_at_VCons, dummy, dummy, dummy, dummy, dummy, function_cons_at_VList, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_tail_at_VCons, dummy, function_print_at_VCons, function_isNil_at_VCons, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type VCons ****
VCons_start: 
   VCons_vtable_pointer:   .word    VCons_vtable
   # Function END
VCons_end: 
# 


#  **** VTABLE for type EList ****
EList_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, dummy, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, function_head_at_EList, dummy, dummy, dummy, function_append_at_EList, dummy, function_cons_at_EList, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_tail_at_EList, dummy, function_print_at_EList, function_isNil_at_EList, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type EList ****
EList_start: 
   EList_vtable_pointer:   .word    EList_vtable
   # Function END
EList_end: 
# 


#  **** VTABLE for type ECons ****
ECons_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, function_init_at_ECons, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, function_head_at_ECons, dummy, dummy, dummy, function_append_at_EList, dummy, function_cons_at_EList, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, function_tail_at_ECons, dummy, function_print_at_ECons, function_isNil_at_ECons, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type ECons ****
ECons_start: 
   ECons_vtable_pointer:   .word    ECons_vtable
   # Function END
ECons_end: 
# 


#  **** VTABLE for type Edge ****
Edge_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, function_init_at_Edge, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_in_string_at_IO, dummy, dummy, dummy, dummy, function_print_at_Edge, dummy, dummy, function_out_string_at_IO, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Edge ****
Edge_start: 
   Edge_vtable_pointer:   .word    Edge_vtable
   # Function END
Edge_end: 
# 


#  **** VTABLE for type Vertice ****
Vertice_vtable:   .word    function_type_name_at_Object, function_in_int_at_IO, function_init_at_Vertice, function_copy_at_Object, function_abort_at_Object, function_out_int_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_number_at_Vertice, dummy, function_outgoing_at_Vertice, dummy, dummy, function_in_string_at_IO, dummy, dummy, dummy, dummy, function_print_at_Vertice, dummy, dummy, function_out_string_at_IO, dummy, function_add_out_at_Vertice, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Vertice ****
Vertice_start: 
   Vertice_vtable_pointer:   .word    Vertice_vtable
   # Function END
Vertice_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, -1, -1, 1, 2, 1, 2, 1, 2, 1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 1, 1, 2, 3, 2, 3, 2, 3, 2, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
BoolOp__TDT:   .word    -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1
Graph__TDT:   .word    -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1
Parse__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1, -1, -1, -1, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1
VList__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1, -1, -1
VCons__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1
EList__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1
ECons__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1
Edge__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
Vertice__TDT:   .word    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "\n"
# 


data_5:   .asciiz    ""
# 


data_6:   .asciiz    "0"
# 


data_7:   .asciiz    "1"
# 


data_8:   .asciiz    "2"
# 


data_9:   .asciiz    "3"
# 


data_10:   .asciiz    "4"
# 


data_11:   .asciiz    "5"
# 


data_12:   .asciiz    "6"
# 


data_13:   .asciiz    "7"
# 


data_14:   .asciiz    "8"
# 


data_15:   .asciiz    "9"
# 


data_16:   .asciiz    "-"
# 


data_17:   .asciiz    " "
# 


data_18:   .asciiz    " "
# 


data_19:   .asciiz    ","
# 


data_20:   .asciiz    ""
# 


data_21:   .asciiz    ""
# 


data_22:   .asciiz    "\n"
# 


data_23:   .asciiz    "\n"
# 


data_24:   .asciiz    " ("
# 


data_25:   .asciiz    ","
# 


data_26:   .asciiz    ")"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7fdc001cfa00>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 24 bytes of memory
   li $a0, 24
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 32
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Parse__attrib__boolop__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Parse__attrib__rest__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Main__attrib__g__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 20($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 56($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_and_at_BoolOp implementation.
# @Params:
# 	0($fp) = param_and_at_BoolOp_b1_0
# 	4($fp) = param_and_at_BoolOp_b2_1
function_and_at_BoolOp: 
   # Allocate stack frame for function function_and_at_BoolOp.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_and_at_BoolOp_internal_0 --> -4($fp)
   # PARAM param_and_at_BoolOp_b1_0 --> 4($fp)
   # Obtain value from 4($fp)
   lw $v0, 4($fp)
   lw $v0, 12($v0)
   sw $v0, -4($fp)
   # IF_ZERO local_and_at_BoolOp_internal_0 GOTO label_FALSEIF_1
   # IF_ZERO local_and_at_BoolOp_internal_0 GOTO label_FALSEIF_1
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSEIF_1
   # LOCAL local_and_at_BoolOp_internal_1 --> -8($fp)
   # PARAM param_and_at_BoolOp_b2_1 --> 0($fp)
   # local_and_at_BoolOp_internal_1 = PARAM param_and_at_BoolOp_b2_1
   lw $t0, 0($fp)
   sw $t0, -8($fp)
   # GOTO label_ENDIF_2
j label_ENDIF_2
label_FALSEIF_1: 
   # LOCAL local_and_at_BoolOp_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_and_at_BoolOp_internal_1 --> -8($fp)
   # LOCAL local_and_at_BoolOp_internal_2 --> -12($fp)
   # local_and_at_BoolOp_internal_1 = local_and_at_BoolOp_internal_2
   lw $t0, -12($fp)
   sw $t0, -8($fp)
   label_ENDIF_2: 
# RETURN local_and_at_BoolOp_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_and_at_BoolOp.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
# Deallocate function args
addu $sp, $sp, 8
jr $ra
# Function END


# function_or_at_BoolOp implementation.
# @Params:
# 	0($fp) = param_or_at_BoolOp_b1_0
# 	4($fp) = param_or_at_BoolOp_b2_1
function_or_at_BoolOp: 
   # Allocate stack frame for function function_or_at_BoolOp.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_or_at_BoolOp_internal_0 --> -4($fp)
   # PARAM param_or_at_BoolOp_b1_0 --> 4($fp)
   # Obtain value from 4($fp)
   lw $v0, 4($fp)
   lw $v0, 12($v0)
   sw $v0, -4($fp)
   # IF_ZERO local_or_at_BoolOp_internal_0 GOTO label_FALSEIF_3
   # IF_ZERO local_or_at_BoolOp_internal_0 GOTO label_FALSEIF_3
   lw $t0, -4($fp)
   beq $t0, 0, label_FALSEIF_3
   # LOCAL local_or_at_BoolOp_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_or_at_BoolOp_internal_1 --> -8($fp)
   # LOCAL local_or_at_BoolOp_internal_2 --> -12($fp)
   # local_or_at_BoolOp_internal_1 = local_or_at_BoolOp_internal_2
   lw $t0, -12($fp)
   sw $t0, -8($fp)
   # GOTO label_ENDIF_4
j label_ENDIF_4
label_FALSEIF_3: 
   # LOCAL local_or_at_BoolOp_internal_1 --> -8($fp)
   # PARAM param_or_at_BoolOp_b2_1 --> 0($fp)
   # local_or_at_BoolOp_internal_1 = PARAM param_or_at_BoolOp_b2_1
   lw $t0, 0($fp)
   sw $t0, -8($fp)
   label_ENDIF_4: 
# RETURN local_or_at_BoolOp_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_or_at_BoolOp.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
# Deallocate function args
addu $sp, $sp, 8
jr $ra
# Function END


# __Graph__attrib__vertices__init implementation.
# @Params:
__Graph__attrib__vertices__init: 
   # Allocate stack frame for function __Graph__attrib__vertices__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__vertices__init_internal_1 --> -8($fp)
   # local_attrib__vertices__init_internal_1 = ALLOCATE VList
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, VList
   sw $t0, 12($v0)
   li $t0, 5
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, VList_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 36
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __VList__attrib__car__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_attrib__vertices__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Graph__attrib__vertices__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Graph__attrib__edges__init implementation.
# @Params:
__Graph__attrib__edges__init: 
   # Allocate stack frame for function __Graph__attrib__edges__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__edges__init_internal_1 --> -8($fp)
   # local_attrib__edges__init_internal_1 = ALLOCATE EList
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, EList
   sw $t0, 12($v0)
   li $t0, 5
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, EList_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 44
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __EList__attrib__car__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_attrib__edges__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Graph__attrib__edges__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_add_vertice_at_Graph implementation.
# @Params:
# 	0($fp) = param_add_vertice_at_Graph_v_0
function_add_vertice_at_Graph: 
   # Allocate stack frame for function function_add_vertice_at_Graph.
   subu $sp, $sp, 40
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 40
   # LOCAL local_add_vertice_at_Graph_internal_2 --> -12($fp)
   # PARAM param_add_vertice_at_Graph_v_0 --> 0($fp)
   # local_add_vertice_at_Graph_internal_2 = PARAM param_add_vertice_at_Graph_v_0
   lw $t0, 0($fp)
   sw $t0, -12($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_add_vertice_at_Graph_internal_2 --> -12($fp)
   # LOCAL local_add_vertice_at_Graph_internal_3 --> -16($fp)
   # local_add_vertice_at_Graph_internal_3 = VCALL local_add_vertice_at_Graph_internal_2 outgoing
   # Save new self pointer in $s1
   lw $s1, -12($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 60($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -16($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_add_vertice_at_Graph_internal_0 --> -4($fp)
   # LOCAL local_add_vertice_at_Graph_internal_3 --> -16($fp)
   # local_add_vertice_at_Graph_internal_0 = local_add_vertice_at_Graph_internal_3
   lw $t0, -16($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_add_vertice_at_Graph_internal_4 = GETATTRIBUTE edges Graph
   # LOCAL local_add_vertice_at_Graph_internal_4 --> -20($fp)
   lw $t0, 16($s1)
   sw $t0, -20($fp)
   # ARG local_add_vertice_at_Graph_internal_4
   # LOCAL local_add_vertice_at_Graph_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_add_vertice_at_Graph_internal_0 --> -4($fp)
   # LOCAL local_add_vertice_at_Graph_internal_1 --> -8($fp)
   # local_add_vertice_at_Graph_internal_1 = VCALL local_add_vertice_at_Graph_internal_0 append
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_add_vertice_at_Graph_internal_1 --> -8($fp)
   lw $t0, -8($fp)
   sw $t0, 16($s1)
   # local_add_vertice_at_Graph_internal_7 = GETATTRIBUTE vertices Graph
   # LOCAL local_add_vertice_at_Graph_internal_7 --> -32($fp)
   lw $t0, 12($s1)
   sw $t0, -32($fp)
   # LOCAL local_add_vertice_at_Graph_internal_5 --> -24($fp)
   # LOCAL local_add_vertice_at_Graph_internal_7 --> -32($fp)
   # local_add_vertice_at_Graph_internal_5 = local_add_vertice_at_Graph_internal_7
   lw $t0, -32($fp)
   sw $t0, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_add_vertice_at_Graph_v_0
   # PARAM param_add_vertice_at_Graph_v_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_add_vertice_at_Graph_internal_5 --> -24($fp)
   # LOCAL local_add_vertice_at_Graph_internal_6 --> -28($fp)
   # local_add_vertice_at_Graph_internal_6 = VCALL local_add_vertice_at_Graph_internal_5 cons
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 48($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_add_vertice_at_Graph_internal_6 --> -28($fp)
   lw $t0, -28($fp)
   sw $t0, 12($s1)
   # RETURN
   # Deallocate stack frame for function function_add_vertice_at_Graph.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 40
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_print_E_at_Graph implementation.
# @Params:
function_print_E_at_Graph: 
   # Allocate stack frame for function function_print_E_at_Graph.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_print_E_at_Graph_internal_2 = GETATTRIBUTE edges Graph
   # LOCAL local_print_E_at_Graph_internal_2 --> -12($fp)
   lw $t0, 16($s1)
   sw $t0, -12($fp)
   # LOCAL local_print_E_at_Graph_internal_0 --> -4($fp)
   # LOCAL local_print_E_at_Graph_internal_2 --> -12($fp)
   # local_print_E_at_Graph_internal_0 = local_print_E_at_Graph_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_E_at_Graph_internal_0 --> -4($fp)
   # LOCAL local_print_E_at_Graph_internal_1 --> -8($fp)
   # local_print_E_at_Graph_internal_1 = VCALL local_print_E_at_Graph_internal_0 print
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_E_at_Graph_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_print_E_at_Graph.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_print_V_at_Graph implementation.
# @Params:
function_print_V_at_Graph: 
   # Allocate stack frame for function function_print_V_at_Graph.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_print_V_at_Graph_internal_2 = GETATTRIBUTE vertices Graph
   # LOCAL local_print_V_at_Graph_internal_2 --> -12($fp)
   lw $t0, 12($s1)
   sw $t0, -12($fp)
   # LOCAL local_print_V_at_Graph_internal_0 --> -4($fp)
   # LOCAL local_print_V_at_Graph_internal_2 --> -12($fp)
   # local_print_V_at_Graph_internal_0 = local_print_V_at_Graph_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_V_at_Graph_internal_0 --> -4($fp)
   # LOCAL local_print_V_at_Graph_internal_1 --> -8($fp)
   # local_print_V_at_Graph_internal_1 = VCALL local_print_V_at_Graph_internal_0 print
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_V_at_Graph_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_print_V_at_Graph.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Parse__attrib__boolop__init implementation.
# @Params:
__Parse__attrib__boolop__init: 
   # Allocate stack frame for function __Parse__attrib__boolop__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__boolop__init_internal_1 --> -8($fp)
   # local_attrib__boolop__init_internal_1 = ALLOCATE BoolOp
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, BoolOp
   sw $t0, 12($v0)
   li $t0, 6
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, BoolOp_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local_attrib__boolop__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Parse__attrib__boolop__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Parse__attrib__rest__init implementation.
# @Params:
__Parse__attrib__rest__init: 
   # Allocate stack frame for function __Parse__attrib__rest__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_attrib__rest__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -4($fp)
   # RETURN local_attrib__rest__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Parse__attrib__rest__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_read_input_at_Parse implementation.
# @Params:
function_read_input_at_Parse: 
   # Allocate stack frame for function function_read_input_at_Parse.
   subu $sp, $sp, 112
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 112
   # LOCAL local_read_input_at_Parse_g_0 --> -4($fp)
   # local_read_input_at_Parse_g_0 = 0
   li $t0, 0
   sw $t0, -4($fp)
   # LOCAL local_read_input_at_Parse_internal_1 --> -8($fp)
   # local_read_input_at_Parse_internal_1 = ALLOCATE Graph
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Graph
   sw $t0, 12($v0)
   li $t0, 5
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Graph_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Graph__attrib__vertices__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Graph__attrib__edges__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # LOCAL local_read_input_at_Parse_g_0 --> -4($fp)
   # LOCAL local_read_input_at_Parse_internal_1 --> -8($fp)
   # local_read_input_at_Parse_g_0 = local_read_input_at_Parse_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_0
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -12($fp)
   # LOCAL local_read_input_at_Parse_internal_5 --> -24($fp)
   # local_read_input_at_Parse_internal_5 = SELF
   sw $s1, -24($fp)
   # LOCAL local_read_input_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_read_input_at_Parse_internal_5 --> -24($fp)
   # local_read_input_at_Parse_internal_3 = local_read_input_at_Parse_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_read_input_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_read_input_at_Parse_internal_4 --> -20($fp)
   # local_read_input_at_Parse_internal_4 = VCALL local_read_input_at_Parse_internal_3 in_string
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 72($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
   # LOCAL local_read_input_at_Parse_internal_4 --> -20($fp)
   # local_read_input_at_Parse_line_2 = local_read_input_at_Parse_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   label_WHILE_5: 
      # local_read_input_at_Parse_internal_9 = GETATTRIBUTE boolop Parse
      # LOCAL local_read_input_at_Parse_internal_9 --> -40($fp)
      lw $t0, 12($s1)
      sw $t0, -40($fp)
      # LOCAL local_read_input_at_Parse_internal_7 --> -32($fp)
      # LOCAL local_read_input_at_Parse_internal_9 --> -40($fp)
      # local_read_input_at_Parse_internal_7 = local_read_input_at_Parse_internal_9
      lw $t0, -40($fp)
      sw $t0, -32($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_12 --> -52($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, data_4
      sw $t0, 12($v0)
      li $t0, 1
      sw $t0, 16($v0)
      sw $v0, -52($fp)
      # IF_ZERO local_read_input_at_Parse_line_2 GOTO label_FALSE_7
      # IF_ZERO local_read_input_at_Parse_line_2 GOTO label_FALSE_7
      lw $t0, -12($fp)
      beq $t0, 0, label_FALSE_7
      # IF_ZERO local_read_input_at_Parse_internal_12 GOTO label_FALSE_7
      # IF_ZERO local_read_input_at_Parse_internal_12 GOTO label_FALSE_7
      lw $t0, -52($fp)
      beq $t0, 0, label_FALSE_7
      # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # Comparing -12($fp) type with String
      la $v0, String
      lw $a0, -12($fp)
      lw $a0, 0($a0)
      sub $a0, $a0, $v0
      sw $a0, -48($fp)
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_COMPARE_STRING_10
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_COMPARE_STRING_10
      lw $t0, -48($fp)
      beq $t0, 0, label_COMPARE_STRING_10
      # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # Comparing -12($fp) type with Bool
      la $v0, Bool
      lw $a0, -12($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -48($fp)
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_11
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_11
      lw $t0, -48($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_11
      # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # Comparing -12($fp) type with Int
      la $v0, Int
      lw $a0, -12($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -48($fp)
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_11
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_11
      lw $t0, -48($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_11
      # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # LOCAL local_read_input_at_Parse_internal_12 --> -52($fp)
      # Load pointers and SUB
      lw $a0, -12($fp)
      lw $a1, -52($fp)
      sub $a0, $a0, $a1
      sw $a0, -48($fp)
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_TRUE_8
      # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_TRUE_8
      lw $t0, -48($fp)
      beq $t0, 0, label_TRUE_8
      # GOTO label_FALSE_7
      j label_FALSE_7
      label_COMPARE_BY_VALUE_11: 
         # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
         # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
         # LOCAL local_read_input_at_Parse_internal_12 --> -52($fp)
         lw $a0, -12($fp)
         lw $a1, -52($fp)
         # Load values
         lw $a0, 12($a0)
         lw $a1, 12($a1)
         # SUB and store
         sub $a0, $a0, $a1
         sw $a0, -48($fp)
         # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_TRUE_8
         # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_TRUE_8
         lw $t0, -48($fp)
         beq $t0, 0, label_TRUE_8
         # GOTO label_FALSE_7
         j label_FALSE_7
         label_COMPARE_STRING_10: 
            # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
            # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
            # LOCAL local_read_input_at_Parse_internal_12 --> -52($fp)
            # Load strings for comparison
            lw $v0, -12($fp)
            lw $v1, -52($fp)
            # Compare lengths
            lw $v0, 16($v0)
            lw $v1, 16($v1)
            sub $v0, $v0, $v1
            sw $v0, -48($fp)
            # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_CONTINUE_12
            # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_CONTINUE_12
            lw $t0, -48($fp)
            beq $t0, 0, label_CONTINUE_12
            # GOTO label_FALSE_7
            j label_FALSE_7
            label_CONTINUE_12: 
               # LOCAL local_read_input_at_Parse_internal_11 --> -48($fp)
               # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
               # LOCAL local_read_input_at_Parse_internal_12 --> -52($fp)
               move $a2, $zero
               # Load strings for comparison
               lw $v0, -12($fp)
               lw $v1, -52($fp)
               # Load strings pointers
               lw $v0, 12($v0)
               lw $v1, 12($v1)
               # Compare loop, while [v0] != \0
               label_WHILE_STR_COMP_13: 
                  lb $a0, 0($v0)
                  # If EOS => break
                  beqz $a0, label_WHILE_STR_COMP_END_14
                  lb $a1, 0($v1)
                  # Move strings pointers
                  addu $v0, $v0, 1
                  addu $v1, $v1, 1
                  # Compare chars
                  sub $a0, $a0, $a1
                  beqz $a0, label_WHILE_STR_COMP_13
                  # False
                  li $a2, 1
                  label_WHILE_STR_COMP_END_14: 
                     # Store result
                     sw $a2, -48($fp)
                     # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_TRUE_8
                     # IF_ZERO local_read_input_at_Parse_internal_11 GOTO label_TRUE_8
                     lw $t0, -48($fp)
                     beq $t0, 0, label_TRUE_8
                     label_FALSE_7: 
                        # LOCAL local_read_input_at_Parse_internal_10 --> -44($fp)
                        # Allocating 20 bytes of memory
                        li $a0, 20
                        li $v0, 9
                        syscall
                        # Allocating string for type Bool
                        la $t0, String
                        sw $t0, 0($v0)
                        la $t0, String_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 8
                        sw $t0, 8($v0)
                        la $t0, Bool
                        sw $t0, 12($v0)
                        li $t0, 4
                        sw $t0, 16($v0)
                        move $t0, $v0
                        # Allocating 16 bytes of memory
                        li $a0, 16
                        li $v0, 9
                        syscall
                        sw $t0, 0($v0)
                        la $t0, Bool_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 12
                        sw $t0, 8($v0)
                        li $t0, 0
                        sw $t0, 12($v0)
                        sw $v0, -44($fp)
                        # GOTO label_END_9
j label_END_9
label_TRUE_8: 
   # LOCAL local_read_input_at_Parse_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   label_END_9: 
# LOCAL local_read_input_at_Parse_internal_10 --> -44($fp)
# LOCAL local_read_input_at_Parse_internal_10 --> -44($fp)
# Obtain value from -44($fp)
lw $v0, -44($fp)
lw $v0, 12($v0)
sw $v0, -44($fp)
# IF_ZERO local_read_input_at_Parse_internal_10 GOTO label_FALSE_15
# IF_ZERO local_read_input_at_Parse_internal_10 GOTO label_FALSE_15
lw $t0, -44($fp)
beq $t0, 0, label_FALSE_15
# LOCAL local_read_input_at_Parse_internal_13 --> -56($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -56($fp)
# GOTO label_NOT_END_16
j label_NOT_END_16
label_FALSE_15: 
   # LOCAL local_read_input_at_Parse_internal_13 --> -56($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -56($fp)
   label_NOT_END_16: 
      # ARG local_read_input_at_Parse_internal_13
      # LOCAL local_read_input_at_Parse_internal_13 --> -56($fp)
      lw $t0, -56($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_16 --> -68($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, data_5
      sw $t0, 12($v0)
      li $t0, 0
      sw $t0, 16($v0)
      sw $v0, -68($fp)
      # IF_ZERO local_read_input_at_Parse_line_2 GOTO label_FALSE_17
      # IF_ZERO local_read_input_at_Parse_line_2 GOTO label_FALSE_17
      lw $t0, -12($fp)
      beq $t0, 0, label_FALSE_17
      # IF_ZERO local_read_input_at_Parse_internal_16 GOTO label_FALSE_17
      # IF_ZERO local_read_input_at_Parse_internal_16 GOTO label_FALSE_17
      lw $t0, -68($fp)
      beq $t0, 0, label_FALSE_17
      # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # Comparing -12($fp) type with String
      la $v0, String
      lw $a0, -12($fp)
      lw $a0, 0($a0)
      sub $a0, $a0, $v0
      sw $a0, -64($fp)
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_COMPARE_STRING_20
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_COMPARE_STRING_20
      lw $t0, -64($fp)
      beq $t0, 0, label_COMPARE_STRING_20
      # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # Comparing -12($fp) type with Bool
      la $v0, Bool
      lw $a0, -12($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -64($fp)
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_21
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_21
      lw $t0, -64($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_21
      # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # Comparing -12($fp) type with Int
      la $v0, Int
      lw $a0, -12($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -64($fp)
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_21
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_21
      lw $t0, -64($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_21
      # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # LOCAL local_read_input_at_Parse_internal_16 --> -68($fp)
      # Load pointers and SUB
      lw $a0, -12($fp)
      lw $a1, -68($fp)
      sub $a0, $a0, $a1
      sw $a0, -64($fp)
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_TRUE_18
      # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_TRUE_18
      lw $t0, -64($fp)
      beq $t0, 0, label_TRUE_18
      # GOTO label_FALSE_17
      j label_FALSE_17
      label_COMPARE_BY_VALUE_21: 
         # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
         # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
         # LOCAL local_read_input_at_Parse_internal_16 --> -68($fp)
         lw $a0, -12($fp)
         lw $a1, -68($fp)
         # Load values
         lw $a0, 12($a0)
         lw $a1, 12($a1)
         # SUB and store
         sub $a0, $a0, $a1
         sw $a0, -64($fp)
         # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_TRUE_18
         # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_TRUE_18
         lw $t0, -64($fp)
         beq $t0, 0, label_TRUE_18
         # GOTO label_FALSE_17
         j label_FALSE_17
         label_COMPARE_STRING_20: 
            # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
            # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
            # LOCAL local_read_input_at_Parse_internal_16 --> -68($fp)
            # Load strings for comparison
            lw $v0, -12($fp)
            lw $v1, -68($fp)
            # Compare lengths
            lw $v0, 16($v0)
            lw $v1, 16($v1)
            sub $v0, $v0, $v1
            sw $v0, -64($fp)
            # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_CONTINUE_22
            # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_CONTINUE_22
            lw $t0, -64($fp)
            beq $t0, 0, label_CONTINUE_22
            # GOTO label_FALSE_17
            j label_FALSE_17
            label_CONTINUE_22: 
               # LOCAL local_read_input_at_Parse_internal_15 --> -64($fp)
               # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
               # LOCAL local_read_input_at_Parse_internal_16 --> -68($fp)
               move $a2, $zero
               # Load strings for comparison
               lw $v0, -12($fp)
               lw $v1, -68($fp)
               # Load strings pointers
               lw $v0, 12($v0)
               lw $v1, 12($v1)
               # Compare loop, while [v0] != \0
               label_WHILE_STR_COMP_23: 
                  lb $a0, 0($v0)
                  # If EOS => break
                  beqz $a0, label_WHILE_STR_COMP_END_24
                  lb $a1, 0($v1)
                  # Move strings pointers
                  addu $v0, $v0, 1
                  addu $v1, $v1, 1
                  # Compare chars
                  sub $a0, $a0, $a1
                  beqz $a0, label_WHILE_STR_COMP_23
                  # False
                  li $a2, 1
                  label_WHILE_STR_COMP_END_24: 
                     # Store result
                     sw $a2, -64($fp)
                     # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_TRUE_18
                     # IF_ZERO local_read_input_at_Parse_internal_15 GOTO label_TRUE_18
                     lw $t0, -64($fp)
                     beq $t0, 0, label_TRUE_18
                     label_FALSE_17: 
                        # LOCAL local_read_input_at_Parse_internal_14 --> -60($fp)
                        # Allocating 20 bytes of memory
                        li $a0, 20
                        li $v0, 9
                        syscall
                        # Allocating string for type Bool
                        la $t0, String
                        sw $t0, 0($v0)
                        la $t0, String_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 8
                        sw $t0, 8($v0)
                        la $t0, Bool
                        sw $t0, 12($v0)
                        li $t0, 4
                        sw $t0, 16($v0)
                        move $t0, $v0
                        # Allocating 16 bytes of memory
                        li $a0, 16
                        li $v0, 9
                        syscall
                        sw $t0, 0($v0)
                        la $t0, Bool_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 12
                        sw $t0, 8($v0)
                        li $t0, 0
                        sw $t0, 12($v0)
                        sw $v0, -60($fp)
                        # GOTO label_END_19
j label_END_19
label_TRUE_18: 
   # LOCAL local_read_input_at_Parse_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_END_19: 
# LOCAL local_read_input_at_Parse_internal_14 --> -60($fp)
# LOCAL local_read_input_at_Parse_internal_14 --> -60($fp)
# Obtain value from -60($fp)
lw $v0, -60($fp)
lw $v0, 12($v0)
sw $v0, -60($fp)
# IF_ZERO local_read_input_at_Parse_internal_14 GOTO label_FALSE_25
# IF_ZERO local_read_input_at_Parse_internal_14 GOTO label_FALSE_25
lw $t0, -60($fp)
beq $t0, 0, label_FALSE_25
# LOCAL local_read_input_at_Parse_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -72($fp)
# GOTO label_NOT_END_26
j label_NOT_END_26
label_FALSE_25: 
   # LOCAL local_read_input_at_Parse_internal_17 --> -72($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -72($fp)
   label_NOT_END_26: 
      # ARG local_read_input_at_Parse_internal_17
      # LOCAL local_read_input_at_Parse_internal_17 --> -72($fp)
      lw $t0, -72($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_7 --> -32($fp)
      # LOCAL local_read_input_at_Parse_internal_8 --> -36($fp)
      # local_read_input_at_Parse_internal_8 = VCALL local_read_input_at_Parse_internal_7 and
      # Save new self pointer in $s1
      lw $s1, -32($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 76($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -36($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_read_input_at_Parse_internal_6 --> -28($fp)
      # LOCAL local_read_input_at_Parse_internal_8 --> -36($fp)
      # Obtain value from -36($fp)
      lw $v0, -36($fp)
      lw $v0, 12($v0)
      sw $v0, -28($fp)
      # IF_ZERO local_read_input_at_Parse_internal_6 GOTO label_WHILE_END_6
      # IF_ZERO local_read_input_at_Parse_internal_6 GOTO label_WHILE_END_6
      lw $t0, -28($fp)
      beq $t0, 0, label_WHILE_END_6
      # LOCAL local_read_input_at_Parse_internal_18 --> -76($fp)
      # LOCAL local_read_input_at_Parse_g_0 --> -4($fp)
      # local_read_input_at_Parse_internal_18 = local_read_input_at_Parse_g_0
      lw $t0, -4($fp)
      sw $t0, -76($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_22 --> -92($fp)
      # local_read_input_at_Parse_internal_22 = SELF
      sw $s1, -92($fp)
      # LOCAL local_read_input_at_Parse_internal_20 --> -84($fp)
      # LOCAL local_read_input_at_Parse_internal_22 --> -92($fp)
      # local_read_input_at_Parse_internal_20 = local_read_input_at_Parse_internal_22
      lw $t0, -92($fp)
      sw $t0, -84($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # ARG local_read_input_at_Parse_line_2
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      lw $t0, -12($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_20 --> -84($fp)
      # LOCAL local_read_input_at_Parse_internal_21 --> -88($fp)
      # local_read_input_at_Parse_internal_21 = VCALL local_read_input_at_Parse_internal_20 parse_line
      # Save new self pointer in $s1
      lw $s1, -84($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 32($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -88($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # ARG local_read_input_at_Parse_internal_21
      # LOCAL local_read_input_at_Parse_internal_21 --> -88($fp)
      lw $t0, -88($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_18 --> -76($fp)
      # LOCAL local_read_input_at_Parse_internal_19 --> -80($fp)
      # local_read_input_at_Parse_internal_19 = VCALL local_read_input_at_Parse_internal_18 add_vertice
      # Save new self pointer in $s1
      lw $s1, -76($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 120($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -80($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_read_input_at_Parse_internal_25 --> -104($fp)
      # local_read_input_at_Parse_internal_25 = SELF
      sw $s1, -104($fp)
      # LOCAL local_read_input_at_Parse_internal_23 --> -96($fp)
      # LOCAL local_read_input_at_Parse_internal_25 --> -104($fp)
      # local_read_input_at_Parse_internal_23 = local_read_input_at_Parse_internal_25
      lw $t0, -104($fp)
      sw $t0, -96($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_read_input_at_Parse_internal_23 --> -96($fp)
      # LOCAL local_read_input_at_Parse_internal_24 --> -100($fp)
      # local_read_input_at_Parse_internal_24 = VCALL local_read_input_at_Parse_internal_23 in_string
      # Save new self pointer in $s1
      lw $s1, -96($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 72($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -100($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_read_input_at_Parse_line_2 --> -12($fp)
      # LOCAL local_read_input_at_Parse_internal_24 --> -100($fp)
      # local_read_input_at_Parse_line_2 = local_read_input_at_Parse_internal_24
      lw $t0, -100($fp)
      sw $t0, -12($fp)
      # GOTO label_WHILE_5
      j label_WHILE_5
      label_WHILE_END_6: 
         # RETURN local_read_input_at_Parse_g_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_read_input_at_Parse.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 112
         jr $ra
         # Function END


# function_parse_line_at_Parse implementation.
# @Params:
# 	0($fp) = param_parse_line_at_Parse_s_0
function_parse_line_at_Parse: 
   # Allocate stack frame for function function_parse_line_at_Parse.
   subu $sp, $sp, 136
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 136
   # LOCAL local_parse_line_at_Parse_v_0 --> -4($fp)
   # local_parse_line_at_Parse_v_0 = 0
   li $t0, 0
   sw $t0, -4($fp)
   # LOCAL local_parse_line_at_Parse_internal_3 --> -16($fp)
   # local_parse_line_at_Parse_internal_3 = ALLOCATE Vertice
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Vertice
   sw $t0, 12($v0)
   li $t0, 7
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Vertice_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 56
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Vertice__attrib__num__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Vertice__attrib__out__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -16($fp)
   # LOCAL local_parse_line_at_Parse_internal_1 --> -8($fp)
   # LOCAL local_parse_line_at_Parse_internal_3 --> -16($fp)
   # local_parse_line_at_Parse_internal_1 = local_parse_line_at_Parse_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_parse_line_at_Parse_internal_6 --> -28($fp)
   # local_parse_line_at_Parse_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_parse_line_at_Parse_internal_4 --> -20($fp)
   # LOCAL local_parse_line_at_Parse_internal_6 --> -28($fp)
   # local_parse_line_at_Parse_internal_4 = local_parse_line_at_Parse_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_parse_line_at_Parse_s_0
   # PARAM param_parse_line_at_Parse_s_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_parse_line_at_Parse_internal_4 --> -20($fp)
   # LOCAL local_parse_line_at_Parse_internal_5 --> -24($fp)
   # local_parse_line_at_Parse_internal_5 = VCALL local_parse_line_at_Parse_internal_4 a2i
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 44($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_parse_line_at_Parse_internal_5
   # LOCAL local_parse_line_at_Parse_internal_5 --> -24($fp)
   lw $t0, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_parse_line_at_Parse_internal_1 --> -8($fp)
   # LOCAL local_parse_line_at_Parse_internal_2 --> -12($fp)
   # local_parse_line_at_Parse_internal_2 = VCALL local_parse_line_at_Parse_internal_1 init
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_parse_line_at_Parse_v_0 --> -4($fp)
   # LOCAL local_parse_line_at_Parse_internal_2 --> -12($fp)
   # local_parse_line_at_Parse_v_0 = local_parse_line_at_Parse_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   label_WHILE_27: 
      # local_parse_line_at_Parse_internal_12 = GETATTRIBUTE rest Parse
      # LOCAL local_parse_line_at_Parse_internal_12 --> -52($fp)
      lw $t0, 16($s1)
      sw $t0, -52($fp)
      # LOCAL local_parse_line_at_Parse_internal_10 --> -44($fp)
      # LOCAL local_parse_line_at_Parse_internal_12 --> -52($fp)
      # local_parse_line_at_Parse_internal_10 = local_parse_line_at_Parse_internal_12
      lw $t0, -52($fp)
      sw $t0, -44($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_10 --> -44($fp)
      # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
      # local_parse_line_at_Parse_internal_11 = VCALL local_parse_line_at_Parse_internal_10 length
      # Save new self pointer in $s1
      lw $s1, -44($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 36($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -48($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_parse_line_at_Parse_internal_13 --> -56($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Int
      sw $t0, 12($v0)
      li $t0, 3
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Int_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 16
      sw $t0, 8($v0)
      li $t0, 0
      sw $t0, 12($v0)
      sw $v0, -56($fp)
      # IF_ZERO local_parse_line_at_Parse_internal_11 GOTO label_FALSE_29
      # IF_ZERO local_parse_line_at_Parse_internal_11 GOTO label_FALSE_29
      lw $t0, -48($fp)
      beq $t0, 0, label_FALSE_29
      # IF_ZERO local_parse_line_at_Parse_internal_13 GOTO label_FALSE_29
      # IF_ZERO local_parse_line_at_Parse_internal_13 GOTO label_FALSE_29
      lw $t0, -56($fp)
      beq $t0, 0, label_FALSE_29
      # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
      # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
      # Comparing -48($fp) type with String
      la $v0, String
      lw $a0, -48($fp)
      lw $a0, 0($a0)
      sub $a0, $a0, $v0
      sw $a0, -40($fp)
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_COMPARE_STRING_32
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_COMPARE_STRING_32
      lw $t0, -40($fp)
      beq $t0, 0, label_COMPARE_STRING_32
      # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
      # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
      # Comparing -48($fp) type with Bool
      la $v0, Bool
      lw $a0, -48($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -40($fp)
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_33
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_33
      lw $t0, -40($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_33
      # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
      # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
      # Comparing -48($fp) type with Int
      la $v0, Int
      lw $a0, -48($fp)
      lw $a0, 0($a0)
      lw $a0, 12($a0)
      sub $a0, $a0, $v0
      sw $a0, -40($fp)
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_33
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_33
      lw $t0, -40($fp)
      beq $t0, 0, label_COMPARE_BY_VALUE_33
      # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
      # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
      # LOCAL local_parse_line_at_Parse_internal_13 --> -56($fp)
      # Load pointers and SUB
      lw $a0, -48($fp)
      lw $a1, -56($fp)
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_TRUE_30
      # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_TRUE_30
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_30
      # GOTO label_FALSE_29
      j label_FALSE_29
      label_COMPARE_BY_VALUE_33: 
         # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
         # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
         # LOCAL local_parse_line_at_Parse_internal_13 --> -56($fp)
         lw $a0, -48($fp)
         lw $a1, -56($fp)
         # Load values
         lw $a0, 12($a0)
         lw $a1, 12($a1)
         # SUB and store
         sub $a0, $a0, $a1
         sw $a0, -40($fp)
         # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_TRUE_30
         # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_TRUE_30
         lw $t0, -40($fp)
         beq $t0, 0, label_TRUE_30
         # GOTO label_FALSE_29
         j label_FALSE_29
         label_COMPARE_STRING_32: 
            # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
            # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
            # LOCAL local_parse_line_at_Parse_internal_13 --> -56($fp)
            # Load strings for comparison
            lw $v0, -48($fp)
            lw $v1, -56($fp)
            # Compare lengths
            lw $v0, 16($v0)
            lw $v1, 16($v1)
            sub $v0, $v0, $v1
            sw $v0, -40($fp)
            # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_CONTINUE_34
            # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_CONTINUE_34
            lw $t0, -40($fp)
            beq $t0, 0, label_CONTINUE_34
            # GOTO label_FALSE_29
            j label_FALSE_29
            label_CONTINUE_34: 
               # LOCAL local_parse_line_at_Parse_internal_9 --> -40($fp)
               # LOCAL local_parse_line_at_Parse_internal_11 --> -48($fp)
               # LOCAL local_parse_line_at_Parse_internal_13 --> -56($fp)
               move $a2, $zero
               # Load strings for comparison
               lw $v0, -48($fp)
               lw $v1, -56($fp)
               # Load strings pointers
               lw $v0, 12($v0)
               lw $v1, 12($v1)
               # Compare loop, while [v0] != \0
               label_WHILE_STR_COMP_35: 
                  lb $a0, 0($v0)
                  # If EOS => break
                  beqz $a0, label_WHILE_STR_COMP_END_36
                  lb $a1, 0($v1)
                  # Move strings pointers
                  addu $v0, $v0, 1
                  addu $v1, $v1, 1
                  # Compare chars
                  sub $a0, $a0, $a1
                  beqz $a0, label_WHILE_STR_COMP_35
                  # False
                  li $a2, 1
                  label_WHILE_STR_COMP_END_36: 
                     # Store result
                     sw $a2, -40($fp)
                     # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_TRUE_30
                     # IF_ZERO local_parse_line_at_Parse_internal_9 GOTO label_TRUE_30
                     lw $t0, -40($fp)
                     beq $t0, 0, label_TRUE_30
                     label_FALSE_29: 
                        # LOCAL local_parse_line_at_Parse_internal_8 --> -36($fp)
                        # Allocating 20 bytes of memory
                        li $a0, 20
                        li $v0, 9
                        syscall
                        # Allocating string for type Bool
                        la $t0, String
                        sw $t0, 0($v0)
                        la $t0, String_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 8
                        sw $t0, 8($v0)
                        la $t0, Bool
                        sw $t0, 12($v0)
                        li $t0, 4
                        sw $t0, 16($v0)
                        move $t0, $v0
                        # Allocating 16 bytes of memory
                        li $a0, 16
                        li $v0, 9
                        syscall
                        sw $t0, 0($v0)
                        la $t0, Bool_start
                        sw $t0, 4($v0)
                        # Load type offset
                        li $t0, 12
                        sw $t0, 8($v0)
                        li $t0, 0
                        sw $t0, 12($v0)
                        sw $v0, -36($fp)
                        # GOTO label_END_31
j label_END_31
label_TRUE_30: 
   # LOCAL local_parse_line_at_Parse_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_31: 
# LOCAL local_parse_line_at_Parse_internal_8 --> -36($fp)
# LOCAL local_parse_line_at_Parse_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -36($fp)
# IF_ZERO local_parse_line_at_Parse_internal_8 GOTO label_FALSE_37
# IF_ZERO local_parse_line_at_Parse_internal_8 GOTO label_FALSE_37
lw $t0, -36($fp)
beq $t0, 0, label_FALSE_37
# LOCAL local_parse_line_at_Parse_internal_14 --> -60($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Bool
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Bool
sw $t0, 12($v0)
li $t0, 4
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Bool_start
sw $t0, 4($v0)
# Load type offset
li $t0, 12
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -60($fp)
# GOTO label_NOT_END_38
j label_NOT_END_38
label_FALSE_37: 
   # LOCAL local_parse_line_at_Parse_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_NOT_END_38: 
      # LOCAL local_parse_line_at_Parse_internal_7 --> -32($fp)
      # LOCAL local_parse_line_at_Parse_internal_14 --> -60($fp)
      # Obtain value from -60($fp)
      lw $v0, -60($fp)
      lw $v0, 12($v0)
      sw $v0, -32($fp)
      # IF_ZERO local_parse_line_at_Parse_internal_7 GOTO label_WHILE_END_28
      # IF_ZERO local_parse_line_at_Parse_internal_7 GOTO label_WHILE_END_28
      lw $t0, -32($fp)
      beq $t0, 0, label_WHILE_END_28
      # LOCAL local_parse_line_at_Parse_succ_15 --> -64($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Int
      sw $t0, 12($v0)
      li $t0, 3
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Int_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 16
      sw $t0, 8($v0)
      li $t0, 0
      sw $t0, 12($v0)
      sw $v0, -64($fp)
      # LOCAL local_parse_line_at_Parse_internal_18 --> -76($fp)
      # local_parse_line_at_Parse_internal_18 = SELF
      sw $s1, -76($fp)
      # LOCAL local_parse_line_at_Parse_internal_16 --> -68($fp)
      # LOCAL local_parse_line_at_Parse_internal_18 --> -76($fp)
      # local_parse_line_at_Parse_internal_16 = local_parse_line_at_Parse_internal_18
      lw $t0, -76($fp)
      sw $t0, -68($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # local_parse_line_at_Parse_internal_19 = GETATTRIBUTE rest Parse
      # LOCAL local_parse_line_at_Parse_internal_19 --> -80($fp)
      lw $t0, 16($s1)
      sw $t0, -80($fp)
      # ARG local_parse_line_at_Parse_internal_19
      # LOCAL local_parse_line_at_Parse_internal_19 --> -80($fp)
      lw $t0, -80($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_16 --> -68($fp)
      # LOCAL local_parse_line_at_Parse_internal_17 --> -72($fp)
      # local_parse_line_at_Parse_internal_17 = VCALL local_parse_line_at_Parse_internal_16 a2i
      # Save new self pointer in $s1
      lw $s1, -68($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 44($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -72($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_parse_line_at_Parse_succ_15 --> -64($fp)
      # LOCAL local_parse_line_at_Parse_internal_17 --> -72($fp)
      # local_parse_line_at_Parse_succ_15 = local_parse_line_at_Parse_internal_17
      lw $t0, -72($fp)
      sw $t0, -64($fp)
      # LOCAL local_parse_line_at_Parse_weight_20 --> -84($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Int
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Int
      sw $t0, 12($v0)
      li $t0, 3
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Int_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 16
      sw $t0, 8($v0)
      li $t0, 0
      sw $t0, 12($v0)
      sw $v0, -84($fp)
      # LOCAL local_parse_line_at_Parse_internal_23 --> -96($fp)
      # local_parse_line_at_Parse_internal_23 = SELF
      sw $s1, -96($fp)
      # LOCAL local_parse_line_at_Parse_internal_21 --> -88($fp)
      # LOCAL local_parse_line_at_Parse_internal_23 --> -96($fp)
      # local_parse_line_at_Parse_internal_21 = local_parse_line_at_Parse_internal_23
      lw $t0, -96($fp)
      sw $t0, -88($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # local_parse_line_at_Parse_internal_24 = GETATTRIBUTE rest Parse
      # LOCAL local_parse_line_at_Parse_internal_24 --> -100($fp)
      lw $t0, 16($s1)
      sw $t0, -100($fp)
      # ARG local_parse_line_at_Parse_internal_24
      # LOCAL local_parse_line_at_Parse_internal_24 --> -100($fp)
      lw $t0, -100($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_21 --> -88($fp)
      # LOCAL local_parse_line_at_Parse_internal_22 --> -92($fp)
      # local_parse_line_at_Parse_internal_22 = VCALL local_parse_line_at_Parse_internal_21 a2i
      # Save new self pointer in $s1
      lw $s1, -88($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 44($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -92($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # LOCAL local_parse_line_at_Parse_weight_20 --> -84($fp)
      # LOCAL local_parse_line_at_Parse_internal_22 --> -92($fp)
      # local_parse_line_at_Parse_weight_20 = local_parse_line_at_Parse_internal_22
      lw $t0, -92($fp)
      sw $t0, -84($fp)
      # LOCAL local_parse_line_at_Parse_internal_25 --> -104($fp)
      # LOCAL local_parse_line_at_Parse_v_0 --> -4($fp)
      # local_parse_line_at_Parse_internal_25 = local_parse_line_at_Parse_v_0
      lw $t0, -4($fp)
      sw $t0, -104($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_29 --> -120($fp)
      # local_parse_line_at_Parse_internal_29 = ALLOCATE Edge
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type name
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Edge
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 24 bytes of memory
      li $a0, 24
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Edge_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 52
      sw $t0, 8($v0)
      move $t1, $v0
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      move $s1, $v0
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __Edge__attrib__from__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 12($t1)
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __Edge__attrib__to__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 16($t1)
      # Push register t1 into stack
      subu $sp, $sp, 4
      sw $t1, 0($sp)
      jal __Edge__attrib__weight__init
      # Pop 4 bytes from stack into register t1
      lw $t1, 0($sp)
      addu $sp, $sp, 4
      sw $v0, 20($t1)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      sw $t1, -120($fp)
      # LOCAL local_parse_line_at_Parse_internal_27 --> -112($fp)
      # LOCAL local_parse_line_at_Parse_internal_29 --> -120($fp)
      # local_parse_line_at_Parse_internal_27 = local_parse_line_at_Parse_internal_29
      lw $t0, -120($fp)
      sw $t0, -112($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_30 --> -124($fp)
      # LOCAL local_parse_line_at_Parse_v_0 --> -4($fp)
      # local_parse_line_at_Parse_internal_30 = local_parse_line_at_Parse_v_0
      lw $t0, -4($fp)
      sw $t0, -124($fp)
      # Push register s1 into stack
      subu $sp, $sp, 4
      sw $s1, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_30 --> -124($fp)
      # LOCAL local_parse_line_at_Parse_internal_31 --> -128($fp)
      # local_parse_line_at_Parse_internal_31 = VCALL local_parse_line_at_Parse_internal_30 number
      # Save new self pointer in $s1
      lw $s1, -124($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 52($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -128($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # ARG local_parse_line_at_Parse_internal_31
      # LOCAL local_parse_line_at_Parse_internal_31 --> -128($fp)
      lw $t0, -128($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # ARG local_parse_line_at_Parse_succ_15
      # LOCAL local_parse_line_at_Parse_succ_15 --> -64($fp)
      lw $t0, -64($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # ARG local_parse_line_at_Parse_weight_20
      # LOCAL local_parse_line_at_Parse_weight_20 --> -84($fp)
      lw $t0, -84($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_27 --> -112($fp)
      # LOCAL local_parse_line_at_Parse_internal_28 --> -116($fp)
      # local_parse_line_at_Parse_internal_28 = VCALL local_parse_line_at_Parse_internal_27 init
      # Save new self pointer in $s1
      lw $s1, -112($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 8($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -116($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # ARG local_parse_line_at_Parse_internal_28
      # LOCAL local_parse_line_at_Parse_internal_28 --> -116($fp)
      lw $t0, -116($fp)
      # Push arg into stack
      subu $sp, $sp, 4
      sw $t0, 0($sp)
      # LOCAL local_parse_line_at_Parse_internal_25 --> -104($fp)
      # LOCAL local_parse_line_at_Parse_internal_26 --> -108($fp)
      # local_parse_line_at_Parse_internal_26 = VCALL local_parse_line_at_Parse_internal_25 add_out
      # Save new self pointer in $s1
      lw $s1, -104($fp)
      # Get pointer to type
      lw $t0, 4($s1)
      # Get pointer to type's VTABLE
      lw $t0, 0($t0)
      # Get pointer to function address
      lw $t0, 112($t0)
      # Call function. Result is on $v0
      jalr $t0
      sw $v0, -108($fp)
      # Pop 4 bytes from stack into register s1
      lw $s1, 0($sp)
      addu $sp, $sp, 4
      # GOTO label_WHILE_27
      j label_WHILE_27
      label_WHILE_END_28: 
         # RETURN local_parse_line_at_Parse_v_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_parse_line_at_Parse.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 136
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_c2i_at_Parse implementation.
# @Params:
# 	0($fp) = param_c2i_at_Parse_char_0
function_c2i_at_Parse: 
   # Allocate stack frame for function function_c2i_at_Parse.
   subu $sp, $sp, 264
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 264
   # LOCAL local_c2i_at_Parse_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_6
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -20($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_41
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_41
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_41
   # IF_ZERO local_c2i_at_Parse_internal_4 GOTO label_FALSE_41
   # IF_ZERO local_c2i_at_Parse_internal_4 GOTO label_FALSE_41
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_41
   # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_COMPARE_STRING_44
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_COMPARE_STRING_44
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_44
   # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_45
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_45
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_45
   # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_45
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_45
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_45
   # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_4 --> -20($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -20($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_TRUE_42
   # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_TRUE_42
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_42
   # GOTO label_FALSE_41
   j label_FALSE_41
   label_COMPARE_BY_VALUE_45: 
      # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_4 --> -20($fp)
      lw $a0, 0($fp)
      lw $a1, -20($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_TRUE_42
      # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_TRUE_42
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_42
      # GOTO label_FALSE_41
      j label_FALSE_41
      label_COMPARE_STRING_44: 
         # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_4 --> -20($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -20($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_CONTINUE_46
         # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_CONTINUE_46
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_46
         # GOTO label_FALSE_41
         j label_FALSE_41
         label_CONTINUE_46: 
            # LOCAL local_c2i_at_Parse_internal_3 --> -16($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_4 --> -20($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -20($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_47: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_48
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_47
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_48: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_TRUE_42
                  # IF_ZERO local_c2i_at_Parse_internal_3 GOTO label_TRUE_42
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_42
                  label_FALSE_41: 
                     # LOCAL local_c2i_at_Parse_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_43
j label_END_43
label_TRUE_42: 
   # LOCAL local_c2i_at_Parse_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_43: 
# LOCAL local_c2i_at_Parse_internal_0 --> -4($fp)
# LOCAL local_c2i_at_Parse_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_c2i_at_Parse_internal_0 GOTO label_FALSEIF_39
# IF_ZERO local_c2i_at_Parse_internal_0 GOTO label_FALSEIF_39
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_39
# LOCAL local_c2i_at_Parse_internal_5 --> -24($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -24($fp)
# LOCAL local_c2i_at_Parse_internal_1 --> -8($fp)
# LOCAL local_c2i_at_Parse_internal_5 --> -24($fp)
# local_c2i_at_Parse_internal_1 = local_c2i_at_Parse_internal_5
lw $t0, -24($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_40
j label_ENDIF_40
label_FALSEIF_39: 
   # LOCAL local_c2i_at_Parse_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_7
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -44($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_51
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_51
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_51
   # IF_ZERO local_c2i_at_Parse_internal_10 GOTO label_FALSE_51
   # IF_ZERO local_c2i_at_Parse_internal_10 GOTO label_FALSE_51
   lw $t0, -44($fp)
   beq $t0, 0, label_FALSE_51
   # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_COMPARE_STRING_54
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_COMPARE_STRING_54
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_54
   # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_55
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_55
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_55
   # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_55
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_COMPARE_BY_VALUE_55
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_55
   # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_10 --> -44($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -44($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_TRUE_52
   # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_TRUE_52
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_52
   # GOTO label_FALSE_51
   j label_FALSE_51
   label_COMPARE_BY_VALUE_55: 
      # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_10 --> -44($fp)
      lw $a0, 0($fp)
      lw $a1, -44($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_TRUE_52
      # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_TRUE_52
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_52
      # GOTO label_FALSE_51
      j label_FALSE_51
      label_COMPARE_STRING_54: 
         # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_10 --> -44($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -44($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_CONTINUE_56
         # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_CONTINUE_56
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_56
         # GOTO label_FALSE_51
         j label_FALSE_51
         label_CONTINUE_56: 
            # LOCAL local_c2i_at_Parse_internal_9 --> -40($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_10 --> -44($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -44($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_57: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_58
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_57
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_58: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_TRUE_52
                  # IF_ZERO local_c2i_at_Parse_internal_9 GOTO label_TRUE_52
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_52
                  label_FALSE_51: 
                     # LOCAL local_c2i_at_Parse_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_53
j label_END_53
label_TRUE_52: 
   # LOCAL local_c2i_at_Parse_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_53: 
# LOCAL local_c2i_at_Parse_internal_6 --> -28($fp)
# LOCAL local_c2i_at_Parse_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_c2i_at_Parse_internal_6 GOTO label_FALSEIF_49
# IF_ZERO local_c2i_at_Parse_internal_6 GOTO label_FALSEIF_49
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_49
# LOCAL local_c2i_at_Parse_internal_11 --> -48($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -48($fp)
# LOCAL local_c2i_at_Parse_internal_7 --> -32($fp)
# LOCAL local_c2i_at_Parse_internal_11 --> -48($fp)
# local_c2i_at_Parse_internal_7 = local_c2i_at_Parse_internal_11
lw $t0, -48($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_50
j label_ENDIF_50
label_FALSEIF_49: 
   # LOCAL local_c2i_at_Parse_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_8
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_61
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_61
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_61
   # IF_ZERO local_c2i_at_Parse_internal_16 GOTO label_FALSE_61
   # IF_ZERO local_c2i_at_Parse_internal_16 GOTO label_FALSE_61
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_61
   # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_COMPARE_STRING_64
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_COMPARE_STRING_64
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_STRING_64
   # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_65
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_65
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_65
   # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_65
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_COMPARE_BY_VALUE_65
   lw $t0, -64($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_65
   # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -64($fp)
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_TRUE_62
   # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_TRUE_62
   lw $t0, -64($fp)
   beq $t0, 0, label_TRUE_62
   # GOTO label_FALSE_61
   j label_FALSE_61
   label_COMPARE_BY_VALUE_65: 
      # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_16 --> -68($fp)
      lw $a0, 0($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -64($fp)
      # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_TRUE_62
      # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_TRUE_62
      lw $t0, -64($fp)
      beq $t0, 0, label_TRUE_62
      # GOTO label_FALSE_61
      j label_FALSE_61
      label_COMPARE_STRING_64: 
         # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -64($fp)
         # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_CONTINUE_66
         # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_CONTINUE_66
         lw $t0, -64($fp)
         beq $t0, 0, label_CONTINUE_66
         # GOTO label_FALSE_61
         j label_FALSE_61
         label_CONTINUE_66: 
            # LOCAL local_c2i_at_Parse_internal_15 --> -64($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_67: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_68
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_67
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_68: 
                  # Store result
                  sw $a2, -64($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_TRUE_62
                  # IF_ZERO local_c2i_at_Parse_internal_15 GOTO label_TRUE_62
                  lw $t0, -64($fp)
                  beq $t0, 0, label_TRUE_62
                  label_FALSE_61: 
                     # LOCAL local_c2i_at_Parse_internal_14 --> -60($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -60($fp)
                     # GOTO label_END_63
j label_END_63
label_TRUE_62: 
   # LOCAL local_c2i_at_Parse_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   label_END_63: 
# LOCAL local_c2i_at_Parse_internal_12 --> -52($fp)
# LOCAL local_c2i_at_Parse_internal_14 --> -60($fp)
# Obtain value from -60($fp)
lw $v0, -60($fp)
lw $v0, 12($v0)
sw $v0, -52($fp)
# IF_ZERO local_c2i_at_Parse_internal_12 GOTO label_FALSEIF_59
# IF_ZERO local_c2i_at_Parse_internal_12 GOTO label_FALSEIF_59
lw $t0, -52($fp)
beq $t0, 0, label_FALSEIF_59
# LOCAL local_c2i_at_Parse_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 2
sw $t0, 12($v0)
sw $v0, -72($fp)
# LOCAL local_c2i_at_Parse_internal_13 --> -56($fp)
# LOCAL local_c2i_at_Parse_internal_17 --> -72($fp)
# local_c2i_at_Parse_internal_13 = local_c2i_at_Parse_internal_17
lw $t0, -72($fp)
sw $t0, -56($fp)
# GOTO label_ENDIF_60
j label_ENDIF_60
label_FALSEIF_59: 
   # LOCAL local_c2i_at_Parse_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_9
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -92($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_71
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_71
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_71
   # IF_ZERO local_c2i_at_Parse_internal_22 GOTO label_FALSE_71
   # IF_ZERO local_c2i_at_Parse_internal_22 GOTO label_FALSE_71
   lw $t0, -92($fp)
   beq $t0, 0, label_FALSE_71
   # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_COMPARE_STRING_74
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_COMPARE_STRING_74
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_STRING_74
   # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_COMPARE_BY_VALUE_75
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_COMPARE_BY_VALUE_75
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_75
   # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_COMPARE_BY_VALUE_75
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_COMPARE_BY_VALUE_75
   lw $t0, -88($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_75
   # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_22 --> -92($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -92($fp)
   sub $a0, $a0, $a1
   sw $a0, -88($fp)
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_TRUE_72
   # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_TRUE_72
   lw $t0, -88($fp)
   beq $t0, 0, label_TRUE_72
   # GOTO label_FALSE_71
   j label_FALSE_71
   label_COMPARE_BY_VALUE_75: 
      # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_22 --> -92($fp)
      lw $a0, 0($fp)
      lw $a1, -92($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -88($fp)
      # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_TRUE_72
      # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_TRUE_72
      lw $t0, -88($fp)
      beq $t0, 0, label_TRUE_72
      # GOTO label_FALSE_71
      j label_FALSE_71
      label_COMPARE_STRING_74: 
         # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_22 --> -92($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -92($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -88($fp)
         # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_CONTINUE_76
         # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_CONTINUE_76
         lw $t0, -88($fp)
         beq $t0, 0, label_CONTINUE_76
         # GOTO label_FALSE_71
         j label_FALSE_71
         label_CONTINUE_76: 
            # LOCAL local_c2i_at_Parse_internal_21 --> -88($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_22 --> -92($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -92($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_77: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_78
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_77
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_78: 
                  # Store result
                  sw $a2, -88($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_TRUE_72
                  # IF_ZERO local_c2i_at_Parse_internal_21 GOTO label_TRUE_72
                  lw $t0, -88($fp)
                  beq $t0, 0, label_TRUE_72
                  label_FALSE_71: 
                     # LOCAL local_c2i_at_Parse_internal_20 --> -84($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -84($fp)
                     # GOTO label_END_73
j label_END_73
label_TRUE_72: 
   # LOCAL local_c2i_at_Parse_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -84($fp)
   label_END_73: 
# LOCAL local_c2i_at_Parse_internal_18 --> -76($fp)
# LOCAL local_c2i_at_Parse_internal_20 --> -84($fp)
# Obtain value from -84($fp)
lw $v0, -84($fp)
lw $v0, 12($v0)
sw $v0, -76($fp)
# IF_ZERO local_c2i_at_Parse_internal_18 GOTO label_FALSEIF_69
# IF_ZERO local_c2i_at_Parse_internal_18 GOTO label_FALSEIF_69
lw $t0, -76($fp)
beq $t0, 0, label_FALSEIF_69
# LOCAL local_c2i_at_Parse_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 3
sw $t0, 12($v0)
sw $v0, -96($fp)
# LOCAL local_c2i_at_Parse_internal_19 --> -80($fp)
# LOCAL local_c2i_at_Parse_internal_23 --> -96($fp)
# local_c2i_at_Parse_internal_19 = local_c2i_at_Parse_internal_23
lw $t0, -96($fp)
sw $t0, -80($fp)
# GOTO label_ENDIF_70
j label_ENDIF_70
label_FALSEIF_69: 
   # LOCAL local_c2i_at_Parse_internal_28 --> -116($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_10
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -116($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_81
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_81
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_81
   # IF_ZERO local_c2i_at_Parse_internal_28 GOTO label_FALSE_81
   # IF_ZERO local_c2i_at_Parse_internal_28 GOTO label_FALSE_81
   lw $t0, -116($fp)
   beq $t0, 0, label_FALSE_81
   # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_COMPARE_STRING_84
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_COMPARE_STRING_84
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_STRING_84
   # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_COMPARE_BY_VALUE_85
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_COMPARE_BY_VALUE_85
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_85
   # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_COMPARE_BY_VALUE_85
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_COMPARE_BY_VALUE_85
   lw $t0, -112($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_85
   # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_28 --> -116($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -116($fp)
   sub $a0, $a0, $a1
   sw $a0, -112($fp)
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_TRUE_82
   # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_TRUE_82
   lw $t0, -112($fp)
   beq $t0, 0, label_TRUE_82
   # GOTO label_FALSE_81
   j label_FALSE_81
   label_COMPARE_BY_VALUE_85: 
      # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_28 --> -116($fp)
      lw $a0, 0($fp)
      lw $a1, -116($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -112($fp)
      # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_TRUE_82
      # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_TRUE_82
      lw $t0, -112($fp)
      beq $t0, 0, label_TRUE_82
      # GOTO label_FALSE_81
      j label_FALSE_81
      label_COMPARE_STRING_84: 
         # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_28 --> -116($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -116($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -112($fp)
         # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_CONTINUE_86
         # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_CONTINUE_86
         lw $t0, -112($fp)
         beq $t0, 0, label_CONTINUE_86
         # GOTO label_FALSE_81
         j label_FALSE_81
         label_CONTINUE_86: 
            # LOCAL local_c2i_at_Parse_internal_27 --> -112($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_28 --> -116($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -116($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_87: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_88
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_87
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_88: 
                  # Store result
                  sw $a2, -112($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_TRUE_82
                  # IF_ZERO local_c2i_at_Parse_internal_27 GOTO label_TRUE_82
                  lw $t0, -112($fp)
                  beq $t0, 0, label_TRUE_82
                  label_FALSE_81: 
                     # LOCAL local_c2i_at_Parse_internal_26 --> -108($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -108($fp)
                     # GOTO label_END_83
j label_END_83
label_TRUE_82: 
   # LOCAL local_c2i_at_Parse_internal_26 --> -108($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -108($fp)
   label_END_83: 
# LOCAL local_c2i_at_Parse_internal_24 --> -100($fp)
# LOCAL local_c2i_at_Parse_internal_26 --> -108($fp)
# Obtain value from -108($fp)
lw $v0, -108($fp)
lw $v0, 12($v0)
sw $v0, -100($fp)
# IF_ZERO local_c2i_at_Parse_internal_24 GOTO label_FALSEIF_79
# IF_ZERO local_c2i_at_Parse_internal_24 GOTO label_FALSEIF_79
lw $t0, -100($fp)
beq $t0, 0, label_FALSEIF_79
# LOCAL local_c2i_at_Parse_internal_29 --> -120($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 4
sw $t0, 12($v0)
sw $v0, -120($fp)
# LOCAL local_c2i_at_Parse_internal_25 --> -104($fp)
# LOCAL local_c2i_at_Parse_internal_29 --> -120($fp)
# local_c2i_at_Parse_internal_25 = local_c2i_at_Parse_internal_29
lw $t0, -120($fp)
sw $t0, -104($fp)
# GOTO label_ENDIF_80
j label_ENDIF_80
label_FALSEIF_79: 
   # LOCAL local_c2i_at_Parse_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_11
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -140($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_91
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_91
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_91
   # IF_ZERO local_c2i_at_Parse_internal_34 GOTO label_FALSE_91
   # IF_ZERO local_c2i_at_Parse_internal_34 GOTO label_FALSE_91
   lw $t0, -140($fp)
   beq $t0, 0, label_FALSE_91
   # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_COMPARE_STRING_94
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_COMPARE_STRING_94
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_STRING_94
   # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_COMPARE_BY_VALUE_95
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_COMPARE_BY_VALUE_95
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_95
   # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_COMPARE_BY_VALUE_95
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_COMPARE_BY_VALUE_95
   lw $t0, -136($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_95
   # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_34 --> -140($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -140($fp)
   sub $a0, $a0, $a1
   sw $a0, -136($fp)
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_TRUE_92
   # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_TRUE_92
   lw $t0, -136($fp)
   beq $t0, 0, label_TRUE_92
   # GOTO label_FALSE_91
   j label_FALSE_91
   label_COMPARE_BY_VALUE_95: 
      # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_34 --> -140($fp)
      lw $a0, 0($fp)
      lw $a1, -140($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -136($fp)
      # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_TRUE_92
      # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_TRUE_92
      lw $t0, -136($fp)
      beq $t0, 0, label_TRUE_92
      # GOTO label_FALSE_91
      j label_FALSE_91
      label_COMPARE_STRING_94: 
         # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_34 --> -140($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -140($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -136($fp)
         # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_CONTINUE_96
         # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_CONTINUE_96
         lw $t0, -136($fp)
         beq $t0, 0, label_CONTINUE_96
         # GOTO label_FALSE_91
         j label_FALSE_91
         label_CONTINUE_96: 
            # LOCAL local_c2i_at_Parse_internal_33 --> -136($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_34 --> -140($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -140($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_97: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_98
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_97
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_98: 
                  # Store result
                  sw $a2, -136($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_TRUE_92
                  # IF_ZERO local_c2i_at_Parse_internal_33 GOTO label_TRUE_92
                  lw $t0, -136($fp)
                  beq $t0, 0, label_TRUE_92
                  label_FALSE_91: 
                     # LOCAL local_c2i_at_Parse_internal_32 --> -132($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -132($fp)
                     # GOTO label_END_93
j label_END_93
label_TRUE_92: 
   # LOCAL local_c2i_at_Parse_internal_32 --> -132($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -132($fp)
   label_END_93: 
# LOCAL local_c2i_at_Parse_internal_30 --> -124($fp)
# LOCAL local_c2i_at_Parse_internal_32 --> -132($fp)
# Obtain value from -132($fp)
lw $v0, -132($fp)
lw $v0, 12($v0)
sw $v0, -124($fp)
# IF_ZERO local_c2i_at_Parse_internal_30 GOTO label_FALSEIF_89
# IF_ZERO local_c2i_at_Parse_internal_30 GOTO label_FALSEIF_89
lw $t0, -124($fp)
beq $t0, 0, label_FALSEIF_89
# LOCAL local_c2i_at_Parse_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 5
sw $t0, 12($v0)
sw $v0, -144($fp)
# LOCAL local_c2i_at_Parse_internal_31 --> -128($fp)
# LOCAL local_c2i_at_Parse_internal_35 --> -144($fp)
# local_c2i_at_Parse_internal_31 = local_c2i_at_Parse_internal_35
lw $t0, -144($fp)
sw $t0, -128($fp)
# GOTO label_ENDIF_90
j label_ENDIF_90
label_FALSEIF_89: 
   # LOCAL local_c2i_at_Parse_internal_40 --> -164($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_12
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -164($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_101
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_101
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_101
   # IF_ZERO local_c2i_at_Parse_internal_40 GOTO label_FALSE_101
   # IF_ZERO local_c2i_at_Parse_internal_40 GOTO label_FALSE_101
   lw $t0, -164($fp)
   beq $t0, 0, label_FALSE_101
   # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_COMPARE_STRING_104
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_COMPARE_STRING_104
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_STRING_104
   # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_COMPARE_BY_VALUE_105
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_COMPARE_BY_VALUE_105
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_105
   # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_COMPARE_BY_VALUE_105
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_COMPARE_BY_VALUE_105
   lw $t0, -160($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_105
   # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_40 --> -164($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -164($fp)
   sub $a0, $a0, $a1
   sw $a0, -160($fp)
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_TRUE_102
   # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_TRUE_102
   lw $t0, -160($fp)
   beq $t0, 0, label_TRUE_102
   # GOTO label_FALSE_101
   j label_FALSE_101
   label_COMPARE_BY_VALUE_105: 
      # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_40 --> -164($fp)
      lw $a0, 0($fp)
      lw $a1, -164($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -160($fp)
      # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_TRUE_102
      # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_TRUE_102
      lw $t0, -160($fp)
      beq $t0, 0, label_TRUE_102
      # GOTO label_FALSE_101
      j label_FALSE_101
      label_COMPARE_STRING_104: 
         # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_40 --> -164($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -164($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -160($fp)
         # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_CONTINUE_106
         # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_CONTINUE_106
         lw $t0, -160($fp)
         beq $t0, 0, label_CONTINUE_106
         # GOTO label_FALSE_101
         j label_FALSE_101
         label_CONTINUE_106: 
            # LOCAL local_c2i_at_Parse_internal_39 --> -160($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_40 --> -164($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -164($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_107: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_108
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_107
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_108: 
                  # Store result
                  sw $a2, -160($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_TRUE_102
                  # IF_ZERO local_c2i_at_Parse_internal_39 GOTO label_TRUE_102
                  lw $t0, -160($fp)
                  beq $t0, 0, label_TRUE_102
                  label_FALSE_101: 
                     # LOCAL local_c2i_at_Parse_internal_38 --> -156($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -156($fp)
                     # GOTO label_END_103
j label_END_103
label_TRUE_102: 
   # LOCAL local_c2i_at_Parse_internal_38 --> -156($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -156($fp)
   label_END_103: 
# LOCAL local_c2i_at_Parse_internal_36 --> -148($fp)
# LOCAL local_c2i_at_Parse_internal_38 --> -156($fp)
# Obtain value from -156($fp)
lw $v0, -156($fp)
lw $v0, 12($v0)
sw $v0, -148($fp)
# IF_ZERO local_c2i_at_Parse_internal_36 GOTO label_FALSEIF_99
# IF_ZERO local_c2i_at_Parse_internal_36 GOTO label_FALSEIF_99
lw $t0, -148($fp)
beq $t0, 0, label_FALSEIF_99
# LOCAL local_c2i_at_Parse_internal_41 --> -168($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 6
sw $t0, 12($v0)
sw $v0, -168($fp)
# LOCAL local_c2i_at_Parse_internal_37 --> -152($fp)
# LOCAL local_c2i_at_Parse_internal_41 --> -168($fp)
# local_c2i_at_Parse_internal_37 = local_c2i_at_Parse_internal_41
lw $t0, -168($fp)
sw $t0, -152($fp)
# GOTO label_ENDIF_100
j label_ENDIF_100
label_FALSEIF_99: 
   # LOCAL local_c2i_at_Parse_internal_46 --> -188($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_13
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -188($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_111
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_111
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_111
   # IF_ZERO local_c2i_at_Parse_internal_46 GOTO label_FALSE_111
   # IF_ZERO local_c2i_at_Parse_internal_46 GOTO label_FALSE_111
   lw $t0, -188($fp)
   beq $t0, 0, label_FALSE_111
   # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_COMPARE_STRING_114
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_COMPARE_STRING_114
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_STRING_114
   # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_COMPARE_BY_VALUE_115
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_COMPARE_BY_VALUE_115
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_115
   # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_COMPARE_BY_VALUE_115
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_COMPARE_BY_VALUE_115
   lw $t0, -184($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_115
   # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_46 --> -188($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -188($fp)
   sub $a0, $a0, $a1
   sw $a0, -184($fp)
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_TRUE_112
   # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_TRUE_112
   lw $t0, -184($fp)
   beq $t0, 0, label_TRUE_112
   # GOTO label_FALSE_111
   j label_FALSE_111
   label_COMPARE_BY_VALUE_115: 
      # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_46 --> -188($fp)
      lw $a0, 0($fp)
      lw $a1, -188($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -184($fp)
      # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_TRUE_112
      # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_TRUE_112
      lw $t0, -184($fp)
      beq $t0, 0, label_TRUE_112
      # GOTO label_FALSE_111
      j label_FALSE_111
      label_COMPARE_STRING_114: 
         # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_46 --> -188($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -188($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -184($fp)
         # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_CONTINUE_116
         # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_CONTINUE_116
         lw $t0, -184($fp)
         beq $t0, 0, label_CONTINUE_116
         # GOTO label_FALSE_111
         j label_FALSE_111
         label_CONTINUE_116: 
            # LOCAL local_c2i_at_Parse_internal_45 --> -184($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_46 --> -188($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -188($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_117: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_118
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_117
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_118: 
                  # Store result
                  sw $a2, -184($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_TRUE_112
                  # IF_ZERO local_c2i_at_Parse_internal_45 GOTO label_TRUE_112
                  lw $t0, -184($fp)
                  beq $t0, 0, label_TRUE_112
                  label_FALSE_111: 
                     # LOCAL local_c2i_at_Parse_internal_44 --> -180($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -180($fp)
                     # GOTO label_END_113
j label_END_113
label_TRUE_112: 
   # LOCAL local_c2i_at_Parse_internal_44 --> -180($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -180($fp)
   label_END_113: 
# LOCAL local_c2i_at_Parse_internal_42 --> -172($fp)
# LOCAL local_c2i_at_Parse_internal_44 --> -180($fp)
# Obtain value from -180($fp)
lw $v0, -180($fp)
lw $v0, 12($v0)
sw $v0, -172($fp)
# IF_ZERO local_c2i_at_Parse_internal_42 GOTO label_FALSEIF_109
# IF_ZERO local_c2i_at_Parse_internal_42 GOTO label_FALSEIF_109
lw $t0, -172($fp)
beq $t0, 0, label_FALSEIF_109
# LOCAL local_c2i_at_Parse_internal_47 --> -192($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 7
sw $t0, 12($v0)
sw $v0, -192($fp)
# LOCAL local_c2i_at_Parse_internal_43 --> -176($fp)
# LOCAL local_c2i_at_Parse_internal_47 --> -192($fp)
# local_c2i_at_Parse_internal_43 = local_c2i_at_Parse_internal_47
lw $t0, -192($fp)
sw $t0, -176($fp)
# GOTO label_ENDIF_110
j label_ENDIF_110
label_FALSEIF_109: 
   # LOCAL local_c2i_at_Parse_internal_52 --> -212($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_14
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -212($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_121
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_121
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_121
   # IF_ZERO local_c2i_at_Parse_internal_52 GOTO label_FALSE_121
   # IF_ZERO local_c2i_at_Parse_internal_52 GOTO label_FALSE_121
   lw $t0, -212($fp)
   beq $t0, 0, label_FALSE_121
   # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_COMPARE_STRING_124
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_COMPARE_STRING_124
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_STRING_124
   # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_COMPARE_BY_VALUE_125
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_COMPARE_BY_VALUE_125
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_125
   # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_COMPARE_BY_VALUE_125
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_COMPARE_BY_VALUE_125
   lw $t0, -208($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_125
   # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_52 --> -212($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -212($fp)
   sub $a0, $a0, $a1
   sw $a0, -208($fp)
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_TRUE_122
   # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_TRUE_122
   lw $t0, -208($fp)
   beq $t0, 0, label_TRUE_122
   # GOTO label_FALSE_121
   j label_FALSE_121
   label_COMPARE_BY_VALUE_125: 
      # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_52 --> -212($fp)
      lw $a0, 0($fp)
      lw $a1, -212($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -208($fp)
      # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_TRUE_122
      # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_TRUE_122
      lw $t0, -208($fp)
      beq $t0, 0, label_TRUE_122
      # GOTO label_FALSE_121
      j label_FALSE_121
      label_COMPARE_STRING_124: 
         # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_52 --> -212($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -212($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -208($fp)
         # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_CONTINUE_126
         # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_CONTINUE_126
         lw $t0, -208($fp)
         beq $t0, 0, label_CONTINUE_126
         # GOTO label_FALSE_121
         j label_FALSE_121
         label_CONTINUE_126: 
            # LOCAL local_c2i_at_Parse_internal_51 --> -208($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_52 --> -212($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -212($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_127: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_128
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_127
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_128: 
                  # Store result
                  sw $a2, -208($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_TRUE_122
                  # IF_ZERO local_c2i_at_Parse_internal_51 GOTO label_TRUE_122
                  lw $t0, -208($fp)
                  beq $t0, 0, label_TRUE_122
                  label_FALSE_121: 
                     # LOCAL local_c2i_at_Parse_internal_50 --> -204($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -204($fp)
                     # GOTO label_END_123
j label_END_123
label_TRUE_122: 
   # LOCAL local_c2i_at_Parse_internal_50 --> -204($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -204($fp)
   label_END_123: 
# LOCAL local_c2i_at_Parse_internal_48 --> -196($fp)
# LOCAL local_c2i_at_Parse_internal_50 --> -204($fp)
# Obtain value from -204($fp)
lw $v0, -204($fp)
lw $v0, 12($v0)
sw $v0, -196($fp)
# IF_ZERO local_c2i_at_Parse_internal_48 GOTO label_FALSEIF_119
# IF_ZERO local_c2i_at_Parse_internal_48 GOTO label_FALSEIF_119
lw $t0, -196($fp)
beq $t0, 0, label_FALSEIF_119
# LOCAL local_c2i_at_Parse_internal_53 --> -216($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 8
sw $t0, 12($v0)
sw $v0, -216($fp)
# LOCAL local_c2i_at_Parse_internal_49 --> -200($fp)
# LOCAL local_c2i_at_Parse_internal_53 --> -216($fp)
# local_c2i_at_Parse_internal_49 = local_c2i_at_Parse_internal_53
lw $t0, -216($fp)
sw $t0, -200($fp)
# GOTO label_ENDIF_120
j label_ENDIF_120
label_FALSEIF_119: 
   # LOCAL local_c2i_at_Parse_internal_58 --> -236($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_15
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -236($fp)
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_131
   # IF_ZERO param_c2i_at_Parse_char_0 GOTO label_FALSE_131
   lw $t0, 0($fp)
   beq $t0, 0, label_FALSE_131
   # IF_ZERO local_c2i_at_Parse_internal_58 GOTO label_FALSE_131
   # IF_ZERO local_c2i_at_Parse_internal_58 GOTO label_FALSE_131
   lw $t0, -236($fp)
   beq $t0, 0, label_FALSE_131
   # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with String
   la $v0, String
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_COMPARE_STRING_134
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_COMPARE_STRING_134
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_STRING_134
   # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Bool
   la $v0, Bool
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_COMPARE_BY_VALUE_135
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_COMPARE_BY_VALUE_135
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_135
   # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # Comparing 0($fp) type with Int
   la $v0, Int
   lw $a0, 0($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_COMPARE_BY_VALUE_135
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_COMPARE_BY_VALUE_135
   lw $t0, -232($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_135
   # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
   # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
   # LOCAL local_c2i_at_Parse_internal_58 --> -236($fp)
   # Load pointers and SUB
   lw $a0, 0($fp)
   lw $a1, -236($fp)
   sub $a0, $a0, $a1
   sw $a0, -232($fp)
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_TRUE_132
   # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_TRUE_132
   lw $t0, -232($fp)
   beq $t0, 0, label_TRUE_132
   # GOTO label_FALSE_131
   j label_FALSE_131
   label_COMPARE_BY_VALUE_135: 
      # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
      # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
      # LOCAL local_c2i_at_Parse_internal_58 --> -236($fp)
      lw $a0, 0($fp)
      lw $a1, -236($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -232($fp)
      # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_TRUE_132
      # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_TRUE_132
      lw $t0, -232($fp)
      beq $t0, 0, label_TRUE_132
      # GOTO label_FALSE_131
      j label_FALSE_131
      label_COMPARE_STRING_134: 
         # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
         # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
         # LOCAL local_c2i_at_Parse_internal_58 --> -236($fp)
         # Load strings for comparison
         lw $v0, 0($fp)
         lw $v1, -236($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -232($fp)
         # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_CONTINUE_136
         # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_CONTINUE_136
         lw $t0, -232($fp)
         beq $t0, 0, label_CONTINUE_136
         # GOTO label_FALSE_131
         j label_FALSE_131
         label_CONTINUE_136: 
            # LOCAL local_c2i_at_Parse_internal_57 --> -232($fp)
            # PARAM param_c2i_at_Parse_char_0 --> 0($fp)
            # LOCAL local_c2i_at_Parse_internal_58 --> -236($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, 0($fp)
            lw $v1, -236($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_137: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_138
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_137
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_138: 
                  # Store result
                  sw $a2, -232($fp)
                  # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_TRUE_132
                  # IF_ZERO local_c2i_at_Parse_internal_57 GOTO label_TRUE_132
                  lw $t0, -232($fp)
                  beq $t0, 0, label_TRUE_132
                  label_FALSE_131: 
                     # LOCAL local_c2i_at_Parse_internal_56 --> -228($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -228($fp)
                     # GOTO label_END_133
j label_END_133
label_TRUE_132: 
   # LOCAL local_c2i_at_Parse_internal_56 --> -228($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -228($fp)
   label_END_133: 
# LOCAL local_c2i_at_Parse_internal_54 --> -220($fp)
# LOCAL local_c2i_at_Parse_internal_56 --> -228($fp)
# Obtain value from -228($fp)
lw $v0, -228($fp)
lw $v0, 12($v0)
sw $v0, -220($fp)
# IF_ZERO local_c2i_at_Parse_internal_54 GOTO label_FALSEIF_129
# IF_ZERO local_c2i_at_Parse_internal_54 GOTO label_FALSEIF_129
lw $t0, -220($fp)
beq $t0, 0, label_FALSEIF_129
# LOCAL local_c2i_at_Parse_internal_59 --> -240($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 9
sw $t0, 12($v0)
sw $v0, -240($fp)
# LOCAL local_c2i_at_Parse_internal_55 --> -224($fp)
# LOCAL local_c2i_at_Parse_internal_59 --> -240($fp)
# local_c2i_at_Parse_internal_55 = local_c2i_at_Parse_internal_59
lw $t0, -240($fp)
sw $t0, -224($fp)
# GOTO label_ENDIF_130
j label_ENDIF_130
label_FALSEIF_129: 
   # LOCAL local_c2i_at_Parse_internal_62 --> -252($fp)
   # local_c2i_at_Parse_internal_62 = SELF
   sw $s1, -252($fp)
   # LOCAL local_c2i_at_Parse_internal_60 --> -244($fp)
   # LOCAL local_c2i_at_Parse_internal_62 --> -252($fp)
   # local_c2i_at_Parse_internal_60 = local_c2i_at_Parse_internal_62
   lw $t0, -252($fp)
   sw $t0, -244($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_c2i_at_Parse_internal_60 --> -244($fp)
   # LOCAL local_c2i_at_Parse_internal_61 --> -248($fp)
   # local_c2i_at_Parse_internal_61 = VCALL local_c2i_at_Parse_internal_60 abort
   # Save new self pointer in $s1
   lw $s1, -244($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -248($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_c2i_at_Parse_internal_63 --> -256($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -256($fp)
   # LOCAL local_c2i_at_Parse_internal_55 --> -224($fp)
   # LOCAL local_c2i_at_Parse_internal_63 --> -256($fp)
   # local_c2i_at_Parse_internal_55 = local_c2i_at_Parse_internal_63
   lw $t0, -256($fp)
   sw $t0, -224($fp)
   label_ENDIF_130: 
# LOCAL local_c2i_at_Parse_internal_49 --> -200($fp)
# LOCAL local_c2i_at_Parse_internal_55 --> -224($fp)
# local_c2i_at_Parse_internal_49 = local_c2i_at_Parse_internal_55
lw $t0, -224($fp)
sw $t0, -200($fp)
label_ENDIF_120: 
# LOCAL local_c2i_at_Parse_internal_43 --> -176($fp)
# LOCAL local_c2i_at_Parse_internal_49 --> -200($fp)
# local_c2i_at_Parse_internal_43 = local_c2i_at_Parse_internal_49
lw $t0, -200($fp)
sw $t0, -176($fp)
label_ENDIF_110: 
# LOCAL local_c2i_at_Parse_internal_37 --> -152($fp)
# LOCAL local_c2i_at_Parse_internal_43 --> -176($fp)
# local_c2i_at_Parse_internal_37 = local_c2i_at_Parse_internal_43
lw $t0, -176($fp)
sw $t0, -152($fp)
label_ENDIF_100: 
# LOCAL local_c2i_at_Parse_internal_31 --> -128($fp)
# LOCAL local_c2i_at_Parse_internal_37 --> -152($fp)
# local_c2i_at_Parse_internal_31 = local_c2i_at_Parse_internal_37
lw $t0, -152($fp)
sw $t0, -128($fp)
label_ENDIF_90: 
# LOCAL local_c2i_at_Parse_internal_25 --> -104($fp)
# LOCAL local_c2i_at_Parse_internal_31 --> -128($fp)
# local_c2i_at_Parse_internal_25 = local_c2i_at_Parse_internal_31
lw $t0, -128($fp)
sw $t0, -104($fp)
label_ENDIF_80: 
# LOCAL local_c2i_at_Parse_internal_19 --> -80($fp)
# LOCAL local_c2i_at_Parse_internal_25 --> -104($fp)
# local_c2i_at_Parse_internal_19 = local_c2i_at_Parse_internal_25
lw $t0, -104($fp)
sw $t0, -80($fp)
label_ENDIF_70: 
# LOCAL local_c2i_at_Parse_internal_13 --> -56($fp)
# LOCAL local_c2i_at_Parse_internal_19 --> -80($fp)
# local_c2i_at_Parse_internal_13 = local_c2i_at_Parse_internal_19
lw $t0, -80($fp)
sw $t0, -56($fp)
label_ENDIF_60: 
# LOCAL local_c2i_at_Parse_internal_7 --> -32($fp)
# LOCAL local_c2i_at_Parse_internal_13 --> -56($fp)
# local_c2i_at_Parse_internal_7 = local_c2i_at_Parse_internal_13
lw $t0, -56($fp)
sw $t0, -32($fp)
label_ENDIF_50: 
# LOCAL local_c2i_at_Parse_internal_1 --> -8($fp)
# LOCAL local_c2i_at_Parse_internal_7 --> -32($fp)
# local_c2i_at_Parse_internal_1 = local_c2i_at_Parse_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
label_ENDIF_40: 
# RETURN local_c2i_at_Parse_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_c2i_at_Parse.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 264
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_at_Parse implementation.
# @Params:
# 	0($fp) = param_a2i_at_Parse_s_0
function_a2i_at_Parse: 
   # Allocate stack frame for function function_a2i_at_Parse.
   subu $sp, $sp, 208
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 208
   # LOCAL local_a2i_at_Parse_internal_4 --> -20($fp)
   # PARAM param_a2i_at_Parse_s_0 --> 0($fp)
   # local_a2i_at_Parse_internal_4 = PARAM param_a2i_at_Parse_s_0
   lw $t0, 0($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_4 --> -20($fp)
   # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
   # local_a2i_at_Parse_internal_5 = VCALL local_a2i_at_Parse_internal_4 length
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 36($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_Parse_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # IF_ZERO local_a2i_at_Parse_internal_5 GOTO label_FALSE_141
   # IF_ZERO local_a2i_at_Parse_internal_5 GOTO label_FALSE_141
   lw $t0, -24($fp)
   beq $t0, 0, label_FALSE_141
   # IF_ZERO local_a2i_at_Parse_internal_6 GOTO label_FALSE_141
   # IF_ZERO local_a2i_at_Parse_internal_6 GOTO label_FALSE_141
   lw $t0, -28($fp)
   beq $t0, 0, label_FALSE_141
   # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
   # Comparing -24($fp) type with String
   la $v0, String
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_COMPARE_STRING_144
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_COMPARE_STRING_144
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_144
   # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Bool
   la $v0, Bool
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_145
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_145
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_145
   # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
   # Comparing -24($fp) type with Int
   la $v0, Int
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_145
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_COMPARE_BY_VALUE_145
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_145
   # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
   # LOCAL local_a2i_at_Parse_internal_6 --> -28($fp)
   # Load pointers and SUB
   lw $a0, -24($fp)
   lw $a1, -28($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_TRUE_142
   # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_TRUE_142
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_142
   # GOTO label_FALSE_141
   j label_FALSE_141
   label_COMPARE_BY_VALUE_145: 
      # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
      # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
      # LOCAL local_a2i_at_Parse_internal_6 --> -28($fp)
      lw $a0, -24($fp)
      lw $a1, -28($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_TRUE_142
      # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_TRUE_142
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_142
      # GOTO label_FALSE_141
      j label_FALSE_141
      label_COMPARE_STRING_144: 
         # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
         # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
         # LOCAL local_a2i_at_Parse_internal_6 --> -28($fp)
         # Load strings for comparison
         lw $v0, -24($fp)
         lw $v1, -28($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_CONTINUE_146
         # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_CONTINUE_146
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_146
         # GOTO label_FALSE_141
         j label_FALSE_141
         label_CONTINUE_146: 
            # LOCAL local_a2i_at_Parse_internal_3 --> -16($fp)
            # LOCAL local_a2i_at_Parse_internal_5 --> -24($fp)
            # LOCAL local_a2i_at_Parse_internal_6 --> -28($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -24($fp)
            lw $v1, -28($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_147: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_148
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_147
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_148: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_TRUE_142
                  # IF_ZERO local_a2i_at_Parse_internal_3 GOTO label_TRUE_142
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_142
                  label_FALSE_141: 
                     # LOCAL local_a2i_at_Parse_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_143
j label_END_143
label_TRUE_142: 
   # LOCAL local_a2i_at_Parse_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_143: 
# LOCAL local_a2i_at_Parse_internal_0 --> -4($fp)
# LOCAL local_a2i_at_Parse_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_a2i_at_Parse_internal_0 GOTO label_FALSEIF_139
# IF_ZERO local_a2i_at_Parse_internal_0 GOTO label_FALSEIF_139
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_139
# LOCAL local_a2i_at_Parse_internal_7 --> -32($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 0
sw $t0, 12($v0)
sw $v0, -32($fp)
# LOCAL local_a2i_at_Parse_internal_1 --> -8($fp)
# LOCAL local_a2i_at_Parse_internal_7 --> -32($fp)
# local_a2i_at_Parse_internal_1 = local_a2i_at_Parse_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_140
j label_ENDIF_140
label_FALSEIF_139: 
   # LOCAL local_a2i_at_Parse_internal_12 --> -52($fp)
   # PARAM param_a2i_at_Parse_s_0 --> 0($fp)
   # local_a2i_at_Parse_internal_12 = PARAM param_a2i_at_Parse_s_0
   lw $t0, 0($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_14 --> -60($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -60($fp)
   # ARG local_a2i_at_Parse_internal_14
   # LOCAL local_a2i_at_Parse_internal_14 --> -60($fp)
   lw $t0, -60($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -64($fp)
   # ARG local_a2i_at_Parse_internal_15
   # LOCAL local_a2i_at_Parse_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_12 --> -52($fp)
   # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
   # local_a2i_at_Parse_internal_13 = VCALL local_a2i_at_Parse_internal_12 substr
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 64($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_Parse_internal_16 --> -68($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_16
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -68($fp)
   # IF_ZERO local_a2i_at_Parse_internal_13 GOTO label_FALSE_151
   # IF_ZERO local_a2i_at_Parse_internal_13 GOTO label_FALSE_151
   lw $t0, -56($fp)
   beq $t0, 0, label_FALSE_151
   # IF_ZERO local_a2i_at_Parse_internal_16 GOTO label_FALSE_151
   # IF_ZERO local_a2i_at_Parse_internal_16 GOTO label_FALSE_151
   lw $t0, -68($fp)
   beq $t0, 0, label_FALSE_151
   # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
   # Comparing -56($fp) type with String
   la $v0, String
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_COMPARE_STRING_154
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_COMPARE_STRING_154
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_STRING_154
   # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Bool
   la $v0, Bool
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_155
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_155
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_155
   # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
   # Comparing -56($fp) type with Int
   la $v0, Int
   lw $a0, -56($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_155
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_COMPARE_BY_VALUE_155
   lw $t0, -48($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_155
   # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
   # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
   # LOCAL local_a2i_at_Parse_internal_16 --> -68($fp)
   # Load pointers and SUB
   lw $a0, -56($fp)
   lw $a1, -68($fp)
   sub $a0, $a0, $a1
   sw $a0, -48($fp)
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_TRUE_152
   # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_TRUE_152
   lw $t0, -48($fp)
   beq $t0, 0, label_TRUE_152
   # GOTO label_FALSE_151
   j label_FALSE_151
   label_COMPARE_BY_VALUE_155: 
      # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
      # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
      # LOCAL local_a2i_at_Parse_internal_16 --> -68($fp)
      lw $a0, -56($fp)
      lw $a1, -68($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -48($fp)
      # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_TRUE_152
      # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_TRUE_152
      lw $t0, -48($fp)
      beq $t0, 0, label_TRUE_152
      # GOTO label_FALSE_151
      j label_FALSE_151
      label_COMPARE_STRING_154: 
         # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
         # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
         # LOCAL local_a2i_at_Parse_internal_16 --> -68($fp)
         # Load strings for comparison
         lw $v0, -56($fp)
         lw $v1, -68($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -48($fp)
         # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_CONTINUE_156
         # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_CONTINUE_156
         lw $t0, -48($fp)
         beq $t0, 0, label_CONTINUE_156
         # GOTO label_FALSE_151
         j label_FALSE_151
         label_CONTINUE_156: 
            # LOCAL local_a2i_at_Parse_internal_11 --> -48($fp)
            # LOCAL local_a2i_at_Parse_internal_13 --> -56($fp)
            # LOCAL local_a2i_at_Parse_internal_16 --> -68($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -56($fp)
            lw $v1, -68($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_157: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_158
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_157
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_158: 
                  # Store result
                  sw $a2, -48($fp)
                  # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_TRUE_152
                  # IF_ZERO local_a2i_at_Parse_internal_11 GOTO label_TRUE_152
                  lw $t0, -48($fp)
                  beq $t0, 0, label_TRUE_152
                  label_FALSE_151: 
                     # LOCAL local_a2i_at_Parse_internal_10 --> -44($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -44($fp)
                     # GOTO label_END_153
j label_END_153
label_TRUE_152: 
   # LOCAL local_a2i_at_Parse_internal_10 --> -44($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -44($fp)
   label_END_153: 
# LOCAL local_a2i_at_Parse_internal_8 --> -36($fp)
# LOCAL local_a2i_at_Parse_internal_10 --> -44($fp)
# Obtain value from -44($fp)
lw $v0, -44($fp)
lw $v0, 12($v0)
sw $v0, -36($fp)
# IF_ZERO local_a2i_at_Parse_internal_8 GOTO label_FALSEIF_149
# IF_ZERO local_a2i_at_Parse_internal_8 GOTO label_FALSEIF_149
lw $t0, -36($fp)
beq $t0, 0, label_FALSEIF_149
# LOCAL local_a2i_at_Parse_internal_20 --> -84($fp)
# local_a2i_at_Parse_internal_20 = SELF
sw $s1, -84($fp)
# LOCAL local_a2i_at_Parse_internal_18 --> -76($fp)
# LOCAL local_a2i_at_Parse_internal_20 --> -84($fp)
# local_a2i_at_Parse_internal_18 = local_a2i_at_Parse_internal_20
lw $t0, -84($fp)
sw $t0, -76($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_Parse_internal_21 --> -88($fp)
# PARAM param_a2i_at_Parse_s_0 --> 0($fp)
# local_a2i_at_Parse_internal_21 = PARAM param_a2i_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -88($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_Parse_internal_23 --> -96($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -96($fp)
# ARG local_a2i_at_Parse_internal_23
# LOCAL local_a2i_at_Parse_internal_23 --> -96($fp)
lw $t0, -96($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_Parse_internal_25 --> -104($fp)
# PARAM param_a2i_at_Parse_s_0 --> 0($fp)
# local_a2i_at_Parse_internal_25 = PARAM param_a2i_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -104($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_Parse_internal_25 --> -104($fp)
# LOCAL local_a2i_at_Parse_internal_26 --> -108($fp)
# local_a2i_at_Parse_internal_26 = VCALL local_a2i_at_Parse_internal_25 length
# Save new self pointer in $s1
lw $s1, -104($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 36($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -108($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_Parse_internal_27 --> -112($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -112($fp)
# LOCAL local_a2i_at_Parse_internal_24 --> -100($fp)
# LOCAL local_a2i_at_Parse_internal_26 --> -108($fp)
# LOCAL local_a2i_at_Parse_internal_27 --> -112($fp)
# local_a2i_at_Parse_internal_24 = local_a2i_at_Parse_internal_26 - local_a2i_at_Parse_internal_27
lw $t1, -108($fp)
lw $t0, 12($t1)
lw $t1, -112($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -100($fp)
# ARG local_a2i_at_Parse_internal_24
# LOCAL local_a2i_at_Parse_internal_24 --> -100($fp)
lw $t0, -100($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_Parse_internal_21 --> -88($fp)
# LOCAL local_a2i_at_Parse_internal_22 --> -92($fp)
# local_a2i_at_Parse_internal_22 = VCALL local_a2i_at_Parse_internal_21 substr
# Save new self pointer in $s1
lw $s1, -88($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 64($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -92($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_Parse_internal_22
# LOCAL local_a2i_at_Parse_internal_22 --> -92($fp)
lw $t0, -92($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_Parse_internal_18 --> -76($fp)
# LOCAL local_a2i_at_Parse_internal_19 --> -80($fp)
# local_a2i_at_Parse_internal_19 = VCALL local_a2i_at_Parse_internal_18 a2i_aux
# Save new self pointer in $s1
lw $s1, -76($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 100($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -80($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_Parse_internal_17 --> -72($fp)
# LOCAL local_a2i_at_Parse_internal_19 --> -80($fp)
lw $t0, -80($fp)
lw $t0, 12($t0)
not $t0, $t0
add $t0, $t0, 1
sw $t0, -72($fp)
# LOCAL local_a2i_at_Parse_internal_17 --> -72($fp)
# LOCAL local_a2i_at_Parse_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
lw $t0, -72($fp)
sw $t0, 12($v0)
sw $v0, -72($fp)
# LOCAL local_a2i_at_Parse_internal_9 --> -40($fp)
# LOCAL local_a2i_at_Parse_internal_17 --> -72($fp)
# local_a2i_at_Parse_internal_9 = local_a2i_at_Parse_internal_17
lw $t0, -72($fp)
sw $t0, -40($fp)
# GOTO label_ENDIF_150
j label_ENDIF_150
label_FALSEIF_149: 
   # LOCAL local_a2i_at_Parse_internal_32 --> -132($fp)
   # PARAM param_a2i_at_Parse_s_0 --> 0($fp)
   # local_a2i_at_Parse_internal_32 = PARAM param_a2i_at_Parse_s_0
   lw $t0, 0($fp)
   sw $t0, -132($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_34 --> -140($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -140($fp)
   # ARG local_a2i_at_Parse_internal_34
   # LOCAL local_a2i_at_Parse_internal_34 --> -140($fp)
   lw $t0, -140($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_35 --> -144($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -144($fp)
   # ARG local_a2i_at_Parse_internal_35
   # LOCAL local_a2i_at_Parse_internal_35 --> -144($fp)
   lw $t0, -144($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_32 --> -132($fp)
   # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
   # local_a2i_at_Parse_internal_33 = VCALL local_a2i_at_Parse_internal_32 substr
   # Save new self pointer in $s1
   lw $s1, -132($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 64($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -136($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_Parse_internal_36 --> -148($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_17
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -148($fp)
   # IF_ZERO local_a2i_at_Parse_internal_33 GOTO label_FALSE_161
   # IF_ZERO local_a2i_at_Parse_internal_33 GOTO label_FALSE_161
   lw $t0, -136($fp)
   beq $t0, 0, label_FALSE_161
   # IF_ZERO local_a2i_at_Parse_internal_36 GOTO label_FALSE_161
   # IF_ZERO local_a2i_at_Parse_internal_36 GOTO label_FALSE_161
   lw $t0, -148($fp)
   beq $t0, 0, label_FALSE_161
   # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
   # Comparing -136($fp) type with String
   la $v0, String
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_COMPARE_STRING_164
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_COMPARE_STRING_164
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_STRING_164
   # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
   # Comparing -136($fp) type with Bool
   la $v0, Bool
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_COMPARE_BY_VALUE_165
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_COMPARE_BY_VALUE_165
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_165
   # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
   # Comparing -136($fp) type with Int
   la $v0, Int
   lw $a0, -136($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_COMPARE_BY_VALUE_165
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_COMPARE_BY_VALUE_165
   lw $t0, -128($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_165
   # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
   # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
   # LOCAL local_a2i_at_Parse_internal_36 --> -148($fp)
   # Load pointers and SUB
   lw $a0, -136($fp)
   lw $a1, -148($fp)
   sub $a0, $a0, $a1
   sw $a0, -128($fp)
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_TRUE_162
   # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_TRUE_162
   lw $t0, -128($fp)
   beq $t0, 0, label_TRUE_162
   # GOTO label_FALSE_161
   j label_FALSE_161
   label_COMPARE_BY_VALUE_165: 
      # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
      # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
      # LOCAL local_a2i_at_Parse_internal_36 --> -148($fp)
      lw $a0, -136($fp)
      lw $a1, -148($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -128($fp)
      # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_TRUE_162
      # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_TRUE_162
      lw $t0, -128($fp)
      beq $t0, 0, label_TRUE_162
      # GOTO label_FALSE_161
      j label_FALSE_161
      label_COMPARE_STRING_164: 
         # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
         # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
         # LOCAL local_a2i_at_Parse_internal_36 --> -148($fp)
         # Load strings for comparison
         lw $v0, -136($fp)
         lw $v1, -148($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -128($fp)
         # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_CONTINUE_166
         # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_CONTINUE_166
         lw $t0, -128($fp)
         beq $t0, 0, label_CONTINUE_166
         # GOTO label_FALSE_161
         j label_FALSE_161
         label_CONTINUE_166: 
            # LOCAL local_a2i_at_Parse_internal_31 --> -128($fp)
            # LOCAL local_a2i_at_Parse_internal_33 --> -136($fp)
            # LOCAL local_a2i_at_Parse_internal_36 --> -148($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -136($fp)
            lw $v1, -148($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_167: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_168
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_167
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_168: 
                  # Store result
                  sw $a2, -128($fp)
                  # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_TRUE_162
                  # IF_ZERO local_a2i_at_Parse_internal_31 GOTO label_TRUE_162
                  lw $t0, -128($fp)
                  beq $t0, 0, label_TRUE_162
                  label_FALSE_161: 
                     # LOCAL local_a2i_at_Parse_internal_30 --> -124($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -124($fp)
                     # GOTO label_END_163
j label_END_163
label_TRUE_162: 
   # LOCAL local_a2i_at_Parse_internal_30 --> -124($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -124($fp)
   label_END_163: 
# LOCAL local_a2i_at_Parse_internal_28 --> -116($fp)
# LOCAL local_a2i_at_Parse_internal_30 --> -124($fp)
# Obtain value from -124($fp)
lw $v0, -124($fp)
lw $v0, 12($v0)
sw $v0, -116($fp)
# IF_ZERO local_a2i_at_Parse_internal_28 GOTO label_FALSEIF_159
# IF_ZERO local_a2i_at_Parse_internal_28 GOTO label_FALSEIF_159
lw $t0, -116($fp)
beq $t0, 0, label_FALSEIF_159
# LOCAL local_a2i_at_Parse_internal_39 --> -160($fp)
# local_a2i_at_Parse_internal_39 = SELF
sw $s1, -160($fp)
# LOCAL local_a2i_at_Parse_internal_37 --> -152($fp)
# LOCAL local_a2i_at_Parse_internal_39 --> -160($fp)
# local_a2i_at_Parse_internal_37 = local_a2i_at_Parse_internal_39
lw $t0, -160($fp)
sw $t0, -152($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_Parse_internal_40 --> -164($fp)
# PARAM param_a2i_at_Parse_s_0 --> 0($fp)
# local_a2i_at_Parse_internal_40 = PARAM param_a2i_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -164($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_Parse_internal_42 --> -172($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -172($fp)
# ARG local_a2i_at_Parse_internal_42
# LOCAL local_a2i_at_Parse_internal_42 --> -172($fp)
lw $t0, -172($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_Parse_internal_44 --> -180($fp)
# PARAM param_a2i_at_Parse_s_0 --> 0($fp)
# local_a2i_at_Parse_internal_44 = PARAM param_a2i_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -180($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_at_Parse_internal_44 --> -180($fp)
# LOCAL local_a2i_at_Parse_internal_45 --> -184($fp)
# local_a2i_at_Parse_internal_45 = VCALL local_a2i_at_Parse_internal_44 length
# Save new self pointer in $s1
lw $s1, -180($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 36($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -184($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_Parse_internal_46 --> -188($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -188($fp)
# LOCAL local_a2i_at_Parse_internal_43 --> -176($fp)
# LOCAL local_a2i_at_Parse_internal_45 --> -184($fp)
# LOCAL local_a2i_at_Parse_internal_46 --> -188($fp)
# local_a2i_at_Parse_internal_43 = local_a2i_at_Parse_internal_45 - local_a2i_at_Parse_internal_46
lw $t1, -184($fp)
lw $t0, 12($t1)
lw $t1, -188($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -176($fp)
# ARG local_a2i_at_Parse_internal_43
# LOCAL local_a2i_at_Parse_internal_43 --> -176($fp)
lw $t0, -176($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_Parse_internal_40 --> -164($fp)
# LOCAL local_a2i_at_Parse_internal_41 --> -168($fp)
# local_a2i_at_Parse_internal_41 = VCALL local_a2i_at_Parse_internal_40 substr
# Save new self pointer in $s1
lw $s1, -164($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 64($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -168($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# ARG local_a2i_at_Parse_internal_41
# LOCAL local_a2i_at_Parse_internal_41 --> -168($fp)
lw $t0, -168($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_at_Parse_internal_37 --> -152($fp)
# LOCAL local_a2i_at_Parse_internal_38 --> -156($fp)
# local_a2i_at_Parse_internal_38 = VCALL local_a2i_at_Parse_internal_37 a2i
# Save new self pointer in $s1
lw $s1, -152($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 44($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -156($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_at_Parse_internal_29 --> -120($fp)
# LOCAL local_a2i_at_Parse_internal_38 --> -156($fp)
# local_a2i_at_Parse_internal_29 = local_a2i_at_Parse_internal_38
lw $t0, -156($fp)
sw $t0, -120($fp)
# GOTO label_ENDIF_160
j label_ENDIF_160
label_FALSEIF_159: 
   # LOCAL local_a2i_at_Parse_internal_49 --> -200($fp)
   # local_a2i_at_Parse_internal_49 = SELF
   sw $s1, -200($fp)
   # LOCAL local_a2i_at_Parse_internal_47 --> -192($fp)
   # LOCAL local_a2i_at_Parse_internal_49 --> -200($fp)
   # local_a2i_at_Parse_internal_47 = local_a2i_at_Parse_internal_49
   lw $t0, -200($fp)
   sw $t0, -192($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_a2i_at_Parse_s_0
   # PARAM param_a2i_at_Parse_s_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_at_Parse_internal_47 --> -192($fp)
   # LOCAL local_a2i_at_Parse_internal_48 --> -196($fp)
   # local_a2i_at_Parse_internal_48 = VCALL local_a2i_at_Parse_internal_47 a2i_aux
   # Save new self pointer in $s1
   lw $s1, -192($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 100($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -196($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_at_Parse_internal_29 --> -120($fp)
   # LOCAL local_a2i_at_Parse_internal_48 --> -196($fp)
   # local_a2i_at_Parse_internal_29 = local_a2i_at_Parse_internal_48
   lw $t0, -196($fp)
   sw $t0, -120($fp)
   label_ENDIF_160: 
# LOCAL local_a2i_at_Parse_internal_9 --> -40($fp)
# LOCAL local_a2i_at_Parse_internal_29 --> -120($fp)
# local_a2i_at_Parse_internal_9 = local_a2i_at_Parse_internal_29
lw $t0, -120($fp)
sw $t0, -40($fp)
label_ENDIF_150: 
# LOCAL local_a2i_at_Parse_internal_1 --> -8($fp)
# LOCAL local_a2i_at_Parse_internal_9 --> -40($fp)
# local_a2i_at_Parse_internal_1 = local_a2i_at_Parse_internal_9
lw $t0, -40($fp)
sw $t0, -8($fp)
label_ENDIF_140: 
# RETURN local_a2i_at_Parse_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_a2i_at_Parse.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 208
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_a2i_aux_at_Parse implementation.
# @Params:
# 	0($fp) = param_a2i_aux_at_Parse_s_0
function_a2i_aux_at_Parse: 
   # Allocate stack frame for function function_a2i_aux_at_Parse.
   subu $sp, $sp, 240
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 240
   # LOCAL local_a2i_aux_at_Parse_int_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_1 --> -8($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # LOCAL local_a2i_aux_at_Parse_int_0 --> -4($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_1 --> -8($fp)
   # local_a2i_aux_at_Parse_int_0 = local_a2i_aux_at_Parse_internal_1
   lw $t0, -8($fp)
   sw $t0, -4($fp)
   # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_3 --> -16($fp)
   # PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
   # local_a2i_aux_at_Parse_internal_3 = PARAM param_a2i_aux_at_Parse_s_0
   lw $t0, 0($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_aux_at_Parse_internal_3 --> -16($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_4 --> -20($fp)
   # local_a2i_aux_at_Parse_internal_4 = VCALL local_a2i_aux_at_Parse_internal_3 length
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 36($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_4 --> -20($fp)
   # local_a2i_aux_at_Parse_j_2 = local_a2i_aux_at_Parse_internal_4
   lw $t0, -20($fp)
   sw $t0, -12($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_6 --> -28($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -28($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_6 --> -28($fp)
   # local_a2i_aux_at_Parse_i_5 = local_a2i_aux_at_Parse_internal_6
   lw $t0, -28($fp)
   sw $t0, -24($fp)
   label_WHILE_169: 
      # LOCAL local_a2i_aux_at_Parse_internal_8 --> -36($fp)
      # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
      # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
      lw $a0, -24($fp)
      lw $a1, -12($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -36($fp)
      # IF_GREATER_ZERO local_a2i_aux_at_Parse_internal_8 GOTO label_FALSE_171
      # IF_GREATER_ZERO local_a2i_aux_at_Parse_internal_8 GOTO label_FALSE_171
      lw $t0, -36($fp)
      bgt $t0, 0, label_FALSE_171
      # IF_ZERO local_a2i_aux_at_Parse_internal_8 GOTO label_FALSE_171
      # IF_ZERO local_a2i_aux_at_Parse_internal_8 GOTO label_FALSE_171
      lw $t0, -36($fp)
      beq $t0, 0, label_FALSE_171
      # LOCAL local_a2i_aux_at_Parse_internal_8 --> -36($fp)
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string for type Bool
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      la $t0, Bool
      sw $t0, 12($v0)
      li $t0, 4
      sw $t0, 16($v0)
      move $t0, $v0
      # Allocating 16 bytes of memory
      li $a0, 16
      li $v0, 9
      syscall
      sw $t0, 0($v0)
      la $t0, Bool_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 12
      sw $t0, 8($v0)
      li $t0, 1
      sw $t0, 12($v0)
      sw $v0, -36($fp)
      # GOTO label_END_172
j label_END_172
label_FALSE_171: 
   # LOCAL local_a2i_aux_at_Parse_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_172: 
# LOCAL local_a2i_aux_at_Parse_internal_7 --> -32($fp)
# LOCAL local_a2i_aux_at_Parse_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -32($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_7 GOTO label_WHILE_END_170
# IF_ZERO local_a2i_aux_at_Parse_internal_7 GOTO label_WHILE_END_170
lw $t0, -32($fp)
beq $t0, 0, label_WHILE_END_170
# LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_0
sw $t0, 12($v0)
li $t0, 0
sw $t0, 16($v0)
sw $v0, -40($fp)
# LOCAL local_a2i_aux_at_Parse_internal_10 --> -44($fp)
# PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
# local_a2i_aux_at_Parse_internal_10 = PARAM param_a2i_aux_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -44($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# ARG local_a2i_aux_at_Parse_i_5
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
lw $t0, -24($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_12 --> -52($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -52($fp)
# ARG local_a2i_aux_at_Parse_internal_12
# LOCAL local_a2i_aux_at_Parse_internal_12 --> -52($fp)
lw $t0, -52($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_10 --> -44($fp)
# LOCAL local_a2i_aux_at_Parse_internal_11 --> -48($fp)
# local_a2i_aux_at_Parse_internal_11 = VCALL local_a2i_aux_at_Parse_internal_10 substr
# Save new self pointer in $s1
lw $s1, -44($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 64($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -48($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
# LOCAL local_a2i_aux_at_Parse_internal_11 --> -48($fp)
# local_a2i_aux_at_Parse_c_9 = local_a2i_aux_at_Parse_internal_11
lw $t0, -48($fp)
sw $t0, -40($fp)
# LOCAL local_a2i_aux_at_Parse_internal_17 --> -72($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_18
sw $t0, 12($v0)
li $t0, 1
sw $t0, 16($v0)
sw $v0, -72($fp)
# IF_ZERO local_a2i_aux_at_Parse_c_9 GOTO label_FALSE_175
# IF_ZERO local_a2i_aux_at_Parse_c_9 GOTO label_FALSE_175
lw $t0, -40($fp)
beq $t0, 0, label_FALSE_175
# IF_ZERO local_a2i_aux_at_Parse_internal_17 GOTO label_FALSE_175
# IF_ZERO local_a2i_aux_at_Parse_internal_17 GOTO label_FALSE_175
lw $t0, -72($fp)
beq $t0, 0, label_FALSE_175
# LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
# LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
# Comparing -40($fp) type with String
la $v0, String
lw $a0, -40($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -68($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_COMPARE_STRING_178
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_COMPARE_STRING_178
lw $t0, -68($fp)
beq $t0, 0, label_COMPARE_STRING_178
# LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
# LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
# Comparing -40($fp) type with Bool
la $v0, Bool
lw $a0, -40($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -68($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_COMPARE_BY_VALUE_179
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_COMPARE_BY_VALUE_179
lw $t0, -68($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_179
# LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
# LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
# Comparing -40($fp) type with Int
la $v0, Int
lw $a0, -40($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -68($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_COMPARE_BY_VALUE_179
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_COMPARE_BY_VALUE_179
lw $t0, -68($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_179
# LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
# LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
# LOCAL local_a2i_aux_at_Parse_internal_17 --> -72($fp)
# Load pointers and SUB
lw $a0, -40($fp)
lw $a1, -72($fp)
sub $a0, $a0, $a1
sw $a0, -68($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_TRUE_176
# IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_TRUE_176
lw $t0, -68($fp)
beq $t0, 0, label_TRUE_176
# GOTO label_FALSE_175
j label_FALSE_175
label_COMPARE_BY_VALUE_179: 
   # LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
   # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_17 --> -72($fp)
   lw $a0, -40($fp)
   lw $a1, -72($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -68($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_TRUE_176
   # IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_TRUE_176
   lw $t0, -68($fp)
   beq $t0, 0, label_TRUE_176
   # GOTO label_FALSE_175
   j label_FALSE_175
   label_COMPARE_STRING_178: 
      # LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
      # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
      # LOCAL local_a2i_aux_at_Parse_internal_17 --> -72($fp)
      # Load strings for comparison
      lw $v0, -40($fp)
      lw $v1, -72($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -68($fp)
      # IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_CONTINUE_180
      # IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_CONTINUE_180
      lw $t0, -68($fp)
      beq $t0, 0, label_CONTINUE_180
      # GOTO label_FALSE_175
      j label_FALSE_175
      label_CONTINUE_180: 
         # LOCAL local_a2i_aux_at_Parse_internal_16 --> -68($fp)
         # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
         # LOCAL local_a2i_aux_at_Parse_internal_17 --> -72($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -40($fp)
         lw $v1, -72($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_181: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_182
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_181
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_182: 
               # Store result
               sw $a2, -68($fp)
               # IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_TRUE_176
               # IF_ZERO local_a2i_aux_at_Parse_internal_16 GOTO label_TRUE_176
               lw $t0, -68($fp)
               beq $t0, 0, label_TRUE_176
               label_FALSE_175: 
                  # LOCAL local_a2i_aux_at_Parse_internal_15 --> -64($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -64($fp)
                  # GOTO label_END_177
j label_END_177
label_TRUE_176: 
   # LOCAL local_a2i_aux_at_Parse_internal_15 --> -64($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -64($fp)
   label_END_177: 
# LOCAL local_a2i_aux_at_Parse_internal_13 --> -56($fp)
# LOCAL local_a2i_aux_at_Parse_internal_15 --> -64($fp)
# Obtain value from -64($fp)
lw $v0, -64($fp)
lw $v0, 12($v0)
sw $v0, -56($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_13 GOTO label_FALSEIF_173
# IF_ZERO local_a2i_aux_at_Parse_internal_13 GOTO label_FALSEIF_173
lw $t0, -56($fp)
beq $t0, 0, label_FALSEIF_173
# LOCAL local_a2i_aux_at_Parse_internal_18 --> -76($fp)
# PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
# local_a2i_aux_at_Parse_internal_18 = PARAM param_a2i_aux_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -76($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_21 --> -88($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -88($fp)
# LOCAL local_a2i_aux_at_Parse_internal_20 --> -84($fp)
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_Parse_internal_21 --> -88($fp)
# local_a2i_aux_at_Parse_internal_20 = local_a2i_aux_at_Parse_i_5 + local_a2i_aux_at_Parse_internal_21
lw $t1, -24($fp)
lw $t0, 12($t1)
lw $t1, -88($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -84($fp)
# ARG local_a2i_aux_at_Parse_internal_20
# LOCAL local_a2i_aux_at_Parse_internal_20 --> -84($fp)
lw $t0, -84($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_24 --> -100($fp)
# PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
# local_a2i_aux_at_Parse_internal_24 = PARAM param_a2i_aux_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -100($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_24 --> -100($fp)
# LOCAL local_a2i_aux_at_Parse_internal_25 --> -104($fp)
# local_a2i_aux_at_Parse_internal_25 = VCALL local_a2i_aux_at_Parse_internal_24 length
# Save new self pointer in $s1
lw $s1, -100($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 36($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -104($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_aux_at_Parse_internal_23 --> -96($fp)
# LOCAL local_a2i_aux_at_Parse_internal_25 --> -104($fp)
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
# local_a2i_aux_at_Parse_internal_23 = local_a2i_aux_at_Parse_internal_25 - local_a2i_aux_at_Parse_i_5
lw $t1, -104($fp)
lw $t0, 12($t1)
lw $t1, -24($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -96($fp)
# LOCAL local_a2i_aux_at_Parse_internal_26 --> -108($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -108($fp)
# LOCAL local_a2i_aux_at_Parse_internal_22 --> -92($fp)
# LOCAL local_a2i_aux_at_Parse_internal_23 --> -96($fp)
# LOCAL local_a2i_aux_at_Parse_internal_26 --> -108($fp)
# local_a2i_aux_at_Parse_internal_22 = local_a2i_aux_at_Parse_internal_23 - local_a2i_aux_at_Parse_internal_26
lw $t1, -96($fp)
lw $t0, 12($t1)
lw $t1, -108($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -92($fp)
# ARG local_a2i_aux_at_Parse_internal_22
# LOCAL local_a2i_aux_at_Parse_internal_22 --> -92($fp)
lw $t0, -92($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_18 --> -76($fp)
# LOCAL local_a2i_aux_at_Parse_internal_19 --> -80($fp)
# local_a2i_aux_at_Parse_internal_19 = VCALL local_a2i_aux_at_Parse_internal_18 substr
# Save new self pointer in $s1
lw $s1, -76($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 64($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -80($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_a2i_aux_at_Parse_internal_19 --> -80($fp)
lw $t0, -80($fp)
sw $t0, 16($s1)
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
# local_a2i_aux_at_Parse_i_5 = local_a2i_aux_at_Parse_j_2
lw $t0, -12($fp)
sw $t0, -24($fp)
# LOCAL local_a2i_aux_at_Parse_internal_14 --> -60($fp)
# local_a2i_aux_at_Parse_internal_14 = 
# GOTO label_ENDIF_174
j label_ENDIF_174
label_FALSEIF_173: 
   # LOCAL local_a2i_aux_at_Parse_internal_31 --> -128($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_19
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -128($fp)
   # IF_ZERO local_a2i_aux_at_Parse_c_9 GOTO label_FALSE_185
   # IF_ZERO local_a2i_aux_at_Parse_c_9 GOTO label_FALSE_185
   lw $t0, -40($fp)
   beq $t0, 0, label_FALSE_185
   # IF_ZERO local_a2i_aux_at_Parse_internal_31 GOTO label_FALSE_185
   # IF_ZERO local_a2i_aux_at_Parse_internal_31 GOTO label_FALSE_185
   lw $t0, -128($fp)
   beq $t0, 0, label_FALSE_185
   # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
   # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
   # Comparing -40($fp) type with String
   la $v0, String
   lw $a0, -40($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -124($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_COMPARE_STRING_188
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_COMPARE_STRING_188
   lw $t0, -124($fp)
   beq $t0, 0, label_COMPARE_STRING_188
   # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
   # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
   # Comparing -40($fp) type with Bool
   la $v0, Bool
   lw $a0, -40($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -124($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_COMPARE_BY_VALUE_189
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_COMPARE_BY_VALUE_189
   lw $t0, -124($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_189
   # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
   # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
   # Comparing -40($fp) type with Int
   la $v0, Int
   lw $a0, -40($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -124($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_COMPARE_BY_VALUE_189
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_COMPARE_BY_VALUE_189
   lw $t0, -124($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_189
   # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
   # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_31 --> -128($fp)
   # Load pointers and SUB
   lw $a0, -40($fp)
   lw $a1, -128($fp)
   sub $a0, $a0, $a1
   sw $a0, -124($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_TRUE_186
   # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_TRUE_186
   lw $t0, -124($fp)
   beq $t0, 0, label_TRUE_186
   # GOTO label_FALSE_185
   j label_FALSE_185
   label_COMPARE_BY_VALUE_189: 
      # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
      # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
      # LOCAL local_a2i_aux_at_Parse_internal_31 --> -128($fp)
      lw $a0, -40($fp)
      lw $a1, -128($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -124($fp)
      # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_TRUE_186
      # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_TRUE_186
      lw $t0, -124($fp)
      beq $t0, 0, label_TRUE_186
      # GOTO label_FALSE_185
      j label_FALSE_185
      label_COMPARE_STRING_188: 
         # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
         # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
         # LOCAL local_a2i_aux_at_Parse_internal_31 --> -128($fp)
         # Load strings for comparison
         lw $v0, -40($fp)
         lw $v1, -128($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -124($fp)
         # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_CONTINUE_190
         # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_CONTINUE_190
         lw $t0, -124($fp)
         beq $t0, 0, label_CONTINUE_190
         # GOTO label_FALSE_185
         j label_FALSE_185
         label_CONTINUE_190: 
            # LOCAL local_a2i_aux_at_Parse_internal_30 --> -124($fp)
            # LOCAL local_a2i_aux_at_Parse_c_9 --> -40($fp)
            # LOCAL local_a2i_aux_at_Parse_internal_31 --> -128($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -40($fp)
            lw $v1, -128($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_191: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_192
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_191
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_192: 
                  # Store result
                  sw $a2, -124($fp)
                  # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_TRUE_186
                  # IF_ZERO local_a2i_aux_at_Parse_internal_30 GOTO label_TRUE_186
                  lw $t0, -124($fp)
                  beq $t0, 0, label_TRUE_186
                  label_FALSE_185: 
                     # LOCAL local_a2i_aux_at_Parse_internal_29 --> -120($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -120($fp)
                     # GOTO label_END_187
j label_END_187
label_TRUE_186: 
   # LOCAL local_a2i_aux_at_Parse_internal_29 --> -120($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -120($fp)
   label_END_187: 
# LOCAL local_a2i_aux_at_Parse_internal_27 --> -112($fp)
# LOCAL local_a2i_aux_at_Parse_internal_29 --> -120($fp)
# Obtain value from -120($fp)
lw $v0, -120($fp)
lw $v0, 12($v0)
sw $v0, -112($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_27 GOTO label_FALSEIF_183
# IF_ZERO local_a2i_aux_at_Parse_internal_27 GOTO label_FALSEIF_183
lw $t0, -112($fp)
beq $t0, 0, label_FALSEIF_183
# LOCAL local_a2i_aux_at_Parse_internal_32 --> -132($fp)
# PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
# local_a2i_aux_at_Parse_internal_32 = PARAM param_a2i_aux_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -132($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_35 --> -144($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -144($fp)
# LOCAL local_a2i_aux_at_Parse_internal_34 --> -140($fp)
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_Parse_internal_35 --> -144($fp)
# local_a2i_aux_at_Parse_internal_34 = local_a2i_aux_at_Parse_i_5 + local_a2i_aux_at_Parse_internal_35
lw $t1, -24($fp)
lw $t0, 12($t1)
lw $t1, -144($fp)
lw $t2, 12($t1)
add $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -140($fp)
# ARG local_a2i_aux_at_Parse_internal_34
# LOCAL local_a2i_aux_at_Parse_internal_34 --> -140($fp)
lw $t0, -140($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_38 --> -156($fp)
# PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
# local_a2i_aux_at_Parse_internal_38 = PARAM param_a2i_aux_at_Parse_s_0
lw $t0, 0($fp)
sw $t0, -156($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_38 --> -156($fp)
# LOCAL local_a2i_aux_at_Parse_internal_39 --> -160($fp)
# local_a2i_aux_at_Parse_internal_39 = VCALL local_a2i_aux_at_Parse_internal_38 length
# Save new self pointer in $s1
lw $s1, -156($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 36($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -160($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_a2i_aux_at_Parse_internal_37 --> -152($fp)
# LOCAL local_a2i_aux_at_Parse_internal_39 --> -160($fp)
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
# local_a2i_aux_at_Parse_internal_37 = local_a2i_aux_at_Parse_internal_39 - local_a2i_aux_at_Parse_i_5
lw $t1, -160($fp)
lw $t0, 12($t1)
lw $t1, -24($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -152($fp)
# LOCAL local_a2i_aux_at_Parse_internal_40 --> -164($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
li $t0, 1
sw $t0, 12($v0)
sw $v0, -164($fp)
# LOCAL local_a2i_aux_at_Parse_internal_36 --> -148($fp)
# LOCAL local_a2i_aux_at_Parse_internal_37 --> -152($fp)
# LOCAL local_a2i_aux_at_Parse_internal_40 --> -164($fp)
# local_a2i_aux_at_Parse_internal_36 = local_a2i_aux_at_Parse_internal_37 - local_a2i_aux_at_Parse_internal_40
lw $t1, -152($fp)
lw $t0, 12($t1)
lw $t1, -164($fp)
lw $t2, 12($t1)
sub $t0, $t0, $t2
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t1, String
sw $t1, 0($v0)
la $t1, String_start
sw $t1, 4($v0)
# Load type offset
li $t1, 8
sw $t1, 8($v0)
la $t1, Int
sw $t1, 12($v0)
li $t1, 3
sw $t1, 16($v0)
move $t1, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t1, 0($v0)
la $t1, Int_start
sw $t1, 4($v0)
# Load type offset
li $t1, 16
sw $t1, 8($v0)
sw $t0, 12($v0)
sw $v0, -148($fp)
# ARG local_a2i_aux_at_Parse_internal_36
# LOCAL local_a2i_aux_at_Parse_internal_36 --> -148($fp)
lw $t0, -148($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_a2i_aux_at_Parse_internal_32 --> -132($fp)
# LOCAL local_a2i_aux_at_Parse_internal_33 --> -136($fp)
# local_a2i_aux_at_Parse_internal_33 = VCALL local_a2i_aux_at_Parse_internal_32 substr
# Save new self pointer in $s1
lw $s1, -132($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 64($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -136($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# 
# LOCAL local_a2i_aux_at_Parse_internal_33 --> -136($fp)
lw $t0, -136($fp)
sw $t0, 16($s1)
# LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
# LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
# local_a2i_aux_at_Parse_i_5 = local_a2i_aux_at_Parse_j_2
lw $t0, -12($fp)
sw $t0, -24($fp)
# LOCAL local_a2i_aux_at_Parse_internal_28 --> -116($fp)
# local_a2i_aux_at_Parse_internal_28 = 
# GOTO label_ENDIF_184
j label_ENDIF_184
label_FALSEIF_183: 
   # LOCAL local_a2i_aux_at_Parse_internal_43 --> -176($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 10
   sw $t0, 12($v0)
   sw $v0, -176($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_42 --> -172($fp)
   # LOCAL local_a2i_aux_at_Parse_int_0 --> -4($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_43 --> -176($fp)
   # local_a2i_aux_at_Parse_internal_42 = local_a2i_aux_at_Parse_int_0 * local_a2i_aux_at_Parse_internal_43
   lw $t1, -4($fp)
   lw $t0, 12($t1)
   lw $t1, -176($fp)
   lw $t2, 12($t1)
   mul $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -172($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_46 --> -188($fp)
   # local_a2i_aux_at_Parse_internal_46 = SELF
   sw $s1, -188($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_44 --> -180($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_46 --> -188($fp)
   # local_a2i_aux_at_Parse_internal_44 = local_a2i_aux_at_Parse_internal_46
   lw $t0, -188($fp)
   sw $t0, -180($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_a2i_aux_at_Parse_internal_47 --> -192($fp)
   # PARAM param_a2i_aux_at_Parse_s_0 --> 0($fp)
   # local_a2i_aux_at_Parse_internal_47 = PARAM param_a2i_aux_at_Parse_s_0
   lw $t0, 0($fp)
   sw $t0, -192($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG local_a2i_aux_at_Parse_i_5
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   lw $t0, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_aux_at_Parse_internal_49 --> -200($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -200($fp)
   # ARG local_a2i_aux_at_Parse_internal_49
   # LOCAL local_a2i_aux_at_Parse_internal_49 --> -200($fp)
   lw $t0, -200($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_aux_at_Parse_internal_47 --> -192($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_48 --> -196($fp)
   # local_a2i_aux_at_Parse_internal_48 = VCALL local_a2i_aux_at_Parse_internal_47 substr
   # Save new self pointer in $s1
   lw $s1, -192($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 64($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -196($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_a2i_aux_at_Parse_internal_48
   # LOCAL local_a2i_aux_at_Parse_internal_48 --> -196($fp)
   lw $t0, -196($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_a2i_aux_at_Parse_internal_44 --> -180($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_45 --> -184($fp)
   # local_a2i_aux_at_Parse_internal_45 = VCALL local_a2i_aux_at_Parse_internal_44 c2i
   # Save new self pointer in $s1
   lw $s1, -180($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 116($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -184($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_a2i_aux_at_Parse_internal_41 --> -168($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_42 --> -172($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_45 --> -184($fp)
   # local_a2i_aux_at_Parse_internal_41 = local_a2i_aux_at_Parse_internal_42 + local_a2i_aux_at_Parse_internal_45
   lw $t1, -172($fp)
   lw $t0, 12($t1)
   lw $t1, -184($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -168($fp)
   # LOCAL local_a2i_aux_at_Parse_int_0 --> -4($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_41 --> -168($fp)
   # local_a2i_aux_at_Parse_int_0 = local_a2i_aux_at_Parse_internal_41
   lw $t0, -168($fp)
   sw $t0, -4($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_51 --> -208($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -208($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_50 --> -204($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_51 --> -208($fp)
   # local_a2i_aux_at_Parse_internal_50 = local_a2i_aux_at_Parse_i_5 + local_a2i_aux_at_Parse_internal_51
   lw $t1, -24($fp)
   lw $t0, 12($t1)
   lw $t1, -208($fp)
   lw $t2, 12($t1)
   add $t0, $t0, $t2
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t1, String
   sw $t1, 0($v0)
   la $t1, String_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 8
   sw $t1, 8($v0)
   la $t1, Int
   sw $t1, 12($v0)
   li $t1, 3
   sw $t1, 16($v0)
   move $t1, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t1, 0($v0)
   la $t1, Int_start
   sw $t1, 4($v0)
   # Load type offset
   li $t1, 16
   sw $t1, 8($v0)
   sw $t0, 12($v0)
   sw $v0, -204($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_50 --> -204($fp)
   # local_a2i_aux_at_Parse_i_5 = local_a2i_aux_at_Parse_internal_50
   lw $t0, -204($fp)
   sw $t0, -24($fp)
   # IF_ZERO local_a2i_aux_at_Parse_i_5 GOTO label_FALSE_195
   # IF_ZERO local_a2i_aux_at_Parse_i_5 GOTO label_FALSE_195
   lw $t0, -24($fp)
   beq $t0, 0, label_FALSE_195
   # IF_ZERO local_a2i_aux_at_Parse_j_2 GOTO label_FALSE_195
   # IF_ZERO local_a2i_aux_at_Parse_j_2 GOTO label_FALSE_195
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_195
   # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # Comparing -24($fp) type with String
   la $v0, String
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -224($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_COMPARE_STRING_198
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_COMPARE_STRING_198
   lw $t0, -224($fp)
   beq $t0, 0, label_COMPARE_STRING_198
   # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # Comparing -24($fp) type with Bool
   la $v0, Bool
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -224($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_COMPARE_BY_VALUE_199
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_COMPARE_BY_VALUE_199
   lw $t0, -224($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_199
   # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # Comparing -24($fp) type with Int
   la $v0, Int
   lw $a0, -24($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -224($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_COMPARE_BY_VALUE_199
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_COMPARE_BY_VALUE_199
   lw $t0, -224($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_199
   # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
   # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
   # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
   # Load pointers and SUB
   lw $a0, -24($fp)
   lw $a1, -12($fp)
   sub $a0, $a0, $a1
   sw $a0, -224($fp)
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_TRUE_196
   # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_TRUE_196
   lw $t0, -224($fp)
   beq $t0, 0, label_TRUE_196
   # GOTO label_FALSE_195
   j label_FALSE_195
   label_COMPARE_BY_VALUE_199: 
      # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
      # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
      # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
      lw $a0, -24($fp)
      lw $a1, -12($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -224($fp)
      # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_TRUE_196
      # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_TRUE_196
      lw $t0, -224($fp)
      beq $t0, 0, label_TRUE_196
      # GOTO label_FALSE_195
      j label_FALSE_195
      label_COMPARE_STRING_198: 
         # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
         # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
         # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
         # Load strings for comparison
         lw $v0, -24($fp)
         lw $v1, -12($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -224($fp)
         # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_CONTINUE_200
         # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_CONTINUE_200
         lw $t0, -224($fp)
         beq $t0, 0, label_CONTINUE_200
         # GOTO label_FALSE_195
         j label_FALSE_195
         label_CONTINUE_200: 
            # LOCAL local_a2i_aux_at_Parse_internal_55 --> -224($fp)
            # LOCAL local_a2i_aux_at_Parse_i_5 --> -24($fp)
            # LOCAL local_a2i_aux_at_Parse_j_2 --> -12($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -24($fp)
            lw $v1, -12($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_201: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_202
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_201
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_202: 
                  # Store result
                  sw $a2, -224($fp)
                  # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_TRUE_196
                  # IF_ZERO local_a2i_aux_at_Parse_internal_55 GOTO label_TRUE_196
                  lw $t0, -224($fp)
                  beq $t0, 0, label_TRUE_196
                  label_FALSE_195: 
                     # LOCAL local_a2i_aux_at_Parse_internal_54 --> -220($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -220($fp)
                     # GOTO label_END_197
j label_END_197
label_TRUE_196: 
   # LOCAL local_a2i_aux_at_Parse_internal_54 --> -220($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -220($fp)
   label_END_197: 
# LOCAL local_a2i_aux_at_Parse_internal_52 --> -212($fp)
# LOCAL local_a2i_aux_at_Parse_internal_54 --> -220($fp)
# Obtain value from -220($fp)
lw $v0, -220($fp)
lw $v0, 12($v0)
sw $v0, -212($fp)
# IF_ZERO local_a2i_aux_at_Parse_internal_52 GOTO label_FALSEIF_193
# IF_ZERO local_a2i_aux_at_Parse_internal_52 GOTO label_FALSEIF_193
lw $t0, -212($fp)
beq $t0, 0, label_FALSEIF_193
# LOCAL local_a2i_aux_at_Parse_internal_56 --> -228($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_20
sw $t0, 12($v0)
li $t0, 0
sw $t0, 16($v0)
sw $v0, -228($fp)
# 
# LOCAL local_a2i_aux_at_Parse_internal_56 --> -228($fp)
lw $t0, -228($fp)
sw $t0, 16($s1)
# LOCAL local_a2i_aux_at_Parse_internal_53 --> -216($fp)
# local_a2i_aux_at_Parse_internal_53 = 
# GOTO label_ENDIF_194
j label_ENDIF_194
label_FALSEIF_193: 
   # LOCAL local_a2i_aux_at_Parse_internal_57 --> -232($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_21
   sw $t0, 12($v0)
   li $t0, 0
   sw $t0, 16($v0)
   sw $v0, -232($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_53 --> -216($fp)
   # LOCAL local_a2i_aux_at_Parse_internal_57 --> -232($fp)
   # local_a2i_aux_at_Parse_internal_53 = local_a2i_aux_at_Parse_internal_57
   lw $t0, -232($fp)
   sw $t0, -216($fp)
   label_ENDIF_194: 
# LOCAL local_a2i_aux_at_Parse_internal_28 --> -116($fp)
# LOCAL local_a2i_aux_at_Parse_internal_53 --> -216($fp)
# local_a2i_aux_at_Parse_internal_28 = local_a2i_aux_at_Parse_internal_53
lw $t0, -216($fp)
sw $t0, -116($fp)
label_ENDIF_184: 
# LOCAL local_a2i_aux_at_Parse_internal_14 --> -60($fp)
# LOCAL local_a2i_aux_at_Parse_internal_28 --> -116($fp)
# local_a2i_aux_at_Parse_internal_14 = local_a2i_aux_at_Parse_internal_28
lw $t0, -116($fp)
sw $t0, -60($fp)
label_ENDIF_174: 
# GOTO label_WHILE_169
j label_WHILE_169
label_WHILE_END_170: 
   # RETURN local_a2i_aux_at_Parse_int_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_a2i_aux_at_Parse.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 240
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# __Main__attrib__g__init implementation.
# @Params:
__Main__attrib__g__init: 
   # Allocate stack frame for function __Main__attrib__g__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__g__init_internal_3 --> -16($fp)
   # local_ttrib__g__init_internal_3 = SELF
   sw $s1, -16($fp)
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__g__init_internal_3 --> -16($fp)
   # local_ttrib__g__init_internal_1 = local_ttrib__g__init_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_ttrib__g__init_internal_1 --> -8($fp)
   # LOCAL local_ttrib__g__init_internal_2 --> -12($fp)
   # local_ttrib__g__init_internal_2 = VCALL local_ttrib__g__init_internal_1 read_input
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 68($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_ttrib__g__init_internal_2
   lw $v0, -12($fp)
   # Deallocate stack frame for function __Main__attrib__g__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_main_at_Main_internal_2 = GETATTRIBUTE g Main
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   lw $t0, 20($s1)
   sw $t0, -12($fp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_0 = local_main_at_Main_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # local_main_at_Main_internal_1 = VCALL local_main_at_Main_internal_0 print_V
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 28($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_main_at_Main_internal_5 = GETATTRIBUTE g Main
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   lw $t0, 20($s1)
   sw $t0, -24($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # local_main_at_Main_internal_3 = local_main_at_Main_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # local_main_at_Main_internal_4 = VCALL local_main_at_Main_internal_3 print_E
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 80($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_main_at_Main_internal_4
   lw $v0, -20($fp)
   # Deallocate stack frame for function function_main_at_Main.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __VList__attrib__car__init implementation.
# @Params:
__VList__attrib__car__init: 
   # Allocate stack frame for function __VList__attrib__car__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __VList__attrib__car__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_VList implementation.
# @Params:
function_isNil_at_VList: 
   # Allocate stack frame for function function_isNil_at_VList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_VList_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_isNil_at_VList_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_isNil_at_VList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_head_at_VList implementation.
# @Params:
function_head_at_VList: 
   # Allocate stack frame for function function_head_at_VList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_head_at_VList_internal_2 --> -12($fp)
   # local_head_at_VList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_head_at_VList_internal_0 --> -4($fp)
   # LOCAL local_head_at_VList_internal_2 --> -12($fp)
   # local_head_at_VList_internal_0 = local_head_at_VList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_head_at_VList_internal_0 --> -4($fp)
   # LOCAL local_head_at_VList_internal_1 --> -8($fp)
   # local_head_at_VList_internal_1 = VCALL local_head_at_VList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_head_at_VList_internal_3 = GETATTRIBUTE car VList
   # LOCAL local_head_at_VList_internal_3 --> -16($fp)
   lw $t0, 12($s1)
   sw $t0, -16($fp)
   # RETURN local_head_at_VList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_head_at_VList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_tail_at_VList implementation.
# @Params:
function_tail_at_VList: 
   # Allocate stack frame for function function_tail_at_VList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_tail_at_VList_internal_2 --> -12($fp)
   # local_tail_at_VList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_tail_at_VList_internal_0 --> -4($fp)
   # LOCAL local_tail_at_VList_internal_2 --> -12($fp)
   # local_tail_at_VList_internal_0 = local_tail_at_VList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_tail_at_VList_internal_0 --> -4($fp)
   # LOCAL local_tail_at_VList_internal_1 --> -8($fp)
   # local_tail_at_VList_internal_1 = VCALL local_tail_at_VList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_tail_at_VList_internal_3 --> -16($fp)
   # local_tail_at_VList_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_tail_at_VList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_tail_at_VList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cons_at_VList implementation.
# @Params:
# 	0($fp) = param_cons_at_VList_v_0
function_cons_at_VList: 
   # Allocate stack frame for function function_cons_at_VList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_cons_at_VList_internal_2 --> -12($fp)
   # local_cons_at_VList_internal_2 = ALLOCATE VCons
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, VCons
   sw $t0, 12($v0)
   li $t0, 5
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, VCons_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 40
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __VList__attrib__car__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __VCons__attrib__cdr__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -12($fp)
   # LOCAL local_cons_at_VList_internal_0 --> -4($fp)
   # LOCAL local_cons_at_VList_internal_2 --> -12($fp)
   # local_cons_at_VList_internal_0 = local_cons_at_VList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cons_at_VList_v_0
   # PARAM param_cons_at_VList_v_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cons_at_VList_internal_3 --> -16($fp)
   # local_cons_at_VList_internal_3 = SELF
   sw $s1, -16($fp)
   # ARG local_cons_at_VList_internal_3
   # LOCAL local_cons_at_VList_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cons_at_VList_internal_0 --> -4($fp)
   # LOCAL local_cons_at_VList_internal_1 --> -8($fp)
   # local_cons_at_VList_internal_1 = VCALL local_cons_at_VList_internal_0 init
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_cons_at_VList_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_cons_at_VList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_print_at_VList implementation.
# @Params:
function_print_at_VList: 
   # Allocate stack frame for function function_print_at_VList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_print_at_VList_internal_2 --> -12($fp)
   # local_print_at_VList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_print_at_VList_internal_0 --> -4($fp)
   # LOCAL local_print_at_VList_internal_2 --> -12($fp)
   # local_print_at_VList_internal_0 = local_print_at_VList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_VList_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_22
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -16($fp)
   # ARG local_print_at_VList_internal_3
   # LOCAL local_print_at_VList_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_VList_internal_0 --> -4($fp)
   # LOCAL local_print_at_VList_internal_1 --> -8($fp)
   # local_print_at_VList_internal_1 = VCALL local_print_at_VList_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_VList_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_print_at_VList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __VCons__attrib__cdr__init implementation.
# @Params:
__VCons__attrib__cdr__init: 
   # Allocate stack frame for function __VCons__attrib__cdr__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __VCons__attrib__cdr__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_VCons implementation.
# @Params:
function_isNil_at_VCons: 
   # Allocate stack frame for function function_isNil_at_VCons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_VCons_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_isNil_at_VCons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_isNil_at_VCons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_head_at_VCons implementation.
# @Params:
function_head_at_VCons: 
   # Allocate stack frame for function function_head_at_VCons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_head_at_VCons_internal_0 = GETATTRIBUTE car VCons
   # LOCAL local_head_at_VCons_internal_0 --> -4($fp)
   lw $t0, 12($s1)
   sw $t0, -4($fp)
   # RETURN local_head_at_VCons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_head_at_VCons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_tail_at_VCons implementation.
# @Params:
function_tail_at_VCons: 
   # Allocate stack frame for function function_tail_at_VCons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_tail_at_VCons_internal_0 = GETATTRIBUTE cdr VCons
   # LOCAL local_tail_at_VCons_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_tail_at_VCons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_tail_at_VCons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_VCons implementation.
# @Params:
# 	0($fp) = param_init_at_VCons_v_0
# 	4($fp) = param_init_at_VCons_rest_1
function_init_at_VCons: 
   # Allocate stack frame for function function_init_at_VCons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_VCons_v_0 --> 4($fp)
   lw $t0, 4($fp)
   sw $t0, 12($s1)
   # 
   # PARAM param_init_at_VCons_rest_1 --> 0($fp)
   lw $t0, 0($fp)
   sw $t0, 16($s1)
   # LOCAL local_init_at_VCons_internal_0 --> -4($fp)
   # local_init_at_VCons_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_VCons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_VCons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# function_print_at_VCons implementation.
# @Params:
function_print_at_VCons: 
   # Allocate stack frame for function function_print_at_VCons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_print_at_VCons_internal_2 = GETATTRIBUTE car VCons
   # LOCAL local_print_at_VCons_internal_2 --> -12($fp)
   lw $t0, 12($s1)
   sw $t0, -12($fp)
   # LOCAL local_print_at_VCons_internal_0 --> -4($fp)
   # LOCAL local_print_at_VCons_internal_2 --> -12($fp)
   # local_print_at_VCons_internal_0 = local_print_at_VCons_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_VCons_internal_0 --> -4($fp)
   # LOCAL local_print_at_VCons_internal_1 --> -8($fp)
   # local_print_at_VCons_internal_1 = VCALL local_print_at_VCons_internal_0 print
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_print_at_VCons_internal_5 = GETATTRIBUTE cdr VCons
   # LOCAL local_print_at_VCons_internal_5 --> -24($fp)
   lw $t0, 16($s1)
   sw $t0, -24($fp)
   # LOCAL local_print_at_VCons_internal_3 --> -16($fp)
   # LOCAL local_print_at_VCons_internal_5 --> -24($fp)
   # local_print_at_VCons_internal_3 = local_print_at_VCons_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_VCons_internal_3 --> -16($fp)
   # LOCAL local_print_at_VCons_internal_4 --> -20($fp)
   # local_print_at_VCons_internal_4 = VCALL local_print_at_VCons_internal_3 print
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_VCons_internal_4
   lw $v0, -20($fp)
   # Deallocate stack frame for function function_print_at_VCons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __EList__attrib__car__init implementation.
# @Params:
__EList__attrib__car__init: 
   # Allocate stack frame for function __EList__attrib__car__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __EList__attrib__car__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_EList implementation.
# @Params:
function_isNil_at_EList: 
   # Allocate stack frame for function function_isNil_at_EList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_EList_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_isNil_at_EList_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_isNil_at_EList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_head_at_EList implementation.
# @Params:
function_head_at_EList: 
   # Allocate stack frame for function function_head_at_EList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_head_at_EList_internal_2 --> -12($fp)
   # local_head_at_EList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_head_at_EList_internal_0 --> -4($fp)
   # LOCAL local_head_at_EList_internal_2 --> -12($fp)
   # local_head_at_EList_internal_0 = local_head_at_EList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_head_at_EList_internal_0 --> -4($fp)
   # LOCAL local_head_at_EList_internal_1 --> -8($fp)
   # local_head_at_EList_internal_1 = VCALL local_head_at_EList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_head_at_EList_internal_3 = GETATTRIBUTE car EList
   # LOCAL local_head_at_EList_internal_3 --> -16($fp)
   lw $t0, 12($s1)
   sw $t0, -16($fp)
   # RETURN local_head_at_EList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_head_at_EList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_tail_at_EList implementation.
# @Params:
function_tail_at_EList: 
   # Allocate stack frame for function function_tail_at_EList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_tail_at_EList_internal_2 --> -12($fp)
   # local_tail_at_EList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_tail_at_EList_internal_0 --> -4($fp)
   # LOCAL local_tail_at_EList_internal_2 --> -12($fp)
   # local_tail_at_EList_internal_0 = local_tail_at_EList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_tail_at_EList_internal_0 --> -4($fp)
   # LOCAL local_tail_at_EList_internal_1 --> -8($fp)
   # local_tail_at_EList_internal_1 = VCALL local_tail_at_EList_internal_0 abort
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 16($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_tail_at_EList_internal_3 --> -16($fp)
   # local_tail_at_EList_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_tail_at_EList_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_tail_at_EList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_cons_at_EList implementation.
# @Params:
# 	0($fp) = param_cons_at_EList_e_0
function_cons_at_EList: 
   # Allocate stack frame for function function_cons_at_EList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_cons_at_EList_internal_2 --> -12($fp)
   # local_cons_at_EList_internal_2 = ALLOCATE ECons
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, ECons
   sw $t0, 12($v0)
   li $t0, 5
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, ECons_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 48
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __EList__attrib__car__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __ECons__attrib__cdr__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -12($fp)
   # LOCAL local_cons_at_EList_internal_0 --> -4($fp)
   # LOCAL local_cons_at_EList_internal_2 --> -12($fp)
   # local_cons_at_EList_internal_0 = local_cons_at_EList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_cons_at_EList_e_0
   # PARAM param_cons_at_EList_e_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cons_at_EList_internal_3 --> -16($fp)
   # local_cons_at_EList_internal_3 = SELF
   sw $s1, -16($fp)
   # ARG local_cons_at_EList_internal_3
   # LOCAL local_cons_at_EList_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_cons_at_EList_internal_0 --> -4($fp)
   # LOCAL local_cons_at_EList_internal_1 --> -8($fp)
   # local_cons_at_EList_internal_1 = VCALL local_cons_at_EList_internal_0 init
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 8($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_cons_at_EList_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_cons_at_EList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_append_at_EList implementation.
# @Params:
# 	0($fp) = param_append_at_EList_l_0
function_append_at_EList: 
# Allocate stack frame for function function_append_at_EList.
subu $sp, $sp, 68
sw $ra, 4($sp)
sw $fp, 0($sp)
addu $fp, $sp, 68
# LOCAL local_append_at_EList_internal_4 --> -20($fp)
# local_append_at_EList_internal_4 = SELF
sw $s1, -20($fp)
# LOCAL local_append_at_EList_internal_2 --> -12($fp)
# LOCAL local_append_at_EList_internal_4 --> -20($fp)
# local_append_at_EList_internal_2 = local_append_at_EList_internal_4
lw $t0, -20($fp)
sw $t0, -12($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_append_at_EList_internal_2 --> -12($fp)
# LOCAL local_append_at_EList_internal_3 --> -16($fp)
# local_append_at_EList_internal_3 = VCALL local_append_at_EList_internal_2 isNil
# Save new self pointer in $s1
lw $s1, -12($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 96($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -16($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_append_at_EList_internal_0 --> -4($fp)
# LOCAL local_append_at_EList_internal_3 --> -16($fp)
# Obtain value from -16($fp)
lw $v0, -16($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_append_at_EList_internal_0 GOTO label_FALSEIF_203
# IF_ZERO local_append_at_EList_internal_0 GOTO label_FALSEIF_203
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_203
# LOCAL local_append_at_EList_internal_1 --> -8($fp)
# PARAM param_append_at_EList_l_0 --> 0($fp)
# local_append_at_EList_internal_1 = PARAM param_append_at_EList_l_0
lw $t0, 0($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_204
j label_ENDIF_204
label_FALSEIF_203: 
   # LOCAL local_append_at_EList_internal_11 --> -48($fp)
   # local_append_at_EList_internal_11 = SELF
   sw $s1, -48($fp)
   # LOCAL local_append_at_EList_internal_9 --> -40($fp)
   # LOCAL local_append_at_EList_internal_11 --> -48($fp)
   # local_append_at_EList_internal_9 = local_append_at_EList_internal_11
   lw $t0, -48($fp)
   sw $t0, -40($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_append_at_EList_internal_9 --> -40($fp)
   # LOCAL local_append_at_EList_internal_10 --> -44($fp)
   # local_append_at_EList_internal_10 = VCALL local_append_at_EList_internal_9 tail
   # Save new self pointer in $s1
   lw $s1, -40($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 84($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -44($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_append_at_EList_internal_7 --> -32($fp)
   # LOCAL local_append_at_EList_internal_10 --> -44($fp)
   # local_append_at_EList_internal_7 = local_append_at_EList_internal_10
   lw $t0, -44($fp)
   sw $t0, -32($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_append_at_EList_l_0
   # PARAM param_append_at_EList_l_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_append_at_EList_internal_7 --> -32($fp)
   # LOCAL local_append_at_EList_internal_8 --> -36($fp)
   # local_append_at_EList_internal_8 = VCALL local_append_at_EList_internal_7 append
   # Save new self pointer in $s1
   lw $s1, -32($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 40($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -36($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_append_at_EList_internal_5 --> -24($fp)
   # LOCAL local_append_at_EList_internal_8 --> -36($fp)
   # local_append_at_EList_internal_5 = local_append_at_EList_internal_8
   lw $t0, -36($fp)
   sw $t0, -24($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_append_at_EList_internal_14 --> -60($fp)
   # local_append_at_EList_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_append_at_EList_internal_12 --> -52($fp)
   # LOCAL local_append_at_EList_internal_14 --> -60($fp)
   # local_append_at_EList_internal_12 = local_append_at_EList_internal_14
   lw $t0, -60($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_append_at_EList_internal_12 --> -52($fp)
   # LOCAL local_append_at_EList_internal_13 --> -56($fp)
   # local_append_at_EList_internal_13 = VCALL local_append_at_EList_internal_12 head
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 24($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # ARG local_append_at_EList_internal_13
   # LOCAL local_append_at_EList_internal_13 --> -56($fp)
   lw $t0, -56($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_append_at_EList_internal_5 --> -24($fp)
   # LOCAL local_append_at_EList_internal_6 --> -28($fp)
   # local_append_at_EList_internal_6 = VCALL local_append_at_EList_internal_5 cons
   # Save new self pointer in $s1
   lw $s1, -24($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 48($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -28($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_append_at_EList_internal_1 --> -8($fp)
   # LOCAL local_append_at_EList_internal_6 --> -28($fp)
   # local_append_at_EList_internal_1 = local_append_at_EList_internal_6
   lw $t0, -28($fp)
   sw $t0, -8($fp)
   label_ENDIF_204: 
# RETURN local_append_at_EList_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_append_at_EList.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 68
# Deallocate function args
addu $sp, $sp, 4
jr $ra
# Function END


# function_print_at_EList implementation.
# @Params:
function_print_at_EList: 
   # Allocate stack frame for function function_print_at_EList.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_print_at_EList_internal_2 --> -12($fp)
   # local_print_at_EList_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_print_at_EList_internal_0 --> -4($fp)
   # LOCAL local_print_at_EList_internal_2 --> -12($fp)
   # local_print_at_EList_internal_0 = local_print_at_EList_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_EList_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_23
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -16($fp)
   # ARG local_print_at_EList_internal_3
   # LOCAL local_print_at_EList_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_EList_internal_0 --> -4($fp)
   # LOCAL local_print_at_EList_internal_1 --> -8($fp)
   # local_print_at_EList_internal_1 = VCALL local_print_at_EList_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_EList_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_print_at_EList.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __ECons__attrib__cdr__init implementation.
# @Params:
__ECons__attrib__cdr__init: 
   # Allocate stack frame for function __ECons__attrib__cdr__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function __ECons__attrib__cdr__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_isNil_at_ECons implementation.
# @Params:
function_isNil_at_ECons: 
   # Allocate stack frame for function function_isNil_at_ECons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_isNil_at_ECons_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_isNil_at_ECons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_isNil_at_ECons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_head_at_ECons implementation.
# @Params:
function_head_at_ECons: 
   # Allocate stack frame for function function_head_at_ECons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_head_at_ECons_internal_0 = GETATTRIBUTE car ECons
   # LOCAL local_head_at_ECons_internal_0 --> -4($fp)
   lw $t0, 12($s1)
   sw $t0, -4($fp)
   # RETURN local_head_at_ECons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_head_at_ECons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_tail_at_ECons implementation.
# @Params:
function_tail_at_ECons: 
   # Allocate stack frame for function function_tail_at_ECons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_tail_at_ECons_internal_0 = GETATTRIBUTE cdr ECons
   # LOCAL local_tail_at_ECons_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_tail_at_ECons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_tail_at_ECons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_ECons implementation.
# @Params:
# 	0($fp) = param_init_at_ECons_e_0
# 	4($fp) = param_init_at_ECons_rest_1
function_init_at_ECons: 
   # Allocate stack frame for function function_init_at_ECons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_ECons_e_0 --> 4($fp)
   lw $t0, 4($fp)
   sw $t0, 12($s1)
   # 
   # PARAM param_init_at_ECons_rest_1 --> 0($fp)
   lw $t0, 0($fp)
   sw $t0, 16($s1)
   # LOCAL local_init_at_ECons_internal_0 --> -4($fp)
   # local_init_at_ECons_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_ECons_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_ECons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 8
   jr $ra
   # Function END


# function_print_at_ECons implementation.
# @Params:
function_print_at_ECons: 
   # Allocate stack frame for function function_print_at_ECons.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_print_at_ECons_internal_2 = GETATTRIBUTE car ECons
   # LOCAL local_print_at_ECons_internal_2 --> -12($fp)
   lw $t0, 12($s1)
   sw $t0, -12($fp)
   # LOCAL local_print_at_ECons_internal_0 --> -4($fp)
   # LOCAL local_print_at_ECons_internal_2 --> -12($fp)
   # local_print_at_ECons_internal_0 = local_print_at_ECons_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_ECons_internal_0 --> -4($fp)
   # LOCAL local_print_at_ECons_internal_1 --> -8($fp)
   # local_print_at_ECons_internal_1 = VCALL local_print_at_ECons_internal_0 print
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_print_at_ECons_internal_5 = GETATTRIBUTE cdr ECons
   # LOCAL local_print_at_ECons_internal_5 --> -24($fp)
   lw $t0, 16($s1)
   sw $t0, -24($fp)
   # LOCAL local_print_at_ECons_internal_3 --> -16($fp)
   # LOCAL local_print_at_ECons_internal_5 --> -24($fp)
   # local_print_at_ECons_internal_3 = local_print_at_ECons_internal_5
   lw $t0, -24($fp)
   sw $t0, -16($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_ECons_internal_3 --> -16($fp)
   # LOCAL local_print_at_ECons_internal_4 --> -20($fp)
   # local_print_at_ECons_internal_4 = VCALL local_print_at_ECons_internal_3 print
   # Save new self pointer in $s1
   lw $s1, -16($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -20($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_ECons_internal_4
   lw $v0, -20($fp)
   # Deallocate stack frame for function function_print_at_ECons.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Edge__attrib__from__init implementation.
# @Params:
__Edge__attrib__from__init: 
   # Allocate stack frame for function __Edge__attrib__from__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__from__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_ttrib__from__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Edge__attrib__from__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Edge__attrib__to__init implementation.
# @Params:
__Edge__attrib__to__init: 
   # Allocate stack frame for function __Edge__attrib__to__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__to__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_ttrib__to__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Edge__attrib__to__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Edge__attrib__weight__init implementation.
# @Params:
__Edge__attrib__weight__init: 
   # Allocate stack frame for function __Edge__attrib__weight__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_ttrib__weight__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_ttrib__weight__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Edge__attrib__weight__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_Edge implementation.
# @Params:
# 	0($fp) = param_init_at_Edge_f_0
# 	4($fp) = param_init_at_Edge_t_1
# 	8($fp) = param_init_at_Edge_w_2
function_init_at_Edge: 
   # Allocate stack frame for function function_init_at_Edge.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_Edge_f_0 --> 8($fp)
   lw $t0, 8($fp)
   sw $t0, 12($s1)
   # 
   # PARAM param_init_at_Edge_t_1 --> 4($fp)
   lw $t0, 4($fp)
   sw $t0, 16($s1)
   # 
   # PARAM param_init_at_Edge_w_2 --> 0($fp)
   lw $t0, 0($fp)
   sw $t0, 20($s1)
   # LOCAL local_init_at_Edge_internal_0 --> -4($fp)
   # local_init_at_Edge_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_Edge_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_Edge.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 12
   jr $ra
   # Function END


# function_print_at_Edge implementation.
# @Params:
function_print_at_Edge: 
   # Allocate stack frame for function function_print_at_Edge.
   subu $sp, $sp, 104
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 104
   # LOCAL local_print_at_Edge_internal_2 --> -12($fp)
   # local_print_at_Edge_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_print_at_Edge_internal_0 --> -4($fp)
   # LOCAL local_print_at_Edge_internal_2 --> -12($fp)
   # local_print_at_Edge_internal_0 = local_print_at_Edge_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Edge_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_24
   sw $t0, 12($v0)
   li $t0, 2
   sw $t0, 16($v0)
   sw $v0, -16($fp)
   # ARG local_print_at_Edge_internal_3
   # LOCAL local_print_at_Edge_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Edge_internal_0 --> -4($fp)
   # LOCAL local_print_at_Edge_internal_1 --> -8($fp)
   # local_print_at_Edge_internal_1 = VCALL local_print_at_Edge_internal_0 out_string
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Edge_internal_6 --> -28($fp)
   # local_print_at_Edge_internal_6 = SELF
   sw $s1, -28($fp)
   # LOCAL local_print_at_Edge_internal_4 --> -20($fp)
   # LOCAL local_print_at_Edge_internal_6 --> -28($fp)
   # local_print_at_Edge_internal_4 = local_print_at_Edge_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Edge_internal_7 = GETATTRIBUTE from Edge
   # LOCAL local_print_at_Edge_internal_7 --> -32($fp)
   lw $t0, 12($s1)
   sw $t0, -32($fp)
   # ARG local_print_at_Edge_internal_7
   # LOCAL local_print_at_Edge_internal_7 --> -32($fp)
   lw $t0, -32($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Edge_internal_4 --> -20($fp)
   # LOCAL local_print_at_Edge_internal_5 --> -24($fp)
   # local_print_at_Edge_internal_5 = VCALL local_print_at_Edge_internal_4 out_int
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 20($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Edge_internal_10 --> -44($fp)
   # local_print_at_Edge_internal_10 = SELF
   sw $s1, -44($fp)
   # LOCAL local_print_at_Edge_internal_8 --> -36($fp)
   # LOCAL local_print_at_Edge_internal_10 --> -44($fp)
   # local_print_at_Edge_internal_8 = local_print_at_Edge_internal_10
   lw $t0, -44($fp)
   sw $t0, -36($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Edge_internal_11 --> -48($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_25
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -48($fp)
   # ARG local_print_at_Edge_internal_11
   # LOCAL local_print_at_Edge_internal_11 --> -48($fp)
   lw $t0, -48($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Edge_internal_8 --> -36($fp)
   # LOCAL local_print_at_Edge_internal_9 --> -40($fp)
   # local_print_at_Edge_internal_9 = VCALL local_print_at_Edge_internal_8 out_string
   # Save new self pointer in $s1
   lw $s1, -36($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -40($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Edge_internal_14 --> -60($fp)
   # local_print_at_Edge_internal_14 = SELF
   sw $s1, -60($fp)
   # LOCAL local_print_at_Edge_internal_12 --> -52($fp)
   # LOCAL local_print_at_Edge_internal_14 --> -60($fp)
   # local_print_at_Edge_internal_12 = local_print_at_Edge_internal_14
   lw $t0, -60($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Edge_internal_15 = GETATTRIBUTE to Edge
   # LOCAL local_print_at_Edge_internal_15 --> -64($fp)
   lw $t0, 16($s1)
   sw $t0, -64($fp)
   # ARG local_print_at_Edge_internal_15
   # LOCAL local_print_at_Edge_internal_15 --> -64($fp)
   lw $t0, -64($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Edge_internal_12 --> -52($fp)
   # LOCAL local_print_at_Edge_internal_13 --> -56($fp)
   # local_print_at_Edge_internal_13 = VCALL local_print_at_Edge_internal_12 out_int
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 20($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Edge_internal_18 --> -76($fp)
   # local_print_at_Edge_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_print_at_Edge_internal_16 --> -68($fp)
   # LOCAL local_print_at_Edge_internal_18 --> -76($fp)
   # local_print_at_Edge_internal_16 = local_print_at_Edge_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Edge_internal_19 --> -80($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_26
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -80($fp)
   # ARG local_print_at_Edge_internal_19
   # LOCAL local_print_at_Edge_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Edge_internal_16 --> -68($fp)
   # LOCAL local_print_at_Edge_internal_17 --> -72($fp)
   # local_print_at_Edge_internal_17 = VCALL local_print_at_Edge_internal_16 out_string
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 104($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Edge_internal_22 --> -92($fp)
   # local_print_at_Edge_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_print_at_Edge_internal_20 --> -84($fp)
   # LOCAL local_print_at_Edge_internal_22 --> -92($fp)
   # local_print_at_Edge_internal_20 = local_print_at_Edge_internal_22
   lw $t0, -92($fp)
   sw $t0, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Edge_internal_23 = GETATTRIBUTE weight Edge
   # LOCAL local_print_at_Edge_internal_23 --> -96($fp)
   lw $t0, 20($s1)
   sw $t0, -96($fp)
   # ARG local_print_at_Edge_internal_23
   # LOCAL local_print_at_Edge_internal_23 --> -96($fp)
   lw $t0, -96($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Edge_internal_20 --> -84($fp)
   # LOCAL local_print_at_Edge_internal_21 --> -88($fp)
   # local_print_at_Edge_internal_21 = VCALL local_print_at_Edge_internal_20 out_int
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 20($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_Edge_internal_21
   lw $v0, -88($fp)
   # Deallocate stack frame for function function_print_at_Edge.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 104
   jr $ra
   # Function END


# __Vertice__attrib__num__init implementation.
# @Params:
__Vertice__attrib__num__init: 
   # Allocate stack frame for function __Vertice__attrib__num__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local___attrib__num__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local___attrib__num__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Vertice__attrib__num__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Vertice__attrib__out__init implementation.
# @Params:
__Vertice__attrib__out__init: 
   # Allocate stack frame for function __Vertice__attrib__out__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local___attrib__out__init_internal_1 --> -8($fp)
   # local___attrib__out__init_internal_1 = ALLOCATE EList
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, EList
   sw $t0, 12($v0)
   li $t0, 5
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, EList_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 44
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __EList__attrib__car__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -8($fp)
   # RETURN local___attrib__out__init_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function __Vertice__attrib__out__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_outgoing_at_Vertice implementation.
# @Params:
function_outgoing_at_Vertice: 
   # Allocate stack frame for function function_outgoing_at_Vertice.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_outgoing_at_Vertice_internal_0 = GETATTRIBUTE out Vertice
   # LOCAL local_outgoing_at_Vertice_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # RETURN local_outgoing_at_Vertice_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_outgoing_at_Vertice.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_number_at_Vertice implementation.
# @Params:
function_number_at_Vertice: 
   # Allocate stack frame for function function_number_at_Vertice.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_number_at_Vertice_internal_0 = GETATTRIBUTE num Vertice
   # LOCAL local_number_at_Vertice_internal_0 --> -4($fp)
   lw $t0, 12($s1)
   sw $t0, -4($fp)
   # RETURN local_number_at_Vertice_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_number_at_Vertice.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_Vertice implementation.
# @Params:
# 	0($fp) = param_init_at_Vertice_n_0
function_init_at_Vertice: 
   # Allocate stack frame for function function_init_at_Vertice.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # 
   # PARAM param_init_at_Vertice_n_0 --> 0($fp)
   lw $t0, 0($fp)
   sw $t0, 12($s1)
   # LOCAL local_init_at_Vertice_internal_0 --> -4($fp)
   # local_init_at_Vertice_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_init_at_Vertice_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_init_at_Vertice.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_add_out_at_Vertice implementation.
# @Params:
# 	0($fp) = param_add_out_at_Vertice_s_0
function_add_out_at_Vertice: 
   # Allocate stack frame for function function_add_out_at_Vertice.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_add_out_at_Vertice_internal_2 = GETATTRIBUTE out Vertice
   # LOCAL local_add_out_at_Vertice_internal_2 --> -12($fp)
   lw $t0, 16($s1)
   sw $t0, -12($fp)
   # LOCAL local_add_out_at_Vertice_internal_0 --> -4($fp)
   # LOCAL local_add_out_at_Vertice_internal_2 --> -12($fp)
   # local_add_out_at_Vertice_internal_0 = local_add_out_at_Vertice_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # ARG param_add_out_at_Vertice_s_0
   # PARAM param_add_out_at_Vertice_s_0 --> 0($fp)
   lw $t0, 0($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_add_out_at_Vertice_internal_0 --> -4($fp)
   # LOCAL local_add_out_at_Vertice_internal_1 --> -8($fp)
   # local_add_out_at_Vertice_internal_1 = VCALL local_add_out_at_Vertice_internal_0 cons
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 48($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # 
   # LOCAL local_add_out_at_Vertice_internal_1 --> -8($fp)
   lw $t0, -8($fp)
   sw $t0, 16($s1)
   # LOCAL local_add_out_at_Vertice_internal_3 --> -16($fp)
   # local_add_out_at_Vertice_internal_3 = SELF
   sw $s1, -16($fp)
   # RETURN local_add_out_at_Vertice_internal_3
   lw $v0, -16($fp)
   # Deallocate stack frame for function function_add_out_at_Vertice.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_print_at_Vertice implementation.
# @Params:
function_print_at_Vertice: 
   # Allocate stack frame for function function_print_at_Vertice.
   subu $sp, $sp, 36
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 36
   # LOCAL local_print_at_Vertice_internal_2 --> -12($fp)
   # local_print_at_Vertice_internal_2 = SELF
   sw $s1, -12($fp)
   # LOCAL local_print_at_Vertice_internal_0 --> -4($fp)
   # LOCAL local_print_at_Vertice_internal_2 --> -12($fp)
   # local_print_at_Vertice_internal_0 = local_print_at_Vertice_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Vertice_internal_3 = GETATTRIBUTE num Vertice
   # LOCAL local_print_at_Vertice_internal_3 --> -16($fp)
   lw $t0, 12($s1)
   sw $t0, -16($fp)
   # ARG local_print_at_Vertice_internal_3
   # LOCAL local_print_at_Vertice_internal_3 --> -16($fp)
   lw $t0, -16($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Vertice_internal_0 --> -4($fp)
   # LOCAL local_print_at_Vertice_internal_1 --> -8($fp)
   # local_print_at_Vertice_internal_1 = VCALL local_print_at_Vertice_internal_0 out_int
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 20($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -8($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # local_print_at_Vertice_internal_6 = GETATTRIBUTE out Vertice
   # LOCAL local_print_at_Vertice_internal_6 --> -28($fp)
   lw $t0, 16($s1)
   sw $t0, -28($fp)
   # LOCAL local_print_at_Vertice_internal_4 --> -20($fp)
   # LOCAL local_print_at_Vertice_internal_6 --> -28($fp)
   # local_print_at_Vertice_internal_4 = local_print_at_Vertice_internal_6
   lw $t0, -28($fp)
   sw $t0, -20($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Vertice_internal_4 --> -20($fp)
   # LOCAL local_print_at_Vertice_internal_5 --> -24($fp)
   # local_print_at_Vertice_internal_5 = VCALL local_print_at_Vertice_internal_4 print
   # Save new self pointer in $s1
   lw $s1, -20($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 92($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -24($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # RETURN local_print_at_Vertice_internal_5
   lw $v0, -24($fp)
   # Deallocate stack frame for function function_print_at_Vertice.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 36
   jr $ra
   # Function END

