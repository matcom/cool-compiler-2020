.text
.globl main
main:
# Save method directions in the methods array
la $v0, methods
la $t9, entry
sw $t9, 0($v0)
la $t9, function_abort_Object
sw $t9, 4($v0)
la $t9, function_type_name_Object
sw $t9, 8($v0)
la $t9, function_copy_Object
sw $t9, 12($v0)
la $t9, function_out_string_IO
sw $t9, 16($v0)
la $t9, function_out_int_IO
sw $t9, 20($v0)
la $t9, function_in_int_IO
sw $t9, 24($v0)
la $t9, function_in_string_IO
sw $t9, 28($v0)
la $t9, function_length_String
sw $t9, 32($v0)
la $t9, function_concat_String
sw $t9, 36($v0)
la $t9, function_substr_String
sw $t9, 40($v0)
la $t9, function_type_name_String
sw $t9, 44($v0)
la $t9, function_copy_String
sw $t9, 48($v0)
la $t9, function_type_name_Int
sw $t9, 52($v0)
la $t9, function_copy_Int
sw $t9, 56($v0)
la $t9, function_type_name_Bool
sw $t9, 60($v0)
la $t9, function_copy_Bool
sw $t9, 64($v0)
la $t9, function_abort_String
sw $t9, 68($v0)
la $t9, function_abort_Int
sw $t9, 72($v0)
la $t9, function_abort_Bool
sw $t9, 76($v0)
la $t9, function_Graph_Graph
sw $t9, 80($v0)
la $t9, function_add_vertice_Graph
sw $t9, 84($v0)
la $t9, function_print_E_Graph
sw $t9, 88($v0)
la $t9, function_print_V_Graph
sw $t9, 92($v0)
la $t9, function_Vertice_Vertice
sw $t9, 96($v0)
la $t9, function_outgoing_Vertice
sw $t9, 100($v0)
la $t9, function_number_Vertice
sw $t9, 104($v0)
la $t9, function_init_Vertice
sw $t9, 108($v0)
la $t9, function_add_out_Vertice
sw $t9, 112($v0)
la $t9, function_print_Vertice
sw $t9, 116($v0)
la $t9, function_Edge_Edge
sw $t9, 120($v0)
la $t9, function_init_Edge
sw $t9, 124($v0)
la $t9, function_print_Edge
sw $t9, 128($v0)
la $t9, function_EList_EList
sw $t9, 132($v0)
la $t9, function_isNil_EList
sw $t9, 136($v0)
la $t9, function_head_EList
sw $t9, 140($v0)
la $t9, function_tail_EList
sw $t9, 144($v0)
la $t9, function_cons_EList
sw $t9, 148($v0)
la $t9, function_append_EList
sw $t9, 152($v0)
la $t9, function_print_EList
sw $t9, 156($v0)
la $t9, function_ECons_ECons
sw $t9, 160($v0)
la $t9, function_isNil_ECons
sw $t9, 164($v0)
la $t9, function_head_ECons
sw $t9, 168($v0)
la $t9, function_tail_ECons
sw $t9, 172($v0)
la $t9, function_init_ECons
sw $t9, 176($v0)
la $t9, function_print_ECons
sw $t9, 180($v0)
la $t9, function_VList_VList
sw $t9, 184($v0)
la $t9, function_isNil_VList
sw $t9, 188($v0)
la $t9, function_head_VList
sw $t9, 192($v0)
la $t9, function_tail_VList
sw $t9, 196($v0)
la $t9, function_cons_VList
sw $t9, 200($v0)
la $t9, function_print_VList
sw $t9, 204($v0)
la $t9, function_VCons_VCons
sw $t9, 208($v0)
la $t9, function_isNil_VCons
sw $t9, 212($v0)
la $t9, function_head_VCons
sw $t9, 216($v0)
la $t9, function_tail_VCons
sw $t9, 220($v0)
la $t9, function_init_VCons
sw $t9, 224($v0)
la $t9, function_print_VCons
sw $t9, 228($v0)
la $t9, function_Parse_Parse
sw $t9, 232($v0)
la $t9, function_read_input_Parse
sw $t9, 236($v0)
la $t9, function_parse_line_Parse
sw $t9, 240($v0)
la $t9, function_c2i_Parse
sw $t9, 244($v0)
la $t9, function_a2i_Parse
sw $t9, 248($v0)
la $t9, function_a2i_aux_Parse
sw $t9, 252($v0)
la $t9, function_Main_Main
sw $t9, 256($v0)
la $t9, function_main_Main
sw $t9, 260($v0)
la $t9, function_and_BoolOp
sw $t9, 264($v0)
la $t9, function_or_BoolOp
sw $t9, 268($v0)
# Save types directions in the types array
la $t9, types
# Save space to locate the type info
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_String
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 0($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 28
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_length_String in a0
lw $a0, 32($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_concat_String in a0
lw $a0, 36($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_substr_String in a0
lw $a0, 40($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_abort_String in a0
lw $a0, 68($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_type_name_String in a0
lw $a0, 44($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_copy_String in a0
lw $a0, 48($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Int
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 4($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Int in a0
lw $a0, 72($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Int in a0
lw $a0, 52($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Int in a0
lw $a0, 56($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Object
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 8($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bool
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 12($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Bool in a0
lw $a0, 76($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Bool in a0
lw $a0, 60($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Bool in a0
lw $a0, 64($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_IO
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 16($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Graph
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 20($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_add_vertice_Graph in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_print_E_Graph in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_print_V_Graph in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_Graph_Graph in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Vertice
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 24($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 56
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_outgoing_Vertice in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_number_Vertice in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_init_Vertice in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_add_out_Vertice in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_print_Vertice in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_Vertice_Vertice in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Edge
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 28($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 44
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_init_Edge in a0
lw $a0, 124($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_print_Edge in a0
lw $a0, 128($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Edge_Edge in a0
lw $a0, 120($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_EList
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 32($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 60
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_isNil_EList in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_head_EList in a0
lw $a0, 140($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_tail_EList in a0
lw $a0, 144($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_cons_EList in a0
lw $a0, 148($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_append_EList in a0
lw $a0, 152($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_print_EList in a0
lw $a0, 156($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_EList_EList in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_ECons
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 36($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 68
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_isNil_ECons in a0
lw $a0, 164($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_head_ECons in a0
lw $a0, 168($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_tail_ECons in a0
lw $a0, 172($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_cons_EList in a0
lw $a0, 148($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_append_EList in a0
lw $a0, 152($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_print_ECons in a0
lw $a0, 180($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_EList_EList in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_init_ECons in a0
lw $a0, 176($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
# Save the direction of the method function_ECons_ECons in a0
lw $a0, 160($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 64($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_VList
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 40($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 56
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_isNil_VList in a0
lw $a0, 188($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_head_VList in a0
lw $a0, 192($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_tail_VList in a0
lw $a0, 196($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_cons_VList in a0
lw $a0, 200($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_print_VList in a0
lw $a0, 204($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_VList_VList in a0
lw $a0, 184($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_VCons
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 44($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 64
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_isNil_VCons in a0
lw $a0, 212($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_head_VCons in a0
lw $a0, 216($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_tail_VCons in a0
lw $a0, 220($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_cons_VList in a0
lw $a0, 200($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_print_VCons in a0
lw $a0, 228($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_VList_VList in a0
lw $a0, 184($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_init_VCons in a0
lw $a0, 224($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_VCons_VCons in a0
lw $a0, 208($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Parse
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 48($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 56
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_read_input_Parse in a0
lw $a0, 236($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_parse_line_Parse in a0
lw $a0, 240($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_c2i_Parse in a0
lw $a0, 244($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_a2i_Parse in a0
lw $a0, 248($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_a2i_aux_Parse in a0
lw $a0, 252($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_Parse_Parse in a0
lw $a0, 232($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Main
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 52($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 64
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_read_input_Parse in a0
lw $a0, 236($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_parse_line_Parse in a0
lw $a0, 240($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_c2i_Parse in a0
lw $a0, 244($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_a2i_Parse in a0
lw $a0, 248($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_a2i_aux_Parse in a0
lw $a0, 252($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_Parse_Parse in a0
lw $a0, 232($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_main_Main in a0
lw $a0, 260($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_Main_Main in a0
lw $a0, 256($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_BoolOp
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 56($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 24
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_and_BoolOp in a0
lw $a0, 264($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_or_BoolOp in a0
lw $a0, 268($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
sw $v0, 8($t8)
# Copying parents
lw $v0, 0($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 4($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 8($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 12($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 16($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 20($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 24($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 28($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 32($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 36($t9)
lw $t8, 32($t9)
sw $t8, 4($v0)
lw $v0, 40($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 44($t9)
lw $t8, 40($t9)
sw $t8, 4($v0)
lw $v0, 48($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 52($t9)
lw $t8, 48($t9)
sw $t8, 4($v0)
lw $v0, 56($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)

entry:
# Gets the params from the stack
move $fp, $sp
# Gets the frame pointer from the stack
# Updates stack pointer pushing local__internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local__internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 24
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Main
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 24
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 52($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
# This function will consume the arguments
jal function_Main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# Static Dispatch of the method main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
li $v0, 0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Object_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_abort_Object_self_0
move $t1, $t0
sw $t1, -4($fp)
# Exiting the program
li $t8, 0
# Printing abort message
li $v0, 4
la $a0, abort_msg
syscall
li $v0, 4
lw $a0, 0($t0)
syscall
li $v0, 4
la $a0, new_line
syscall
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)
sw $t1, -4($fp)

function_type_name_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_type_name_Object_result_0 <- Type of self
lw $t1, 0($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t9, 4($t0)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
move $a0, $t9
syscall
move $t1, $v0
# Loop to copy every field of the previous object
# t8 the register to loop
li $t8, 0
loop_0:
# In t9 is stored the size of the object
bge $t8, $t9, exit_0
lw $a0, ($t0)
sw $a0, ($v0)
addi $v0, $v0, 4
addi $t0, $t0, 4
# Increase loop counter
addi $t8, $t8, 4
j loop_0
exit_0:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_out_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_string_String_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_string_String_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing a string
li $v0, 4
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_out_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value number
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_int_IO_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_int_IO_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing an int
li $v0, 1
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_in_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_int_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Reading a int
li $v0, 5
syscall
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_in_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_string_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t0, $v0
# Reading a string
# Putting buffer in a0
move $a0, $t0
# Putting length of string in a1
li $a1, 356
li $v0, 8
syscall
# Walks to eliminate the newline
move $t9, $t0
start_1:
lb $t8, 0($t9)
beqz $t8, end_1
add $t9, $t9, 1
j start_1
end_1:
addiu $t9, $t9, -1
sb $0, ($t9)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_length_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_length_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
move $t8, $t0
# Determining the length of a string
loop_2:
lb $t9, 0($t8)
beq $t9, $zero, end_2
addi $t8, $t8, 1
j loop_2
end_2:
sub $t1, $t8, $t0
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_concat_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_concat_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -8($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t2
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
# Concatenate second string on result buffer
move $a0, $t1
move $a1, $v0
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_3
# Definition of strcopier
strcopier:
# In a0 is the source and in a1 is the destination
loop_3:
lb $t8, ($a0)
beq $t8, $zero, end_3
addiu $a0, $a0, 1
sb $t8, ($a1)
addiu $a1, $a1, 1
b loop_3
end_3:
move $v0, $a1
jr $ra
finish_3:
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_substr_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value begin
addiu $fp, $fp, 4
# Pops the register with the param value end
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_substr_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
lw $t3, -8($fp)
# Getting the substring of a node
# Move to the first position in the string
li $v0, 0
move $t8, $t3
start_4:
lb $t9, 0($t8)
beqz $t9, error_4
addi $v0, 1
bgt $v0, $t0, end_len_4
addi $t8, 1
j start_4
end_len_4:
# Saving dest to iterate over him
move $v0, $t2
loop_4:
sub $t9, $v0, $t2
beq $t9, $t1, end_4
lb $t9, 0($t8)
beqz $t9, error_4
sb $t9, 0($v0)
addi $t8, $t8, 1
addi $v0, $v0, 1
j loop_4
error_4:
la $a0, index_error
li $v0, 4
move $a0, $t3
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 1
move $a0, $t1
syscall
j .raise
end_4:
sb $0, 0($v0)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_type_name_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_String_result_0 type_String
la $t0, type_String
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t1, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t1
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_5
finish_5:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Int_result_0 type_Int
la $t0, type_Int
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_Int_result_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Bool_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Bool_result_0 type_Bool
la $t0, type_Bool
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_result_Bool_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_result_Bool_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_String_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self string_abort
la $t0, string_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Int_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self int_abort
la $t0, int_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Bool_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self bool_abort
la $t0, bool_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_Graph_Graph:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Graph_Graph_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Graph_Graph_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Graph_Graph_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_VList
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t0)
# Static Dispatch of the method VList
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# This function will consume the arguments
jal function_VList_VList
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . vertices <- SET local_Graph_Graph_internal_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_EList
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t2)
# Static Dispatch of the method EList
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal function_EList_EList
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . edges <- SET local_Graph_Graph_internal_1
sw $t0, 16($t1)
lw $t2, -12($fp)
# Moving self to local_Graph_Graph_internal_2
move $t2, $t1
sw $t2, -12($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_add_vertice_Graph:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value v
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_add_vertice_Graph_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_edges_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_vertices_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_vertice_Graph_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -12($fp)
# local_add_vertice_Graph_internal_1 <- Type of v
lw $t1, 0($t0)
lw $t2, -16($fp)
# Saves in local_add_vertice_Graph_internal_2 data_0
la $t2, data_0
# local_add_vertice_Graph_internal_1 <- local_add_vertice_Graph_internal_1 = local_add_vertice_Graph_internal_2
move $t8, $t1
move $t9, $t2
loop_6:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_6
beqz $a1, mismatch_6
seq $v0, $a0, $a1
beqz $v0, mismatch_6
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_6
mismatch_6:
li $v0, 0
j end_6
check_6:
bnez $a1, mismatch_6
li $v0, 1
end_6:
move $t1, $v0
# If not local_add_vertice_Graph_internal_1 goto continue__65
sw $t0, -0($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
beqz $t1, continue__65
la $a0, dispatch_error
j .raise
continue__65:
lw $t0, -0($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_outgoing_Vertice
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -20($fp)
# local_add_vertice_Graph_edges_3 <- GET self . edges
lw $t2, 16($t1)
lw $t3, -28($fp)
# local_add_vertice_Graph_internal_5 <- Type of local_add_vertice_Graph_internal_0
lw $t3, 0($t0)
lw $t4, -32($fp)
# Saves in local_add_vertice_Graph_internal_6 data_0
la $t4, data_0
# local_add_vertice_Graph_internal_5 <- local_add_vertice_Graph_internal_5 = local_add_vertice_Graph_internal_6
move $t8, $t3
move $t9, $t4
loop_7:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_7
beqz $a1, mismatch_7
seq $v0, $a0, $a1
beqz $v0, mismatch_7
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_7
mismatch_7:
li $v0, 0
j end_7
check_7:
bnez $a1, mismatch_7
li $v0, 1
end_7:
move $t3, $v0
# If not local_add_vertice_Graph_internal_5 goto continue__80
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -20($fp)
sw $t3, -28($fp)
sw $t4, -32($fp)
beqz $t3, continue__80
la $a0, dispatch_error
j .raise
continue__80:
lw $t0, -8($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_append_EList
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -20($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -24($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# self . edges <- SET local_add_vertice_Graph_internal_4
sw $t0, 16($t1)
lw $t2, -36($fp)
# local_add_vertice_Graph_vertices_7 <- GET self . vertices
lw $t2, 12($t1)
lw $t3, -44($fp)
# local_add_vertice_Graph_internal_9 <- Type of local_add_vertice_Graph_vertices_7
lw $t3, 0($t2)
lw $t4, -48($fp)
# Saves in local_add_vertice_Graph_internal_10 data_0
la $t4, data_0
# local_add_vertice_Graph_internal_9 <- local_add_vertice_Graph_internal_9 = local_add_vertice_Graph_internal_10
move $t8, $t3
move $t9, $t4
loop_8:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_8
beqz $a1, mismatch_8
seq $v0, $a0, $a1
beqz $v0, mismatch_8
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_8
mismatch_8:
li $v0, 0
j end_8
check_8:
bnez $a1, mismatch_8
li $v0, 1
end_8:
move $t3, $v0
# If not local_add_vertice_Graph_internal_9 goto continue__96
sw $t0, -24($fp)
sw $t1, -4($fp)
sw $t2, -36($fp)
sw $t3, -44($fp)
sw $t4, -48($fp)
beqz $t3, continue__96
la $a0, dispatch_error
j .raise
continue__96:
lw $t0, -36($fp)
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cons_VList
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -40($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# self . vertices <- SET local_add_vertice_Graph_internal_8
sw $t0, 12($t1)
lw $t2, -52($fp)
# Moving local_add_vertice_Graph_internal_8 to local_add_vertice_Graph_internal_11
move $t2, $t0
sw $t2, -52($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -4($fp)
sw $t2, -52($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_print_E_Graph:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_E_Graph_edges_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_E_Graph_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_E_Graph_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_E_Graph_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_print_E_Graph_edges_0 <- GET self . edges
lw $t1, 16($t0)
lw $t2, -12($fp)
# local_print_E_Graph_internal_2 <- Type of local_print_E_Graph_edges_0
lw $t2, 0($t1)
lw $t3, -16($fp)
# Saves in local_print_E_Graph_internal_3 data_0
la $t3, data_0
# local_print_E_Graph_internal_2 <- local_print_E_Graph_internal_2 = local_print_E_Graph_internal_3
move $t8, $t2
move $t9, $t3
loop_9:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_9
beqz $a1, mismatch_9
seq $v0, $a0, $a1
beqz $v0, mismatch_9
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_9
mismatch_9:
li $v0, 0
j end_9
check_9:
bnez $a1, mismatch_9
li $v0, 1
end_9:
move $t2, $v0
# If not local_print_E_Graph_internal_2 goto continue__116
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
beqz $t2, continue__116
la $a0, dispatch_error
j .raise
continue__116:
lw $t0, -4($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_EList
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_print_V_Graph:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_V_Graph_vertices_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_V_Graph_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_V_Graph_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_V_Graph_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_print_V_Graph_vertices_0 <- GET self . vertices
lw $t1, 12($t0)
lw $t2, -12($fp)
# local_print_V_Graph_internal_2 <- Type of local_print_V_Graph_vertices_0
lw $t2, 0($t1)
lw $t3, -16($fp)
# Saves in local_print_V_Graph_internal_3 data_0
la $t3, data_0
# local_print_V_Graph_internal_2 <- local_print_V_Graph_internal_2 = local_print_V_Graph_internal_3
move $t8, $t2
move $t9, $t3
loop_10:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_10
beqz $a1, mismatch_10
seq $v0, $a0, $a1
beqz $v0, mismatch_10
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_10
mismatch_10:
li $v0, 0
j end_10
check_10:
bnez $a1, mismatch_10
li $v0, 1
end_10:
move $t2, $v0
# If not local_print_V_Graph_internal_2 goto continue__133
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
beqz $t2, continue__133
la $a0, dispatch_error
j .raise
continue__133:
lw $t0, -4($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_VList
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_Vertice_Vertice:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Vertice_Vertice_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Vertice_Vertice_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . num <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_EList
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t1, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t1)
# Static Dispatch of the method EList
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal function_EList_EList
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . out <- SET local_Vertice_Vertice_internal_0
sw $t0, 16($t1)
lw $t2, -8($fp)
# Moving self to local_Vertice_Vertice_internal_1
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_outgoing_Vertice:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_outgoing_Vertice_out_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_outgoing_Vertice_out_0 <- GET self . out
lw $t1, 16($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_number_Vertice:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_number_Vertice_num_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_number_Vertice_num_0 <- GET self . num
lw $t1, 12($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_init_Vertice:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value n
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_init_Vertice_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# self . num <- SET n
sw $t0, 12($t1)
lw $t2, -8($fp)
# Moving self to local_init_Vertice_internal_0
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_add_out_Vertice:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_add_out_Vertice_out_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_out_Vertice_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_out_Vertice_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_out_Vertice_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_add_out_Vertice_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# local_add_out_Vertice_out_0 <- GET self . out
lw $t1, 16($t0)
lw $t2, -16($fp)
# local_add_out_Vertice_internal_2 <- Type of local_add_out_Vertice_out_0
lw $t2, 0($t1)
lw $t3, -20($fp)
# Saves in local_add_out_Vertice_internal_3 data_0
la $t3, data_0
# local_add_out_Vertice_internal_2 <- local_add_out_Vertice_internal_2 = local_add_out_Vertice_internal_3
move $t8, $t2
move $t9, $t3
loop_11:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_11
beqz $a1, mismatch_11
seq $v0, $a0, $a1
beqz $v0, mismatch_11
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_11
mismatch_11:
li $v0, 0
j end_11
check_11:
bnez $a1, mismatch_11
li $v0, 1
end_11:
move $t2, $v0
# If not local_add_out_Vertice_internal_2 goto continue__179
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -16($fp)
sw $t3, -20($fp)
beqz $t2, continue__179
la $a0, dispatch_error
j .raise
continue__179:
lw $t0, -8($fp)
lw $t1, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cons_EList
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# self . out <- SET local_add_out_Vertice_internal_1
sw $t0, 16($t1)
lw $t2, -24($fp)
# Moving self to local_add_out_Vertice_internal_4
move $t2, $t1
sw $t2, -24($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -4($fp)
sw $t2, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_print_Vertice:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_Vertice_num_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Vertice_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Vertice_out_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Vertice_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Vertice_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Vertice_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Vertice_internal_6 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_print_Vertice_num_0 <- GET self . num
lw $t1, 12($t0)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_print_Vertice_out_2 <- GET self . out
lw $t2, 16($t1)
lw $t3, -20($fp)
# local_print_Vertice_internal_4 <- Type of local_print_Vertice_out_2
lw $t3, 0($t2)
lw $t4, -24($fp)
# Saves in local_print_Vertice_internal_5 data_0
la $t4, data_0
# local_print_Vertice_internal_4 <- local_print_Vertice_internal_4 = local_print_Vertice_internal_5
move $t8, $t3
move $t9, $t4
loop_12:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_12
beqz $a1, mismatch_12
seq $v0, $a0, $a1
beqz $v0, mismatch_12
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_12
mismatch_12:
li $v0, 0
j end_12
check_12:
bnez $a1, mismatch_12
li $v0, 1
end_12:
move $t3, $v0
# If not local_print_Vertice_internal_4 goto continue__205
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -20($fp)
sw $t4, -24($fp)
beqz $t3, continue__205
la $a0, dispatch_error
j .raise
continue__205:
lw $t0, -12($fp)
lw $t1, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_EList
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Moving local_print_Vertice_internal_3 to local_print_Vertice_internal_6
move $t1, $t0
sw $t1, -28($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -28($fp)
# Removing all locals from stack
addiu $sp, $sp, 32
jr $ra


function_Edge_Edge:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Edge_Edge_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . from <- SET 0
li $t9, 0
sw $t9, 12($t0)
# self . to <- SET 0
li $t9, 0
sw $t9, 16($t0)
# self . weight <- SET 0
li $t9, 0
sw $t9, 20($t0)
lw $t1, -4($fp)
# Moving self to local_Edge_Edge_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_init_Edge:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value f
addiu $fp, $fp, 4
# Pops the register with the param value t
addiu $fp, $fp, 4
# Pops the register with the param value w
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_init_Edge_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
lw $t1, -12($fp)
# self . from <- SET f
sw $t0, 12($t1)
lw $t2, -4($fp)
# self . to <- SET t
sw $t2, 16($t1)
lw $t3, -0($fp)
# self . weight <- SET w
sw $t3, 20($t1)
lw $t4, -16($fp)
# Moving self to local_init_Edge_internal_0
move $t4, $t1
sw $t4, -16($fp)
move $v0, $t4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -4($fp)
sw $t3, -0($fp)
sw $t4, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_print_Edge:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_Edge_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_from_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_to_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_weight_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Edge_internal_12 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_print_Edge_internal_0 data_1
la $t0, data_1
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_print_Edge_from_2 <- GET self . from
lw $t2, 12($t1)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Saves in local_print_Edge_internal_4 data_2
la $t1, data_2
lw $t2, -0($fp)
lw $t3, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -28($fp)
# local_print_Edge_to_6 <- GET self . to
lw $t2, 16($t1)
lw $t3, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -0($fp)
sw $t2, -28($fp)
sw $t3, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Saves in local_print_Edge_internal_8 data_3
la $t1, data_3
lw $t2, -0($fp)
lw $t3, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -36($fp)
sw $t2, -0($fp)
sw $t3, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -44($fp)
# local_print_Edge_weight_10 <- GET self . weight
lw $t2, 20($t1)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -0($fp)
sw $t2, -44($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Moving local_print_Edge_internal_11 to local_print_Edge_internal_12
move $t1, $t0
sw $t1, -52($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_EList_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_EList_EList_car_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_EList_EList_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t0, $v0
lw $t1, -0($fp)
# self . car <- SET local_EList_EList_car_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Moving self to local_EList_EList_internal_1
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_isNil_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_isNil_EList_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 1 to local_isNil_EList_internal_0
li $t0, 1
sw $t0, -4($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_head_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_head_EList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_head_EList_car_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_head_EList_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -8($fp)
# local_head_EList_car_1 <- GET self . car
lw $t2, 12($t1)
lw $t3, -12($fp)
# Moving local_head_EList_car_1 to local_head_EList_internal_2
move $t3, $t2
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_tail_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_tail_EList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_tail_EList_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -8($fp)
# Moving self to local_tail_EList_internal_1
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_cons_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value e
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_cons_EList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cons_EList_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cons_EList_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cons_EList_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 20
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_ECons
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 20
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t0)
# Static Dispatch of the method ECons
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# This function will consume the arguments
jal function_ECons_ECons
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# local_cons_EList_internal_2 <- Type of local_cons_EList_internal_0
lw $t1, 0($t0)
lw $t2, -20($fp)
# Saves in local_cons_EList_internal_3 data_0
la $t2, data_0
# local_cons_EList_internal_2 <- local_cons_EList_internal_2 = local_cons_EList_internal_3
move $t8, $t1
move $t9, $t2
loop_13:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_13
beqz $a1, mismatch_13
seq $v0, $a0, $a1
beqz $v0, mismatch_13
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_13
mismatch_13:
li $v0, 0
j end_13
check_13:
bnez $a1, mismatch_13
li $v0, 1
end_13:
move $t1, $v0
# If not local_cons_EList_internal_2 goto continue__322
sw $t0, -8($fp)
sw $t1, -16($fp)
sw $t2, -20($fp)
beqz $t1, continue__322
la $a0, dispatch_error
j .raise
continue__322:
lw $t0, -8($fp)
lw $t1, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_init_ECons
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -4($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -4($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 24
jr $ra


function_append_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value l
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_append_EList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_append_EList_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -12($fp)
# local_append_EList_internal_1 <- Type of self
lw $t1, 0($t0)
lw $t2, -16($fp)
# Saves in local_append_EList_internal_2 data_0
la $t2, data_0
# local_append_EList_internal_1 <- local_append_EList_internal_1 = local_append_EList_internal_2
move $t8, $t1
move $t9, $t2
loop_14:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_14
beqz $a1, mismatch_14
seq $v0, $a0, $a1
beqz $v0, mismatch_14
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_14
mismatch_14:
li $v0, 0
j end_14
check_14:
bnez $a1, mismatch_14
li $v0, 1
end_14:
move $t1, $v0
# If not local_append_EList_internal_1 goto continue__338
sw $t0, -4($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
beqz $t1, continue__338
la $a0, dispatch_error
j .raise
continue__338:
lw $t0, -4($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_isNil_EList
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
# If local_append_EList_internal_0 goto true__348
sw $t0, -8($fp)
bnez $t0, true__348
lw $t0, -4($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_tail_EList
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# local_append_EList_internal_6 <- Type of local_append_EList_internal_4
lw $t1, 0($t0)
lw $t2, -36($fp)
# Saves in local_append_EList_internal_7 data_0
la $t2, data_0
# local_append_EList_internal_6 <- local_append_EList_internal_6 = local_append_EList_internal_7
move $t8, $t1
move $t9, $t2
loop_15:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_15
beqz $a1, mismatch_15
seq $v0, $a0, $a1
beqz $v0, mismatch_15
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_15
mismatch_15:
li $v0, 0
j end_15
check_15:
bnez $a1, mismatch_15
li $v0, 1
end_15:
move $t1, $v0
# If not local_append_EList_internal_6 goto continue__356
sw $t0, -24($fp)
sw $t1, -32($fp)
sw $t2, -36($fp)
beqz $t1, continue__356
la $a0, dispatch_error
j .raise
continue__356:
lw $t0, -24($fp)
lw $t1, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_append_EList
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_head_EList
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -4($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
lw $t2, -48($fp)
# local_append_EList_internal_10 <- Type of local_append_EList_internal_5
lw $t2, 0($t1)
lw $t3, -52($fp)
# Saves in local_append_EList_internal_11 data_0
la $t3, data_0
# local_append_EList_internal_10 <- local_append_EList_internal_10 = local_append_EList_internal_11
move $t8, $t2
move $t9, $t3
loop_16:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_16
beqz $a1, mismatch_16
seq $v0, $a0, $a1
beqz $v0, mismatch_16
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_16
mismatch_16:
li $v0, 0
j end_16
check_16:
bnez $a1, mismatch_16
li $v0, 1
end_16:
move $t2, $v0
# If not local_append_EList_internal_10 goto continue__372
sw $t0, -40($fp)
sw $t1, -28($fp)
sw $t2, -48($fp)
sw $t3, -52($fp)
beqz $t2, continue__372
la $a0, dispatch_error
j .raise
continue__372:
lw $t0, -28($fp)
lw $t1, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_cons_EList
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -40($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -44($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_append_EList_internal_9 to local_append_EList_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -44($fp)
sw $t1, -20($fp)
j end__348
true__348:
lw $t0, -0($fp)
lw $t1, -20($fp)
# Moving l to local_append_EList_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -0($fp)
sw $t1, -20($fp)
end__348:
lw $t0, -20($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 56
jr $ra


function_print_EList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_EList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_EList_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_print_EList_internal_0 data_4
la $t0, data_4
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_ECons_ECons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_ECons_ECons_car_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_ECons_ECons_cdr_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_ECons_ECons_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t0, $v0
lw $t1, -0($fp)
# self . car <- SET local_ECons_ECons_car_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
# self . cdr <- SET local_ECons_ECons_cdr_1
sw $t2, 16($t1)
lw $t3, -12($fp)
# Moving self to local_ECons_ECons_internal_2
move $t3, $t1
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_isNil_ECons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_isNil_ECons_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 0 to local_isNil_ECons_internal_0
li $t0, 0
sw $t0, -4($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_head_ECons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_head_ECons_car_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_head_ECons_car_0 <- GET self . car
lw $t1, 12($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_tail_ECons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_tail_ECons_cdr_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_tail_ECons_cdr_0 <- GET self . cdr
lw $t1, 16($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_init_ECons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value e
addiu $fp, $fp, 4
# Pops the register with the param value rest
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_init_ECons_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# self . car <- SET e
sw $t0, 12($t1)
lw $t2, -0($fp)
# self . cdr <- SET rest
sw $t2, 16($t1)
lw $t3, -12($fp)
# Moving self to local_init_ECons_internal_0
move $t3, $t1
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_print_ECons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_ECons_car_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_cdr_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_ECons_internal_8 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_print_ECons_car_0 <- GET self . car
lw $t1, 12($t0)
lw $t2, -12($fp)
# local_print_ECons_internal_2 <- Type of local_print_ECons_car_0
lw $t2, 0($t1)
lw $t3, -16($fp)
# Saves in local_print_ECons_internal_3 data_0
la $t3, data_0
# local_print_ECons_internal_2 <- local_print_ECons_internal_2 = local_print_ECons_internal_3
move $t8, $t2
move $t9, $t3
loop_17:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_17
beqz $a1, mismatch_17
seq $v0, $a0, $a1
beqz $v0, mismatch_17
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_17
mismatch_17:
li $v0, 0
j end_17
check_17:
bnez $a1, mismatch_17
li $v0, 1
end_17:
move $t2, $v0
# If not local_print_ECons_internal_2 goto continue__439
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
beqz $t2, continue__439
la $a0, dispatch_error
j .raise
continue__439:
lw $t0, -4($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Edge
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_print_ECons_cdr_4 <- GET self . cdr
lw $t2, 16($t1)
lw $t3, -28($fp)
# local_print_ECons_internal_6 <- Type of local_print_ECons_cdr_4
lw $t3, 0($t2)
lw $t4, -32($fp)
# Saves in local_print_ECons_internal_7 data_0
la $t4, data_0
# local_print_ECons_internal_6 <- local_print_ECons_internal_6 = local_print_ECons_internal_7
move $t8, $t3
move $t9, $t4
loop_18:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_18
beqz $a1, mismatch_18
seq $v0, $a0, $a1
beqz $v0, mismatch_18
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_18
mismatch_18:
li $v0, 0
j end_18
check_18:
bnez $a1, mismatch_18
li $v0, 1
end_18:
move $t3, $v0
# If not local_print_ECons_internal_6 goto continue__453
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
sw $t3, -28($fp)
sw $t4, -32($fp)
beqz $t3, continue__453
la $a0, dispatch_error
j .raise
continue__453:
lw $t0, -20($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_EList
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_print_ECons_internal_5 to local_print_ECons_internal_8
move $t1, $t0
sw $t1, -36($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_VList_VList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_VList_VList_car_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_VList_VList_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t0, $v0
lw $t1, -0($fp)
# self . car <- SET local_VList_VList_car_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Moving self to local_VList_VList_internal_1
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_isNil_VList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_isNil_VList_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 1 to local_isNil_VList_internal_0
li $t0, 1
sw $t0, -4($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_head_VList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_head_VList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_head_VList_car_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_head_VList_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -8($fp)
# local_head_VList_car_1 <- GET self . car
lw $t2, 12($t1)
lw $t3, -12($fp)
# Moving local_head_VList_car_1 to local_head_VList_internal_2
move $t3, $t2
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_tail_VList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_tail_VList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_tail_VList_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -8($fp)
# Moving self to local_tail_VList_internal_1
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_cons_VList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value v
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_cons_VList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cons_VList_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cons_VList_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_cons_VList_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 20
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_VCons
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 20
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 44($t8)
sw $v0, 8($t0)
# Static Dispatch of the method VCons
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# This function will consume the arguments
jal function_VCons_VCons
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# local_cons_VList_internal_2 <- Type of local_cons_VList_internal_0
lw $t1, 0($t0)
lw $t2, -20($fp)
# Saves in local_cons_VList_internal_3 data_0
la $t2, data_0
# local_cons_VList_internal_2 <- local_cons_VList_internal_2 = local_cons_VList_internal_3
move $t8, $t1
move $t9, $t2
loop_19:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_19
beqz $a1, mismatch_19
seq $v0, $a0, $a1
beqz $v0, mismatch_19
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_19
mismatch_19:
li $v0, 0
j end_19
check_19:
bnez $a1, mismatch_19
li $v0, 1
end_19:
move $t1, $v0
# If not local_cons_VList_internal_2 goto continue__507
sw $t0, -8($fp)
sw $t1, -16($fp)
sw $t2, -20($fp)
beqz $t1, continue__507
la $a0, dispatch_error
j .raise
continue__507:
lw $t0, -8($fp)
lw $t1, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_init_VCons
lw $t8, 56($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -4($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -4($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 24
jr $ra


function_print_VList:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_VList_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VList_internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_print_VList_internal_0 data_5
la $t0, data_5
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_VCons_VCons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_VCons_VCons_car_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_VCons_VCons_cdr_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_VCons_VCons_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t0, $v0
lw $t1, -0($fp)
# self . car <- SET local_VCons_VCons_car_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
# self . cdr <- SET local_VCons_VCons_cdr_1
sw $t2, 16($t1)
lw $t3, -12($fp)
# Moving self to local_VCons_VCons_internal_2
move $t3, $t1
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_isNil_VCons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_isNil_VCons_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Moving 0 to local_isNil_VCons_internal_0
li $t0, 0
sw $t0, -4($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_head_VCons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_head_VCons_car_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_head_VCons_car_0 <- GET self . car
lw $t1, 12($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_tail_VCons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_tail_VCons_cdr_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_tail_VCons_cdr_0 <- GET self . cdr
lw $t1, 16($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_init_VCons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value v
addiu $fp, $fp, 4
# Pops the register with the param value rest
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_init_VCons_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# self . car <- SET v
sw $t0, 12($t1)
lw $t2, -0($fp)
# self . cdr <- SET rest
sw $t2, 16($t1)
lw $t3, -12($fp)
# Moving self to local_init_VCons_internal_0
move $t3, $t1
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_print_VCons:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_VCons_car_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_cdr_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_VCons_internal_8 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_print_VCons_car_0 <- GET self . car
lw $t1, 12($t0)
lw $t2, -12($fp)
# local_print_VCons_internal_2 <- Type of local_print_VCons_car_0
lw $t2, 0($t1)
lw $t3, -16($fp)
# Saves in local_print_VCons_internal_3 data_0
la $t3, data_0
# local_print_VCons_internal_2 <- local_print_VCons_internal_2 = local_print_VCons_internal_3
move $t8, $t2
move $t9, $t3
loop_20:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_20
beqz $a1, mismatch_20
seq $v0, $a0, $a1
beqz $v0, mismatch_20
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_20
mismatch_20:
li $v0, 0
j end_20
check_20:
bnez $a1, mismatch_20
li $v0, 1
end_20:
move $t2, $v0
# If not local_print_VCons_internal_2 goto continue__569
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
beqz $t2, continue__569
la $a0, dispatch_error
j .raise
continue__569:
lw $t0, -4($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Vertice
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_print_VCons_cdr_4 <- GET self . cdr
lw $t2, 16($t1)
lw $t3, -28($fp)
# local_print_VCons_internal_6 <- Type of local_print_VCons_cdr_4
lw $t3, 0($t2)
lw $t4, -32($fp)
# Saves in local_print_VCons_internal_7 data_0
la $t4, data_0
# local_print_VCons_internal_6 <- local_print_VCons_internal_6 = local_print_VCons_internal_7
move $t8, $t3
move $t9, $t4
loop_21:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_21
beqz $a1, mismatch_21
seq $v0, $a0, $a1
beqz $v0, mismatch_21
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_21
mismatch_21:
li $v0, 0
j end_21
check_21:
bnez $a1, mismatch_21
li $v0, 1
end_21:
move $t3, $v0
# If not local_print_VCons_internal_6 goto continue__583
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
sw $t3, -28($fp)
sw $t4, -32($fp)
beqz $t3, continue__583
la $a0, dispatch_error
j .raise
continue__583:
lw $t0, -20($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_VList
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_print_VCons_internal_5 to local_print_VCons_internal_8
move $t1, $t0
sw $t1, -36($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_Parse_Parse:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Parse_Parse_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Parse_Parse_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Parse_Parse_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_BoolOp
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 56($t8)
sw $v0, 8($t0)
lw $t1, -0($fp)
# self . boolop <- SET local_Parse_Parse_internal_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Saves in local_Parse_Parse_internal_1 data_6
la $t2, data_6
# self . rest <- SET local_Parse_Parse_internal_1
sw $t2, 16($t1)
lw $t3, -12($fp)
# Moving self to local_Parse_Parse_internal_2
move $t3, $t1
sw $t3, -12($fp)
move $v0, $t3
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_read_input_Parse:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_read_input_Parse_g_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_line_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_boolop_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_read_input_Parse_internal_21 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 20
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Graph
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 20
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Graph
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# This function will consume the arguments
jal function_Graph_Graph
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_read_input_Parse_internal_1 to local_read_input_Parse_g_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_read_input_Parse_internal_3 to local_read_input_Parse_line_2
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -20($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -20($fp)
start__620:
lw $t0, -0($fp)
lw $t1, -24($fp)
# local_read_input_Parse_boolop_5 <- GET self . boolop
lw $t1, 12($t0)
lw $t2, -36($fp)
# Saves in local_read_input_Parse_internal_8 data_7
la $t2, data_7
lw $t3, -12($fp)
lw $t4, -32($fp)
# local_read_input_Parse_internal_7 <- local_read_input_Parse_line_2 = local_read_input_Parse_internal_8
move $t8, $t3
move $t9, $t2
loop_22:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_22
beqz $a1, mismatch_22
seq $v0, $a0, $a1
beqz $v0, mismatch_22
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_22
mismatch_22:
li $v0, 0
j end_22
check_22:
bnez $a1, mismatch_22
li $v0, 1
end_22:
move $t4, $v0
lw $t5, -28($fp)
# local_read_input_Parse_internal_6 <- not local_read_input_Parse_internal_7
beqz $t4, false_23
li $t5, 0
j end_23
false_23:
li $t5, 1
end_23:
lw $t6, -48($fp)
# Saves in local_read_input_Parse_internal_11 data_8
la $t6, data_8
lw $t7, -44($fp)
# local_read_input_Parse_internal_10 <- local_read_input_Parse_line_2 = local_read_input_Parse_internal_11
move $t8, $t3
move $t9, $t6
loop_24:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_24
beqz $a1, mismatch_24
seq $v0, $a0, $a1
beqz $v0, mismatch_24
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_24
mismatch_24:
li $v0, 0
j end_24
check_24:
bnez $a1, mismatch_24
li $v0, 1
end_24:
move $t7, $v0
lw $a1, -40($fp)
# local_read_input_Parse_internal_9 <- not local_read_input_Parse_internal_10
beqz $t7, false_25
li $a1, 0
j end_25
false_25:
li $a1, 1
end_25:
lw $a2, -56($fp)
# local_read_input_Parse_internal_13 <- Type of local_read_input_Parse_boolop_5
lw $a2, 0($t1)
lw $a3, -60($fp)
# Saves in local_read_input_Parse_internal_14 data_0
la $a3, data_0
# local_read_input_Parse_internal_13 <- local_read_input_Parse_internal_13 = local_read_input_Parse_internal_14
# Saving content of a1 to memory to use that register
sw $a1, -40($fp)
move $t8, $a2
move $t9, $a3
loop_26:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_26
beqz $a1, mismatch_26
seq $v0, $a0, $a1
beqz $v0, mismatch_26
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_26
mismatch_26:
li $v0, 0
j end_26
check_26:
bnez $a1, mismatch_26
li $v0, 1
end_26:
move $a2, $v0
# Restore the variable of local_read_input_Parse_internal_9
lw $a1, -40($fp)
# If not local_read_input_Parse_internal_13 goto continue__643
sw $t0, -0($fp)
sw $t1, -24($fp)
sw $t2, -36($fp)
sw $t3, -12($fp)
sw $t4, -32($fp)
sw $t5, -28($fp)
sw $t6, -48($fp)
sw $t7, -44($fp)
sw $a1, -40($fp)
sw $a2, -56($fp)
sw $a3, -60($fp)
beqz $a2, continue__643
la $a0, dispatch_error
j .raise
continue__643:
lw $t0, -24($fp)
lw $t1, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_and_BoolOp
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -40($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -28($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -52($fp)
sw $t2, -40($fp)
sw $t3, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
# If not local_read_input_Parse_internal_12 goto end__620
sw $t0, -52($fp)
beqz $t0, end__620
lw $t0, -0($fp)
lw $t1, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_parse_line_Parse
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -12($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -64($fp)
sw $t2, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -72($fp)
# local_read_input_Parse_internal_17 <- Type of local_read_input_Parse_g_0
lw $t2, 0($t1)
lw $t3, -76($fp)
# Saves in local_read_input_Parse_internal_18 data_0
la $t3, data_0
# local_read_input_Parse_internal_17 <- local_read_input_Parse_internal_17 = local_read_input_Parse_internal_18
move $t8, $t2
move $t9, $t3
loop_27:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_27
beqz $a1, mismatch_27
seq $v0, $a0, $a1
beqz $v0, mismatch_27
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_27
mismatch_27:
li $v0, 0
j end_27
check_27:
bnez $a1, mismatch_27
li $v0, 1
end_27:
move $t2, $v0
# If not local_read_input_Parse_internal_17 goto continue__661
sw $t0, -64($fp)
sw $t1, -4($fp)
sw $t2, -72($fp)
sw $t3, -76($fp)
beqz $t2, continue__661
la $a0, dispatch_error
j .raise
continue__661:
lw $t0, -4($fp)
lw $t1, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_add_vertice_Graph
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -64($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -68($fp)
sw $t2, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -68($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_read_input_Parse_internal_19 to local_read_input_Parse_line_2
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -84($fp)
# Moving local_read_input_Parse_internal_19 to local_read_input_Parse_internal_20
move $t2, $t0
sw $t2, -84($fp)
lw $t3, -20($fp)
# Moving local_read_input_Parse_internal_20 to local_read_input_Parse_internal_4
move $t3, $t2
sw $t3, -20($fp)
sw $t0, -80($fp)
sw $t1, -12($fp)
sw $t2, -84($fp)
sw $t3, -20($fp)
j start__620
end__620:
lw $t0, -4($fp)
lw $t1, -88($fp)
# Moving local_read_input_Parse_g_0 to local_read_input_Parse_internal_21
move $t1, $t0
sw $t1, -88($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -88($fp)
# Removing all locals from stack
addiu $sp, $sp, 92
jr $ra


function_parse_line_Parse:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_parse_line_Parse_v_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_rest_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_succ_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_rest_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_weight_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_rest_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_parse_line_Parse_internal_30 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 20
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Vertice
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 20
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Vertice
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# This function will consume the arguments
jal function_Vertice_Vertice
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_Parse
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -4($fp)
sw $t2, -16($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
lw $t2, -24($fp)
# local_parse_line_Parse_internal_4 <- Type of local_parse_line_Parse_internal_1
lw $t2, 0($t1)
lw $t3, -28($fp)
# Saves in local_parse_line_Parse_internal_5 data_0
la $t3, data_0
# local_parse_line_Parse_internal_4 <- local_parse_line_Parse_internal_4 = local_parse_line_Parse_internal_5
move $t8, $t2
move $t9, $t3
loop_28:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_28
beqz $a1, mismatch_28
seq $v0, $a0, $a1
beqz $v0, mismatch_28
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_28
mismatch_28:
li $v0, 0
j end_28
check_28:
bnez $a1, mismatch_28
li $v0, 1
end_28:
move $t2, $v0
# If not local_parse_line_Parse_internal_4 goto continue__697
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -24($fp)
sw $t3, -28($fp)
beqz $t2, continue__697
la $a0, dispatch_error
j .raise
continue__697:
lw $t0, -12($fp)
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_init_Vertice
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -16($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -20($fp)
sw $t2, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_parse_line_Parse_internal_3 to local_parse_line_Parse_v_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -32($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
sw $t0, -20($fp)
sw $t1, -8($fp)
sw $t2, -32($fp)
start__708:
lw $t0, -4($fp)
lw $t1, -44($fp)
# local_parse_line_Parse_rest_9 <- GET self . rest
lw $t1, 16($t0)
lw $t2, -52($fp)
# local_parse_line_Parse_internal_11 <- Type of local_parse_line_Parse_rest_9
la $t2, type_String
lw $t3, -56($fp)
# Saves in local_parse_line_Parse_internal_12 data_0
la $t3, data_0
# local_parse_line_Parse_internal_11 <- local_parse_line_Parse_internal_11 = local_parse_line_Parse_internal_12
move $t8, $t2
move $t9, $t3
loop_29:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_29
beqz $a1, mismatch_29
seq $v0, $a0, $a1
beqz $v0, mismatch_29
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_29
mismatch_29:
li $v0, 0
j end_29
check_29:
bnez $a1, mismatch_29
li $v0, 1
end_29:
move $t2, $v0
# If not local_parse_line_Parse_internal_11 goto continue__717
sw $t0, -4($fp)
sw $t1, -44($fp)
sw $t2, -52($fp)
sw $t3, -56($fp)
beqz $t2, continue__717
la $a0, dispatch_error
j .raise
continue__717:
lw $t0, -48($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -44($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -44($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# local_parse_line_Parse_internal_8 <- local_parse_line_Parse_internal_10 = 0
li $t9, 0
seq $t1, $t0, $t9
lw $t2, -36($fp)
# local_parse_line_Parse_internal_7 <- not local_parse_line_Parse_internal_8
beqz $t1, false_30
li $t2, 0
j end_30
false_30:
li $t2, 1
end_30:
# If not local_parse_line_Parse_internal_7 goto end__708
sw $t0, -48($fp)
sw $t1, -40($fp)
sw $t2, -36($fp)
beqz $t2, end__708
lw $t0, -4($fp)
lw $t1, -64($fp)
# local_parse_line_Parse_rest_14 <- GET self . rest
lw $t1, 16($t0)
lw $t2, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_Parse
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -64($fp)
sw $t2, -68($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -60($fp)
# Moving local_parse_line_Parse_internal_15 to local_parse_line_Parse_succ_13
move $t1, $t0
sw $t1, -60($fp)
lw $t2, -4($fp)
lw $t3, -76($fp)
# local_parse_line_Parse_rest_17 <- GET self . rest
lw $t3, 16($t2)
lw $t4, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_Parse
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -68($fp)
sw $t1, -60($fp)
sw $t2, -4($fp)
sw $t3, -76($fp)
sw $t4, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Moving local_parse_line_Parse_internal_18 to local_parse_line_Parse_weight_16
move $t1, $t0
sw $t1, -72($fp)
lw $t2, -84($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 24
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Edge
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 24
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Edge
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -80($fp)
sw $t1, -72($fp)
sw $t2, -84($fp)
# This function will consume the arguments
jal function_Edge_Edge
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -84($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
lw $t2, -92($fp)
# local_parse_line_Parse_internal_21 <- Type of local_parse_line_Parse_v_0
lw $t2, 0($t1)
lw $t3, -96($fp)
# Saves in local_parse_line_Parse_internal_22 data_0
la $t3, data_0
# local_parse_line_Parse_internal_21 <- local_parse_line_Parse_internal_21 = local_parse_line_Parse_internal_22
move $t8, $t2
move $t9, $t3
loop_31:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_31
beqz $a1, mismatch_31
seq $v0, $a0, $a1
beqz $v0, mismatch_31
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_31
mismatch_31:
li $v0, 0
j end_31
check_31:
bnez $a1, mismatch_31
li $v0, 1
end_31:
move $t2, $v0
# If not local_parse_line_Parse_internal_21 goto continue__753
sw $t0, -84($fp)
sw $t1, -8($fp)
sw $t2, -92($fp)
sw $t3, -96($fp)
beqz $t2, continue__753
la $a0, dispatch_error
j .raise
continue__753:
lw $t0, -8($fp)
lw $t1, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_number_Vertice
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -84($fp)
lw $t2, -104($fp)
# local_parse_line_Parse_internal_24 <- Type of local_parse_line_Parse_internal_19
lw $t2, 0($t1)
lw $t3, -108($fp)
# Saves in local_parse_line_Parse_internal_25 data_0
la $t3, data_0
# local_parse_line_Parse_internal_24 <- local_parse_line_Parse_internal_24 = local_parse_line_Parse_internal_25
move $t8, $t2
move $t9, $t3
loop_32:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_32
beqz $a1, mismatch_32
seq $v0, $a0, $a1
beqz $v0, mismatch_32
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_32
mismatch_32:
li $v0, 0
j end_32
check_32:
bnez $a1, mismatch_32
li $v0, 1
end_32:
move $t2, $v0
# If not local_parse_line_Parse_internal_24 goto continue__767
sw $t0, -88($fp)
sw $t1, -84($fp)
sw $t2, -104($fp)
sw $t3, -108($fp)
beqz $t2, continue__767
la $a0, dispatch_error
j .raise
continue__767:
lw $t0, -84($fp)
lw $t1, -100($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_init_Edge
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -72($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -60($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t4, -88($fp)
sw $t4, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -84($fp)
sw $t1, -100($fp)
sw $t2, -72($fp)
sw $t3, -60($fp)
sw $t4, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -100($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
lw $t2, -116($fp)
# local_parse_line_Parse_internal_27 <- Type of local_parse_line_Parse_v_0
lw $t2, 0($t1)
lw $t3, -120($fp)
# Saves in local_parse_line_Parse_internal_28 data_0
la $t3, data_0
# local_parse_line_Parse_internal_27 <- local_parse_line_Parse_internal_27 = local_parse_line_Parse_internal_28
move $t8, $t2
move $t9, $t3
loop_33:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_33
beqz $a1, mismatch_33
seq $v0, $a0, $a1
beqz $v0, mismatch_33
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_33
mismatch_33:
li $v0, 0
j end_33
check_33:
bnez $a1, mismatch_33
li $v0, 1
end_33:
move $t2, $v0
# If not local_parse_line_Parse_internal_27 goto continue__779
sw $t0, -100($fp)
sw $t1, -8($fp)
sw $t2, -116($fp)
sw $t3, -120($fp)
beqz $t2, continue__779
la $a0, dispatch_error
j .raise
continue__779:
lw $t0, -8($fp)
lw $t1, -112($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_add_out_Vertice
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -100($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -112($fp)
sw $t2, -100($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -112($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
# Moving local_parse_line_Parse_internal_26 to local_parse_line_Parse_internal_29
move $t1, $t0
sw $t1, -124($fp)
lw $t2, -32($fp)
# Moving local_parse_line_Parse_internal_29 to local_parse_line_Parse_internal_6
move $t2, $t1
sw $t2, -32($fp)
sw $t0, -112($fp)
sw $t1, -124($fp)
sw $t2, -32($fp)
j start__708
end__708:
lw $t0, -8($fp)
lw $t1, -128($fp)
# Moving local_parse_line_Parse_v_0 to local_parse_line_Parse_internal_30
move $t1, $t0
sw $t1, -128($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -128($fp)
# Removing all locals from stack
addiu $sp, $sp, 132
jr $ra


function_c2i_Parse:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value char
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_c2i_Parse_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_Parse_internal_31 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Saves in local_c2i_Parse_internal_1 data_9
la $t0, data_9
lw $t1, -0($fp)
lw $t2, -8($fp)
# local_c2i_Parse_internal_0 <- char = local_c2i_Parse_internal_1
move $t8, $t1
move $t9, $t0
loop_34:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_34
beqz $a1, mismatch_34
seq $v0, $a0, $a1
beqz $v0, mismatch_34
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_34
mismatch_34:
li $v0, 0
j end_34
check_34:
bnez $a1, mismatch_34
li $v0, 1
end_34:
move $t2, $v0
# If local_c2i_Parse_internal_0 goto true__805
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
bnez $t2, true__805
lw $t0, -24($fp)
# Saves in local_c2i_Parse_internal_4 data_10
la $t0, data_10
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_c2i_Parse_internal_3 <- char = local_c2i_Parse_internal_4
move $t8, $t1
move $t9, $t0
loop_35:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_35
beqz $a1, mismatch_35
seq $v0, $a0, $a1
beqz $v0, mismatch_35
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_35
mismatch_35:
li $v0, 0
j end_35
check_35:
bnez $a1, mismatch_35
li $v0, 1
end_35:
move $t2, $v0
# If local_c2i_Parse_internal_3 goto true__812
sw $t0, -24($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
bnez $t2, true__812
lw $t0, -36($fp)
# Saves in local_c2i_Parse_internal_7 data_11
la $t0, data_11
lw $t1, -0($fp)
lw $t2, -32($fp)
# local_c2i_Parse_internal_6 <- char = local_c2i_Parse_internal_7
move $t8, $t1
move $t9, $t0
loop_36:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_36
beqz $a1, mismatch_36
seq $v0, $a0, $a1
beqz $v0, mismatch_36
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_36
mismatch_36:
li $v0, 0
j end_36
check_36:
bnez $a1, mismatch_36
li $v0, 1
end_36:
move $t2, $v0
# If local_c2i_Parse_internal_6 goto true__819
sw $t0, -36($fp)
sw $t1, -0($fp)
sw $t2, -32($fp)
bnez $t2, true__819
lw $t0, -48($fp)
# Saves in local_c2i_Parse_internal_10 data_12
la $t0, data_12
lw $t1, -0($fp)
lw $t2, -44($fp)
# local_c2i_Parse_internal_9 <- char = local_c2i_Parse_internal_10
move $t8, $t1
move $t9, $t0
loop_37:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_37
beqz $a1, mismatch_37
seq $v0, $a0, $a1
beqz $v0, mismatch_37
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_37
mismatch_37:
li $v0, 0
j end_37
check_37:
bnez $a1, mismatch_37
li $v0, 1
end_37:
move $t2, $v0
# If local_c2i_Parse_internal_9 goto true__826
sw $t0, -48($fp)
sw $t1, -0($fp)
sw $t2, -44($fp)
bnez $t2, true__826
lw $t0, -60($fp)
# Saves in local_c2i_Parse_internal_13 data_13
la $t0, data_13
lw $t1, -0($fp)
lw $t2, -56($fp)
# local_c2i_Parse_internal_12 <- char = local_c2i_Parse_internal_13
move $t8, $t1
move $t9, $t0
loop_38:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_38
beqz $a1, mismatch_38
seq $v0, $a0, $a1
beqz $v0, mismatch_38
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_38
mismatch_38:
li $v0, 0
j end_38
check_38:
bnez $a1, mismatch_38
li $v0, 1
end_38:
move $t2, $v0
# If local_c2i_Parse_internal_12 goto true__833
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -56($fp)
bnez $t2, true__833
lw $t0, -72($fp)
# Saves in local_c2i_Parse_internal_16 data_14
la $t0, data_14
lw $t1, -0($fp)
lw $t2, -68($fp)
# local_c2i_Parse_internal_15 <- char = local_c2i_Parse_internal_16
move $t8, $t1
move $t9, $t0
loop_39:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_39
beqz $a1, mismatch_39
seq $v0, $a0, $a1
beqz $v0, mismatch_39
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_39
mismatch_39:
li $v0, 0
j end_39
check_39:
bnez $a1, mismatch_39
li $v0, 1
end_39:
move $t2, $v0
# If local_c2i_Parse_internal_15 goto true__840
sw $t0, -72($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
bnez $t2, true__840
lw $t0, -84($fp)
# Saves in local_c2i_Parse_internal_19 data_15
la $t0, data_15
lw $t1, -0($fp)
lw $t2, -80($fp)
# local_c2i_Parse_internal_18 <- char = local_c2i_Parse_internal_19
move $t8, $t1
move $t9, $t0
loop_40:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_40
beqz $a1, mismatch_40
seq $v0, $a0, $a1
beqz $v0, mismatch_40
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_40
mismatch_40:
li $v0, 0
j end_40
check_40:
bnez $a1, mismatch_40
li $v0, 1
end_40:
move $t2, $v0
# If local_c2i_Parse_internal_18 goto true__847
sw $t0, -84($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
bnez $t2, true__847
lw $t0, -96($fp)
# Saves in local_c2i_Parse_internal_22 data_16
la $t0, data_16
lw $t1, -0($fp)
lw $t2, -92($fp)
# local_c2i_Parse_internal_21 <- char = local_c2i_Parse_internal_22
move $t8, $t1
move $t9, $t0
loop_41:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_41
beqz $a1, mismatch_41
seq $v0, $a0, $a1
beqz $v0, mismatch_41
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_41
mismatch_41:
li $v0, 0
j end_41
check_41:
bnez $a1, mismatch_41
li $v0, 1
end_41:
move $t2, $v0
# If local_c2i_Parse_internal_21 goto true__854
sw $t0, -96($fp)
sw $t1, -0($fp)
sw $t2, -92($fp)
bnez $t2, true__854
lw $t0, -108($fp)
# Saves in local_c2i_Parse_internal_25 data_17
la $t0, data_17
lw $t1, -0($fp)
lw $t2, -104($fp)
# local_c2i_Parse_internal_24 <- char = local_c2i_Parse_internal_25
move $t8, $t1
move $t9, $t0
loop_42:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_42
beqz $a1, mismatch_42
seq $v0, $a0, $a1
beqz $v0, mismatch_42
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_42
mismatch_42:
li $v0, 0
j end_42
check_42:
bnez $a1, mismatch_42
li $v0, 1
end_42:
move $t2, $v0
# If local_c2i_Parse_internal_24 goto true__861
sw $t0, -108($fp)
sw $t1, -0($fp)
sw $t2, -104($fp)
bnez $t2, true__861
lw $t0, -120($fp)
# Saves in local_c2i_Parse_internal_28 data_18
la $t0, data_18
lw $t1, -0($fp)
lw $t2, -116($fp)
# local_c2i_Parse_internal_27 <- char = local_c2i_Parse_internal_28
move $t8, $t1
move $t9, $t0
loop_43:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_43
beqz $a1, mismatch_43
seq $v0, $a0, $a1
beqz $v0, mismatch_43
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_43
mismatch_43:
li $v0, 0
j end_43
check_43:
bnez $a1, mismatch_43
li $v0, 1
end_43:
move $t2, $v0
# If local_c2i_Parse_internal_27 goto true__868
sw $t0, -120($fp)
sw $t1, -0($fp)
sw $t2, -116($fp)
bnez $t2, true__868
lw $t0, -4($fp)
lw $t1, -128($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -128($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -128($fp)
# saves the return value
move $t0, $v0
lw $t1, -132($fp)
# Moving 0 to local_c2i_Parse_internal_31
li $t1, 0
sw $t1, -132($fp)
lw $t2, -124($fp)
# Moving local_c2i_Parse_internal_31 to local_c2i_Parse_internal_29
move $t2, $t1
sw $t2, -124($fp)
sw $t0, -128($fp)
sw $t1, -132($fp)
sw $t2, -124($fp)
j end__868
true__868:
lw $t0, -124($fp)
# Moving 9 to local_c2i_Parse_internal_29
li $t0, 9
sw $t0, -124($fp)
sw $t0, -124($fp)
end__868:
lw $t0, -124($fp)
lw $t1, -112($fp)
# Moving local_c2i_Parse_internal_29 to local_c2i_Parse_internal_26
move $t1, $t0
sw $t1, -112($fp)
sw $t0, -124($fp)
sw $t1, -112($fp)
j end__861
true__861:
lw $t0, -112($fp)
# Moving 8 to local_c2i_Parse_internal_26
li $t0, 8
sw $t0, -112($fp)
sw $t0, -112($fp)
end__861:
lw $t0, -112($fp)
lw $t1, -100($fp)
# Moving local_c2i_Parse_internal_26 to local_c2i_Parse_internal_23
move $t1, $t0
sw $t1, -100($fp)
sw $t0, -112($fp)
sw $t1, -100($fp)
j end__854
true__854:
lw $t0, -100($fp)
# Moving 7 to local_c2i_Parse_internal_23
li $t0, 7
sw $t0, -100($fp)
sw $t0, -100($fp)
end__854:
lw $t0, -100($fp)
lw $t1, -88($fp)
# Moving local_c2i_Parse_internal_23 to local_c2i_Parse_internal_20
move $t1, $t0
sw $t1, -88($fp)
sw $t0, -100($fp)
sw $t1, -88($fp)
j end__847
true__847:
lw $t0, -88($fp)
# Moving 6 to local_c2i_Parse_internal_20
li $t0, 6
sw $t0, -88($fp)
sw $t0, -88($fp)
end__847:
lw $t0, -88($fp)
lw $t1, -76($fp)
# Moving local_c2i_Parse_internal_20 to local_c2i_Parse_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -88($fp)
sw $t1, -76($fp)
j end__840
true__840:
lw $t0, -76($fp)
# Moving 5 to local_c2i_Parse_internal_17
li $t0, 5
sw $t0, -76($fp)
sw $t0, -76($fp)
end__840:
lw $t0, -76($fp)
lw $t1, -64($fp)
# Moving local_c2i_Parse_internal_17 to local_c2i_Parse_internal_14
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -76($fp)
sw $t1, -64($fp)
j end__833
true__833:
lw $t0, -64($fp)
# Moving 4 to local_c2i_Parse_internal_14
li $t0, 4
sw $t0, -64($fp)
sw $t0, -64($fp)
end__833:
lw $t0, -64($fp)
lw $t1, -52($fp)
# Moving local_c2i_Parse_internal_14 to local_c2i_Parse_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -64($fp)
sw $t1, -52($fp)
j end__826
true__826:
lw $t0, -52($fp)
# Moving 3 to local_c2i_Parse_internal_11
li $t0, 3
sw $t0, -52($fp)
sw $t0, -52($fp)
end__826:
lw $t0, -52($fp)
lw $t1, -40($fp)
# Moving local_c2i_Parse_internal_11 to local_c2i_Parse_internal_8
move $t1, $t0
sw $t1, -40($fp)
sw $t0, -52($fp)
sw $t1, -40($fp)
j end__819
true__819:
lw $t0, -40($fp)
# Moving 2 to local_c2i_Parse_internal_8
li $t0, 2
sw $t0, -40($fp)
sw $t0, -40($fp)
end__819:
lw $t0, -40($fp)
lw $t1, -28($fp)
# Moving local_c2i_Parse_internal_8 to local_c2i_Parse_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -40($fp)
sw $t1, -28($fp)
j end__812
true__812:
lw $t0, -28($fp)
# Moving 1 to local_c2i_Parse_internal_5
li $t0, 1
sw $t0, -28($fp)
sw $t0, -28($fp)
end__812:
lw $t0, -28($fp)
lw $t1, -16($fp)
# Moving local_c2i_Parse_internal_5 to local_c2i_Parse_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -28($fp)
sw $t1, -16($fp)
j end__805
true__805:
lw $t0, -16($fp)
# Moving 0 to local_c2i_Parse_internal_2
li $t0, 0
sw $t0, -16($fp)
sw $t0, -16($fp)
end__805:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 136
jr $ra


function_a2i_Parse:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_a2i_Parse_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_Parse_internal_34 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_a2i_Parse_internal_2 <- Type of s
la $t1, type_String
lw $t2, -20($fp)
# Saves in local_a2i_Parse_internal_3 data_0
la $t2, data_0
# local_a2i_Parse_internal_2 <- local_a2i_Parse_internal_2 = local_a2i_Parse_internal_3
move $t8, $t1
move $t9, $t2
loop_44:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_44
beqz $a1, mismatch_44
seq $v0, $a0, $a1
beqz $v0, mismatch_44
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_44
mismatch_44:
li $v0, 0
j end_44
check_44:
bnez $a1, mismatch_44
li $v0, 1
end_44:
move $t1, $v0
# If not local_a2i_Parse_internal_2 goto continue__932
sw $t0, -0($fp)
sw $t1, -16($fp)
sw $t2, -20($fp)
beqz $t1, continue__932
la $a0, dispatch_error
j .raise
continue__932:
lw $t0, -12($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# local_a2i_Parse_internal_0 <- local_a2i_Parse_internal_1 = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_a2i_Parse_internal_0 goto true__943
sw $t0, -12($fp)
sw $t1, -8($fp)
bnez $t1, true__943
lw $t0, -0($fp)
lw $t1, -36($fp)
# local_a2i_Parse_internal_7 <- Type of s
la $t1, type_String
lw $t2, -40($fp)
# Saves in local_a2i_Parse_internal_8 data_0
la $t2, data_0
# local_a2i_Parse_internal_7 <- local_a2i_Parse_internal_7 = local_a2i_Parse_internal_8
move $t8, $t1
move $t9, $t2
loop_45:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_45
beqz $a1, mismatch_45
seq $v0, $a0, $a1
beqz $v0, mismatch_45
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_45
mismatch_45:
li $v0, 0
j end_45
check_45:
bnez $a1, mismatch_45
li $v0, 1
end_45:
move $t1, $v0
# If not local_a2i_Parse_internal_7 goto continue__950
sw $t0, -0($fp)
sw $t1, -36($fp)
sw $t2, -40($fp)
beqz $t1, continue__950
la $a0, dispatch_error
j .raise
continue__950:
lw $t0, -32($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 0
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_a2i_Parse_internal_9 data_19
la $t1, data_19
lw $t2, -28($fp)
# local_a2i_Parse_internal_5 <- local_a2i_Parse_internal_6 = local_a2i_Parse_internal_9
move $t8, $t0
move $t9, $t1
loop_46:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_46
beqz $a1, mismatch_46
seq $v0, $a0, $a1
beqz $v0, mismatch_46
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_46
mismatch_46:
li $v0, 0
j end_46
check_46:
bnez $a1, mismatch_46
li $v0, 1
end_46:
move $t2, $v0
# If local_a2i_Parse_internal_5 goto true__964
sw $t0, -32($fp)
sw $t1, -44($fp)
sw $t2, -28($fp)
bnez $t2, true__964
lw $t0, -0($fp)
lw $t1, -60($fp)
# local_a2i_Parse_internal_13 <- Type of s
la $t1, type_String
lw $t2, -64($fp)
# Saves in local_a2i_Parse_internal_14 data_0
la $t2, data_0
# local_a2i_Parse_internal_13 <- local_a2i_Parse_internal_13 = local_a2i_Parse_internal_14
move $t8, $t1
move $t9, $t2
loop_47:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_47
beqz $a1, mismatch_47
seq $v0, $a0, $a1
beqz $v0, mismatch_47
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_47
mismatch_47:
li $v0, 0
j end_47
check_47:
bnez $a1, mismatch_47
li $v0, 1
end_47:
move $t1, $v0
# If not local_a2i_Parse_internal_13 goto continue__971
sw $t0, -0($fp)
sw $t1, -60($fp)
sw $t2, -64($fp)
beqz $t1, continue__971
la $a0, dispatch_error
j .raise
continue__971:
lw $t0, -56($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 0
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -68($fp)
# Saves in local_a2i_Parse_internal_15 data_20
la $t1, data_20
lw $t2, -52($fp)
# local_a2i_Parse_internal_11 <- local_a2i_Parse_internal_12 = local_a2i_Parse_internal_15
move $t8, $t0
move $t9, $t1
loop_48:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_48
beqz $a1, mismatch_48
seq $v0, $a0, $a1
beqz $v0, mismatch_48
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_48
mismatch_48:
li $v0, 0
j end_48
check_48:
bnez $a1, mismatch_48
li $v0, 1
end_48:
move $t2, $v0
# If local_a2i_Parse_internal_11 goto true__985
sw $t0, -56($fp)
sw $t1, -68($fp)
sw $t2, -52($fp)
bnez $t2, true__985
lw $t0, -4($fp)
lw $t1, -76($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_Parse
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -76($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -76($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Moving local_a2i_Parse_internal_17 to local_a2i_Parse_internal_16
move $t1, $t0
sw $t1, -72($fp)
sw $t0, -76($fp)
sw $t1, -72($fp)
j end__985
true__985:
lw $t0, -0($fp)
lw $t1, -88($fp)
# local_a2i_Parse_internal_20 <- Type of s
la $t1, type_String
lw $t2, -92($fp)
# Saves in local_a2i_Parse_internal_21 data_0
la $t2, data_0
# local_a2i_Parse_internal_20 <- local_a2i_Parse_internal_20 = local_a2i_Parse_internal_21
move $t8, $t1
move $t9, $t2
loop_49:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_49
beqz $a1, mismatch_49
seq $v0, $a0, $a1
beqz $v0, mismatch_49
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_49
mismatch_49:
li $v0, 0
j end_49
check_49:
bnez $a1, mismatch_49
li $v0, 1
end_49:
move $t1, $v0
# If not local_a2i_Parse_internal_20 goto continue__999
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
beqz $t1, continue__999
la $a0, dispatch_error
j .raise
continue__999:
lw $t0, -84($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -84($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -84($fp)
# saves the return value
move $t0, $v0
lw $t1, -80($fp)
# local_a2i_Parse_internal_18 <- local_a2i_Parse_internal_19 - 1
addi $t1, $t0, -1
lw $t2, -0($fp)
lw $t3, -100($fp)
# local_a2i_Parse_internal_23 <- Type of s
la $t3, type_String
lw $t4, -104($fp)
# Saves in local_a2i_Parse_internal_24 data_0
la $t4, data_0
# local_a2i_Parse_internal_23 <- local_a2i_Parse_internal_23 = local_a2i_Parse_internal_24
move $t8, $t3
move $t9, $t4
loop_50:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_50
beqz $a1, mismatch_50
seq $v0, $a0, $a1
beqz $v0, mismatch_50
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_50
mismatch_50:
li $v0, 0
j end_50
check_50:
bnez $a1, mismatch_50
li $v0, 1
end_50:
move $t3, $v0
# If not local_a2i_Parse_internal_23 goto continue__1013
sw $t0, -84($fp)
sw $t1, -80($fp)
sw $t2, -0($fp)
sw $t3, -100($fp)
sw $t4, -104($fp)
beqz $t3, continue__1013
la $a0, dispatch_error
j .raise
continue__1013:
lw $t0, -96($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -80($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -96($fp)
sw $t1, -80($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -108($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_Parse
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -96($fp)
sw $t1, -4($fp)
sw $t2, -108($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -108($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# Moving local_a2i_Parse_internal_25 to local_a2i_Parse_internal_16
move $t1, $t0
sw $t1, -72($fp)
sw $t0, -108($fp)
sw $t1, -72($fp)
end__985:
lw $t0, -72($fp)
lw $t1, -48($fp)
# Moving local_a2i_Parse_internal_16 to local_a2i_Parse_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -72($fp)
sw $t1, -48($fp)
j end__964
true__964:
lw $t0, -0($fp)
lw $t1, -124($fp)
# local_a2i_Parse_internal_29 <- Type of s
la $t1, type_String
lw $t2, -128($fp)
# Saves in local_a2i_Parse_internal_30 data_0
la $t2, data_0
# local_a2i_Parse_internal_29 <- local_a2i_Parse_internal_29 = local_a2i_Parse_internal_30
move $t8, $t1
move $t9, $t2
loop_51:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_51
beqz $a1, mismatch_51
seq $v0, $a0, $a1
beqz $v0, mismatch_51
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_51
mismatch_51:
li $v0, 0
j end_51
check_51:
bnez $a1, mismatch_51
li $v0, 1
end_51:
move $t1, $v0
# If not local_a2i_Parse_internal_29 goto continue__1037
sw $t0, -0($fp)
sw $t1, -124($fp)
sw $t2, -128($fp)
beqz $t1, continue__1037
la $a0, dispatch_error
j .raise
continue__1037:
lw $t0, -120($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -120($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -120($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
# local_a2i_Parse_internal_27 <- local_a2i_Parse_internal_28 - 1
addi $t1, $t0, -1
lw $t2, -0($fp)
lw $t3, -136($fp)
# local_a2i_Parse_internal_32 <- Type of s
la $t3, type_String
lw $t4, -140($fp)
# Saves in local_a2i_Parse_internal_33 data_0
la $t4, data_0
# local_a2i_Parse_internal_32 <- local_a2i_Parse_internal_32 = local_a2i_Parse_internal_33
move $t8, $t3
move $t9, $t4
loop_52:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_52
beqz $a1, mismatch_52
seq $v0, $a0, $a1
beqz $v0, mismatch_52
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_52
mismatch_52:
li $v0, 0
j end_52
check_52:
bnez $a1, mismatch_52
li $v0, 1
end_52:
move $t3, $v0
# If not local_a2i_Parse_internal_32 goto continue__1051
sw $t0, -120($fp)
sw $t1, -116($fp)
sw $t2, -0($fp)
sw $t3, -136($fp)
sw $t4, -140($fp)
beqz $t3, continue__1051
la $a0, dispatch_error
j .raise
continue__1051:
lw $t0, -132($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -116($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -116($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -132($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -144($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_Parse
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -4($fp)
sw $t2, -144($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -144($fp)
# saves the return value
move $t0, $v0
lw $t1, -112($fp)
# local_a2i_Parse_internal_26 <- ~local_a2i_Parse_internal_34
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -48($fp)
# Moving local_a2i_Parse_internal_26 to local_a2i_Parse_internal_10
move $t2, $t1
sw $t2, -48($fp)
sw $t0, -144($fp)
sw $t1, -112($fp)
sw $t2, -48($fp)
end__964:
lw $t0, -48($fp)
lw $t1, -24($fp)
# Moving local_a2i_Parse_internal_10 to local_a2i_Parse_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -48($fp)
sw $t1, -24($fp)
j end__943
true__943:
lw $t0, -24($fp)
# Moving 0 to local_a2i_Parse_internal_4
li $t0, 0
sw $t0, -24($fp)
sw $t0, -24($fp)
end__943:
lw $t0, -24($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 148
jr $ra


function_a2i_aux_Parse:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_a2i_aux_Parse_int_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_j_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_i_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_c_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_Parse_internal_50 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_a2i_aux_Parse_int_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_a2i_aux_Parse_internal_3 <- Type of s
la $t2, type_String
lw $t3, -24($fp)
# Saves in local_a2i_aux_Parse_internal_4 data_0
la $t3, data_0
# local_a2i_aux_Parse_internal_3 <- local_a2i_aux_Parse_internal_3 = local_a2i_aux_Parse_internal_4
move $t8, $t2
move $t9, $t3
loop_53:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_53
beqz $a1, mismatch_53
seq $v0, $a0, $a1
beqz $v0, mismatch_53
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_53
mismatch_53:
li $v0, 0
j end_53
check_53:
bnez $a1, mismatch_53
li $v0, 1
end_53:
move $t2, $v0
# If not local_a2i_aux_Parse_internal_3 goto continue__1081
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
sw $t3, -24($fp)
beqz $t2, continue__1081
la $a0, dispatch_error
j .raise
continue__1081:
lw $t0, -16($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_a2i_aux_Parse_internal_2 to local_a2i_aux_Parse_j_1
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -28($fp)
# Moving 0 to local_a2i_aux_Parse_i_5
li $t2, 0
sw $t2, -28($fp)
lw $t3, -32($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t3, $v0
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -28($fp)
sw $t3, -32($fp)
start__1094:
lw $t0, -28($fp)
lw $t1, -12($fp)
lw $t2, -36($fp)
# local_a2i_aux_Parse_internal_7 <- local_a2i_aux_Parse_i_5 < local_a2i_aux_Parse_j_1
slt $t2, $t0, $t1
# If not local_a2i_aux_Parse_internal_7 goto end__1094
sw $t0, -28($fp)
sw $t1, -12($fp)
sw $t2, -36($fp)
beqz $t2, end__1094
lw $t0, -0($fp)
lw $t1, -48($fp)
# local_a2i_aux_Parse_internal_10 <- Type of s
la $t1, type_String
lw $t2, -52($fp)
# Saves in local_a2i_aux_Parse_internal_11 data_0
la $t2, data_0
# local_a2i_aux_Parse_internal_10 <- local_a2i_aux_Parse_internal_10 = local_a2i_aux_Parse_internal_11
move $t8, $t1
move $t9, $t2
loop_54:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_54
beqz $a1, mismatch_54
seq $v0, $a0, $a1
beqz $v0, mismatch_54
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_54
mismatch_54:
li $v0, 0
j end_54
check_54:
bnez $a1, mismatch_54
li $v0, 1
end_54:
move $t1, $v0
# If not local_a2i_aux_Parse_internal_10 goto continue__1105
sw $t0, -0($fp)
sw $t1, -48($fp)
sw $t2, -52($fp)
beqz $t1, continue__1105
la $a0, dispatch_error
j .raise
continue__1105:
lw $t0, -44($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -28($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -44($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Moving local_a2i_aux_Parse_internal_9 to local_a2i_aux_Parse_c_8
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -60($fp)
# Saves in local_a2i_aux_Parse_internal_13 data_21
la $t2, data_21
lw $t3, -56($fp)
# local_a2i_aux_Parse_internal_12 <- local_a2i_aux_Parse_c_8 = local_a2i_aux_Parse_internal_13
move $t8, $t1
move $t9, $t2
loop_55:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_55
beqz $a1, mismatch_55
seq $v0, $a0, $a1
beqz $v0, mismatch_55
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_55
mismatch_55:
li $v0, 0
j end_55
check_55:
bnez $a1, mismatch_55
li $v0, 1
end_55:
move $t3, $v0
# If local_a2i_aux_Parse_internal_12 goto true__1121
sw $t0, -44($fp)
sw $t1, -40($fp)
sw $t2, -60($fp)
sw $t3, -56($fp)
bnez $t3, true__1121
lw $t0, -72($fp)
# Saves in local_a2i_aux_Parse_internal_16 data_22
la $t0, data_22
lw $t1, -40($fp)
lw $t2, -68($fp)
# local_a2i_aux_Parse_internal_15 <- local_a2i_aux_Parse_c_8 = local_a2i_aux_Parse_internal_16
move $t8, $t1
move $t9, $t0
loop_56:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_56
beqz $a1, mismatch_56
seq $v0, $a0, $a1
beqz $v0, mismatch_56
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_56
mismatch_56:
li $v0, 0
j end_56
check_56:
bnez $a1, mismatch_56
li $v0, 1
end_56:
move $t2, $v0
# If local_a2i_aux_Parse_internal_15 goto true__1128
sw $t0, -72($fp)
sw $t1, -40($fp)
sw $t2, -68($fp)
bnez $t2, true__1128
lw $t0, -8($fp)
lw $t1, -84($fp)
# local_a2i_aux_Parse_internal_19 <- local_a2i_aux_Parse_int_0 * 10
li $t9, 10
mult $t0, $t9
mflo $t1
lw $t2, -0($fp)
lw $t3, -92($fp)
# local_a2i_aux_Parse_internal_21 <- Type of s
la $t3, type_String
lw $t4, -96($fp)
# Saves in local_a2i_aux_Parse_internal_22 data_0
la $t4, data_0
# local_a2i_aux_Parse_internal_21 <- local_a2i_aux_Parse_internal_21 = local_a2i_aux_Parse_internal_22
move $t8, $t3
move $t9, $t4
loop_57:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_57
beqz $a1, mismatch_57
seq $v0, $a0, $a1
beqz $v0, mismatch_57
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_57
mismatch_57:
li $v0, 0
j end_57
check_57:
bnez $a1, mismatch_57
li $v0, 1
end_57:
move $t3, $v0
# If not local_a2i_aux_Parse_internal_21 goto continue__1138
sw $t0, -8($fp)
sw $t1, -84($fp)
sw $t2, -0($fp)
sw $t3, -92($fp)
sw $t4, -96($fp)
beqz $t3, continue__1138
la $a0, dispatch_error
j .raise
continue__1138:
lw $t0, -88($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -28($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -88($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -100($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_c2i_Parse
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -88($fp)
sw $t1, -4($fp)
sw $t2, -100($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -100($fp)
# saves the return value
move $t0, $v0
lw $t1, -84($fp)
lw $t2, -80($fp)
# local_a2i_aux_Parse_internal_18 <- local_a2i_aux_Parse_internal_19 + local_a2i_aux_Parse_internal_23
add $t2, $t1, $t0
lw $t3, -8($fp)
# Moving local_a2i_aux_Parse_internal_18 to local_a2i_aux_Parse_int_0
move $t3, $t2
sw $t3, -8($fp)
lw $t4, -28($fp)
lw $t5, -104($fp)
# local_a2i_aux_Parse_internal_24 <- local_a2i_aux_Parse_i_5 + 1
addi $t5, $t4, 1
# Moving local_a2i_aux_Parse_internal_24 to local_a2i_aux_Parse_i_5
move $t4, $t5
sw $t4, -28($fp)
lw $t6, -12($fp)
lw $t7, -108($fp)
# local_a2i_aux_Parse_internal_25 <- local_a2i_aux_Parse_i_5 = local_a2i_aux_Parse_j_1
seq $t7, $t4, $t6
# If local_a2i_aux_Parse_internal_25 goto true__1158
sw $t0, -100($fp)
sw $t1, -84($fp)
sw $t2, -80($fp)
sw $t3, -8($fp)
sw $t4, -28($fp)
sw $t5, -104($fp)
sw $t6, -12($fp)
sw $t7, -108($fp)
bnez $t7, true__1158
lw $t0, -116($fp)
# Saves in local_a2i_aux_Parse_internal_27 data_23
la $t0, data_23
lw $t1, -112($fp)
# Moving local_a2i_aux_Parse_internal_27 to local_a2i_aux_Parse_internal_26
move $t1, $t0
sw $t1, -112($fp)
sw $t0, -116($fp)
sw $t1, -112($fp)
j end__1158
true__1158:
lw $t0, -120($fp)
# Saves in local_a2i_aux_Parse_internal_28 data_24
la $t0, data_24
lw $t1, -4($fp)
# self . rest <- SET local_a2i_aux_Parse_internal_28
sw $t0, 16($t1)
lw $t2, -112($fp)
# Moving local_a2i_aux_Parse_internal_28 to local_a2i_aux_Parse_internal_26
move $t2, $t0
sw $t2, -112($fp)
sw $t0, -120($fp)
sw $t1, -4($fp)
sw $t2, -112($fp)
end__1158:
lw $t0, -112($fp)
lw $t1, -124($fp)
# Moving local_a2i_aux_Parse_internal_26 to local_a2i_aux_Parse_internal_29
move $t1, $t0
sw $t1, -124($fp)
lw $t2, -76($fp)
# Moving local_a2i_aux_Parse_internal_29 to local_a2i_aux_Parse_internal_17
move $t2, $t1
sw $t2, -76($fp)
sw $t0, -112($fp)
sw $t1, -124($fp)
sw $t2, -76($fp)
j end__1128
true__1128:
lw $t0, -28($fp)
lw $t1, -128($fp)
# local_a2i_aux_Parse_internal_30 <- local_a2i_aux_Parse_i_5 + 1
addi $t1, $t0, 1
lw $t2, -0($fp)
lw $t3, -144($fp)
# local_a2i_aux_Parse_internal_34 <- Type of s
la $t3, type_String
lw $t4, -148($fp)
# Saves in local_a2i_aux_Parse_internal_35 data_0
la $t4, data_0
# local_a2i_aux_Parse_internal_34 <- local_a2i_aux_Parse_internal_34 = local_a2i_aux_Parse_internal_35
move $t8, $t3
move $t9, $t4
loop_58:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_58
beqz $a1, mismatch_58
seq $v0, $a0, $a1
beqz $v0, mismatch_58
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_58
mismatch_58:
li $v0, 0
j end_58
check_58:
bnez $a1, mismatch_58
li $v0, 1
end_58:
move $t3, $v0
# If not local_a2i_aux_Parse_internal_34 goto continue__1184
sw $t0, -28($fp)
sw $t1, -128($fp)
sw $t2, -0($fp)
sw $t3, -144($fp)
sw $t4, -148($fp)
beqz $t3, continue__1184
la $a0, dispatch_error
j .raise
continue__1184:
lw $t0, -140($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -140($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -140($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
lw $t2, -136($fp)
# local_a2i_aux_Parse_internal_32 <- local_a2i_aux_Parse_internal_33 - local_a2i_aux_Parse_i_5
sub $t2, $t0, $t1
lw $t3, -132($fp)
# local_a2i_aux_Parse_internal_31 <- local_a2i_aux_Parse_internal_32 - 1
addi $t3, $t2, -1
lw $t4, -0($fp)
lw $t5, -156($fp)
# local_a2i_aux_Parse_internal_37 <- Type of s
la $t5, type_String
lw $t6, -160($fp)
# Saves in local_a2i_aux_Parse_internal_38 data_0
la $t6, data_0
# local_a2i_aux_Parse_internal_37 <- local_a2i_aux_Parse_internal_37 = local_a2i_aux_Parse_internal_38
move $t8, $t5
move $t9, $t6
loop_59:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_59
beqz $a1, mismatch_59
seq $v0, $a0, $a1
beqz $v0, mismatch_59
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_59
mismatch_59:
li $v0, 0
j end_59
check_59:
bnez $a1, mismatch_59
li $v0, 1
end_59:
move $t5, $v0
# If not local_a2i_aux_Parse_internal_37 goto continue__1199
sw $t0, -140($fp)
sw $t1, -28($fp)
sw $t2, -136($fp)
sw $t3, -132($fp)
sw $t4, -0($fp)
sw $t5, -156($fp)
sw $t6, -160($fp)
beqz $t5, continue__1199
la $a0, dispatch_error
j .raise
continue__1199:
lw $t0, -152($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -132($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -128($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -152($fp)
sw $t1, -132($fp)
sw $t2, -128($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -152($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# self . rest <- SET local_a2i_aux_Parse_internal_36
sw $t0, 16($t1)
lw $t2, -12($fp)
lw $t3, -28($fp)
# Moving local_a2i_aux_Parse_j_1 to local_a2i_aux_Parse_i_5
move $t3, $t2
sw $t3, -28($fp)
lw $t4, -164($fp)
# Moving local_a2i_aux_Parse_j_1 to local_a2i_aux_Parse_internal_39
move $t4, $t2
sw $t4, -164($fp)
lw $t5, -76($fp)
# Moving local_a2i_aux_Parse_internal_39 to local_a2i_aux_Parse_internal_17
move $t5, $t4
sw $t5, -76($fp)
sw $t0, -152($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -28($fp)
sw $t4, -164($fp)
sw $t5, -76($fp)
end__1128:
lw $t0, -76($fp)
lw $t1, -64($fp)
# Moving local_a2i_aux_Parse_internal_17 to local_a2i_aux_Parse_internal_14
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -76($fp)
sw $t1, -64($fp)
j end__1121
true__1121:
lw $t0, -28($fp)
lw $t1, -168($fp)
# local_a2i_aux_Parse_internal_40 <- local_a2i_aux_Parse_i_5 + 1
addi $t1, $t0, 1
lw $t2, -0($fp)
lw $t3, -184($fp)
# local_a2i_aux_Parse_internal_44 <- Type of s
la $t3, type_String
lw $t4, -188($fp)
# Saves in local_a2i_aux_Parse_internal_45 data_0
la $t4, data_0
# local_a2i_aux_Parse_internal_44 <- local_a2i_aux_Parse_internal_44 = local_a2i_aux_Parse_internal_45
move $t8, $t3
move $t9, $t4
loop_60:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_60
beqz $a1, mismatch_60
seq $v0, $a0, $a1
beqz $v0, mismatch_60
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_60
mismatch_60:
li $v0, 0
j end_60
check_60:
bnez $a1, mismatch_60
li $v0, 1
end_60:
move $t3, $v0
# If not local_a2i_aux_Parse_internal_44 goto continue__1225
sw $t0, -28($fp)
sw $t1, -168($fp)
sw $t2, -0($fp)
sw $t3, -184($fp)
sw $t4, -188($fp)
beqz $t3, continue__1225
la $a0, dispatch_error
j .raise
continue__1225:
lw $t0, -180($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -180($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -180($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
lw $t2, -176($fp)
# local_a2i_aux_Parse_internal_42 <- local_a2i_aux_Parse_internal_43 - local_a2i_aux_Parse_i_5
sub $t2, $t0, $t1
lw $t3, -172($fp)
# local_a2i_aux_Parse_internal_41 <- local_a2i_aux_Parse_internal_42 - 1
addi $t3, $t2, -1
lw $t4, -0($fp)
lw $t5, -196($fp)
# local_a2i_aux_Parse_internal_47 <- Type of s
la $t5, type_String
lw $t6, -200($fp)
# Saves in local_a2i_aux_Parse_internal_48 data_0
la $t6, data_0
# local_a2i_aux_Parse_internal_47 <- local_a2i_aux_Parse_internal_47 = local_a2i_aux_Parse_internal_48
move $t8, $t5
move $t9, $t6
loop_61:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_61
beqz $a1, mismatch_61
seq $v0, $a0, $a1
beqz $v0, mismatch_61
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_61
mismatch_61:
li $v0, 0
j end_61
check_61:
bnez $a1, mismatch_61
li $v0, 1
end_61:
move $t5, $v0
# If not local_a2i_aux_Parse_internal_47 goto continue__1240
sw $t0, -180($fp)
sw $t1, -28($fp)
sw $t2, -176($fp)
sw $t3, -172($fp)
sw $t4, -0($fp)
sw $t5, -196($fp)
sw $t6, -200($fp)
beqz $t5, continue__1240
la $a0, dispatch_error
j .raise
continue__1240:
lw $t0, -192($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -172($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -168($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -192($fp)
sw $t1, -172($fp)
sw $t2, -168($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -192($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# self . rest <- SET local_a2i_aux_Parse_internal_46
sw $t0, 16($t1)
lw $t2, -12($fp)
lw $t3, -28($fp)
# Moving local_a2i_aux_Parse_j_1 to local_a2i_aux_Parse_i_5
move $t3, $t2
sw $t3, -28($fp)
lw $t4, -204($fp)
# Moving local_a2i_aux_Parse_j_1 to local_a2i_aux_Parse_internal_49
move $t4, $t2
sw $t4, -204($fp)
lw $t5, -64($fp)
# Moving local_a2i_aux_Parse_internal_49 to local_a2i_aux_Parse_internal_14
move $t5, $t4
sw $t5, -64($fp)
sw $t0, -192($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -28($fp)
sw $t4, -204($fp)
sw $t5, -64($fp)
end__1121:
lw $t0, -64($fp)
lw $t1, -32($fp)
# Moving local_a2i_aux_Parse_internal_14 to local_a2i_aux_Parse_internal_6
move $t1, $t0
sw $t1, -32($fp)
sw $t0, -64($fp)
sw $t1, -32($fp)
j start__1094
end__1094:
lw $t0, -8($fp)
lw $t1, -208($fp)
# Moving local_a2i_aux_Parse_int_0 to local_a2i_aux_Parse_internal_50
move $t1, $t0
sw $t1, -208($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -208($fp)
# Removing all locals from stack
addiu $sp, $sp, 212
jr $ra


function_Main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_BoolOp
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 56($t8)
sw $v0, 8($t0)
lw $t1, -0($fp)
# self . boolop <- SET local_Main_Main_internal_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Saves in local_Main_Main_internal_1 data_25
la $t2, data_25
# self . rest <- SET local_Main_Main_internal_1
sw $t2, 16($t1)
lw $t3, -12($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_read_input_Parse
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . g <- SET local_Main_Main_internal_2
sw $t0, 20($t1)
lw $t2, -16($fp)
# Moving self to local_Main_Main_internal_3
move $t2, $t1
sw $t2, -16($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_main_Main_g_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_g_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_8 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_main_Main_g_0 <- GET self . g
lw $t1, 20($t0)
lw $t2, -12($fp)
# local_main_Main_internal_2 <- Type of local_main_Main_g_0
lw $t2, 0($t1)
lw $t3, -16($fp)
# Saves in local_main_Main_internal_3 data_0
la $t3, data_0
# local_main_Main_internal_2 <- local_main_Main_internal_2 = local_main_Main_internal_3
move $t8, $t2
move $t9, $t3
loop_62:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_62
beqz $a1, mismatch_62
seq $v0, $a0, $a1
beqz $v0, mismatch_62
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_62
mismatch_62:
li $v0, 0
j end_62
check_62:
bnez $a1, mismatch_62
li $v0, 1
end_62:
move $t2, $v0
# If not local_main_Main_internal_2 goto continue__1284
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
beqz $t2, continue__1284
la $a0, dispatch_error
j .raise
continue__1284:
lw $t0, -4($fp)
lw $t1, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_V_Graph
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_main_Main_g_4 <- GET self . g
lw $t2, 20($t1)
lw $t3, -28($fp)
# local_main_Main_internal_6 <- Type of local_main_Main_g_4
lw $t3, 0($t2)
lw $t4, -32($fp)
# Saves in local_main_Main_internal_7 data_0
la $t4, data_0
# local_main_Main_internal_6 <- local_main_Main_internal_6 = local_main_Main_internal_7
move $t8, $t3
move $t9, $t4
loop_63:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_63
beqz $a1, mismatch_63
seq $v0, $a0, $a1
beqz $v0, mismatch_63
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_63
mismatch_63:
li $v0, 0
j end_63
check_63:
bnez $a1, mismatch_63
li $v0, 1
end_63:
move $t3, $v0
# If not local_main_Main_internal_6 goto continue__1298
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
sw $t3, -28($fp)
sw $t4, -32($fp)
beqz $t3, continue__1298
la $a0, dispatch_error
j .raise
continue__1298:
lw $t0, -20($fp)
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_E_Graph
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_main_Main_internal_5 to local_main_Main_internal_8
move $t1, $t0
sw $t1, -36($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_and_BoolOp:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value b1
addiu $fp, $fp, 4
# Pops the register with the param value b2
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_and_BoolOp_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# If b1 goto true__1315
sw $t0, -4($fp)
bnez $t0, true__1315
lw $t0, -12($fp)
# Moving 0 to local_and_BoolOp_internal_0
li $t0, 0
sw $t0, -12($fp)
sw $t0, -12($fp)
j end__1315
true__1315:
lw $t0, -0($fp)
lw $t1, -12($fp)
# Moving b2 to local_and_BoolOp_internal_0
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -0($fp)
sw $t1, -12($fp)
end__1315:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_or_BoolOp:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value b1
addiu $fp, $fp, 4
# Pops the register with the param value b2
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_or_BoolOp_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# If b1 goto true__1327
sw $t0, -4($fp)
bnez $t0, true__1327
lw $t0, -0($fp)
lw $t1, -12($fp)
# Moving b2 to local_or_BoolOp_internal_0
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -0($fp)
sw $t1, -12($fp)
j end__1327
true__1327:
lw $t0, -12($fp)
# Moving 1 to local_or_BoolOp_internal_0
li $t0, 1
sw $t0, -12($fp)
sw $t0, -12($fp)
end__1327:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra

# Raise exception method
.raise:
li $v0, 4
syscall
li $v0, 17
li $a0, 1
syscall

.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "
"
string_abort: .asciiz "Abort called from class String
"
int_abort: .asciiz "Abort called from class Int
"
bool_abort: .asciiz "Abort called from class Bool
"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_Graph: .asciiz "Graph"
type_Vertice: .asciiz "Vertice"
type_Edge: .asciiz "Edge"
type_EList: .asciiz "EList"
type_ECons: .asciiz "ECons"
type_VList: .asciiz "VList"
type_VCons: .asciiz "VCons"
type_Parse: .asciiz "Parse"
type_Main: .asciiz "Main"
type_BoolOp: .asciiz "BoolOp"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz " ("
data_2: .asciiz ","
data_3: .asciiz ")"
data_4: .asciiz "
"
data_5: .asciiz "
"
data_6: .asciiz ""
data_7: .asciiz "
"
data_8: .asciiz ""
data_9: .asciiz "0"
data_10: .asciiz "1"
data_11: .asciiz "2"
data_12: .asciiz "3"
data_13: .asciiz "4"
data_14: .asciiz "5"
data_15: .asciiz "6"
data_16: .asciiz "7"
data_17: .asciiz "8"
data_18: .asciiz "9"
data_19: .asciiz "-"
data_20: .asciiz " "
data_21: .asciiz " "
data_22: .asciiz ","
data_23: .asciiz ""
data_24: .asciiz ""
data_25: .asciiz ""
zero_error: .asciiz "Division by zero error
"
case_void_error: .asciiz "Case on void error
"
dispatch_error: .asciiz "Dispatch on void error
"
case_error: .asciiz "Case statement without a matching branch error
"
index_error: .asciiz "Substring out of range error
"
heap_error: .asciiz "Heap overflow error
"