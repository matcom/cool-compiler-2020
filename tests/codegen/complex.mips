
# Code generated by PyCoolc.
# Eliane Puerta, Liset Alfaro, Adrian Gonzalez --- Mon Dec 14 11:08:38 2020
# School of Math and Computer Science, University of Havana
# 

.data
dummy:   .word    0
IO:   .asciiz    "IO"
# Function END
Object:   .asciiz    "Object"
# Function END
String:   .asciiz    "String"
# Function END
Bool:   .asciiz    "Bool"
# Function END
Int:   .asciiz    "Int"
# Function END
Complex:   .asciiz    "Complex"
# Function END
Main:   .asciiz    "Main"
# Function END
# 


#  **** VTABLE for type IO ****
IO_vtable:   .word    function_type_name_at_Object, function_out_string_at_IO, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, function_in_string_at_IO, function_in_int_at_IO, dummy, function_out_int_at_IO, dummy
# Function END
# 


#  **** Type RECORD for type IO ****
IO_start: 
   IO_vtable_pointer:   .word    IO_vtable
   # Function END
IO_end: 
# 


#  **** VTABLE for type Object ****
Object_vtable:   .word    function_type_name_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Object ****
Object_start: 
   Object_vtable_pointer:   .word    Object_vtable
   # Function END
Object_end: 
# 


#  **** VTABLE for type String ****
String_vtable:   .word    function_type_name_at_Object, dummy, dummy, dummy, dummy, dummy, function_length_at_String, function_substr_at_String, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, function_concat_at_String, dummy, dummy
# Function END
# 


#  **** Type RECORD for type String ****
String_start: 
   String_vtable_pointer:   .word    String_vtable
   # Function END
String_end: 
# 


#  **** VTABLE for type Bool ****
Bool_vtable:   .word    function_type_name_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Bool ****
Bool_start: 
   Bool_vtable_pointer:   .word    Bool_vtable
   # Function END
Bool_end: 
# 


#  **** VTABLE for type Int ****
Int_vtable:   .word    function_type_name_at_Object, dummy, dummy, dummy, dummy, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, dummy, dummy, dummy, dummy, dummy
# Function END
# 


#  **** Type RECORD for type Int ****
Int_start: 
   Int_vtable_pointer:   .word    Int_vtable
   # Function END
Int_end: 
# 


#  **** VTABLE for type Complex ****
Complex_vtable:   .word    function_type_name_at_Object, function_out_string_at_IO, function_print_at_Complex, function_reflect_0_at_Complex, dummy, function_reflect_X_at_Complex, dummy, dummy, function_copy_at_Object, function_init_at_Complex, function_abort_at_Object, function_in_string_at_IO, function_in_int_at_IO, dummy, function_out_int_at_IO, function_reflect_Y_at_Complex
# Function END
# 


#  **** Type RECORD for type Complex ****
Complex_start: 
   Complex_vtable_pointer:   .word    Complex_vtable
   # Function END
Complex_end: 
# 


#  **** VTABLE for type Main ****
Main_vtable:   .word    function_type_name_at_Object, function_out_string_at_IO, dummy, dummy, function_main_at_Main, dummy, dummy, dummy, function_copy_at_Object, dummy, function_abort_at_Object, function_in_string_at_IO, function_in_int_at_IO, dummy, function_out_int_at_IO, dummy
# Function END
# 


#  **** Type RECORD for type Main ****
Main_start: 
   Main_vtable_pointer:   .word    Main_vtable
   # Function END
Main_end: 
# 


data_0:   .asciiz    ""
# 


data_1:   .asciiz    "Abort called from class "
# 


data_2:   .asciiz    "\n"
# 


IO__TDT:   .word    0, -1, -1, -1, -1, 1, 1
Object__TDT:   .word    1, 0, 1, 1, 1, 2, 2
String__TDT:   .word    -1, -1, 0, -1, -1, -1, -1
Bool__TDT:   .word    -1, -1, -1, 0, -1, -1, -1
Int__TDT:   .word    -1, -1, -1, -1, 0, -1, -1
Complex__TDT:   .word    -1, -1, -1, -1, -1, 0, -1
Main__TDT:   .word    -1, -1, -1, -1, -1, -1, 0
# 


data_4:   .asciiz    "+"
# 


data_5:   .asciiz    "I"
# 


data_6:   .asciiz    "=)\n"
# 


data_7:   .asciiz    "=(\n"
# 


.text
main: 
   jal entry
   # syscall code 10 is for exit
   li $v0, 10
   syscall
   # Function END

# function_in_string_at_IO implementation.
# @Params:
function_in_string_at_IO: 
   # Allocate stack frame for function function_in_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_string_at_IO_internal_0 --> -4($fp)
   # Allocating 1024 bytes of memory
   li $a0, 1024
   li $v0, 9
   syscall
   move $t0, $v0
   move $a0, $v0
   li $a1, 1024
   li $v0, 8
   syscall
   move $t2, $zero
   move $t3, $zero
   move $t1, $t0
   lb $t3, 0($t1)
   beqz $t3, end_loop
   read_length_loop: 
      lb $t3, 0($t1)
      beqz $t3, end_read_length_loop
      addu $t1, $t1, 1
      addu $t2, $t2, 1
      j read_length_loop
      end_read_length_loop: 
      subu $t1, $t1, 1
      sb $zero, 0($t1)
      subu $t2, $t2, 1
      end_loop: 
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t1, String
      sw $t1, 0($v0)
      la $t1, String_start
      sw $t1, 4($v0)
      # Load type offset
      li $t1, 8
      sw $t1, 8($v0)
      sw $t0, 12($v0)
      sw $t2, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_in_string_at_IO_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_in_string_at_IO.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      jr $ra
      # Function END


# function_out_int_at_IO implementation.
# @Params:
# 	0($fp) = param_out_int_at_IO_x_0
function_out_int_at_IO: 
   # Allocate stack frame for function function_out_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PRINT_INT param_out_int_at_IO_x_0
   # PARAM param_out_int_at_IO_x_0 --> 0($fp)
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 1
   syscall
   # LOCAL local_out_int_at_IO_internal_0 --> -4($fp)
   # local_out_int_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_out_string_at_IO implementation.
# @Params:
# 	0($fp) = param_out_string_at_IO_x_0
function_out_string_at_IO: 
   # Allocate stack frame for function function_out_string_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # PARAM param_out_string_at_IO_x_0 --> 0($fp)
   # PRINT_STR param_out_string_at_IO_x_0
   lw $v0, 0($fp)
   lw $a0, 12($v0)
   li $v0, 4
   syscall
   # LOCAL local_out_string_at_IO_internal_0 --> -4($fp)
   # local_out_string_at_IO_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_out_string_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_out_string_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   # Deallocate function args
   addu $sp, $sp, 4
   jr $ra
   # Function END


# function_in_int_at_IO implementation.
# @Params:
function_in_int_at_IO: 
   # Allocate stack frame for function function_in_int_at_IO.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_in_int_at_IO_internal_0 --> -4($fp)
   # local_in_int_at_IO_internal_0 = READ_INT
   li $v0, 5
   syscall
   move $a2, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   sw $a2, 12($v0)
   sw $v0, -4($fp)
   # RETURN local_in_int_at_IO_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_in_int_at_IO.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_abort_at_Object implementation.
# @Params:
function_abort_at_Object: 
   # Allocate stack frame for function function_abort_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # LOCAL local_abort_at_Object_internal_0 --> -4($fp)
   la $a0, data_1
   li $v0, 4
   syscall
   lw $a0, -4($fp)
   li $v0, 4
   syscall
   la $a0, data_2
   li $v0, 4
   syscall
   li $v0, 10
   syscall
   # Function END


# function_copy_at_Object implementation.
# @Params:
function_copy_at_Object: 
   # Allocate stack frame for function function_copy_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_copy_at_Object_internal_0 --> -4($fp)
   # local_copy_at_Object_internal_0 = SELF
   sw $s1, -4($fp)
   # RETURN local_copy_at_Object_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_copy_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_type_name_at_Object implementation.
# @Params:
function_type_name_at_Object: 
   # Allocate stack frame for function function_type_name_at_Object.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_type_name_at_Object_internal_0 --> -4($fp)
   lw $t0, 0($s1)
   sw $t0, -4($fp)
   # RETURN local_type_name_at_Object_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function function_type_name_at_Object.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_concat_at_String implementation.
# @Params:
# 	0($fp) = param_concat_at_String_s_0
function_concat_at_String: 
   # Allocate stack frame for function function_concat_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_concat_at_String_internal_0 = self.CONCAT <cil.nodes.ParamNode object at 0x7fe4209f0cd0>
   # LOCAL local_concat_at_String_internal_0 --> -4($fp)
   # PARAM param_concat_at_String_s_0 --> 0($fp)
   # Get first string length from self
   lw $t0, 16($s1)
   # Get second string length from param
   lw $v0, 0($fp)
   lw $t1, 16($v0)
   # Save new string length in a0 for memory allocation
   addu $a0, $t0, $t1
   move $t3, $a0
   # Get first string from self
   lw $t0, 12($s1)
   # Get second string from param
   lw $t1, 12($v0)
   addu $a0, $a0, 4
   li $v0, 9
   syscall
   move $t2, $v0
   move $t4, $zero
   concat_loop1: 
      # Compare t0 with \0
      lb $t4, 0($t0)
      beqz $t4, concat_loop1_end
      # Copy 1 byte
      sb $t4, 0($t2)
      addu $t2, $t2, 1
      addu $t0, $t0, 1
      j concat_loop1
      concat_loop1_end: 
      # Copy second string
      concat_loop2: 
         # Compare t1 with \0
         lb $t4, 0($t1)
         beqz $t4, concat_loop2_end
         # Copy 1 byte
         sb $t4, 0($t2)
         addu $t2, $t2, 1
         addu $t1, $t1, 1
         j concat_loop2
         concat_loop2_end: 
         sb $zero, 0($t2)
         # v0 contains resulting string
         move $t1, $v0
         # Allocating 20 bytes of memory
         li $a0, 20
         li $v0, 9
         syscall
         # Allocating string
         la $t0, String
         sw $t0, 0($v0)
         la $t0, String_start
         sw $t0, 4($v0)
         # Load type offset
         li $t0, 8
         sw $t0, 8($v0)
         sw $t1, 12($v0)
         sw $t3, 16($v0)
         sw $v0, -4($fp)
         # RETURN local_concat_at_String_internal_0
         lw $v0, -4($fp)
         # Deallocate stack frame for function function_concat_at_String.
         # Restore $ra
         lw $ra, 4($sp)
         # Restore $fp
         lw $fp, 0($sp)
         # Restore Stack pointer $sp
         addu $sp, $sp, 32
         # Deallocate function args
         addu $sp, $sp, 4
         jr $ra
         # Function END


# function_substr_at_String implementation.
# @Params:
# 	0($fp) = param_substr_at_String_l_0
# 	4($fp) = param_substr_at_String_r_1
function_substr_at_String: 
   # Allocate stack frame for function function_substr_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local_substr_at_String_internal_0 --> -4($fp)
   # PARAM param_substr_at_String_l_0 --> 4($fp)
   # PARAM param_substr_at_String_r_1 --> 0($fp)
   lw $t0, 12($s1)
   lw $t2, 4($fp)
   lw $t2, 12($t2)
   addu $t0, $t0, $t2
   lw $a0, 0($fp)
   lw $a0, 12($a0)
   move $t3, $a0
   move $t1, $a0
   addu $a0, $a0, 1
   li $v0, 9
   syscall
   move $t2, $v0
   substr_loop: 
      beqz $t1, substr_end
      lb $a0, 0($t0)
      sb $a0, 0($t2)
      addu $t0, $t0, 1
      addu $t2, $t2, 1
      subu $t1, $t1, 1
      j substr_loop
      substr_end: 
      sb $zero, 0($t2)
      move $t1, $v0
      # Allocating 20 bytes of memory
      li $a0, 20
      li $v0, 9
      syscall
      # Allocating string
      la $t0, String
      sw $t0, 0($v0)
      la $t0, String_start
      sw $t0, 4($v0)
      # Load type offset
      li $t0, 8
      sw $t0, 8($v0)
      sw $t1, 12($v0)
      sw $t3, 16($v0)
      sw $v0, -4($fp)
      # RETURN local_substr_at_String_internal_0
      lw $v0, -4($fp)
      # Deallocate stack frame for function function_substr_at_String.
      # Restore $ra
      lw $ra, 4($sp)
      # Restore $fp
      lw $fp, 0($sp)
      # Restore Stack pointer $sp
      addu $sp, $sp, 32
      # Deallocate function args
      addu $sp, $sp, 8
      jr $ra
      # Function END


# function_length_at_String implementation.
# @Params:
function_length_at_String: 
   # Allocate stack frame for function function_length_at_String.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_length_at_String_internal_0 = GETATTRIBUTE length String
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   lw $t0, 16($s1)
   sw $t0, -4($fp)
   # LOCAL local_length_at_String_internal_1 --> -8($fp)
   # LOCAL local_length_at_String_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -4($fp)
   sw $t0, 12($v0)
   sw $v0, -8($fp)
   # RETURN local_length_at_String_internal_1
   lw $v0, -8($fp)
   # Deallocate stack frame for function function_length_at_String.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# entry implementation.
# @Params:
entry: 
   # Allocate stack frame for function entry.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local__internal_0 --> -4($fp)
   # local__internal_0 = ALLOCATE Main
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Main
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 12 bytes of memory
   li $a0, 12
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Main_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 24
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -4($fp)
   # LOCAL local__internal_0 --> -4($fp)
   lw $s1, -4($fp)
   # local__internal_1 = CALL main
   # LOCAL local__internal_1 --> -8($fp)
   # LOCAL local__internal_0 --> -4($fp)
   # Save new self pointer in $s1
   lw $s1, -4($fp)
   # Get pointer to type's VTABLE
   la $t0, Main_vtable
   # Get pointer to function address
   lw $t1, 16($t0)
   # Call function. Result is on $v0
   jalr $t1
   sw $v0, -8($fp)
   # RETURN 0
   li $v0, 0
   # Deallocate stack frame for function entry.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Complex__attrib__x__init implementation.
# @Params:
__Complex__attrib__x__init: 
   # Allocate stack frame for function __Complex__attrib__x__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local___attrib__x__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local___attrib__x__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Complex__attrib__x__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# __Complex__attrib__y__init implementation.
# @Params:
__Complex__attrib__y__init: 
   # Allocate stack frame for function __Complex__attrib__y__init.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # LOCAL local___attrib__y__init_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   # RETURN local___attrib__y__init_internal_0
   lw $v0, -4($fp)
   # Deallocate stack frame for function __Complex__attrib__y__init.
   # Restore $ra
   lw $ra, 4($sp)
   # Restore $fp
   lw $fp, 0($sp)
   # Restore Stack pointer $sp
   addu $sp, $sp, 32
   jr $ra
   # Function END


# function_init_at_Complex implementation.
# @Params:
# 	0($fp) = param_init_at_Complex_a_0
# 	4($fp) = param_init_at_Complex_b_1
function_init_at_Complex: 
   # Allocate stack frame for function function_init_at_Complex.
   subu $sp, $sp, 36
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 36
   # local_init_at_Complex_internal_2 = GETATTRIBUTE x Complex
   # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
   lw $t0, 12($s1)
   sw $t0, -12($fp)
   # IF_ZERO local_init_at_Complex_internal_2 GOTO label_FALSE_1
   # IF_ZERO local_init_at_Complex_internal_2 GOTO label_FALSE_1
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_1
   # IF_ZERO param_init_at_Complex_a_0 GOTO label_FALSE_1
   # IF_ZERO param_init_at_Complex_a_0 GOTO label_FALSE_1
   lw $t0, 4($fp)
   beq $t0, 0, label_FALSE_1
   # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with String
   la $v0, String
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_COMPARE_STRING_4
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_COMPARE_STRING_4
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_STRING_4
   # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Bool
   la $v0, Bool
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_5
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_5
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_5
   # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Int
   la $v0, Int
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_5
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_5
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_5
   # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
   # PARAM param_init_at_Complex_a_0 --> 4($fp)
   # Load pointers and SUB
   lw $a0, -12($fp)
   lw $a1, 4($fp)
   sub $a0, $a0, $a1
   sw $a0, -8($fp)
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_TRUE_2
   # IF_ZERO local_init_at_Complex_internal_1 GOTO label_TRUE_2
   lw $t0, -8($fp)
   beq $t0, 0, label_TRUE_2
   # GOTO label_FALSE_1
   j label_FALSE_1
   label_COMPARE_BY_VALUE_5: 
      # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
      # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
      # PARAM param_init_at_Complex_a_0 --> 4($fp)
      lw $a0, -12($fp)
      lw $a1, 4($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -8($fp)
      # IF_ZERO local_init_at_Complex_internal_1 GOTO label_TRUE_2
      # IF_ZERO local_init_at_Complex_internal_1 GOTO label_TRUE_2
      lw $t0, -8($fp)
      beq $t0, 0, label_TRUE_2
      # GOTO label_FALSE_1
      j label_FALSE_1
      label_COMPARE_STRING_4: 
         # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
         # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
         # PARAM param_init_at_Complex_a_0 --> 4($fp)
         # Load strings for comparison
         lw $v0, -12($fp)
         lw $v1, 4($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -8($fp)
         # IF_ZERO local_init_at_Complex_internal_1 GOTO label_CONTINUE_6
         # IF_ZERO local_init_at_Complex_internal_1 GOTO label_CONTINUE_6
         lw $t0, -8($fp)
         beq $t0, 0, label_CONTINUE_6
         # GOTO label_FALSE_1
         j label_FALSE_1
         label_CONTINUE_6: 
            # LOCAL local_init_at_Complex_internal_1 --> -8($fp)
            # LOCAL local_init_at_Complex_internal_2 --> -12($fp)
            # PARAM param_init_at_Complex_a_0 --> 4($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -12($fp)
            lw $v1, 4($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_7: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_8
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_7
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_8: 
                  # Store result
                  sw $a2, -8($fp)
                  # IF_ZERO local_init_at_Complex_internal_1 GOTO label_TRUE_2
                  # IF_ZERO local_init_at_Complex_internal_1 GOTO label_TRUE_2
                  lw $t0, -8($fp)
                  beq $t0, 0, label_TRUE_2
                  label_FALSE_1: 
                     # LOCAL local_init_at_Complex_internal_0 --> -4($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -4($fp)
                     # GOTO label_END_3
j label_END_3
label_TRUE_2: 
   # LOCAL local_init_at_Complex_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   label_END_3: 
# local_init_at_Complex_internal_5 = GETATTRIBUTE y Complex
# LOCAL local_init_at_Complex_internal_5 --> -24($fp)
lw $t0, 16($s1)
sw $t0, -24($fp)
# IF_ZERO local_init_at_Complex_internal_5 GOTO label_FALSE_9
# IF_ZERO local_init_at_Complex_internal_5 GOTO label_FALSE_9
lw $t0, -24($fp)
beq $t0, 0, label_FALSE_9
# IF_ZERO param_init_at_Complex_b_1 GOTO label_FALSE_9
# IF_ZERO param_init_at_Complex_b_1 GOTO label_FALSE_9
lw $t0, 0($fp)
beq $t0, 0, label_FALSE_9
# LOCAL local_init_at_Complex_internal_4 --> -20($fp)
# LOCAL local_init_at_Complex_internal_5 --> -24($fp)
# Comparing -24($fp) type with String
la $v0, String
lw $a0, -24($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -20($fp)
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_COMPARE_STRING_12
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_COMPARE_STRING_12
lw $t0, -20($fp)
beq $t0, 0, label_COMPARE_STRING_12
# LOCAL local_init_at_Complex_internal_4 --> -20($fp)
# LOCAL local_init_at_Complex_internal_5 --> -24($fp)
# Comparing -24($fp) type with Bool
la $v0, Bool
lw $a0, -24($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -20($fp)
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_COMPARE_BY_VALUE_13
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_COMPARE_BY_VALUE_13
lw $t0, -20($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_13
# LOCAL local_init_at_Complex_internal_4 --> -20($fp)
# LOCAL local_init_at_Complex_internal_5 --> -24($fp)
# Comparing -24($fp) type with Int
la $v0, Int
lw $a0, -24($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -20($fp)
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_COMPARE_BY_VALUE_13
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_COMPARE_BY_VALUE_13
lw $t0, -20($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_13
# LOCAL local_init_at_Complex_internal_4 --> -20($fp)
# LOCAL local_init_at_Complex_internal_5 --> -24($fp)
# PARAM param_init_at_Complex_b_1 --> 0($fp)
# Load pointers and SUB
lw $a0, -24($fp)
lw $a1, 0($fp)
sub $a0, $a0, $a1
sw $a0, -20($fp)
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_TRUE_10
# IF_ZERO local_init_at_Complex_internal_4 GOTO label_TRUE_10
lw $t0, -20($fp)
beq $t0, 0, label_TRUE_10
# GOTO label_FALSE_9
j label_FALSE_9
label_COMPARE_BY_VALUE_13: 
   # LOCAL local_init_at_Complex_internal_4 --> -20($fp)
   # LOCAL local_init_at_Complex_internal_5 --> -24($fp)
   # PARAM param_init_at_Complex_b_1 --> 0($fp)
   lw $a0, -24($fp)
   lw $a1, 0($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -20($fp)
   # IF_ZERO local_init_at_Complex_internal_4 GOTO label_TRUE_10
   # IF_ZERO local_init_at_Complex_internal_4 GOTO label_TRUE_10
   lw $t0, -20($fp)
   beq $t0, 0, label_TRUE_10
   # GOTO label_FALSE_9
   j label_FALSE_9
   label_COMPARE_STRING_12: 
      # LOCAL local_init_at_Complex_internal_4 --> -20($fp)
      # LOCAL local_init_at_Complex_internal_5 --> -24($fp)
      # PARAM param_init_at_Complex_b_1 --> 0($fp)
      # Load strings for comparison
      lw $v0, -24($fp)
      lw $v1, 0($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -20($fp)
      # IF_ZERO local_init_at_Complex_internal_4 GOTO label_CONTINUE_14
      # IF_ZERO local_init_at_Complex_internal_4 GOTO label_CONTINUE_14
      lw $t0, -20($fp)
      beq $t0, 0, label_CONTINUE_14
      # GOTO label_FALSE_9
      j label_FALSE_9
      label_CONTINUE_14: 
         # LOCAL local_init_at_Complex_internal_4 --> -20($fp)
         # LOCAL local_init_at_Complex_internal_5 --> -24($fp)
         # PARAM param_init_at_Complex_b_1 --> 0($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -24($fp)
         lw $v1, 0($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_15: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_16
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_15
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_16: 
               # Store result
               sw $a2, -20($fp)
               # IF_ZERO local_init_at_Complex_internal_4 GOTO label_TRUE_10
               # IF_ZERO local_init_at_Complex_internal_4 GOTO label_TRUE_10
               lw $t0, -20($fp)
               beq $t0, 0, label_TRUE_10
               label_FALSE_9: 
                  # LOCAL local_init_at_Complex_internal_3 --> -16($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -16($fp)
                  # GOTO label_END_11
j label_END_11
label_TRUE_10: 
   # LOCAL local_init_at_Complex_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   label_END_11: 
# LOCAL local_init_at_Complex_internal_6 --> -28($fp)
# local_init_at_Complex_internal_6 = SELF
sw $s1, -28($fp)
# RETURN local_init_at_Complex_internal_6
lw $v0, -28($fp)
# Deallocate stack frame for function function_init_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 36
# Deallocate function args
addu $sp, $sp, 8
jr $ra
# Function END


# function_print_at_Complex implementation.
# @Params:
function_print_at_Complex: 
   # Allocate stack frame for function function_print_at_Complex.
   subu $sp, $sp, 100
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 100
   # local_print_at_Complex_internal_4 = GETATTRIBUTE y Complex
   # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
   lw $t0, 16($s1)
   sw $t0, -20($fp)
   # LOCAL local_print_at_Complex_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 0
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # IF_ZERO local_print_at_Complex_internal_4 GOTO label_FALSE_19
   # IF_ZERO local_print_at_Complex_internal_4 GOTO label_FALSE_19
   lw $t0, -20($fp)
   beq $t0, 0, label_FALSE_19
   # IF_ZERO local_print_at_Complex_internal_5 GOTO label_FALSE_19
   # IF_ZERO local_print_at_Complex_internal_5 GOTO label_FALSE_19
   lw $t0, -24($fp)
   beq $t0, 0, label_FALSE_19
   # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
   # Comparing -20($fp) type with String
   la $v0, String
   lw $a0, -20($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_COMPARE_STRING_22
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_COMPARE_STRING_22
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_STRING_22
   # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
   # Comparing -20($fp) type with Bool
   la $v0, Bool
   lw $a0, -20($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_COMPARE_BY_VALUE_23
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_COMPARE_BY_VALUE_23
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_23
   # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
   # Comparing -20($fp) type with Int
   la $v0, Int
   lw $a0, -20($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -16($fp)
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_COMPARE_BY_VALUE_23
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_COMPARE_BY_VALUE_23
   lw $t0, -16($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_23
   # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
   # LOCAL local_print_at_Complex_internal_5 --> -24($fp)
   # Load pointers and SUB
   lw $a0, -20($fp)
   lw $a1, -24($fp)
   sub $a0, $a0, $a1
   sw $a0, -16($fp)
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_TRUE_20
   # IF_ZERO local_print_at_Complex_internal_3 GOTO label_TRUE_20
   lw $t0, -16($fp)
   beq $t0, 0, label_TRUE_20
   # GOTO label_FALSE_19
   j label_FALSE_19
   label_COMPARE_BY_VALUE_23: 
      # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
      # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
      # LOCAL local_print_at_Complex_internal_5 --> -24($fp)
      lw $a0, -20($fp)
      lw $a1, -24($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -16($fp)
      # IF_ZERO local_print_at_Complex_internal_3 GOTO label_TRUE_20
      # IF_ZERO local_print_at_Complex_internal_3 GOTO label_TRUE_20
      lw $t0, -16($fp)
      beq $t0, 0, label_TRUE_20
      # GOTO label_FALSE_19
      j label_FALSE_19
      label_COMPARE_STRING_22: 
         # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
         # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
         # LOCAL local_print_at_Complex_internal_5 --> -24($fp)
         # Load strings for comparison
         lw $v0, -20($fp)
         lw $v1, -24($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -16($fp)
         # IF_ZERO local_print_at_Complex_internal_3 GOTO label_CONTINUE_24
         # IF_ZERO local_print_at_Complex_internal_3 GOTO label_CONTINUE_24
         lw $t0, -16($fp)
         beq $t0, 0, label_CONTINUE_24
         # GOTO label_FALSE_19
         j label_FALSE_19
         label_CONTINUE_24: 
            # LOCAL local_print_at_Complex_internal_3 --> -16($fp)
            # LOCAL local_print_at_Complex_internal_4 --> -20($fp)
            # LOCAL local_print_at_Complex_internal_5 --> -24($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -20($fp)
            lw $v1, -24($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_25: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_26
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_25
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_26: 
                  # Store result
                  sw $a2, -16($fp)
                  # IF_ZERO local_print_at_Complex_internal_3 GOTO label_TRUE_20
                  # IF_ZERO local_print_at_Complex_internal_3 GOTO label_TRUE_20
                  lw $t0, -16($fp)
                  beq $t0, 0, label_TRUE_20
                  label_FALSE_19: 
                     # LOCAL local_print_at_Complex_internal_2 --> -12($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -12($fp)
                     # GOTO label_END_21
j label_END_21
label_TRUE_20: 
   # LOCAL local_print_at_Complex_internal_2 --> -12($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -12($fp)
   label_END_21: 
# LOCAL local_print_at_Complex_internal_0 --> -4($fp)
# LOCAL local_print_at_Complex_internal_2 --> -12($fp)
# Obtain value from -12($fp)
lw $v0, -12($fp)
lw $v0, 12($v0)
sw $v0, -4($fp)
# IF_ZERO local_print_at_Complex_internal_0 GOTO label_FALSEIF_17
# IF_ZERO local_print_at_Complex_internal_0 GOTO label_FALSEIF_17
lw $t0, -4($fp)
beq $t0, 0, label_FALSEIF_17
# LOCAL local_print_at_Complex_internal_8 --> -36($fp)
# local_print_at_Complex_internal_8 = SELF
sw $s1, -36($fp)
# LOCAL local_print_at_Complex_internal_6 --> -28($fp)
# LOCAL local_print_at_Complex_internal_8 --> -36($fp)
# local_print_at_Complex_internal_6 = local_print_at_Complex_internal_8
lw $t0, -36($fp)
sw $t0, -28($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# local_print_at_Complex_internal_9 = GETATTRIBUTE x Complex
# LOCAL local_print_at_Complex_internal_9 --> -40($fp)
lw $t0, 12($s1)
sw $t0, -40($fp)
# ARG local_print_at_Complex_internal_9
# LOCAL local_print_at_Complex_internal_9 --> -40($fp)
lw $t0, -40($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_print_at_Complex_internal_6 --> -28($fp)
# LOCAL local_print_at_Complex_internal_7 --> -32($fp)
# local_print_at_Complex_internal_7 = VCALL local_print_at_Complex_internal_6 out_int
# Save new self pointer in $s1
lw $s1, -28($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 56($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -32($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_print_at_Complex_internal_1 --> -8($fp)
# LOCAL local_print_at_Complex_internal_7 --> -32($fp)
# local_print_at_Complex_internal_1 = local_print_at_Complex_internal_7
lw $t0, -32($fp)
sw $t0, -8($fp)
# GOTO label_ENDIF_18
j label_ENDIF_18
label_FALSEIF_17: 
   # LOCAL local_print_at_Complex_internal_18 --> -76($fp)
   # local_print_at_Complex_internal_18 = SELF
   sw $s1, -76($fp)
   # LOCAL local_print_at_Complex_internal_16 --> -68($fp)
   # LOCAL local_print_at_Complex_internal_18 --> -76($fp)
   # local_print_at_Complex_internal_16 = local_print_at_Complex_internal_18
   lw $t0, -76($fp)
   sw $t0, -68($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Complex_internal_19 = GETATTRIBUTE x Complex
   # LOCAL local_print_at_Complex_internal_19 --> -80($fp)
   lw $t0, 12($s1)
   sw $t0, -80($fp)
   # ARG local_print_at_Complex_internal_19
   # LOCAL local_print_at_Complex_internal_19 --> -80($fp)
   lw $t0, -80($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Complex_internal_16 --> -68($fp)
   # LOCAL local_print_at_Complex_internal_17 --> -72($fp)
   # local_print_at_Complex_internal_17 = VCALL local_print_at_Complex_internal_16 out_int
   # Save new self pointer in $s1
   lw $s1, -68($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 56($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -72($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_14 --> -60($fp)
   # LOCAL local_print_at_Complex_internal_17 --> -72($fp)
   # local_print_at_Complex_internal_14 = local_print_at_Complex_internal_17
   lw $t0, -72($fp)
   sw $t0, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Complex_internal_20 --> -84($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_4
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -84($fp)
   # ARG local_print_at_Complex_internal_20
   # LOCAL local_print_at_Complex_internal_20 --> -84($fp)
   lw $t0, -84($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Complex_internal_14 --> -60($fp)
   # LOCAL local_print_at_Complex_internal_15 --> -64($fp)
   # local_print_at_Complex_internal_15 = VCALL local_print_at_Complex_internal_14 out_string
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_12 --> -52($fp)
   # LOCAL local_print_at_Complex_internal_15 --> -64($fp)
   # local_print_at_Complex_internal_12 = local_print_at_Complex_internal_15
   lw $t0, -64($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # local_print_at_Complex_internal_21 = GETATTRIBUTE y Complex
   # LOCAL local_print_at_Complex_internal_21 --> -88($fp)
   lw $t0, 16($s1)
   sw $t0, -88($fp)
   # ARG local_print_at_Complex_internal_21
   # LOCAL local_print_at_Complex_internal_21 --> -88($fp)
   lw $t0, -88($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Complex_internal_12 --> -52($fp)
   # LOCAL local_print_at_Complex_internal_13 --> -56($fp)
   # local_print_at_Complex_internal_13 = VCALL local_print_at_Complex_internal_12 out_int
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 56($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_10 --> -44($fp)
   # LOCAL local_print_at_Complex_internal_13 --> -56($fp)
   # local_print_at_Complex_internal_10 = local_print_at_Complex_internal_13
   lw $t0, -56($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_print_at_Complex_internal_22 --> -92($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_5
   sw $t0, 12($v0)
   li $t0, 1
   sw $t0, 16($v0)
   sw $v0, -92($fp)
   # ARG local_print_at_Complex_internal_22
   # LOCAL local_print_at_Complex_internal_22 --> -92($fp)
   lw $t0, -92($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_print_at_Complex_internal_10 --> -44($fp)
   # LOCAL local_print_at_Complex_internal_11 --> -48($fp)
   # local_print_at_Complex_internal_11 = VCALL local_print_at_Complex_internal_10 out_string
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_print_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_print_at_Complex_internal_11 --> -48($fp)
   # local_print_at_Complex_internal_1 = local_print_at_Complex_internal_11
   lw $t0, -48($fp)
   sw $t0, -8($fp)
   label_ENDIF_18: 
# RETURN local_print_at_Complex_internal_1
lw $v0, -8($fp)
# Deallocate stack frame for function function_print_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 100
jr $ra
# Function END


# function_reflect_0_at_Complex implementation.
# @Params:
function_reflect_0_at_Complex: 
   # Allocate stack frame for function function_reflect_0_at_Complex.
   subu $sp, $sp, 52
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 52
   # local_reflect_0_at_Complex_internal_2 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   lw $t0, 12($s1)
   sw $t0, -12($fp)
   # local_reflect_0_at_Complex_internal_4 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_0_at_Complex_internal_4 --> -20($fp)
   lw $t0, 12($s1)
   sw $t0, -20($fp)
   # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_reflect_0_at_Complex_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -16($fp)
   # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -16($fp)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_2 GOTO label_FALSE_27
   # IF_ZERO local_reflect_0_at_Complex_internal_2 GOTO label_FALSE_27
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_27
   # IF_ZERO local_reflect_0_at_Complex_internal_3 GOTO label_FALSE_27
   # IF_ZERO local_reflect_0_at_Complex_internal_3 GOTO label_FALSE_27
   lw $t0, -16($fp)
   beq $t0, 0, label_FALSE_27
   # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with String
   la $v0, String
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_COMPARE_STRING_30
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_COMPARE_STRING_30
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_STRING_30
   # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Bool
   la $v0, Bool
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_31
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_31
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_31
   # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Int
   la $v0, Int
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_31
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_31
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_31
   # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
   # Load pointers and SUB
   lw $a0, -12($fp)
   lw $a1, -16($fp)
   sub $a0, $a0, $a1
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_TRUE_28
   # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_TRUE_28
   lw $t0, -8($fp)
   beq $t0, 0, label_TRUE_28
   # GOTO label_FALSE_27
   j label_FALSE_27
   label_COMPARE_BY_VALUE_31: 
      # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
      # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
      # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
      lw $a0, -12($fp)
      lw $a1, -16($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -8($fp)
      # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_TRUE_28
      # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_TRUE_28
      lw $t0, -8($fp)
      beq $t0, 0, label_TRUE_28
      # GOTO label_FALSE_27
      j label_FALSE_27
      label_COMPARE_STRING_30: 
         # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
         # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
         # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
         # Load strings for comparison
         lw $v0, -12($fp)
         lw $v1, -16($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -8($fp)
         # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_CONTINUE_32
         # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_CONTINUE_32
         lw $t0, -8($fp)
         beq $t0, 0, label_CONTINUE_32
         # GOTO label_FALSE_27
         j label_FALSE_27
         label_CONTINUE_32: 
            # LOCAL local_reflect_0_at_Complex_internal_1 --> -8($fp)
            # LOCAL local_reflect_0_at_Complex_internal_2 --> -12($fp)
            # LOCAL local_reflect_0_at_Complex_internal_3 --> -16($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -12($fp)
            lw $v1, -16($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_33: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_34
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_33
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_34: 
                  # Store result
                  sw $a2, -8($fp)
                  # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_TRUE_28
                  # IF_ZERO local_reflect_0_at_Complex_internal_1 GOTO label_TRUE_28
                  lw $t0, -8($fp)
                  beq $t0, 0, label_TRUE_28
                  label_FALSE_27: 
                     # LOCAL local_reflect_0_at_Complex_internal_0 --> -4($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -4($fp)
                     # GOTO label_END_29
j label_END_29
label_TRUE_28: 
   # LOCAL local_reflect_0_at_Complex_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   label_END_29: 
# local_reflect_0_at_Complex_internal_7 = GETATTRIBUTE y Complex
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
lw $t0, 16($s1)
sw $t0, -32($fp)
# local_reflect_0_at_Complex_internal_9 = GETATTRIBUTE y Complex
# LOCAL local_reflect_0_at_Complex_internal_9 --> -40($fp)
lw $t0, 16($s1)
sw $t0, -40($fp)
# LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
# LOCAL local_reflect_0_at_Complex_internal_9 --> -40($fp)
lw $t0, -40($fp)
lw $t0, 12($t0)
not $t0, $t0
add $t0, $t0, 1
sw $t0, -36($fp)
# LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
# LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string for type Int
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, Int
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
move $t0, $v0
# Allocating 16 bytes of memory
li $a0, 16
li $v0, 9
syscall
sw $t0, 0($v0)
la $t0, Int_start
sw $t0, 4($v0)
# Load type offset
li $t0, 16
sw $t0, 8($v0)
lw $t0, -36($fp)
sw $t0, 12($v0)
sw $v0, -36($fp)
# IF_ZERO local_reflect_0_at_Complex_internal_7 GOTO label_FALSE_35
# IF_ZERO local_reflect_0_at_Complex_internal_7 GOTO label_FALSE_35
lw $t0, -32($fp)
beq $t0, 0, label_FALSE_35
# IF_ZERO local_reflect_0_at_Complex_internal_8 GOTO label_FALSE_35
# IF_ZERO local_reflect_0_at_Complex_internal_8 GOTO label_FALSE_35
lw $t0, -36($fp)
beq $t0, 0, label_FALSE_35
# LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
# Comparing -32($fp) type with String
la $v0, String
lw $a0, -32($fp)
lw $a0, 0($a0)
sub $a0, $a0, $v0
sw $a0, -28($fp)
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_COMPARE_STRING_38
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_COMPARE_STRING_38
lw $t0, -28($fp)
beq $t0, 0, label_COMPARE_STRING_38
# LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
# Comparing -32($fp) type with Bool
la $v0, Bool
lw $a0, -32($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -28($fp)
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_COMPARE_BY_VALUE_39
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_COMPARE_BY_VALUE_39
lw $t0, -28($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_39
# LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
# Comparing -32($fp) type with Int
la $v0, Int
lw $a0, -32($fp)
lw $a0, 0($a0)
lw $a0, 12($a0)
sub $a0, $a0, $v0
sw $a0, -28($fp)
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_COMPARE_BY_VALUE_39
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_COMPARE_BY_VALUE_39
lw $t0, -28($fp)
beq $t0, 0, label_COMPARE_BY_VALUE_39
# LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
# LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
# LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
# Load pointers and SUB
lw $a0, -32($fp)
lw $a1, -36($fp)
sub $a0, $a0, $a1
sw $a0, -28($fp)
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_TRUE_36
# IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_TRUE_36
lw $t0, -28($fp)
beq $t0, 0, label_TRUE_36
# GOTO label_FALSE_35
j label_FALSE_35
label_COMPARE_BY_VALUE_39: 
   # LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
   # LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
   # LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
   lw $a0, -32($fp)
   lw $a1, -36($fp)
   # Load values
   lw $a0, 12($a0)
   lw $a1, 12($a1)
   # SUB and store
   sub $a0, $a0, $a1
   sw $a0, -28($fp)
   # IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_TRUE_36
   # IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_TRUE_36
   lw $t0, -28($fp)
   beq $t0, 0, label_TRUE_36
   # GOTO label_FALSE_35
   j label_FALSE_35
   label_COMPARE_STRING_38: 
      # LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
      # LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
      # LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
      # Load strings for comparison
      lw $v0, -32($fp)
      lw $v1, -36($fp)
      # Compare lengths
      lw $v0, 16($v0)
      lw $v1, 16($v1)
      sub $v0, $v0, $v1
      sw $v0, -28($fp)
      # IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_CONTINUE_40
      # IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_CONTINUE_40
      lw $t0, -28($fp)
      beq $t0, 0, label_CONTINUE_40
      # GOTO label_FALSE_35
      j label_FALSE_35
      label_CONTINUE_40: 
         # LOCAL local_reflect_0_at_Complex_internal_6 --> -28($fp)
         # LOCAL local_reflect_0_at_Complex_internal_7 --> -32($fp)
         # LOCAL local_reflect_0_at_Complex_internal_8 --> -36($fp)
         move $a2, $zero
         # Load strings for comparison
         lw $v0, -32($fp)
         lw $v1, -36($fp)
         # Load strings pointers
         lw $v0, 12($v0)
         lw $v1, 12($v1)
         # Compare loop, while [v0] != \0
         label_WHILE_STR_COMP_41: 
            lb $a0, 0($v0)
            # If EOS => break
            beqz $a0, label_WHILE_STR_COMP_END_42
            lb $a1, 0($v1)
            # Move strings pointers
            addu $v0, $v0, 1
            addu $v1, $v1, 1
            # Compare chars
            sub $a0, $a0, $a1
            beqz $a0, label_WHILE_STR_COMP_41
            # False
            li $a2, 1
            label_WHILE_STR_COMP_END_42: 
               # Store result
               sw $a2, -28($fp)
               # IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_TRUE_36
               # IF_ZERO local_reflect_0_at_Complex_internal_6 GOTO label_TRUE_36
               lw $t0, -28($fp)
               beq $t0, 0, label_TRUE_36
               label_FALSE_35: 
                  # LOCAL local_reflect_0_at_Complex_internal_5 --> -24($fp)
                  # Allocating 20 bytes of memory
                  li $a0, 20
                  li $v0, 9
                  syscall
                  # Allocating string for type Bool
                  la $t0, String
                  sw $t0, 0($v0)
                  la $t0, String_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 8
                  sw $t0, 8($v0)
                  la $t0, Bool
                  sw $t0, 12($v0)
                  li $t0, 4
                  sw $t0, 16($v0)
                  move $t0, $v0
                  # Allocating 16 bytes of memory
                  li $a0, 16
                  li $v0, 9
                  syscall
                  sw $t0, 0($v0)
                  la $t0, Bool_start
                  sw $t0, 4($v0)
                  # Load type offset
                  li $t0, 12
                  sw $t0, 8($v0)
                  li $t0, 0
                  sw $t0, 12($v0)
                  sw $v0, -24($fp)
                  # GOTO label_END_37
j label_END_37
label_TRUE_36: 
   # LOCAL local_reflect_0_at_Complex_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   label_END_37: 
# LOCAL local_reflect_0_at_Complex_internal_10 --> -44($fp)
# local_reflect_0_at_Complex_internal_10 = SELF
sw $s1, -44($fp)
# RETURN local_reflect_0_at_Complex_internal_10
lw $v0, -44($fp)
# Deallocate stack frame for function function_reflect_0_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 52
jr $ra
# Function END


# function_reflect_X_at_Complex implementation.
# @Params:
function_reflect_X_at_Complex: 
   # Allocate stack frame for function function_reflect_X_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_reflect_X_at_Complex_internal_2 = GETATTRIBUTE y Complex
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   lw $t0, 16($s1)
   sw $t0, -12($fp)
   # local_reflect_X_at_Complex_internal_4 = GETATTRIBUTE y Complex
   # LOCAL local_reflect_X_at_Complex_internal_4 --> -20($fp)
   lw $t0, 16($s1)
   sw $t0, -20($fp)
   # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_reflect_X_at_Complex_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -16($fp)
   # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -16($fp)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # IF_ZERO local_reflect_X_at_Complex_internal_2 GOTO label_FALSE_43
   # IF_ZERO local_reflect_X_at_Complex_internal_2 GOTO label_FALSE_43
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_43
   # IF_ZERO local_reflect_X_at_Complex_internal_3 GOTO label_FALSE_43
   # IF_ZERO local_reflect_X_at_Complex_internal_3 GOTO label_FALSE_43
   lw $t0, -16($fp)
   beq $t0, 0, label_FALSE_43
   # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with String
   la $v0, String
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_COMPARE_STRING_46
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_COMPARE_STRING_46
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_STRING_46
   # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Bool
   la $v0, Bool
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Int
   la $v0, Int
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_47
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_47
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_47
   # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
   # Load pointers and SUB
   lw $a0, -12($fp)
   lw $a1, -16($fp)
   sub $a0, $a0, $a1
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_TRUE_44
   # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_TRUE_44
   lw $t0, -8($fp)
   beq $t0, 0, label_TRUE_44
   # GOTO label_FALSE_43
   j label_FALSE_43
   label_COMPARE_BY_VALUE_47: 
      # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
      # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
      # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
      lw $a0, -12($fp)
      lw $a1, -16($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -8($fp)
      # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_TRUE_44
      # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_TRUE_44
      lw $t0, -8($fp)
      beq $t0, 0, label_TRUE_44
      # GOTO label_FALSE_43
      j label_FALSE_43
      label_COMPARE_STRING_46: 
         # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
         # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
         # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
         # Load strings for comparison
         lw $v0, -12($fp)
         lw $v1, -16($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -8($fp)
         # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_CONTINUE_48
         # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_CONTINUE_48
         lw $t0, -8($fp)
         beq $t0, 0, label_CONTINUE_48
         # GOTO label_FALSE_43
         j label_FALSE_43
         label_CONTINUE_48: 
            # LOCAL local_reflect_X_at_Complex_internal_1 --> -8($fp)
            # LOCAL local_reflect_X_at_Complex_internal_2 --> -12($fp)
            # LOCAL local_reflect_X_at_Complex_internal_3 --> -16($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -12($fp)
            lw $v1, -16($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_49: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_50
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_49
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_50: 
                  # Store result
                  sw $a2, -8($fp)
                  # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_TRUE_44
                  # IF_ZERO local_reflect_X_at_Complex_internal_1 GOTO label_TRUE_44
                  lw $t0, -8($fp)
                  beq $t0, 0, label_TRUE_44
                  label_FALSE_43: 
                     # LOCAL local_reflect_X_at_Complex_internal_0 --> -4($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -4($fp)
                     # GOTO label_END_45
j label_END_45
label_TRUE_44: 
   # LOCAL local_reflect_X_at_Complex_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   label_END_45: 
# LOCAL local_reflect_X_at_Complex_internal_5 --> -24($fp)
# local_reflect_X_at_Complex_internal_5 = SELF
sw $s1, -24($fp)
# RETURN local_reflect_X_at_Complex_internal_5
lw $v0, -24($fp)
# Deallocate stack frame for function function_reflect_X_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
jr $ra
# Function END


# function_reflect_Y_at_Complex implementation.
# @Params:
function_reflect_Y_at_Complex: 
   # Allocate stack frame for function function_reflect_Y_at_Complex.
   subu $sp, $sp, 32
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 32
   # local_reflect_Y_at_Complex_internal_2 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   lw $t0, 12($s1)
   sw $t0, -12($fp)
   # local_reflect_Y_at_Complex_internal_4 = GETATTRIBUTE x Complex
   # LOCAL local_reflect_Y_at_Complex_internal_4 --> -20($fp)
   lw $t0, 12($s1)
   sw $t0, -20($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   lw $t0, 12($t0)
   not $t0, $t0
   add $t0, $t0, 1
   sw $t0, -16($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   lw $t0, -16($fp)
   sw $t0, 12($v0)
   sw $v0, -16($fp)
   # IF_ZERO local_reflect_Y_at_Complex_internal_2 GOTO label_FALSE_51
   # IF_ZERO local_reflect_Y_at_Complex_internal_2 GOTO label_FALSE_51
   lw $t0, -12($fp)
   beq $t0, 0, label_FALSE_51
   # IF_ZERO local_reflect_Y_at_Complex_internal_3 GOTO label_FALSE_51
   # IF_ZERO local_reflect_Y_at_Complex_internal_3 GOTO label_FALSE_51
   lw $t0, -16($fp)
   beq $t0, 0, label_FALSE_51
   # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with String
   la $v0, String
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_COMPARE_STRING_54
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_COMPARE_STRING_54
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_STRING_54
   # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Bool
   la $v0, Bool
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_55
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_55
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_55
   # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   # Comparing -12($fp) type with Int
   la $v0, Int
   lw $a0, -12($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_55
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_COMPARE_BY_VALUE_55
   lw $t0, -8($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_55
   # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
   # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
   # Load pointers and SUB
   lw $a0, -12($fp)
   lw $a1, -16($fp)
   sub $a0, $a0, $a1
   sw $a0, -8($fp)
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_TRUE_52
   # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_TRUE_52
   lw $t0, -8($fp)
   beq $t0, 0, label_TRUE_52
   # GOTO label_FALSE_51
   j label_FALSE_51
   label_COMPARE_BY_VALUE_55: 
      # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
      # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
      # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
      lw $a0, -12($fp)
      lw $a1, -16($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -8($fp)
      # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_TRUE_52
      # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_TRUE_52
      lw $t0, -8($fp)
      beq $t0, 0, label_TRUE_52
      # GOTO label_FALSE_51
      j label_FALSE_51
      label_COMPARE_STRING_54: 
         # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
         # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
         # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
         # Load strings for comparison
         lw $v0, -12($fp)
         lw $v1, -16($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -8($fp)
         # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_CONTINUE_56
         # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_CONTINUE_56
         lw $t0, -8($fp)
         beq $t0, 0, label_CONTINUE_56
         # GOTO label_FALSE_51
         j label_FALSE_51
         label_CONTINUE_56: 
            # LOCAL local_reflect_Y_at_Complex_internal_1 --> -8($fp)
            # LOCAL local_reflect_Y_at_Complex_internal_2 --> -12($fp)
            # LOCAL local_reflect_Y_at_Complex_internal_3 --> -16($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -12($fp)
            lw $v1, -16($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_57: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_58
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_57
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_58: 
                  # Store result
                  sw $a2, -8($fp)
                  # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_TRUE_52
                  # IF_ZERO local_reflect_Y_at_Complex_internal_1 GOTO label_TRUE_52
                  lw $t0, -8($fp)
                  beq $t0, 0, label_TRUE_52
                  label_FALSE_51: 
                     # LOCAL local_reflect_Y_at_Complex_internal_0 --> -4($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -4($fp)
                     # GOTO label_END_53
j label_END_53
label_TRUE_52: 
   # LOCAL local_reflect_Y_at_Complex_internal_0 --> -4($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -4($fp)
   label_END_53: 
# LOCAL local_reflect_Y_at_Complex_internal_5 --> -24($fp)
# local_reflect_Y_at_Complex_internal_5 = SELF
sw $s1, -24($fp)
# RETURN local_reflect_Y_at_Complex_internal_5
lw $v0, -24($fp)
# Deallocate stack frame for function function_reflect_Y_at_Complex.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 32
jr $ra
# Function END


# function_main_at_Main implementation.
# @Params:
function_main_at_Main: 
   # Allocate stack frame for function function_main_at_Main.
   subu $sp, $sp, 104
   sw $ra, 4($sp)
   sw $fp, 0($sp)
   addu $fp, $sp, 104
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # local_main_at_Main_c_0 = 0
   li $t0, 0
   sw $t0, -4($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_3 = ALLOCATE Complex
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type name
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Complex
   sw $t0, 12($v0)
   li $t0, 7
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Complex_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 20
   sw $t0, 8($v0)
   move $t1, $v0
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   move $s1, $v0
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Complex__attrib__x__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 12($t1)
   # Push register t1 into stack
   subu $sp, $sp, 4
   sw $t1, 0($sp)
   jal __Complex__attrib__y__init
   # Pop 4 bytes from stack into register t1
   lw $t1, 0($sp)
   addu $sp, $sp, 4
   sw $v0, 16($t1)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   sw $t1, -16($fp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_3 --> -16($fp)
   # local_main_at_Main_internal_1 = local_main_at_Main_internal_3
   lw $t0, -16($fp)
   sw $t0, -8($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -20($fp)
   # ARG local_main_at_Main_internal_4
   # LOCAL local_main_at_Main_internal_4 --> -20($fp)
   lw $t0, -20($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Int
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Int
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Int_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 16
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -24($fp)
   # ARG local_main_at_Main_internal_5
   # LOCAL local_main_at_Main_internal_5 --> -24($fp)
   lw $t0, -24($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_1 --> -8($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_internal_2 = VCALL local_main_at_Main_internal_1 init
   # Save new self pointer in $s1
   lw $s1, -8($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 36($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -12($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # LOCAL local_main_at_Main_internal_2 --> -12($fp)
   # local_main_at_Main_c_0 = local_main_at_Main_internal_2
   lw $t0, -12($fp)
   sw $t0, -4($fp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # local_main_at_Main_internal_12 = local_main_at_Main_c_0
   lw $t0, -4($fp)
   sw $t0, -52($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_12 --> -52($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # local_main_at_Main_internal_13 = VCALL local_main_at_Main_internal_12 reflect_X
   # Save new self pointer in $s1
   lw $s1, -52($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 20($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -56($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_13 --> -56($fp)
   # local_main_at_Main_internal_10 = local_main_at_Main_internal_13
   lw $t0, -56($fp)
   sw $t0, -44($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_10 --> -44($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # local_main_at_Main_internal_11 = VCALL local_main_at_Main_internal_10 reflect_Y
   # Save new self pointer in $s1
   lw $s1, -44($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 60($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -48($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # LOCAL local_main_at_Main_c_0 --> -4($fp)
   # local_main_at_Main_internal_14 = local_main_at_Main_c_0
   lw $t0, -4($fp)
   sw $t0, -60($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_14 --> -60($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # local_main_at_Main_internal_15 = VCALL local_main_at_Main_internal_14 reflect_0
   # Save new self pointer in $s1
   lw $s1, -60($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 12($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -64($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # IF_ZERO local_main_at_Main_internal_11 GOTO label_FALSE_61
   # IF_ZERO local_main_at_Main_internal_11 GOTO label_FALSE_61
   lw $t0, -48($fp)
   beq $t0, 0, label_FALSE_61
   # IF_ZERO local_main_at_Main_internal_15 GOTO label_FALSE_61
   # IF_ZERO local_main_at_Main_internal_15 GOTO label_FALSE_61
   lw $t0, -64($fp)
   beq $t0, 0, label_FALSE_61
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # Comparing -48($fp) type with String
   la $v0, String
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_COMPARE_STRING_64
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_COMPARE_STRING_64
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_STRING_64
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Bool
   la $v0, Bool
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_COMPARE_BY_VALUE_65
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_COMPARE_BY_VALUE_65
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_65
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # Comparing -48($fp) type with Int
   la $v0, Int
   lw $a0, -48($fp)
   lw $a0, 0($a0)
   lw $a0, 12($a0)
   sub $a0, $a0, $v0
   sw $a0, -40($fp)
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_COMPARE_BY_VALUE_65
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_COMPARE_BY_VALUE_65
   lw $t0, -40($fp)
   beq $t0, 0, label_COMPARE_BY_VALUE_65
   # LOCAL local_main_at_Main_internal_9 --> -40($fp)
   # LOCAL local_main_at_Main_internal_11 --> -48($fp)
   # LOCAL local_main_at_Main_internal_15 --> -64($fp)
   # Load pointers and SUB
   lw $a0, -48($fp)
   lw $a1, -64($fp)
   sub $a0, $a0, $a1
   sw $a0, -40($fp)
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_TRUE_62
   # IF_ZERO local_main_at_Main_internal_9 GOTO label_TRUE_62
   lw $t0, -40($fp)
   beq $t0, 0, label_TRUE_62
   # GOTO label_FALSE_61
   j label_FALSE_61
   label_COMPARE_BY_VALUE_65: 
      # LOCAL local_main_at_Main_internal_9 --> -40($fp)
      # LOCAL local_main_at_Main_internal_11 --> -48($fp)
      # LOCAL local_main_at_Main_internal_15 --> -64($fp)
      lw $a0, -48($fp)
      lw $a1, -64($fp)
      # Load values
      lw $a0, 12($a0)
      lw $a1, 12($a1)
      # SUB and store
      sub $a0, $a0, $a1
      sw $a0, -40($fp)
      # IF_ZERO local_main_at_Main_internal_9 GOTO label_TRUE_62
      # IF_ZERO local_main_at_Main_internal_9 GOTO label_TRUE_62
      lw $t0, -40($fp)
      beq $t0, 0, label_TRUE_62
      # GOTO label_FALSE_61
      j label_FALSE_61
      label_COMPARE_STRING_64: 
         # LOCAL local_main_at_Main_internal_9 --> -40($fp)
         # LOCAL local_main_at_Main_internal_11 --> -48($fp)
         # LOCAL local_main_at_Main_internal_15 --> -64($fp)
         # Load strings for comparison
         lw $v0, -48($fp)
         lw $v1, -64($fp)
         # Compare lengths
         lw $v0, 16($v0)
         lw $v1, 16($v1)
         sub $v0, $v0, $v1
         sw $v0, -40($fp)
         # IF_ZERO local_main_at_Main_internal_9 GOTO label_CONTINUE_66
         # IF_ZERO local_main_at_Main_internal_9 GOTO label_CONTINUE_66
         lw $t0, -40($fp)
         beq $t0, 0, label_CONTINUE_66
         # GOTO label_FALSE_61
         j label_FALSE_61
         label_CONTINUE_66: 
            # LOCAL local_main_at_Main_internal_9 --> -40($fp)
            # LOCAL local_main_at_Main_internal_11 --> -48($fp)
            # LOCAL local_main_at_Main_internal_15 --> -64($fp)
            move $a2, $zero
            # Load strings for comparison
            lw $v0, -48($fp)
            lw $v1, -64($fp)
            # Load strings pointers
            lw $v0, 12($v0)
            lw $v1, 12($v1)
            # Compare loop, while [v0] != \0
            label_WHILE_STR_COMP_67: 
               lb $a0, 0($v0)
               # If EOS => break
               beqz $a0, label_WHILE_STR_COMP_END_68
               lb $a1, 0($v1)
               # Move strings pointers
               addu $v0, $v0, 1
               addu $v1, $v1, 1
               # Compare chars
               sub $a0, $a0, $a1
               beqz $a0, label_WHILE_STR_COMP_67
               # False
               li $a2, 1
               label_WHILE_STR_COMP_END_68: 
                  # Store result
                  sw $a2, -40($fp)
                  # IF_ZERO local_main_at_Main_internal_9 GOTO label_TRUE_62
                  # IF_ZERO local_main_at_Main_internal_9 GOTO label_TRUE_62
                  lw $t0, -40($fp)
                  beq $t0, 0, label_TRUE_62
                  label_FALSE_61: 
                     # LOCAL local_main_at_Main_internal_8 --> -36($fp)
                     # Allocating 20 bytes of memory
                     li $a0, 20
                     li $v0, 9
                     syscall
                     # Allocating string for type Bool
                     la $t0, String
                     sw $t0, 0($v0)
                     la $t0, String_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 8
                     sw $t0, 8($v0)
                     la $t0, Bool
                     sw $t0, 12($v0)
                     li $t0, 4
                     sw $t0, 16($v0)
                     move $t0, $v0
                     # Allocating 16 bytes of memory
                     li $a0, 16
                     li $v0, 9
                     syscall
                     sw $t0, 0($v0)
                     la $t0, Bool_start
                     sw $t0, 4($v0)
                     # Load type offset
                     li $t0, 12
                     sw $t0, 8($v0)
                     li $t0, 0
                     sw $t0, 12($v0)
                     sw $v0, -36($fp)
                     # GOTO label_END_63
j label_END_63
label_TRUE_62: 
   # LOCAL local_main_at_Main_internal_8 --> -36($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string for type Bool
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, Bool
   sw $t0, 12($v0)
   li $t0, 4
   sw $t0, 16($v0)
   move $t0, $v0
   # Allocating 16 bytes of memory
   li $a0, 16
   li $v0, 9
   syscall
   sw $t0, 0($v0)
   la $t0, Bool_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 12
   sw $t0, 8($v0)
   li $t0, 1
   sw $t0, 12($v0)
   sw $v0, -36($fp)
   label_END_63: 
# LOCAL local_main_at_Main_internal_6 --> -28($fp)
# LOCAL local_main_at_Main_internal_8 --> -36($fp)
# Obtain value from -36($fp)
lw $v0, -36($fp)
lw $v0, 12($v0)
sw $v0, -28($fp)
# IF_ZERO local_main_at_Main_internal_6 GOTO label_FALSEIF_59
# IF_ZERO local_main_at_Main_internal_6 GOTO label_FALSEIF_59
lw $t0, -28($fp)
beq $t0, 0, label_FALSEIF_59
# LOCAL local_main_at_Main_internal_18 --> -76($fp)
# local_main_at_Main_internal_18 = SELF
sw $s1, -76($fp)
# LOCAL local_main_at_Main_internal_16 --> -68($fp)
# LOCAL local_main_at_Main_internal_18 --> -76($fp)
# local_main_at_Main_internal_16 = local_main_at_Main_internal_18
lw $t0, -76($fp)
sw $t0, -68($fp)
# Push register s1 into stack
subu $sp, $sp, 4
sw $s1, 0($sp)
# LOCAL local_main_at_Main_internal_19 --> -80($fp)
# Allocating 20 bytes of memory
li $a0, 20
li $v0, 9
syscall
# Allocating string
la $t0, String
sw $t0, 0($v0)
la $t0, String_start
sw $t0, 4($v0)
# Load type offset
li $t0, 8
sw $t0, 8($v0)
la $t0, data_6
sw $t0, 12($v0)
li $t0, 3
sw $t0, 16($v0)
sw $v0, -80($fp)
# ARG local_main_at_Main_internal_19
# LOCAL local_main_at_Main_internal_19 --> -80($fp)
lw $t0, -80($fp)
# Push arg into stack
subu $sp, $sp, 4
sw $t0, 0($sp)
# LOCAL local_main_at_Main_internal_16 --> -68($fp)
# LOCAL local_main_at_Main_internal_17 --> -72($fp)
# local_main_at_Main_internal_17 = VCALL local_main_at_Main_internal_16 out_string
# Save new self pointer in $s1
lw $s1, -68($fp)
# Get pointer to type
lw $t0, 4($s1)
# Get pointer to type's VTABLE
lw $t0, 0($t0)
# Get pointer to function address
lw $t0, 4($t0)
# Call function. Result is on $v0
jalr $t0
sw $v0, -72($fp)
# Pop 4 bytes from stack into register s1
lw $s1, 0($sp)
addu $sp, $sp, 4
# LOCAL local_main_at_Main_internal_7 --> -32($fp)
# LOCAL local_main_at_Main_internal_17 --> -72($fp)
# local_main_at_Main_internal_7 = local_main_at_Main_internal_17
lw $t0, -72($fp)
sw $t0, -32($fp)
# GOTO label_ENDIF_60
j label_ENDIF_60
label_FALSEIF_59: 
   # LOCAL local_main_at_Main_internal_22 --> -92($fp)
   # local_main_at_Main_internal_22 = SELF
   sw $s1, -92($fp)
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   # LOCAL local_main_at_Main_internal_22 --> -92($fp)
   # local_main_at_Main_internal_20 = local_main_at_Main_internal_22
   lw $t0, -92($fp)
   sw $t0, -84($fp)
   # Push register s1 into stack
   subu $sp, $sp, 4
   sw $s1, 0($sp)
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   # Allocating 20 bytes of memory
   li $a0, 20
   li $v0, 9
   syscall
   # Allocating string
   la $t0, String
   sw $t0, 0($v0)
   la $t0, String_start
   sw $t0, 4($v0)
   # Load type offset
   li $t0, 8
   sw $t0, 8($v0)
   la $t0, data_7
   sw $t0, 12($v0)
   li $t0, 3
   sw $t0, 16($v0)
   sw $v0, -96($fp)
   # ARG local_main_at_Main_internal_23
   # LOCAL local_main_at_Main_internal_23 --> -96($fp)
   lw $t0, -96($fp)
   # Push arg into stack
   subu $sp, $sp, 4
   sw $t0, 0($sp)
   # LOCAL local_main_at_Main_internal_20 --> -84($fp)
   # LOCAL local_main_at_Main_internal_21 --> -88($fp)
   # local_main_at_Main_internal_21 = VCALL local_main_at_Main_internal_20 out_string
   # Save new self pointer in $s1
   lw $s1, -84($fp)
   # Get pointer to type
   lw $t0, 4($s1)
   # Get pointer to type's VTABLE
   lw $t0, 0($t0)
   # Get pointer to function address
   lw $t0, 4($t0)
   # Call function. Result is on $v0
   jalr $t0
   sw $v0, -88($fp)
   # Pop 4 bytes from stack into register s1
   lw $s1, 0($sp)
   addu $sp, $sp, 4
   # LOCAL local_main_at_Main_internal_7 --> -32($fp)
   # LOCAL local_main_at_Main_internal_21 --> -88($fp)
   # local_main_at_Main_internal_7 = local_main_at_Main_internal_21
   lw $t0, -88($fp)
   sw $t0, -32($fp)
   label_ENDIF_60: 
# RETURN local_main_at_Main_internal_7
lw $v0, -32($fp)
# Deallocate stack frame for function function_main_at_Main.
# Restore $ra
lw $ra, 4($sp)
# Restore $fp
lw $fp, 0($sp)
# Restore Stack pointer $sp
addu $sp, $sp, 104
jr $ra
# Function END

