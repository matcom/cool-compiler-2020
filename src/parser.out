Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comment
    constant
    eofcomment
    eofstring
    unfinished_string

Grammar

Rule 0     S' -> program
Rule 1     program -> classdec program
Rule 2     program -> classdec
Rule 3     empty -> <empty>
Rule 4     classdec -> class type lbracket featurelist rbracket pcoma
Rule 5     classdec -> class type inherits type lbracket featurelist rbracket pcoma
Rule 6     featurelist -> feature featurelist
Rule 7     featurelist -> empty
Rule 8     feature -> attribute pcoma
Rule 9     feature -> methoddef pcoma
Rule 10    expression -> constantexp
Rule 11    expression -> identifier
Rule 12    expression -> assignment
Rule 13    expression -> dispatch
Rule 14    expression -> conditional
Rule 15    expression -> loopexp
Rule 16    expression -> blockexp
Rule 17    expression -> letexp
Rule 18    expression -> caseexp
Rule 19    expression -> newexp
Rule 20    expression -> isvoidexp
Rule 21    expression -> aritmetica
Rule 22    expression -> comparison
Rule 23    expression -> parenexpression
Rule 24    methoddef -> id lparen rparen dpoint type lbracket expression rbracket
Rule 25    methoddef -> id lparen param paramslistdef rparen dpoint type lbracket expression rbracket
Rule 26    expressionlist -> expression pcoma expressionlist
Rule 27    expressionlist -> empty
Rule 28    param -> id dpoint type
Rule 29    attribute -> id dpoint type
Rule 30    attribute -> id dpoint type assign expression
Rule 31    letattributelist -> coma attribute letattributelist
Rule 32    letattributelist -> empty
Rule 33    paramslistdef -> coma param paramslistdef
Rule 34    paramslistdef -> empty
Rule 35    dispatch -> id lparen rparen
Rule 36    dispatch -> id lparen expression expressionparams rparen
Rule 37    dispatch -> expression point id lparen rparen
Rule 38    dispatch -> expression point id lparen expression expressionparams rparen
Rule 39    dispatch -> expression arroba type point id lparen rparen
Rule 40    dispatch -> expression arroba type point id lparen expression expressionparams rparen
Rule 41    expressionparams -> coma expression expressionparams
Rule 42    expressionparams -> empty
Rule 43    conditional -> if expression then expression else expression fi
Rule 44    loopexp -> while expression loop expression pool
Rule 45    blockexp -> lbracket expressionlist rbracket
Rule 46    letexp -> let attribute letattributelist in expression
Rule 47    caseexp -> case expression of subcase listcase esac
Rule 48    listcase -> subcase listcase
Rule 49    listcase -> empty
Rule 50    subcase -> id dpoint type implica expression pcoma
Rule 51    newexp -> new type
Rule 52    isvoidexp -> isvoid expression
Rule 53    aritmetica -> expression plus expression
Rule 54    aritmetica -> expression minus expression
Rule 55    aritmetica -> expression mult expression
Rule 56    aritmetica -> expression div expression
Rule 57    aritmetica -> intnot expression
Rule 58    comparison -> expression less expression
Rule 59    comparison -> expression lesse expression
Rule 60    comparison -> expression equal expression
Rule 61    comparison -> not expression
Rule 62    parenexpression -> lparen expression rparen
Rule 63    constantexp -> number
Rule 64    constantexp -> string
Rule 65    constantexp -> true
Rule 66    constantexp -> false
Rule 67    identifier -> id
Rule 68    assignment -> id assign expression

Terminals, with rules where they appear

arroba               : 39 40
assign               : 30 68
case                 : 47
class                : 4 5
coma                 : 31 33 41
comment              : 
constant             : 
div                  : 56
dpoint               : 24 25 28 29 30 50
else                 : 43
eofcomment           : 
eofstring            : 
equal                : 60
error                : 
esac                 : 47
false                : 66
fi                   : 43
id                   : 24 25 28 29 30 35 36 37 38 39 40 50 67 68
if                   : 43
implica              : 50
in                   : 46
inherits             : 5
intnot               : 57
isvoid               : 52
lbracket             : 4 5 24 25 45
less                 : 58
lesse                : 59
let                  : 46
loop                 : 44
lparen               : 24 25 35 36 37 38 39 40 62
minus                : 54
mult                 : 55
new                  : 51
not                  : 61
number               : 63
of                   : 47
pcoma                : 4 5 8 9 26 50
plus                 : 53
point                : 37 38 39 40
pool                 : 44
rbracket             : 4 5 24 25 45
rparen               : 24 25 35 36 37 38 39 40 62
string               : 64
then                 : 43
true                 : 65
type                 : 4 5 5 24 25 28 29 30 39 40 50 51
unfinished_string    : 
while                : 44

Nonterminals, with rules where they appear

aritmetica           : 21
assignment           : 12
attribute            : 8 31 46
blockexp             : 16
caseexp              : 18
classdec             : 1 2
comparison           : 22
conditional          : 14
constantexp          : 10
dispatch             : 13
empty                : 7 27 32 34 42 49
expression           : 24 25 26 30 36 37 38 38 39 40 40 41 43 43 43 44 44 46 47 50 52 53 53 54 54 55 55 56 56 57 58 58 59 59 60 60 61 62 68
expressionlist       : 26 45
expressionparams     : 36 38 40 41
feature              : 6
featurelist          : 4 5 6
identifier           : 11
isvoidexp            : 20
letattributelist     : 31 46
letexp               : 17
listcase             : 47 48
loopexp              : 15
methoddef            : 9
newexp               : 19
param                : 25 33
paramslistdef        : 25 33
parenexpression      : 23
program              : 1 0
subcase              : 47 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . classdec program
    (2) program -> . classdec
    (4) classdec -> . class type lbracket featurelist rbracket pcoma
    (5) classdec -> . class type inherits type lbracket featurelist rbracket pcoma

    class           shift and go to state 3

    program                        shift and go to state 1
    classdec                       shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> classdec . program
    (2) program -> classdec .
    (1) program -> . classdec program
    (2) program -> . classdec
    (4) classdec -> . class type lbracket featurelist rbracket pcoma
    (5) classdec -> . class type inherits type lbracket featurelist rbracket pcoma

    $end            reduce using rule 2 (program -> classdec .)
    class           shift and go to state 3

    classdec                       shift and go to state 2
    program                        shift and go to state 4

state 3

    (4) classdec -> class . type lbracket featurelist rbracket pcoma
    (5) classdec -> class . type inherits type lbracket featurelist rbracket pcoma

    type            shift and go to state 5


state 4

    (1) program -> classdec program .

    $end            reduce using rule 1 (program -> classdec program .)


state 5

    (4) classdec -> class type . lbracket featurelist rbracket pcoma
    (5) classdec -> class type . inherits type lbracket featurelist rbracket pcoma

    lbracket        shift and go to state 6
    inherits        shift and go to state 7


state 6

    (4) classdec -> class type lbracket . featurelist rbracket pcoma
    (6) featurelist -> . feature featurelist
    (7) featurelist -> . empty
    (8) feature -> . attribute pcoma
    (9) feature -> . methoddef pcoma
    (3) empty -> .
    (29) attribute -> . id dpoint type
    (30) attribute -> . id dpoint type assign expression
    (24) methoddef -> . id lparen rparen dpoint type lbracket expression rbracket
    (25) methoddef -> . id lparen param paramslistdef rparen dpoint type lbracket expression rbracket

    rbracket        reduce using rule 3 (empty -> .)
    id              shift and go to state 13

    featurelist                    shift and go to state 8
    feature                        shift and go to state 9
    empty                          shift and go to state 10
    attribute                      shift and go to state 11
    methoddef                      shift and go to state 12

state 7

    (5) classdec -> class type inherits . type lbracket featurelist rbracket pcoma

    type            shift and go to state 14


state 8

    (4) classdec -> class type lbracket featurelist . rbracket pcoma

    rbracket        shift and go to state 15


state 9

    (6) featurelist -> feature . featurelist
    (6) featurelist -> . feature featurelist
    (7) featurelist -> . empty
    (8) feature -> . attribute pcoma
    (9) feature -> . methoddef pcoma
    (3) empty -> .
    (29) attribute -> . id dpoint type
    (30) attribute -> . id dpoint type assign expression
    (24) methoddef -> . id lparen rparen dpoint type lbracket expression rbracket
    (25) methoddef -> . id lparen param paramslistdef rparen dpoint type lbracket expression rbracket

    rbracket        reduce using rule 3 (empty -> .)
    id              shift and go to state 13

    feature                        shift and go to state 9
    featurelist                    shift and go to state 16
    empty                          shift and go to state 10
    attribute                      shift and go to state 11
    methoddef                      shift and go to state 12

state 10

    (7) featurelist -> empty .

    rbracket        reduce using rule 7 (featurelist -> empty .)


state 11

    (8) feature -> attribute . pcoma

    pcoma           shift and go to state 17


state 12

    (9) feature -> methoddef . pcoma

    pcoma           shift and go to state 18


state 13

    (29) attribute -> id . dpoint type
    (30) attribute -> id . dpoint type assign expression
    (24) methoddef -> id . lparen rparen dpoint type lbracket expression rbracket
    (25) methoddef -> id . lparen param paramslistdef rparen dpoint type lbracket expression rbracket

    dpoint          shift and go to state 19
    lparen          shift and go to state 20


state 14

    (5) classdec -> class type inherits type . lbracket featurelist rbracket pcoma

    lbracket        shift and go to state 21


state 15

    (4) classdec -> class type lbracket featurelist rbracket . pcoma

    pcoma           shift and go to state 22


state 16

    (6) featurelist -> feature featurelist .

    rbracket        reduce using rule 6 (featurelist -> feature featurelist .)


state 17

    (8) feature -> attribute pcoma .

    id              reduce using rule 8 (feature -> attribute pcoma .)
    rbracket        reduce using rule 8 (feature -> attribute pcoma .)


state 18

    (9) feature -> methoddef pcoma .

    id              reduce using rule 9 (feature -> methoddef pcoma .)
    rbracket        reduce using rule 9 (feature -> methoddef pcoma .)


state 19

    (29) attribute -> id dpoint . type
    (30) attribute -> id dpoint . type assign expression

    type            shift and go to state 23


state 20

    (24) methoddef -> id lparen . rparen dpoint type lbracket expression rbracket
    (25) methoddef -> id lparen . param paramslistdef rparen dpoint type lbracket expression rbracket
    (28) param -> . id dpoint type

    rparen          shift and go to state 25
    id              shift and go to state 24

    param                          shift and go to state 26

state 21

    (5) classdec -> class type inherits type lbracket . featurelist rbracket pcoma
    (6) featurelist -> . feature featurelist
    (7) featurelist -> . empty
    (8) feature -> . attribute pcoma
    (9) feature -> . methoddef pcoma
    (3) empty -> .
    (29) attribute -> . id dpoint type
    (30) attribute -> . id dpoint type assign expression
    (24) methoddef -> . id lparen rparen dpoint type lbracket expression rbracket
    (25) methoddef -> . id lparen param paramslistdef rparen dpoint type lbracket expression rbracket

    rbracket        reduce using rule 3 (empty -> .)
    id              shift and go to state 13

    featurelist                    shift and go to state 27
    feature                        shift and go to state 9
    empty                          shift and go to state 10
    attribute                      shift and go to state 11
    methoddef                      shift and go to state 12

state 22

    (4) classdec -> class type lbracket featurelist rbracket pcoma .

    class           reduce using rule 4 (classdec -> class type lbracket featurelist rbracket pcoma .)
    $end            reduce using rule 4 (classdec -> class type lbracket featurelist rbracket pcoma .)


state 23

    (29) attribute -> id dpoint type .
    (30) attribute -> id dpoint type . assign expression

    pcoma           reduce using rule 29 (attribute -> id dpoint type .)
    coma            reduce using rule 29 (attribute -> id dpoint type .)
    in              reduce using rule 29 (attribute -> id dpoint type .)
    assign          shift and go to state 28


state 24

    (28) param -> id . dpoint type

    dpoint          shift and go to state 29


state 25

    (24) methoddef -> id lparen rparen . dpoint type lbracket expression rbracket

    dpoint          shift and go to state 30


state 26

    (25) methoddef -> id lparen param . paramslistdef rparen dpoint type lbracket expression rbracket
    (33) paramslistdef -> . coma param paramslistdef
    (34) paramslistdef -> . empty
    (3) empty -> .

    coma            shift and go to state 32
    rparen          reduce using rule 3 (empty -> .)

    paramslistdef                  shift and go to state 31
    empty                          shift and go to state 33

state 27

    (5) classdec -> class type inherits type lbracket featurelist . rbracket pcoma

    rbracket        shift and go to state 34


state 28

    (30) attribute -> id dpoint type assign . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 36
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 29

    (28) param -> id dpoint . type

    type            shift and go to state 65


state 30

    (24) methoddef -> id lparen rparen dpoint . type lbracket expression rbracket

    type            shift and go to state 66


state 31

    (25) methoddef -> id lparen param paramslistdef . rparen dpoint type lbracket expression rbracket

    rparen          shift and go to state 67


state 32

    (33) paramslistdef -> coma . param paramslistdef
    (28) param -> . id dpoint type

    id              shift and go to state 24

    param                          shift and go to state 68

state 33

    (34) paramslistdef -> empty .

    rparen          reduce using rule 34 (paramslistdef -> empty .)


state 34

    (5) classdec -> class type inherits type lbracket featurelist rbracket . pcoma

    pcoma           shift and go to state 69


state 35

    (67) identifier -> id .
    (68) assignment -> id . assign expression
    (35) dispatch -> id . lparen rparen
    (36) dispatch -> id . lparen expression expressionparams rparen

    point           reduce using rule 67 (identifier -> id .)
    arroba          reduce using rule 67 (identifier -> id .)
    plus            reduce using rule 67 (identifier -> id .)
    minus           reduce using rule 67 (identifier -> id .)
    mult            reduce using rule 67 (identifier -> id .)
    div             reduce using rule 67 (identifier -> id .)
    less            reduce using rule 67 (identifier -> id .)
    lesse           reduce using rule 67 (identifier -> id .)
    equal           reduce using rule 67 (identifier -> id .)
    pcoma           reduce using rule 67 (identifier -> id .)
    coma            reduce using rule 67 (identifier -> id .)
    in              reduce using rule 67 (identifier -> id .)
    rparen          reduce using rule 67 (identifier -> id .)
    then            reduce using rule 67 (identifier -> id .)
    loop            reduce using rule 67 (identifier -> id .)
    of              reduce using rule 67 (identifier -> id .)
    rbracket        reduce using rule 67 (identifier -> id .)
    else            reduce using rule 67 (identifier -> id .)
    pool            reduce using rule 67 (identifier -> id .)
    fi              reduce using rule 67 (identifier -> id .)
    assign          shift and go to state 70
    lparen          shift and go to state 71


state 36

    (30) attribute -> id dpoint type assign expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    pcoma           reduce using rule 30 (attribute -> id dpoint type assign expression .)
    coma            reduce using rule 30 (attribute -> id dpoint type assign expression .)
    in              reduce using rule 30 (attribute -> id dpoint type assign expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 37

    (10) expression -> constantexp .

    point           reduce using rule 10 (expression -> constantexp .)
    arroba          reduce using rule 10 (expression -> constantexp .)
    plus            reduce using rule 10 (expression -> constantexp .)
    minus           reduce using rule 10 (expression -> constantexp .)
    mult            reduce using rule 10 (expression -> constantexp .)
    div             reduce using rule 10 (expression -> constantexp .)
    less            reduce using rule 10 (expression -> constantexp .)
    lesse           reduce using rule 10 (expression -> constantexp .)
    equal           reduce using rule 10 (expression -> constantexp .)
    pcoma           reduce using rule 10 (expression -> constantexp .)
    coma            reduce using rule 10 (expression -> constantexp .)
    in              reduce using rule 10 (expression -> constantexp .)
    rparen          reduce using rule 10 (expression -> constantexp .)
    then            reduce using rule 10 (expression -> constantexp .)
    loop            reduce using rule 10 (expression -> constantexp .)
    of              reduce using rule 10 (expression -> constantexp .)
    rbracket        reduce using rule 10 (expression -> constantexp .)
    else            reduce using rule 10 (expression -> constantexp .)
    pool            reduce using rule 10 (expression -> constantexp .)
    fi              reduce using rule 10 (expression -> constantexp .)


state 38

    (11) expression -> identifier .

    point           reduce using rule 11 (expression -> identifier .)
    arroba          reduce using rule 11 (expression -> identifier .)
    plus            reduce using rule 11 (expression -> identifier .)
    minus           reduce using rule 11 (expression -> identifier .)
    mult            reduce using rule 11 (expression -> identifier .)
    div             reduce using rule 11 (expression -> identifier .)
    less            reduce using rule 11 (expression -> identifier .)
    lesse           reduce using rule 11 (expression -> identifier .)
    equal           reduce using rule 11 (expression -> identifier .)
    pcoma           reduce using rule 11 (expression -> identifier .)
    coma            reduce using rule 11 (expression -> identifier .)
    in              reduce using rule 11 (expression -> identifier .)
    rparen          reduce using rule 11 (expression -> identifier .)
    then            reduce using rule 11 (expression -> identifier .)
    loop            reduce using rule 11 (expression -> identifier .)
    of              reduce using rule 11 (expression -> identifier .)
    rbracket        reduce using rule 11 (expression -> identifier .)
    else            reduce using rule 11 (expression -> identifier .)
    pool            reduce using rule 11 (expression -> identifier .)
    fi              reduce using rule 11 (expression -> identifier .)


state 39

    (12) expression -> assignment .

    point           reduce using rule 12 (expression -> assignment .)
    arroba          reduce using rule 12 (expression -> assignment .)
    plus            reduce using rule 12 (expression -> assignment .)
    minus           reduce using rule 12 (expression -> assignment .)
    mult            reduce using rule 12 (expression -> assignment .)
    div             reduce using rule 12 (expression -> assignment .)
    less            reduce using rule 12 (expression -> assignment .)
    lesse           reduce using rule 12 (expression -> assignment .)
    equal           reduce using rule 12 (expression -> assignment .)
    pcoma           reduce using rule 12 (expression -> assignment .)
    coma            reduce using rule 12 (expression -> assignment .)
    in              reduce using rule 12 (expression -> assignment .)
    rparen          reduce using rule 12 (expression -> assignment .)
    then            reduce using rule 12 (expression -> assignment .)
    loop            reduce using rule 12 (expression -> assignment .)
    of              reduce using rule 12 (expression -> assignment .)
    rbracket        reduce using rule 12 (expression -> assignment .)
    else            reduce using rule 12 (expression -> assignment .)
    pool            reduce using rule 12 (expression -> assignment .)
    fi              reduce using rule 12 (expression -> assignment .)


state 40

    (13) expression -> dispatch .

    point           reduce using rule 13 (expression -> dispatch .)
    arroba          reduce using rule 13 (expression -> dispatch .)
    plus            reduce using rule 13 (expression -> dispatch .)
    minus           reduce using rule 13 (expression -> dispatch .)
    mult            reduce using rule 13 (expression -> dispatch .)
    div             reduce using rule 13 (expression -> dispatch .)
    less            reduce using rule 13 (expression -> dispatch .)
    lesse           reduce using rule 13 (expression -> dispatch .)
    equal           reduce using rule 13 (expression -> dispatch .)
    pcoma           reduce using rule 13 (expression -> dispatch .)
    coma            reduce using rule 13 (expression -> dispatch .)
    in              reduce using rule 13 (expression -> dispatch .)
    rparen          reduce using rule 13 (expression -> dispatch .)
    then            reduce using rule 13 (expression -> dispatch .)
    loop            reduce using rule 13 (expression -> dispatch .)
    of              reduce using rule 13 (expression -> dispatch .)
    rbracket        reduce using rule 13 (expression -> dispatch .)
    else            reduce using rule 13 (expression -> dispatch .)
    pool            reduce using rule 13 (expression -> dispatch .)
    fi              reduce using rule 13 (expression -> dispatch .)


state 41

    (14) expression -> conditional .

    point           reduce using rule 14 (expression -> conditional .)
    arroba          reduce using rule 14 (expression -> conditional .)
    plus            reduce using rule 14 (expression -> conditional .)
    minus           reduce using rule 14 (expression -> conditional .)
    mult            reduce using rule 14 (expression -> conditional .)
    div             reduce using rule 14 (expression -> conditional .)
    less            reduce using rule 14 (expression -> conditional .)
    lesse           reduce using rule 14 (expression -> conditional .)
    equal           reduce using rule 14 (expression -> conditional .)
    pcoma           reduce using rule 14 (expression -> conditional .)
    coma            reduce using rule 14 (expression -> conditional .)
    in              reduce using rule 14 (expression -> conditional .)
    rparen          reduce using rule 14 (expression -> conditional .)
    then            reduce using rule 14 (expression -> conditional .)
    loop            reduce using rule 14 (expression -> conditional .)
    of              reduce using rule 14 (expression -> conditional .)
    rbracket        reduce using rule 14 (expression -> conditional .)
    else            reduce using rule 14 (expression -> conditional .)
    pool            reduce using rule 14 (expression -> conditional .)
    fi              reduce using rule 14 (expression -> conditional .)


state 42

    (15) expression -> loopexp .

    point           reduce using rule 15 (expression -> loopexp .)
    arroba          reduce using rule 15 (expression -> loopexp .)
    plus            reduce using rule 15 (expression -> loopexp .)
    minus           reduce using rule 15 (expression -> loopexp .)
    mult            reduce using rule 15 (expression -> loopexp .)
    div             reduce using rule 15 (expression -> loopexp .)
    less            reduce using rule 15 (expression -> loopexp .)
    lesse           reduce using rule 15 (expression -> loopexp .)
    equal           reduce using rule 15 (expression -> loopexp .)
    pcoma           reduce using rule 15 (expression -> loopexp .)
    coma            reduce using rule 15 (expression -> loopexp .)
    in              reduce using rule 15 (expression -> loopexp .)
    rparen          reduce using rule 15 (expression -> loopexp .)
    then            reduce using rule 15 (expression -> loopexp .)
    loop            reduce using rule 15 (expression -> loopexp .)
    of              reduce using rule 15 (expression -> loopexp .)
    rbracket        reduce using rule 15 (expression -> loopexp .)
    else            reduce using rule 15 (expression -> loopexp .)
    pool            reduce using rule 15 (expression -> loopexp .)
    fi              reduce using rule 15 (expression -> loopexp .)


state 43

    (16) expression -> blockexp .

    point           reduce using rule 16 (expression -> blockexp .)
    arroba          reduce using rule 16 (expression -> blockexp .)
    plus            reduce using rule 16 (expression -> blockexp .)
    minus           reduce using rule 16 (expression -> blockexp .)
    mult            reduce using rule 16 (expression -> blockexp .)
    div             reduce using rule 16 (expression -> blockexp .)
    less            reduce using rule 16 (expression -> blockexp .)
    lesse           reduce using rule 16 (expression -> blockexp .)
    equal           reduce using rule 16 (expression -> blockexp .)
    pcoma           reduce using rule 16 (expression -> blockexp .)
    coma            reduce using rule 16 (expression -> blockexp .)
    in              reduce using rule 16 (expression -> blockexp .)
    rparen          reduce using rule 16 (expression -> blockexp .)
    then            reduce using rule 16 (expression -> blockexp .)
    loop            reduce using rule 16 (expression -> blockexp .)
    of              reduce using rule 16 (expression -> blockexp .)
    rbracket        reduce using rule 16 (expression -> blockexp .)
    else            reduce using rule 16 (expression -> blockexp .)
    pool            reduce using rule 16 (expression -> blockexp .)
    fi              reduce using rule 16 (expression -> blockexp .)


state 44

    (17) expression -> letexp .

    point           reduce using rule 17 (expression -> letexp .)
    arroba          reduce using rule 17 (expression -> letexp .)
    plus            reduce using rule 17 (expression -> letexp .)
    minus           reduce using rule 17 (expression -> letexp .)
    mult            reduce using rule 17 (expression -> letexp .)
    div             reduce using rule 17 (expression -> letexp .)
    less            reduce using rule 17 (expression -> letexp .)
    lesse           reduce using rule 17 (expression -> letexp .)
    equal           reduce using rule 17 (expression -> letexp .)
    pcoma           reduce using rule 17 (expression -> letexp .)
    coma            reduce using rule 17 (expression -> letexp .)
    in              reduce using rule 17 (expression -> letexp .)
    rparen          reduce using rule 17 (expression -> letexp .)
    then            reduce using rule 17 (expression -> letexp .)
    loop            reduce using rule 17 (expression -> letexp .)
    of              reduce using rule 17 (expression -> letexp .)
    rbracket        reduce using rule 17 (expression -> letexp .)
    else            reduce using rule 17 (expression -> letexp .)
    pool            reduce using rule 17 (expression -> letexp .)
    fi              reduce using rule 17 (expression -> letexp .)


state 45

    (18) expression -> caseexp .

    point           reduce using rule 18 (expression -> caseexp .)
    arroba          reduce using rule 18 (expression -> caseexp .)
    plus            reduce using rule 18 (expression -> caseexp .)
    minus           reduce using rule 18 (expression -> caseexp .)
    mult            reduce using rule 18 (expression -> caseexp .)
    div             reduce using rule 18 (expression -> caseexp .)
    less            reduce using rule 18 (expression -> caseexp .)
    lesse           reduce using rule 18 (expression -> caseexp .)
    equal           reduce using rule 18 (expression -> caseexp .)
    pcoma           reduce using rule 18 (expression -> caseexp .)
    coma            reduce using rule 18 (expression -> caseexp .)
    in              reduce using rule 18 (expression -> caseexp .)
    rparen          reduce using rule 18 (expression -> caseexp .)
    then            reduce using rule 18 (expression -> caseexp .)
    loop            reduce using rule 18 (expression -> caseexp .)
    of              reduce using rule 18 (expression -> caseexp .)
    rbracket        reduce using rule 18 (expression -> caseexp .)
    else            reduce using rule 18 (expression -> caseexp .)
    pool            reduce using rule 18 (expression -> caseexp .)
    fi              reduce using rule 18 (expression -> caseexp .)


state 46

    (19) expression -> newexp .

    point           reduce using rule 19 (expression -> newexp .)
    arroba          reduce using rule 19 (expression -> newexp .)
    plus            reduce using rule 19 (expression -> newexp .)
    minus           reduce using rule 19 (expression -> newexp .)
    mult            reduce using rule 19 (expression -> newexp .)
    div             reduce using rule 19 (expression -> newexp .)
    less            reduce using rule 19 (expression -> newexp .)
    lesse           reduce using rule 19 (expression -> newexp .)
    equal           reduce using rule 19 (expression -> newexp .)
    pcoma           reduce using rule 19 (expression -> newexp .)
    coma            reduce using rule 19 (expression -> newexp .)
    in              reduce using rule 19 (expression -> newexp .)
    rparen          reduce using rule 19 (expression -> newexp .)
    then            reduce using rule 19 (expression -> newexp .)
    loop            reduce using rule 19 (expression -> newexp .)
    of              reduce using rule 19 (expression -> newexp .)
    rbracket        reduce using rule 19 (expression -> newexp .)
    else            reduce using rule 19 (expression -> newexp .)
    pool            reduce using rule 19 (expression -> newexp .)
    fi              reduce using rule 19 (expression -> newexp .)


state 47

    (20) expression -> isvoidexp .

    point           reduce using rule 20 (expression -> isvoidexp .)
    arroba          reduce using rule 20 (expression -> isvoidexp .)
    plus            reduce using rule 20 (expression -> isvoidexp .)
    minus           reduce using rule 20 (expression -> isvoidexp .)
    mult            reduce using rule 20 (expression -> isvoidexp .)
    div             reduce using rule 20 (expression -> isvoidexp .)
    less            reduce using rule 20 (expression -> isvoidexp .)
    lesse           reduce using rule 20 (expression -> isvoidexp .)
    equal           reduce using rule 20 (expression -> isvoidexp .)
    pcoma           reduce using rule 20 (expression -> isvoidexp .)
    coma            reduce using rule 20 (expression -> isvoidexp .)
    in              reduce using rule 20 (expression -> isvoidexp .)
    rparen          reduce using rule 20 (expression -> isvoidexp .)
    then            reduce using rule 20 (expression -> isvoidexp .)
    loop            reduce using rule 20 (expression -> isvoidexp .)
    of              reduce using rule 20 (expression -> isvoidexp .)
    rbracket        reduce using rule 20 (expression -> isvoidexp .)
    else            reduce using rule 20 (expression -> isvoidexp .)
    pool            reduce using rule 20 (expression -> isvoidexp .)
    fi              reduce using rule 20 (expression -> isvoidexp .)


state 48

    (21) expression -> aritmetica .

    point           reduce using rule 21 (expression -> aritmetica .)
    arroba          reduce using rule 21 (expression -> aritmetica .)
    plus            reduce using rule 21 (expression -> aritmetica .)
    minus           reduce using rule 21 (expression -> aritmetica .)
    mult            reduce using rule 21 (expression -> aritmetica .)
    div             reduce using rule 21 (expression -> aritmetica .)
    less            reduce using rule 21 (expression -> aritmetica .)
    lesse           reduce using rule 21 (expression -> aritmetica .)
    equal           reduce using rule 21 (expression -> aritmetica .)
    pcoma           reduce using rule 21 (expression -> aritmetica .)
    coma            reduce using rule 21 (expression -> aritmetica .)
    in              reduce using rule 21 (expression -> aritmetica .)
    rparen          reduce using rule 21 (expression -> aritmetica .)
    then            reduce using rule 21 (expression -> aritmetica .)
    loop            reduce using rule 21 (expression -> aritmetica .)
    of              reduce using rule 21 (expression -> aritmetica .)
    rbracket        reduce using rule 21 (expression -> aritmetica .)
    else            reduce using rule 21 (expression -> aritmetica .)
    pool            reduce using rule 21 (expression -> aritmetica .)
    fi              reduce using rule 21 (expression -> aritmetica .)


state 49

    (22) expression -> comparison .

    point           reduce using rule 22 (expression -> comparison .)
    arroba          reduce using rule 22 (expression -> comparison .)
    plus            reduce using rule 22 (expression -> comparison .)
    minus           reduce using rule 22 (expression -> comparison .)
    mult            reduce using rule 22 (expression -> comparison .)
    div             reduce using rule 22 (expression -> comparison .)
    less            reduce using rule 22 (expression -> comparison .)
    lesse           reduce using rule 22 (expression -> comparison .)
    equal           reduce using rule 22 (expression -> comparison .)
    pcoma           reduce using rule 22 (expression -> comparison .)
    coma            reduce using rule 22 (expression -> comparison .)
    in              reduce using rule 22 (expression -> comparison .)
    rparen          reduce using rule 22 (expression -> comparison .)
    then            reduce using rule 22 (expression -> comparison .)
    loop            reduce using rule 22 (expression -> comparison .)
    of              reduce using rule 22 (expression -> comparison .)
    rbracket        reduce using rule 22 (expression -> comparison .)
    else            reduce using rule 22 (expression -> comparison .)
    pool            reduce using rule 22 (expression -> comparison .)
    fi              reduce using rule 22 (expression -> comparison .)


state 50

    (23) expression -> parenexpression .

    point           reduce using rule 23 (expression -> parenexpression .)
    arroba          reduce using rule 23 (expression -> parenexpression .)
    plus            reduce using rule 23 (expression -> parenexpression .)
    minus           reduce using rule 23 (expression -> parenexpression .)
    mult            reduce using rule 23 (expression -> parenexpression .)
    div             reduce using rule 23 (expression -> parenexpression .)
    less            reduce using rule 23 (expression -> parenexpression .)
    lesse           reduce using rule 23 (expression -> parenexpression .)
    equal           reduce using rule 23 (expression -> parenexpression .)
    pcoma           reduce using rule 23 (expression -> parenexpression .)
    coma            reduce using rule 23 (expression -> parenexpression .)
    in              reduce using rule 23 (expression -> parenexpression .)
    rparen          reduce using rule 23 (expression -> parenexpression .)
    then            reduce using rule 23 (expression -> parenexpression .)
    loop            reduce using rule 23 (expression -> parenexpression .)
    of              reduce using rule 23 (expression -> parenexpression .)
    rbracket        reduce using rule 23 (expression -> parenexpression .)
    else            reduce using rule 23 (expression -> parenexpression .)
    pool            reduce using rule 23 (expression -> parenexpression .)
    fi              reduce using rule 23 (expression -> parenexpression .)


state 51

    (63) constantexp -> number .

    point           reduce using rule 63 (constantexp -> number .)
    arroba          reduce using rule 63 (constantexp -> number .)
    plus            reduce using rule 63 (constantexp -> number .)
    minus           reduce using rule 63 (constantexp -> number .)
    mult            reduce using rule 63 (constantexp -> number .)
    div             reduce using rule 63 (constantexp -> number .)
    less            reduce using rule 63 (constantexp -> number .)
    lesse           reduce using rule 63 (constantexp -> number .)
    equal           reduce using rule 63 (constantexp -> number .)
    pcoma           reduce using rule 63 (constantexp -> number .)
    coma            reduce using rule 63 (constantexp -> number .)
    in              reduce using rule 63 (constantexp -> number .)
    rparen          reduce using rule 63 (constantexp -> number .)
    then            reduce using rule 63 (constantexp -> number .)
    loop            reduce using rule 63 (constantexp -> number .)
    of              reduce using rule 63 (constantexp -> number .)
    rbracket        reduce using rule 63 (constantexp -> number .)
    else            reduce using rule 63 (constantexp -> number .)
    pool            reduce using rule 63 (constantexp -> number .)
    fi              reduce using rule 63 (constantexp -> number .)


state 52

    (64) constantexp -> string .

    point           reduce using rule 64 (constantexp -> string .)
    arroba          reduce using rule 64 (constantexp -> string .)
    plus            reduce using rule 64 (constantexp -> string .)
    minus           reduce using rule 64 (constantexp -> string .)
    mult            reduce using rule 64 (constantexp -> string .)
    div             reduce using rule 64 (constantexp -> string .)
    less            reduce using rule 64 (constantexp -> string .)
    lesse           reduce using rule 64 (constantexp -> string .)
    equal           reduce using rule 64 (constantexp -> string .)
    pcoma           reduce using rule 64 (constantexp -> string .)
    coma            reduce using rule 64 (constantexp -> string .)
    in              reduce using rule 64 (constantexp -> string .)
    rparen          reduce using rule 64 (constantexp -> string .)
    then            reduce using rule 64 (constantexp -> string .)
    loop            reduce using rule 64 (constantexp -> string .)
    of              reduce using rule 64 (constantexp -> string .)
    rbracket        reduce using rule 64 (constantexp -> string .)
    else            reduce using rule 64 (constantexp -> string .)
    pool            reduce using rule 64 (constantexp -> string .)
    fi              reduce using rule 64 (constantexp -> string .)


state 53

    (65) constantexp -> true .

    point           reduce using rule 65 (constantexp -> true .)
    arroba          reduce using rule 65 (constantexp -> true .)
    plus            reduce using rule 65 (constantexp -> true .)
    minus           reduce using rule 65 (constantexp -> true .)
    mult            reduce using rule 65 (constantexp -> true .)
    div             reduce using rule 65 (constantexp -> true .)
    less            reduce using rule 65 (constantexp -> true .)
    lesse           reduce using rule 65 (constantexp -> true .)
    equal           reduce using rule 65 (constantexp -> true .)
    pcoma           reduce using rule 65 (constantexp -> true .)
    coma            reduce using rule 65 (constantexp -> true .)
    in              reduce using rule 65 (constantexp -> true .)
    rparen          reduce using rule 65 (constantexp -> true .)
    then            reduce using rule 65 (constantexp -> true .)
    loop            reduce using rule 65 (constantexp -> true .)
    of              reduce using rule 65 (constantexp -> true .)
    rbracket        reduce using rule 65 (constantexp -> true .)
    else            reduce using rule 65 (constantexp -> true .)
    pool            reduce using rule 65 (constantexp -> true .)
    fi              reduce using rule 65 (constantexp -> true .)


state 54

    (66) constantexp -> false .

    point           reduce using rule 66 (constantexp -> false .)
    arroba          reduce using rule 66 (constantexp -> false .)
    plus            reduce using rule 66 (constantexp -> false .)
    minus           reduce using rule 66 (constantexp -> false .)
    mult            reduce using rule 66 (constantexp -> false .)
    div             reduce using rule 66 (constantexp -> false .)
    less            reduce using rule 66 (constantexp -> false .)
    lesse           reduce using rule 66 (constantexp -> false .)
    equal           reduce using rule 66 (constantexp -> false .)
    pcoma           reduce using rule 66 (constantexp -> false .)
    coma            reduce using rule 66 (constantexp -> false .)
    in              reduce using rule 66 (constantexp -> false .)
    rparen          reduce using rule 66 (constantexp -> false .)
    then            reduce using rule 66 (constantexp -> false .)
    loop            reduce using rule 66 (constantexp -> false .)
    of              reduce using rule 66 (constantexp -> false .)
    rbracket        reduce using rule 66 (constantexp -> false .)
    else            reduce using rule 66 (constantexp -> false .)
    pool            reduce using rule 66 (constantexp -> false .)
    fi              reduce using rule 66 (constantexp -> false .)


state 55

    (62) parenexpression -> lparen . expression rparen
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 81
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 56

    (43) conditional -> if . expression then expression else expression fi
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 82
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 57

    (44) loopexp -> while . expression loop expression pool
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 83
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 58

    (45) blockexp -> lbracket . expressionlist rbracket
    (26) expressionlist -> . expression pcoma expressionlist
    (27) expressionlist -> . empty
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (3) empty -> .
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    rbracket        reduce using rule 3 (empty -> .)
    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expressionlist                 shift and go to state 84
    expression                     shift and go to state 85
    empty                          shift and go to state 86
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 59

    (46) letexp -> let . attribute letattributelist in expression
    (29) attribute -> . id dpoint type
    (30) attribute -> . id dpoint type assign expression

    id              shift and go to state 88

    attribute                      shift and go to state 87

state 60

    (47) caseexp -> case . expression of subcase listcase esac
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 89
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 61

    (51) newexp -> new . type

    type            shift and go to state 90


state 62

    (52) isvoidexp -> isvoid . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 91
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 63

    (57) aritmetica -> intnot . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 92
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 64

    (61) comparison -> not . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 93
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 65

    (28) param -> id dpoint type .

    coma            reduce using rule 28 (param -> id dpoint type .)
    rparen          reduce using rule 28 (param -> id dpoint type .)


state 66

    (24) methoddef -> id lparen rparen dpoint type . lbracket expression rbracket

    lbracket        shift and go to state 94


state 67

    (25) methoddef -> id lparen param paramslistdef rparen . dpoint type lbracket expression rbracket

    dpoint          shift and go to state 95


state 68

    (33) paramslistdef -> coma param . paramslistdef
    (33) paramslistdef -> . coma param paramslistdef
    (34) paramslistdef -> . empty
    (3) empty -> .

    coma            shift and go to state 32
    rparen          reduce using rule 3 (empty -> .)

    paramslistdef                  shift and go to state 96
    empty                          shift and go to state 33

state 69

    (5) classdec -> class type inherits type lbracket featurelist rbracket pcoma .

    class           reduce using rule 5 (classdec -> class type inherits type lbracket featurelist rbracket pcoma .)
    $end            reduce using rule 5 (classdec -> class type inherits type lbracket featurelist rbracket pcoma .)


state 70

    (68) assignment -> id assign . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 97
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 71

    (35) dispatch -> id lparen . rparen
    (36) dispatch -> id lparen . expression expressionparams rparen
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    rparen          shift and go to state 98
    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 99
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 72

    (37) dispatch -> expression point . id lparen rparen
    (38) dispatch -> expression point . id lparen expression expressionparams rparen

    id              shift and go to state 100


state 73

    (39) dispatch -> expression arroba . type point id lparen rparen
    (40) dispatch -> expression arroba . type point id lparen expression expressionparams rparen

    type            shift and go to state 101


state 74

    (53) aritmetica -> expression plus . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 102
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 75

    (54) aritmetica -> expression minus . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 103
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 76

    (55) aritmetica -> expression mult . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 104
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 77

    (56) aritmetica -> expression div . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 105
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 78

    (58) comparison -> expression less . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 106
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 79

    (59) comparison -> expression lesse . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 107
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 80

    (60) comparison -> expression equal . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 108
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 81

    (62) parenexpression -> lparen expression . rparen
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    rparen          shift and go to state 109
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 82

    (43) conditional -> if expression . then expression else expression fi
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    then            shift and go to state 110
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 83

    (44) loopexp -> while expression . loop expression pool
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    loop            shift and go to state 111
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 84

    (45) blockexp -> lbracket expressionlist . rbracket

    rbracket        shift and go to state 112


state 85

    (26) expressionlist -> expression . pcoma expressionlist
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    pcoma           shift and go to state 113
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 86

    (27) expressionlist -> empty .

    rbracket        reduce using rule 27 (expressionlist -> empty .)


state 87

    (46) letexp -> let attribute . letattributelist in expression
    (31) letattributelist -> . coma attribute letattributelist
    (32) letattributelist -> . empty
    (3) empty -> .

    coma            shift and go to state 115
    in              reduce using rule 3 (empty -> .)

    letattributelist               shift and go to state 114
    empty                          shift and go to state 116

state 88

    (29) attribute -> id . dpoint type
    (30) attribute -> id . dpoint type assign expression

    dpoint          shift and go to state 19


state 89

    (47) caseexp -> case expression . of subcase listcase esac
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    of              shift and go to state 117
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 90

    (51) newexp -> new type .

    point           reduce using rule 51 (newexp -> new type .)
    arroba          reduce using rule 51 (newexp -> new type .)
    plus            reduce using rule 51 (newexp -> new type .)
    minus           reduce using rule 51 (newexp -> new type .)
    mult            reduce using rule 51 (newexp -> new type .)
    div             reduce using rule 51 (newexp -> new type .)
    less            reduce using rule 51 (newexp -> new type .)
    lesse           reduce using rule 51 (newexp -> new type .)
    equal           reduce using rule 51 (newexp -> new type .)
    pcoma           reduce using rule 51 (newexp -> new type .)
    coma            reduce using rule 51 (newexp -> new type .)
    in              reduce using rule 51 (newexp -> new type .)
    rparen          reduce using rule 51 (newexp -> new type .)
    then            reduce using rule 51 (newexp -> new type .)
    loop            reduce using rule 51 (newexp -> new type .)
    of              reduce using rule 51 (newexp -> new type .)
    rbracket        reduce using rule 51 (newexp -> new type .)
    else            reduce using rule 51 (newexp -> new type .)
    pool            reduce using rule 51 (newexp -> new type .)
    fi              reduce using rule 51 (newexp -> new type .)


state 91

    (52) isvoidexp -> isvoid expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    plus            reduce using rule 52 (isvoidexp -> isvoid expression .)
    minus           reduce using rule 52 (isvoidexp -> isvoid expression .)
    mult            reduce using rule 52 (isvoidexp -> isvoid expression .)
    div             reduce using rule 52 (isvoidexp -> isvoid expression .)
    less            reduce using rule 52 (isvoidexp -> isvoid expression .)
    lesse           reduce using rule 52 (isvoidexp -> isvoid expression .)
    equal           reduce using rule 52 (isvoidexp -> isvoid expression .)
    pcoma           reduce using rule 52 (isvoidexp -> isvoid expression .)
    coma            reduce using rule 52 (isvoidexp -> isvoid expression .)
    in              reduce using rule 52 (isvoidexp -> isvoid expression .)
    rparen          reduce using rule 52 (isvoidexp -> isvoid expression .)
    then            reduce using rule 52 (isvoidexp -> isvoid expression .)
    loop            reduce using rule 52 (isvoidexp -> isvoid expression .)
    of              reduce using rule 52 (isvoidexp -> isvoid expression .)
    rbracket        reduce using rule 52 (isvoidexp -> isvoid expression .)
    else            reduce using rule 52 (isvoidexp -> isvoid expression .)
    pool            reduce using rule 52 (isvoidexp -> isvoid expression .)
    fi              reduce using rule 52 (isvoidexp -> isvoid expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73

  ! point           [ reduce using rule 52 (isvoidexp -> isvoid expression .) ]
  ! arroba          [ reduce using rule 52 (isvoidexp -> isvoid expression .) ]
  ! plus            [ shift and go to state 74 ]
  ! minus           [ shift and go to state 75 ]
  ! mult            [ shift and go to state 76 ]
  ! div             [ shift and go to state 77 ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 92

    (57) aritmetica -> intnot expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    plus            reduce using rule 57 (aritmetica -> intnot expression .)
    minus           reduce using rule 57 (aritmetica -> intnot expression .)
    mult            reduce using rule 57 (aritmetica -> intnot expression .)
    div             reduce using rule 57 (aritmetica -> intnot expression .)
    less            reduce using rule 57 (aritmetica -> intnot expression .)
    lesse           reduce using rule 57 (aritmetica -> intnot expression .)
    equal           reduce using rule 57 (aritmetica -> intnot expression .)
    pcoma           reduce using rule 57 (aritmetica -> intnot expression .)
    coma            reduce using rule 57 (aritmetica -> intnot expression .)
    in              reduce using rule 57 (aritmetica -> intnot expression .)
    rparen          reduce using rule 57 (aritmetica -> intnot expression .)
    then            reduce using rule 57 (aritmetica -> intnot expression .)
    loop            reduce using rule 57 (aritmetica -> intnot expression .)
    of              reduce using rule 57 (aritmetica -> intnot expression .)
    rbracket        reduce using rule 57 (aritmetica -> intnot expression .)
    else            reduce using rule 57 (aritmetica -> intnot expression .)
    pool            reduce using rule 57 (aritmetica -> intnot expression .)
    fi              reduce using rule 57 (aritmetica -> intnot expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73

  ! point           [ reduce using rule 57 (aritmetica -> intnot expression .) ]
  ! arroba          [ reduce using rule 57 (aritmetica -> intnot expression .) ]
  ! plus            [ shift and go to state 74 ]
  ! minus           [ shift and go to state 75 ]
  ! mult            [ shift and go to state 76 ]
  ! div             [ shift and go to state 77 ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 93

    (61) comparison -> not expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    pcoma           reduce using rule 61 (comparison -> not expression .)
    coma            reduce using rule 61 (comparison -> not expression .)
    in              reduce using rule 61 (comparison -> not expression .)
    rparen          reduce using rule 61 (comparison -> not expression .)
    then            reduce using rule 61 (comparison -> not expression .)
    loop            reduce using rule 61 (comparison -> not expression .)
    of              reduce using rule 61 (comparison -> not expression .)
    rbracket        reduce using rule 61 (comparison -> not expression .)
    else            reduce using rule 61 (comparison -> not expression .)
    pool            reduce using rule 61 (comparison -> not expression .)
    fi              reduce using rule 61 (comparison -> not expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80

  ! point           [ reduce using rule 61 (comparison -> not expression .) ]
  ! arroba          [ reduce using rule 61 (comparison -> not expression .) ]
  ! plus            [ reduce using rule 61 (comparison -> not expression .) ]
  ! minus           [ reduce using rule 61 (comparison -> not expression .) ]
  ! mult            [ reduce using rule 61 (comparison -> not expression .) ]
  ! div             [ reduce using rule 61 (comparison -> not expression .) ]
  ! less            [ reduce using rule 61 (comparison -> not expression .) ]
  ! lesse           [ reduce using rule 61 (comparison -> not expression .) ]
  ! equal           [ reduce using rule 61 (comparison -> not expression .) ]


state 94

    (24) methoddef -> id lparen rparen dpoint type lbracket . expression rbracket
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 118
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 95

    (25) methoddef -> id lparen param paramslistdef rparen dpoint . type lbracket expression rbracket

    type            shift and go to state 119


state 96

    (33) paramslistdef -> coma param paramslistdef .

    rparen          reduce using rule 33 (paramslistdef -> coma param paramslistdef .)


state 97

    (68) assignment -> id assign expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    pcoma           reduce using rule 68 (assignment -> id assign expression .)
    coma            reduce using rule 68 (assignment -> id assign expression .)
    in              reduce using rule 68 (assignment -> id assign expression .)
    rparen          reduce using rule 68 (assignment -> id assign expression .)
    then            reduce using rule 68 (assignment -> id assign expression .)
    loop            reduce using rule 68 (assignment -> id assign expression .)
    of              reduce using rule 68 (assignment -> id assign expression .)
    rbracket        reduce using rule 68 (assignment -> id assign expression .)
    else            reduce using rule 68 (assignment -> id assign expression .)
    pool            reduce using rule 68 (assignment -> id assign expression .)
    fi              reduce using rule 68 (assignment -> id assign expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80

  ! point           [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! arroba          [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! plus            [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! minus           [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! mult            [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! div             [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! less            [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! lesse           [ reduce using rule 68 (assignment -> id assign expression .) ]
  ! equal           [ reduce using rule 68 (assignment -> id assign expression .) ]


state 98

    (35) dispatch -> id lparen rparen .

    point           reduce using rule 35 (dispatch -> id lparen rparen .)
    arroba          reduce using rule 35 (dispatch -> id lparen rparen .)
    plus            reduce using rule 35 (dispatch -> id lparen rparen .)
    minus           reduce using rule 35 (dispatch -> id lparen rparen .)
    mult            reduce using rule 35 (dispatch -> id lparen rparen .)
    div             reduce using rule 35 (dispatch -> id lparen rparen .)
    less            reduce using rule 35 (dispatch -> id lparen rparen .)
    lesse           reduce using rule 35 (dispatch -> id lparen rparen .)
    equal           reduce using rule 35 (dispatch -> id lparen rparen .)
    pcoma           reduce using rule 35 (dispatch -> id lparen rparen .)
    coma            reduce using rule 35 (dispatch -> id lparen rparen .)
    in              reduce using rule 35 (dispatch -> id lparen rparen .)
    rparen          reduce using rule 35 (dispatch -> id lparen rparen .)
    then            reduce using rule 35 (dispatch -> id lparen rparen .)
    loop            reduce using rule 35 (dispatch -> id lparen rparen .)
    of              reduce using rule 35 (dispatch -> id lparen rparen .)
    rbracket        reduce using rule 35 (dispatch -> id lparen rparen .)
    else            reduce using rule 35 (dispatch -> id lparen rparen .)
    pool            reduce using rule 35 (dispatch -> id lparen rparen .)
    fi              reduce using rule 35 (dispatch -> id lparen rparen .)


state 99

    (36) dispatch -> id lparen expression . expressionparams rparen
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression
    (41) expressionparams -> . coma expression expressionparams
    (42) expressionparams -> . empty
    (3) empty -> .

    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80
    coma            shift and go to state 121
    rparen          reduce using rule 3 (empty -> .)

    expressionparams               shift and go to state 120
    empty                          shift and go to state 122

state 100

    (37) dispatch -> expression point id . lparen rparen
    (38) dispatch -> expression point id . lparen expression expressionparams rparen

    lparen          shift and go to state 123


state 101

    (39) dispatch -> expression arroba type . point id lparen rparen
    (40) dispatch -> expression arroba type . point id lparen expression expressionparams rparen

    point           shift and go to state 124


state 102

    (53) aritmetica -> expression plus expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    plus            reduce using rule 53 (aritmetica -> expression plus expression .)
    minus           reduce using rule 53 (aritmetica -> expression plus expression .)
    less            reduce using rule 53 (aritmetica -> expression plus expression .)
    lesse           reduce using rule 53 (aritmetica -> expression plus expression .)
    equal           reduce using rule 53 (aritmetica -> expression plus expression .)
    pcoma           reduce using rule 53 (aritmetica -> expression plus expression .)
    coma            reduce using rule 53 (aritmetica -> expression plus expression .)
    in              reduce using rule 53 (aritmetica -> expression plus expression .)
    rparen          reduce using rule 53 (aritmetica -> expression plus expression .)
    then            reduce using rule 53 (aritmetica -> expression plus expression .)
    loop            reduce using rule 53 (aritmetica -> expression plus expression .)
    of              reduce using rule 53 (aritmetica -> expression plus expression .)
    rbracket        reduce using rule 53 (aritmetica -> expression plus expression .)
    else            reduce using rule 53 (aritmetica -> expression plus expression .)
    pool            reduce using rule 53 (aritmetica -> expression plus expression .)
    fi              reduce using rule 53 (aritmetica -> expression plus expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    mult            shift and go to state 76
    div             shift and go to state 77

  ! point           [ reduce using rule 53 (aritmetica -> expression plus expression .) ]
  ! arroba          [ reduce using rule 53 (aritmetica -> expression plus expression .) ]
  ! mult            [ reduce using rule 53 (aritmetica -> expression plus expression .) ]
  ! div             [ reduce using rule 53 (aritmetica -> expression plus expression .) ]
  ! plus            [ shift and go to state 74 ]
  ! minus           [ shift and go to state 75 ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 103

    (54) aritmetica -> expression minus expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    plus            reduce using rule 54 (aritmetica -> expression minus expression .)
    minus           reduce using rule 54 (aritmetica -> expression minus expression .)
    less            reduce using rule 54 (aritmetica -> expression minus expression .)
    lesse           reduce using rule 54 (aritmetica -> expression minus expression .)
    equal           reduce using rule 54 (aritmetica -> expression minus expression .)
    pcoma           reduce using rule 54 (aritmetica -> expression minus expression .)
    coma            reduce using rule 54 (aritmetica -> expression minus expression .)
    in              reduce using rule 54 (aritmetica -> expression minus expression .)
    rparen          reduce using rule 54 (aritmetica -> expression minus expression .)
    then            reduce using rule 54 (aritmetica -> expression minus expression .)
    loop            reduce using rule 54 (aritmetica -> expression minus expression .)
    of              reduce using rule 54 (aritmetica -> expression minus expression .)
    rbracket        reduce using rule 54 (aritmetica -> expression minus expression .)
    else            reduce using rule 54 (aritmetica -> expression minus expression .)
    pool            reduce using rule 54 (aritmetica -> expression minus expression .)
    fi              reduce using rule 54 (aritmetica -> expression minus expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    mult            shift and go to state 76
    div             shift and go to state 77

  ! point           [ reduce using rule 54 (aritmetica -> expression minus expression .) ]
  ! arroba          [ reduce using rule 54 (aritmetica -> expression minus expression .) ]
  ! mult            [ reduce using rule 54 (aritmetica -> expression minus expression .) ]
  ! div             [ reduce using rule 54 (aritmetica -> expression minus expression .) ]
  ! plus            [ shift and go to state 74 ]
  ! minus           [ shift and go to state 75 ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 104

    (55) aritmetica -> expression mult expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    plus            reduce using rule 55 (aritmetica -> expression mult expression .)
    minus           reduce using rule 55 (aritmetica -> expression mult expression .)
    mult            reduce using rule 55 (aritmetica -> expression mult expression .)
    div             reduce using rule 55 (aritmetica -> expression mult expression .)
    less            reduce using rule 55 (aritmetica -> expression mult expression .)
    lesse           reduce using rule 55 (aritmetica -> expression mult expression .)
    equal           reduce using rule 55 (aritmetica -> expression mult expression .)
    pcoma           reduce using rule 55 (aritmetica -> expression mult expression .)
    coma            reduce using rule 55 (aritmetica -> expression mult expression .)
    in              reduce using rule 55 (aritmetica -> expression mult expression .)
    rparen          reduce using rule 55 (aritmetica -> expression mult expression .)
    then            reduce using rule 55 (aritmetica -> expression mult expression .)
    loop            reduce using rule 55 (aritmetica -> expression mult expression .)
    of              reduce using rule 55 (aritmetica -> expression mult expression .)
    rbracket        reduce using rule 55 (aritmetica -> expression mult expression .)
    else            reduce using rule 55 (aritmetica -> expression mult expression .)
    pool            reduce using rule 55 (aritmetica -> expression mult expression .)
    fi              reduce using rule 55 (aritmetica -> expression mult expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73

  ! point           [ reduce using rule 55 (aritmetica -> expression mult expression .) ]
  ! arroba          [ reduce using rule 55 (aritmetica -> expression mult expression .) ]
  ! plus            [ shift and go to state 74 ]
  ! minus           [ shift and go to state 75 ]
  ! mult            [ shift and go to state 76 ]
  ! div             [ shift and go to state 77 ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 105

    (56) aritmetica -> expression div expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    plus            reduce using rule 56 (aritmetica -> expression div expression .)
    minus           reduce using rule 56 (aritmetica -> expression div expression .)
    mult            reduce using rule 56 (aritmetica -> expression div expression .)
    div             reduce using rule 56 (aritmetica -> expression div expression .)
    less            reduce using rule 56 (aritmetica -> expression div expression .)
    lesse           reduce using rule 56 (aritmetica -> expression div expression .)
    equal           reduce using rule 56 (aritmetica -> expression div expression .)
    pcoma           reduce using rule 56 (aritmetica -> expression div expression .)
    coma            reduce using rule 56 (aritmetica -> expression div expression .)
    in              reduce using rule 56 (aritmetica -> expression div expression .)
    rparen          reduce using rule 56 (aritmetica -> expression div expression .)
    then            reduce using rule 56 (aritmetica -> expression div expression .)
    loop            reduce using rule 56 (aritmetica -> expression div expression .)
    of              reduce using rule 56 (aritmetica -> expression div expression .)
    rbracket        reduce using rule 56 (aritmetica -> expression div expression .)
    else            reduce using rule 56 (aritmetica -> expression div expression .)
    pool            reduce using rule 56 (aritmetica -> expression div expression .)
    fi              reduce using rule 56 (aritmetica -> expression div expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73

  ! point           [ reduce using rule 56 (aritmetica -> expression div expression .) ]
  ! arroba          [ reduce using rule 56 (aritmetica -> expression div expression .) ]
  ! plus            [ shift and go to state 74 ]
  ! minus           [ shift and go to state 75 ]
  ! mult            [ shift and go to state 76 ]
  ! div             [ shift and go to state 77 ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 106

    (58) comparison -> expression less expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    less            reduce using rule 58 (comparison -> expression less expression .)
    lesse           reduce using rule 58 (comparison -> expression less expression .)
    equal           reduce using rule 58 (comparison -> expression less expression .)
    pcoma           reduce using rule 58 (comparison -> expression less expression .)
    coma            reduce using rule 58 (comparison -> expression less expression .)
    in              reduce using rule 58 (comparison -> expression less expression .)
    rparen          reduce using rule 58 (comparison -> expression less expression .)
    then            reduce using rule 58 (comparison -> expression less expression .)
    loop            reduce using rule 58 (comparison -> expression less expression .)
    of              reduce using rule 58 (comparison -> expression less expression .)
    rbracket        reduce using rule 58 (comparison -> expression less expression .)
    else            reduce using rule 58 (comparison -> expression less expression .)
    pool            reduce using rule 58 (comparison -> expression less expression .)
    fi              reduce using rule 58 (comparison -> expression less expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77

  ! point           [ reduce using rule 58 (comparison -> expression less expression .) ]
  ! arroba          [ reduce using rule 58 (comparison -> expression less expression .) ]
  ! plus            [ reduce using rule 58 (comparison -> expression less expression .) ]
  ! minus           [ reduce using rule 58 (comparison -> expression less expression .) ]
  ! mult            [ reduce using rule 58 (comparison -> expression less expression .) ]
  ! div             [ reduce using rule 58 (comparison -> expression less expression .) ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 107

    (59) comparison -> expression lesse expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    less            reduce using rule 59 (comparison -> expression lesse expression .)
    lesse           reduce using rule 59 (comparison -> expression lesse expression .)
    equal           reduce using rule 59 (comparison -> expression lesse expression .)
    pcoma           reduce using rule 59 (comparison -> expression lesse expression .)
    coma            reduce using rule 59 (comparison -> expression lesse expression .)
    in              reduce using rule 59 (comparison -> expression lesse expression .)
    rparen          reduce using rule 59 (comparison -> expression lesse expression .)
    then            reduce using rule 59 (comparison -> expression lesse expression .)
    loop            reduce using rule 59 (comparison -> expression lesse expression .)
    of              reduce using rule 59 (comparison -> expression lesse expression .)
    rbracket        reduce using rule 59 (comparison -> expression lesse expression .)
    else            reduce using rule 59 (comparison -> expression lesse expression .)
    pool            reduce using rule 59 (comparison -> expression lesse expression .)
    fi              reduce using rule 59 (comparison -> expression lesse expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77

  ! point           [ reduce using rule 59 (comparison -> expression lesse expression .) ]
  ! arroba          [ reduce using rule 59 (comparison -> expression lesse expression .) ]
  ! plus            [ reduce using rule 59 (comparison -> expression lesse expression .) ]
  ! minus           [ reduce using rule 59 (comparison -> expression lesse expression .) ]
  ! mult            [ reduce using rule 59 (comparison -> expression lesse expression .) ]
  ! div             [ reduce using rule 59 (comparison -> expression lesse expression .) ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 108

    (60) comparison -> expression equal expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    less            reduce using rule 60 (comparison -> expression equal expression .)
    lesse           reduce using rule 60 (comparison -> expression equal expression .)
    equal           reduce using rule 60 (comparison -> expression equal expression .)
    pcoma           reduce using rule 60 (comparison -> expression equal expression .)
    coma            reduce using rule 60 (comparison -> expression equal expression .)
    in              reduce using rule 60 (comparison -> expression equal expression .)
    rparen          reduce using rule 60 (comparison -> expression equal expression .)
    then            reduce using rule 60 (comparison -> expression equal expression .)
    loop            reduce using rule 60 (comparison -> expression equal expression .)
    of              reduce using rule 60 (comparison -> expression equal expression .)
    rbracket        reduce using rule 60 (comparison -> expression equal expression .)
    else            reduce using rule 60 (comparison -> expression equal expression .)
    pool            reduce using rule 60 (comparison -> expression equal expression .)
    fi              reduce using rule 60 (comparison -> expression equal expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77

  ! point           [ reduce using rule 60 (comparison -> expression equal expression .) ]
  ! arroba          [ reduce using rule 60 (comparison -> expression equal expression .) ]
  ! plus            [ reduce using rule 60 (comparison -> expression equal expression .) ]
  ! minus           [ reduce using rule 60 (comparison -> expression equal expression .) ]
  ! mult            [ reduce using rule 60 (comparison -> expression equal expression .) ]
  ! div             [ reduce using rule 60 (comparison -> expression equal expression .) ]
  ! less            [ shift and go to state 78 ]
  ! lesse           [ shift and go to state 79 ]
  ! equal           [ shift and go to state 80 ]


state 109

    (62) parenexpression -> lparen expression rparen .

    point           reduce using rule 62 (parenexpression -> lparen expression rparen .)
    arroba          reduce using rule 62 (parenexpression -> lparen expression rparen .)
    plus            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    minus           reduce using rule 62 (parenexpression -> lparen expression rparen .)
    mult            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    div             reduce using rule 62 (parenexpression -> lparen expression rparen .)
    less            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    lesse           reduce using rule 62 (parenexpression -> lparen expression rparen .)
    equal           reduce using rule 62 (parenexpression -> lparen expression rparen .)
    pcoma           reduce using rule 62 (parenexpression -> lparen expression rparen .)
    coma            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    in              reduce using rule 62 (parenexpression -> lparen expression rparen .)
    rparen          reduce using rule 62 (parenexpression -> lparen expression rparen .)
    then            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    loop            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    of              reduce using rule 62 (parenexpression -> lparen expression rparen .)
    rbracket        reduce using rule 62 (parenexpression -> lparen expression rparen .)
    else            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    pool            reduce using rule 62 (parenexpression -> lparen expression rparen .)
    fi              reduce using rule 62 (parenexpression -> lparen expression rparen .)


state 110

    (43) conditional -> if expression then . expression else expression fi
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 125
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 111

    (44) loopexp -> while expression loop . expression pool
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 126
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 112

    (45) blockexp -> lbracket expressionlist rbracket .

    point           reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    arroba          reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    plus            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    minus           reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    mult            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    div             reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    less            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    lesse           reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    equal           reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    pcoma           reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    coma            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    in              reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    rparen          reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    then            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    loop            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    of              reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    rbracket        reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    else            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    pool            reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)
    fi              reduce using rule 45 (blockexp -> lbracket expressionlist rbracket .)


state 113

    (26) expressionlist -> expression pcoma . expressionlist
    (26) expressionlist -> . expression pcoma expressionlist
    (27) expressionlist -> . empty
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (3) empty -> .
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    rbracket        reduce using rule 3 (empty -> .)
    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 85
    expressionlist                 shift and go to state 127
    empty                          shift and go to state 86
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 114

    (46) letexp -> let attribute letattributelist . in expression

    in              shift and go to state 128


state 115

    (31) letattributelist -> coma . attribute letattributelist
    (29) attribute -> . id dpoint type
    (30) attribute -> . id dpoint type assign expression

    id              shift and go to state 88

    attribute                      shift and go to state 129

state 116

    (32) letattributelist -> empty .

    in              reduce using rule 32 (letattributelist -> empty .)


state 117

    (47) caseexp -> case expression of . subcase listcase esac
    (50) subcase -> . id dpoint type implica expression pcoma

    id              shift and go to state 131

    subcase                        shift and go to state 130

state 118

    (24) methoddef -> id lparen rparen dpoint type lbracket expression . rbracket
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    rbracket        shift and go to state 132
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 119

    (25) methoddef -> id lparen param paramslistdef rparen dpoint type . lbracket expression rbracket

    lbracket        shift and go to state 133


state 120

    (36) dispatch -> id lparen expression expressionparams . rparen

    rparen          shift and go to state 134


state 121

    (41) expressionparams -> coma . expression expressionparams
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 135
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 122

    (42) expressionparams -> empty .

    rparen          reduce using rule 42 (expressionparams -> empty .)


state 123

    (37) dispatch -> expression point id lparen . rparen
    (38) dispatch -> expression point id lparen . expression expressionparams rparen
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    rparen          shift and go to state 137
    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 136
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 124

    (39) dispatch -> expression arroba type point . id lparen rparen
    (40) dispatch -> expression arroba type point . id lparen expression expressionparams rparen

    id              shift and go to state 138


state 125

    (43) conditional -> if expression then expression . else expression fi
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    else            shift and go to state 139
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 126

    (44) loopexp -> while expression loop expression . pool
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    pool            shift and go to state 140
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 127

    (26) expressionlist -> expression pcoma expressionlist .

    rbracket        reduce using rule 26 (expressionlist -> expression pcoma expressionlist .)


state 128

    (46) letexp -> let attribute letattributelist in . expression
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 141
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 129

    (31) letattributelist -> coma attribute . letattributelist
    (31) letattributelist -> . coma attribute letattributelist
    (32) letattributelist -> . empty
    (3) empty -> .

    coma            shift and go to state 115
    in              reduce using rule 3 (empty -> .)

    letattributelist               shift and go to state 142
    empty                          shift and go to state 116

state 130

    (47) caseexp -> case expression of subcase . listcase esac
    (48) listcase -> . subcase listcase
    (49) listcase -> . empty
    (50) subcase -> . id dpoint type implica expression pcoma
    (3) empty -> .

    id              shift and go to state 131
    esac            reduce using rule 3 (empty -> .)

    subcase                        shift and go to state 143
    listcase                       shift and go to state 144
    empty                          shift and go to state 145

state 131

    (50) subcase -> id . dpoint type implica expression pcoma

    dpoint          shift and go to state 146


state 132

    (24) methoddef -> id lparen rparen dpoint type lbracket expression rbracket .

    pcoma           reduce using rule 24 (methoddef -> id lparen rparen dpoint type lbracket expression rbracket .)


state 133

    (25) methoddef -> id lparen param paramslistdef rparen dpoint type lbracket . expression rbracket
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 147
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 134

    (36) dispatch -> id lparen expression expressionparams rparen .

    point           reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    arroba          reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    plus            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    minus           reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    mult            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    div             reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    less            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    lesse           reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    equal           reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    pcoma           reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    coma            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    in              reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    rparen          reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    then            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    loop            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    of              reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    rbracket        reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    else            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    pool            reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)
    fi              reduce using rule 36 (dispatch -> id lparen expression expressionparams rparen .)


state 135

    (41) expressionparams -> coma expression . expressionparams
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression
    (41) expressionparams -> . coma expression expressionparams
    (42) expressionparams -> . empty
    (3) empty -> .

    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80
    coma            shift and go to state 121
    rparen          reduce using rule 3 (empty -> .)

    expressionparams               shift and go to state 148
    empty                          shift and go to state 122

state 136

    (38) dispatch -> expression point id lparen expression . expressionparams rparen
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression
    (41) expressionparams -> . coma expression expressionparams
    (42) expressionparams -> . empty
    (3) empty -> .

    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80
    coma            shift and go to state 121
    rparen          reduce using rule 3 (empty -> .)

    expressionparams               shift and go to state 149
    empty                          shift and go to state 122

state 137

    (37) dispatch -> expression point id lparen rparen .

    point           reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    arroba          reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    plus            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    minus           reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    mult            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    div             reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    less            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    lesse           reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    equal           reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    pcoma           reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    coma            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    in              reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    rparen          reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    then            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    loop            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    of              reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    rbracket        reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    else            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    pool            reduce using rule 37 (dispatch -> expression point id lparen rparen .)
    fi              reduce using rule 37 (dispatch -> expression point id lparen rparen .)


state 138

    (39) dispatch -> expression arroba type point id . lparen rparen
    (40) dispatch -> expression arroba type point id . lparen expression expressionparams rparen

    lparen          shift and go to state 150


state 139

    (43) conditional -> if expression then expression else . expression fi
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 151
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 140

    (44) loopexp -> while expression loop expression pool .

    point           reduce using rule 44 (loopexp -> while expression loop expression pool .)
    arroba          reduce using rule 44 (loopexp -> while expression loop expression pool .)
    plus            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    minus           reduce using rule 44 (loopexp -> while expression loop expression pool .)
    mult            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    div             reduce using rule 44 (loopexp -> while expression loop expression pool .)
    less            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    lesse           reduce using rule 44 (loopexp -> while expression loop expression pool .)
    equal           reduce using rule 44 (loopexp -> while expression loop expression pool .)
    pcoma           reduce using rule 44 (loopexp -> while expression loop expression pool .)
    coma            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    in              reduce using rule 44 (loopexp -> while expression loop expression pool .)
    rparen          reduce using rule 44 (loopexp -> while expression loop expression pool .)
    then            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    loop            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    of              reduce using rule 44 (loopexp -> while expression loop expression pool .)
    rbracket        reduce using rule 44 (loopexp -> while expression loop expression pool .)
    else            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    pool            reduce using rule 44 (loopexp -> while expression loop expression pool .)
    fi              reduce using rule 44 (loopexp -> while expression loop expression pool .)


state 141

    (46) letexp -> let attribute letattributelist in expression .
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

  ! shift/reduce conflict for point resolved as shift
  ! shift/reduce conflict for arroba resolved as shift
  ! shift/reduce conflict for plus resolved as shift
  ! shift/reduce conflict for minus resolved as shift
  ! shift/reduce conflict for mult resolved as shift
  ! shift/reduce conflict for div resolved as shift
  ! shift/reduce conflict for less resolved as shift
  ! shift/reduce conflict for lesse resolved as shift
  ! shift/reduce conflict for equal resolved as shift
    pcoma           reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    coma            reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    in              reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    rparen          reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    then            reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    loop            reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    of              reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    rbracket        reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    else            reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    pool            reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    fi              reduce using rule 46 (letexp -> let attribute letattributelist in expression .)
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80

  ! point           [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! arroba          [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! plus            [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! minus           [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! mult            [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! div             [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! less            [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! lesse           [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]
  ! equal           [ reduce using rule 46 (letexp -> let attribute letattributelist in expression .) ]


state 142

    (31) letattributelist -> coma attribute letattributelist .

    in              reduce using rule 31 (letattributelist -> coma attribute letattributelist .)


state 143

    (48) listcase -> subcase . listcase
    (48) listcase -> . subcase listcase
    (49) listcase -> . empty
    (50) subcase -> . id dpoint type implica expression pcoma
    (3) empty -> .

    id              shift and go to state 131
    esac            reduce using rule 3 (empty -> .)

    subcase                        shift and go to state 143
    listcase                       shift and go to state 152
    empty                          shift and go to state 145

state 144

    (47) caseexp -> case expression of subcase listcase . esac

    esac            shift and go to state 153


state 145

    (49) listcase -> empty .

    esac            reduce using rule 49 (listcase -> empty .)


state 146

    (50) subcase -> id dpoint . type implica expression pcoma

    type            shift and go to state 154


state 147

    (25) methoddef -> id lparen param paramslistdef rparen dpoint type lbracket expression . rbracket
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    rbracket        shift and go to state 155
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 148

    (41) expressionparams -> coma expression expressionparams .

    rparen          reduce using rule 41 (expressionparams -> coma expression expressionparams .)


state 149

    (38) dispatch -> expression point id lparen expression expressionparams . rparen

    rparen          shift and go to state 156


state 150

    (39) dispatch -> expression arroba type point id lparen . rparen
    (40) dispatch -> expression arroba type point id lparen . expression expressionparams rparen
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    rparen          shift and go to state 158
    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 157
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 151

    (43) conditional -> if expression then expression else expression . fi
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    fi              shift and go to state 159
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 152

    (48) listcase -> subcase listcase .

    esac            reduce using rule 48 (listcase -> subcase listcase .)


state 153

    (47) caseexp -> case expression of subcase listcase esac .

    point           reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    arroba          reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    plus            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    minus           reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    mult            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    div             reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    less            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    lesse           reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    equal           reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    pcoma           reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    coma            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    in              reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    rparen          reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    then            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    loop            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    of              reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    rbracket        reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    else            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    pool            reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)
    fi              reduce using rule 47 (caseexp -> case expression of subcase listcase esac .)


state 154

    (50) subcase -> id dpoint type . implica expression pcoma

    implica         shift and go to state 160


state 155

    (25) methoddef -> id lparen param paramslistdef rparen dpoint type lbracket expression rbracket .

    pcoma           reduce using rule 25 (methoddef -> id lparen param paramslistdef rparen dpoint type lbracket expression rbracket .)


state 156

    (38) dispatch -> expression point id lparen expression expressionparams rparen .

    point           reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    arroba          reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    plus            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    minus           reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    mult            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    div             reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    less            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    lesse           reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    equal           reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    pcoma           reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    coma            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    in              reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    rparen          reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    then            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    loop            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    of              reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    rbracket        reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    else            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    pool            reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)
    fi              reduce using rule 38 (dispatch -> expression point id lparen expression expressionparams rparen .)


state 157

    (40) dispatch -> expression arroba type point id lparen expression . expressionparams rparen
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression
    (41) expressionparams -> . coma expression expressionparams
    (42) expressionparams -> . empty
    (3) empty -> .

    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80
    coma            shift and go to state 121
    rparen          reduce using rule 3 (empty -> .)

    expressionparams               shift and go to state 161
    empty                          shift and go to state 122

state 158

    (39) dispatch -> expression arroba type point id lparen rparen .

    point           reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    arroba          reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    plus            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    minus           reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    mult            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    div             reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    less            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    lesse           reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    equal           reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    pcoma           reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    coma            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    in              reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    rparen          reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    then            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    loop            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    of              reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    rbracket        reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    else            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    pool            reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)
    fi              reduce using rule 39 (dispatch -> expression arroba type point id lparen rparen .)


state 159

    (43) conditional -> if expression then expression else expression fi .

    point           reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    arroba          reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    plus            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    minus           reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    mult            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    div             reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    less            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    lesse           reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    equal           reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    pcoma           reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    coma            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    in              reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    rparen          reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    then            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    loop            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    of              reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    rbracket        reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    else            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    pool            reduce using rule 43 (conditional -> if expression then expression else expression fi .)
    fi              reduce using rule 43 (conditional -> if expression then expression else expression fi .)


state 160

    (50) subcase -> id dpoint type implica . expression pcoma
    (10) expression -> . constantexp
    (11) expression -> . identifier
    (12) expression -> . assignment
    (13) expression -> . dispatch
    (14) expression -> . conditional
    (15) expression -> . loopexp
    (16) expression -> . blockexp
    (17) expression -> . letexp
    (18) expression -> . caseexp
    (19) expression -> . newexp
    (20) expression -> . isvoidexp
    (21) expression -> . aritmetica
    (22) expression -> . comparison
    (23) expression -> . parenexpression
    (63) constantexp -> . number
    (64) constantexp -> . string
    (65) constantexp -> . true
    (66) constantexp -> . false
    (67) identifier -> . id
    (68) assignment -> . id assign expression
    (35) dispatch -> . id lparen rparen
    (36) dispatch -> . id lparen expression expressionparams rparen
    (37) dispatch -> . expression point id lparen rparen
    (38) dispatch -> . expression point id lparen expression expressionparams rparen
    (39) dispatch -> . expression arroba type point id lparen rparen
    (40) dispatch -> . expression arroba type point id lparen expression expressionparams rparen
    (43) conditional -> . if expression then expression else expression fi
    (44) loopexp -> . while expression loop expression pool
    (45) blockexp -> . lbracket expressionlist rbracket
    (46) letexp -> . let attribute letattributelist in expression
    (47) caseexp -> . case expression of subcase listcase esac
    (51) newexp -> . new type
    (52) isvoidexp -> . isvoid expression
    (53) aritmetica -> . expression plus expression
    (54) aritmetica -> . expression minus expression
    (55) aritmetica -> . expression mult expression
    (56) aritmetica -> . expression div expression
    (57) aritmetica -> . intnot expression
    (58) comparison -> . expression less expression
    (59) comparison -> . expression lesse expression
    (60) comparison -> . expression equal expression
    (61) comparison -> . not expression
    (62) parenexpression -> . lparen expression rparen

    number          shift and go to state 51
    string          shift and go to state 52
    true            shift and go to state 53
    false           shift and go to state 54
    id              shift and go to state 35
    if              shift and go to state 56
    while           shift and go to state 57
    lbracket        shift and go to state 58
    let             shift and go to state 59
    case            shift and go to state 60
    new             shift and go to state 61
    isvoid          shift and go to state 62
    intnot          shift and go to state 63
    not             shift and go to state 64
    lparen          shift and go to state 55

    expression                     shift and go to state 162
    constantexp                    shift and go to state 37
    identifier                     shift and go to state 38
    assignment                     shift and go to state 39
    dispatch                       shift and go to state 40
    conditional                    shift and go to state 41
    loopexp                        shift and go to state 42
    blockexp                       shift and go to state 43
    letexp                         shift and go to state 44
    caseexp                        shift and go to state 45
    newexp                         shift and go to state 46
    isvoidexp                      shift and go to state 47
    aritmetica                     shift and go to state 48
    comparison                     shift and go to state 49
    parenexpression                shift and go to state 50

state 161

    (40) dispatch -> expression arroba type point id lparen expression expressionparams . rparen

    rparen          shift and go to state 163


state 162

    (50) subcase -> id dpoint type implica expression . pcoma
    (37) dispatch -> expression . point id lparen rparen
    (38) dispatch -> expression . point id lparen expression expressionparams rparen
    (39) dispatch -> expression . arroba type point id lparen rparen
    (40) dispatch -> expression . arroba type point id lparen expression expressionparams rparen
    (53) aritmetica -> expression . plus expression
    (54) aritmetica -> expression . minus expression
    (55) aritmetica -> expression . mult expression
    (56) aritmetica -> expression . div expression
    (58) comparison -> expression . less expression
    (59) comparison -> expression . lesse expression
    (60) comparison -> expression . equal expression

    pcoma           shift and go to state 164
    point           shift and go to state 72
    arroba          shift and go to state 73
    plus            shift and go to state 74
    minus           shift and go to state 75
    mult            shift and go to state 76
    div             shift and go to state 77
    less            shift and go to state 78
    lesse           shift and go to state 79
    equal           shift and go to state 80


state 163

    (40) dispatch -> expression arroba type point id lparen expression expressionparams rparen .

    point           reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    arroba          reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    plus            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    minus           reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    mult            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    div             reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    less            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    lesse           reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    equal           reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    pcoma           reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    coma            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    in              reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    rparen          reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    then            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    loop            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    of              reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    rbracket        reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    else            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    pool            reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)
    fi              reduce using rule 40 (dispatch -> expression arroba type point id lparen expression expressionparams rparen .)


state 164

    (50) subcase -> id dpoint type implica expression pcoma .

    id              reduce using rule 50 (subcase -> id dpoint type implica expression pcoma .)
    esac            reduce using rule 50 (subcase -> id dpoint type implica expression pcoma .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for point in state 141 resolved as shift
WARNING: shift/reduce conflict for arroba in state 141 resolved as shift
WARNING: shift/reduce conflict for plus in state 141 resolved as shift
WARNING: shift/reduce conflict for minus in state 141 resolved as shift
WARNING: shift/reduce conflict for mult in state 141 resolved as shift
WARNING: shift/reduce conflict for div in state 141 resolved as shift
WARNING: shift/reduce conflict for less in state 141 resolved as shift
WARNING: shift/reduce conflict for lesse in state 141 resolved as shift
WARNING: shift/reduce conflict for equal in state 141 resolved as shift
