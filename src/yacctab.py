
# yacctab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTARROW ASSIGN AT BOOLEAN BOOL_TYPE CASE CLASS COLON COMMA DIVIDE DOT ELSE EQ ESAC FALSE FI ID IF IN INHERITS INTEGER INT_COMP INT_TYPE IO_TYPE ISVOID LBRACE LET LOOP LPAREN LT LTEQ LexicographicError MAIN_TYPE MINUS MULTIPLY NEW NOT OBJECT_TYPE OF PLUS POOL RBRACE RPAREN SELF_TYPE SEMICOLON STRING STRING_TYPE THEN TRUE TYPE WHILE\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : attribute_init\n        \n        attribute_init : ID COLON TYPE ASSIGN expression \n                       | attribute_def\n        \n        attribute_def : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : TRUE \n                   | FALSE\n        \n        expression : STRING\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET nested_vars IN expression\n        \n        nested_vars  : let_var_init\n                        | nested_vars COMMA let_var_init\n        \n        let_var_init : ID COLON TYPE ASSIGN expression \n                       | let_var_def\n        \n        let_var_def : ID COLON TYPE\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'CLASS':([0,2,6,8,],[4,4,-3,-2,]),'$end':([1,2,6,8,],[0,-1,-3,-2,]),'SEMICOLON':([3,5,14,16,17,19,20,30,37,42,43,44,45,46,47,52,73,78,79,80,81,88,95,96,97,98,99,100,101,102,103,105,113,114,124,127,132,133,137,143,145,146,],[6,8,21,-12,-14,-4,25,-15,-5,-19,-13,-20,-21,-22,-23,-45,104,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,118,-42,-11,-34,-46,-10,-44,-52,-28,-43,-33,147,]),'TYPE':([4,10,23,32,35,39,54,64,111,135,],[7,18,30,38,41,59,78,94,126,140,]),'LBRACE':([7,18,36,41,48,49,50,51,53,55,56,57,59,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[9,24,48,60,48,48,48,48,48,48,48,48,86,48,48,48,48,48,48,48,48,48,48,48,48,-26,48,48,48,48,48,-25,48,48,48,48,]),'INHERITS':([7,],[10,]),'RBRACE':([9,11,12,13,21,24,25,31,42,44,45,46,47,52,72,78,79,80,81,87,88,95,96,97,98,99,100,101,102,104,105,112,114,118,124,132,133,137,143,145,],[-60,19,-6,-7,-9,-60,-8,37,-19,-20,-21,-22,-23,-45,102,-56,-57,-58,-59,113,-27,-35,-36,-37,-38,-39,-40,-41,-24,-26,-42,127,-34,-25,-46,-44,-52,-28,-43,-33,]),'ID':([9,12,21,22,24,25,34,36,48,49,50,51,53,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,86,104,106,107,108,109,110,115,116,117,118,121,122,131,134,136,138,144,147,],[15,15,-9,26,15,-8,26,42,42,42,42,42,42,42,42,42,84,42,42,42,93,42,42,42,42,42,42,42,42,42,-26,42,42,123,42,84,42,42,130,-25,123,-54,42,-53,42,42,42,-55,]),'LPAREN':([15,36,42,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,93,104,106,107,109,115,116,118,130,131,136,138,144,],[22,49,62,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,116,-26,49,49,49,49,49,-25,138,49,49,49,49,]),'COLON':([15,26,28,33,84,123,],[23,32,35,39,111,135,]),'RPAREN':([22,27,29,38,40,42,44,45,46,47,52,62,74,78,79,80,81,88,89,90,91,92,95,96,97,98,99,100,101,102,105,114,116,124,128,129,132,133,137,138,142,143,145,],[28,33,-17,-18,-16,-19,-20,-21,-22,-23,-45,-60,105,-56,-57,-58,-59,-27,114,-29,-30,-32,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-60,-46,-31,137,-44,-52,-28,-60,145,-43,-33,]),'COMMA':([27,29,38,40,42,44,45,46,47,52,78,79,80,81,82,83,85,88,90,92,95,96,97,98,99,100,101,102,105,114,124,125,126,128,132,133,137,141,143,145,],[34,-17,-18,-16,-19,-20,-21,-22,-23,-45,-56,-57,-58,-59,110,-47,-50,-27,115,-32,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-46,-48,-51,-31,-44,-52,-28,-49,-43,-33,]),'ASSIGN':([30,42,126,],[36,61,136,]),'INTEGER':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-26,44,44,44,44,44,-25,44,44,44,44,]),'TRUE':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-26,45,45,45,45,45,-25,45,45,45,45,]),'FALSE':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-26,46,46,46,46,46,-25,46,46,46,46,]),'STRING':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-26,47,47,47,47,47,-25,47,47,47,47,]),'IF':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-26,50,50,50,50,50,-25,50,50,50,50,]),'WHILE':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-26,51,51,51,51,51,-25,51,51,51,51,]),'CASE':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-26,53,53,53,53,53,-25,53,53,53,53,]),'NEW':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-26,54,54,54,54,54,-25,54,54,54,54,]),'ISVOID':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-26,55,55,55,55,55,-25,55,55,55,55,]),'INT_COMP':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-26,56,56,56,56,56,-25,56,56,56,56,]),'NOT':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-26,57,57,57,57,57,-25,57,57,57,57,]),'LET':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,104,106,107,109,115,116,118,131,136,138,144,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-26,58,58,58,58,58,-25,58,58,58,58,]),'DOT':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,94,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,63,-20,-21,-22,-23,-45,63,63,63,63,63,-56,63,63,63,63,63,63,117,63,63,63,63,63,63,63,-24,63,-42,63,-34,63,63,63,63,-44,-52,-28,63,63,-43,-33,63,]),'AT':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,64,-20,-21,-22,-23,-45,64,64,64,64,64,-56,64,64,64,64,64,64,64,64,64,64,64,64,64,-24,64,-42,64,-34,64,64,64,64,-44,-52,-28,64,64,-43,-33,64,]),'PLUS':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,65,-20,-21,-22,-23,-45,65,65,65,65,65,-56,-57,-58,65,65,65,65,-35,-36,-37,-38,65,65,65,-24,65,-42,65,-34,65,65,65,65,-44,-52,-28,65,65,-43,-33,65,]),'MINUS':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,66,-20,-21,-22,-23,-45,66,66,66,66,66,-56,-57,-58,66,66,66,66,-35,-36,-37,-38,66,66,66,-24,66,-42,66,-34,66,66,66,66,-44,-52,-28,66,66,-43,-33,66,]),'MULTIPLY':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,67,-20,-21,-22,-23,-45,67,67,67,67,67,-56,-57,-58,67,67,67,67,67,67,-37,-38,67,67,67,-24,67,-42,67,-34,67,67,67,67,-44,-52,-28,67,67,-43,-33,67,]),'DIVIDE':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,68,-20,-21,-22,-23,-45,68,68,68,68,68,-56,-57,-58,68,68,68,68,68,68,-37,-38,68,68,68,-24,68,-42,68,-34,68,68,68,68,-44,-52,-28,68,68,-43,-33,68,]),'LT':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,69,-20,-21,-22,-23,-45,69,69,69,69,69,-56,-57,-58,69,69,69,69,-35,-36,-37,-38,None,None,None,-24,69,-42,69,-34,69,69,69,69,-44,-52,-28,69,69,-43,-33,69,]),'LTEQ':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,70,-20,-21,-22,-23,-45,70,70,70,70,70,-56,-57,-58,70,70,70,70,-35,-36,-37,-38,None,None,None,-24,70,-42,70,-34,70,70,70,70,-44,-52,-28,70,70,-43,-33,70,]),'EQ':([42,43,44,45,46,47,52,73,74,75,76,77,78,79,80,81,87,88,92,95,96,97,98,99,100,101,102,103,105,112,114,119,120,124,128,132,133,137,139,141,143,145,146,],[-19,71,-20,-21,-22,-23,-45,71,71,71,71,71,-56,-57,-58,71,71,71,71,-35,-36,-37,-38,None,None,None,-24,71,-42,71,-34,71,71,71,71,-44,-52,-28,71,71,-43,-33,71,]),'THEN':([42,44,45,46,47,52,75,78,79,80,81,88,95,96,97,98,99,100,101,102,105,114,124,132,133,137,143,145,],[-19,-20,-21,-22,-23,-45,106,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-46,-44,-52,-28,-43,-33,]),'LOOP':([42,44,45,46,47,52,76,78,79,80,81,88,95,96,97,98,99,100,101,102,105,114,124,132,133,137,143,145,],[-19,-20,-21,-22,-23,-45,107,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-46,-44,-52,-28,-43,-33,]),'OF':([42,44,45,46,47,52,77,78,79,80,81,88,95,96,97,98,99,100,101,102,105,114,124,132,133,137,143,145,],[-19,-20,-21,-22,-23,-45,108,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-46,-44,-52,-28,-43,-33,]),'ELSE':([42,44,45,46,47,52,78,79,80,81,88,95,96,97,98,99,100,101,102,105,114,119,124,132,133,137,143,145,],[-19,-20,-21,-22,-23,-45,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,131,-46,-44,-52,-28,-43,-33,]),'POOL':([42,44,45,46,47,52,78,79,80,81,88,95,96,97,98,99,100,101,102,105,114,120,124,132,133,137,143,145,],[-19,-20,-21,-22,-23,-45,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,132,-46,-44,-52,-28,-43,-33,]),'FI':([42,44,45,46,47,52,78,79,80,81,88,95,96,97,98,99,100,101,102,105,114,124,132,133,137,139,143,145,],[-19,-20,-21,-22,-23,-45,-56,-57,-58,-59,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-46,-44,-52,-28,143,-43,-33,]),'IN':([42,44,45,46,47,52,78,79,80,81,82,83,85,88,95,96,97,98,99,100,101,102,105,114,124,125,126,132,133,137,141,143,145,],[-19,-20,-21,-22,-23,-45,-56,-57,-58,-59,109,-47,-50,-27,-35,-36,-37,-38,-39,-40,-41,-24,-42,-34,-46,-48,-51,-44,-52,-28,-49,-43,-33,]),'ESAC':([121,122,134,147,],[133,-54,-53,-55,]),'ARROW':([140,],[144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class':([0,2,],[3,5,]),'features_list_opt':([9,24,],[11,31,]),'features_list':([9,24,],[12,12,]),'empty':([9,24,62,116,138,],[13,13,91,91,91,]),'feature':([9,12,24,],[14,20,14,]),'attribute_init':([9,12,24,],[16,16,16,]),'attribute_def':([9,12,24,],[17,17,17,]),'formal_params_list':([22,],[27,]),'formal_param':([22,34,],[29,40,]),'expression':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,106,107,109,115,116,131,136,138,144,],[43,73,74,75,76,77,79,80,81,87,88,92,95,96,97,98,99,100,101,103,112,119,120,124,128,92,139,141,92,146,]),'let_expression':([36,48,49,50,51,53,55,56,57,60,61,62,65,66,67,68,69,70,71,72,86,106,107,109,115,116,131,136,138,144,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'block_list':([48,],[72,]),'nested_vars':([58,],[82,]),'let_var_init':([58,110,],[83,125,]),'let_var_def':([58,110,],[85,85,]),'arguments_list_opt':([62,116,138,],[89,129,142,]),'arguments_list':([62,116,138,],[90,90,90,]),'actions_list':([108,],[121,]),'action':([108,121,],[122,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','cparser.py',93),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','cparser.py',99),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','cparser.py',100),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','cparser.py',109),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','cparser.py',116),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','cparser.py',122),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','cparser.py',123),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','cparser.py',129),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','cparser.py',130),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','cparser.py',139),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','cparser.py',146),
  ('feature -> attribute_init','feature',1,'p_feature_attr_initialized','cparser.py',153),
  ('attribute_init -> ID COLON TYPE ASSIGN expression','attribute_init',5,'p_atrribute_init','cparser.py',159),
  ('attribute_init -> attribute_def','attribute_init',1,'p_atrribute_init','cparser.py',160),
  ('attribute_def -> ID COLON TYPE','attribute_def',3,'p_feature_attr','cparser.py',170),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','cparser.py',176),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','cparser.py',177),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal_param','cparser.py',186),
  ('expression -> ID','expression',1,'p_expression_object_identifier','cparser.py',192),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','cparser.py',198),
  ('expression -> TRUE','expression',1,'p_expression_boolean_constant','cparser.py',204),
  ('expression -> FALSE','expression',1,'p_expression_boolean_constant','cparser.py',205),
  ('expression -> STRING','expression',1,'p_expression_string_constant','cparser.py',211),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','cparser.py',223),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','cparser.py',229),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','cparser.py',230),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','cparser.py',239),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','cparser.py',247),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','cparser.py',254),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','cparser.py',255),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','cparser.py',261),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','cparser.py',262),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','cparser.py',271),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','cparser.py',278),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','cparser.py',287),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','cparser.py',288),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','cparser.py',289),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','cparser.py',290),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','cparser.py',303),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','cparser.py',304),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','cparser.py',305),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','cparser.py',316),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','cparser.py',324),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','cparser.py',331),
  ('expression -> let_expression','expression',1,'p_expression_let','cparser.py',339),
  ('let_expression -> LET nested_vars IN expression','let_expression',4,'p_expression_let_simple','cparser.py',345),
  ('nested_vars -> let_var_init','nested_vars',1,'p_nested_let_vars','cparser.py',351),
  ('nested_vars -> nested_vars COMMA let_var_init','nested_vars',3,'p_nested_let_vars','cparser.py',352),
  ('let_var_init -> ID COLON TYPE ASSIGN expression','let_var_init',5,'p_let_var_initialized','cparser.py',361),
  ('let_var_init -> let_var_def','let_var_init',1,'p_let_var_initialized','cparser.py',362),
  ('let_var_def -> ID COLON TYPE','let_var_def',3,'p_let_var_def','cparser.py',372),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','cparser.py',380),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','cparser.py',386),
  ('actions_list -> action','actions_list',1,'p_actions_list','cparser.py',387),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','cparser.py',396),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','cparser.py',405),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','cparser.py',411),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','cparser.py',417),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','cparser.py',423),
  ('empty -> <empty>','empty',0,'p_empty','cparser.py',429),
]
