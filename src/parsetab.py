
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocassignrightnotnonassoclesslesseequalleftplusminusleftmultdivrightisvoidrightintnotleftarrobaleftpointarroba assign case class coma comment constant div dpoint else eofcomment eofstring equal esac false fi id if implica in inherits intnot isvoid lbracket less lesse let loop lparen minus mult new not number of pcoma plus point pool rbracket rparen string then true type unfinished_string whileprogram : classdec program\n               | classdecempty :classdec : class type lbracket featurelist rbracket pcoma\n                | class type inherits type lbracket featurelist rbracket pcomafeaturelist : feature featurelist\n                   | emptyfeature : attribute pcoma\n               | methoddef pcomaexpression : constantexp\n                  | identifier\n                  | assignment\n                  | dispatch\n                  | conditional\n                  | loopexp\n                  | blockexp\n                  | letexp\n                  | caseexp\n                  | newexp\n                  | isvoidexp\n                  | aritmetica\n                  | comparison\n                  | parenexpressionmethoddef : id lparen rparen dpoint type lbracket expression rbracket\n                 | id lparen param paramslistdef rparen dpoint type lbracket expression rbracketexpressionlist : expression pcoma expressionlist\n                      | emptyparam : id dpoint typeattribute : id dpoint type\n                 | id dpoint type assign expressionletattributelist : coma attribute letattributelist\n                        | emptyparamslistdef : coma param paramslistdef\n                     | emptydispatch : id lparen rparen\n                | id lparen expression expressionparams rparen\n                | expression point id lparen rparen\n                | expression point id lparen expression expressionparams rparen\n                | expression arroba type point id lparen rparen\n                | expression arroba type point id lparen expression expressionparams rparenexpressionparams : coma expression expressionparams\n                        | emptyconditional : if expression then expression else expression filoopexp : while expression loop expression poolblockexp : lbracket expressionlist rbracketletexp : let attribute letattributelist in expressioncaseexp : case expression of subcase listcase esaclistcase : subcase listcase\n                | emptysubcase : id dpoint type implica expression pcomanewexp : new typeisvoidexp : isvoid expressionaritmetica : expression plus expression\n                  | expression minus expression\n                  | expression mult expression\n                  | expression div expression\n                  | intnot expressioncomparison : expression less expression\n                  | expression lesse expression\n                  | expression equal expression\n                  | not expressionparenexpression : lparen expression rparenconstantexp : number\n                | string\n                | true\n                | falseidentifier : idassignment : id assign expression'
    
_lr_action_items = {'class':([0,2,22,69,],[3,3,-4,-5,]),'$end':([1,2,4,22,69,],[0,-2,-1,-4,-5,]),'type':([3,7,19,29,30,61,73,95,146,],[5,14,23,65,66,90,101,119,154,]),'lbracket':([5,14,28,55,56,57,58,60,62,63,64,66,70,71,74,75,76,77,78,79,80,94,110,111,113,119,121,123,128,133,139,150,160,],[6,21,58,58,58,58,58,58,58,58,58,94,58,58,58,58,58,58,58,58,58,58,58,58,58,133,58,58,58,58,58,58,58,]),'inherits':([5,],[7,]),'rbracket':([6,8,9,10,16,17,18,21,27,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,84,86,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,113,118,127,134,137,140,141,147,153,156,158,159,163,],[-3,15,-3,-7,-6,-8,-9,-3,34,-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-3,112,-27,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,-3,132,-26,-36,-37,-44,-46,155,-47,-38,-39,-43,-40,]),'id':([6,9,17,18,20,21,28,32,55,56,57,58,59,60,62,63,64,70,71,72,74,75,76,77,78,79,80,94,110,111,113,115,117,121,123,124,128,130,133,139,143,150,160,164,],[13,13,-8,-9,24,13,35,24,35,35,35,35,88,35,35,35,35,35,35,100,35,35,35,35,35,35,35,35,35,35,35,88,131,35,35,138,35,131,35,35,131,35,35,-50,]),'pcoma':([11,12,15,23,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,85,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,132,134,137,140,141,153,155,156,158,159,162,163,],[17,18,22,-29,69,-67,-30,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,113,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,-24,-36,-37,-44,-46,-47,-25,-38,-39,-43,164,-40,]),'dpoint':([13,24,25,67,88,131,],[19,29,30,95,19,146,]),'lparen':([13,28,35,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,100,110,111,113,121,123,128,133,138,139,150,160,],[20,55,71,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,123,55,55,55,55,55,55,55,150,55,55,55,]),'rparen':([20,26,31,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,65,68,71,81,90,91,92,93,96,97,98,99,102,103,104,105,106,107,108,109,112,120,122,123,134,135,136,137,140,141,148,149,150,153,156,157,158,159,161,163,],[25,-3,67,-34,-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-28,-3,98,109,-51,-52,-57,-61,-33,-68,-35,-3,-53,-54,-55,-56,-58,-59,-60,-62,-45,134,-42,137,-36,-3,-3,-37,-44,-46,-41,156,158,-47,-38,-3,-39,-43,163,-40,]),'coma':([23,26,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,65,68,87,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,129,134,135,136,137,140,141,153,156,157,158,159,163,],[-29,32,-67,-30,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-28,32,115,-51,-52,-57,-61,-68,-35,121,-53,-54,-55,-56,-58,-59,-60,-62,-45,115,-36,121,121,-37,-44,-46,-47,-38,121,-39,-43,-40,]),'in':([23,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,87,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,114,116,129,134,137,140,141,142,153,156,158,159,163,],[-29,-67,-30,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-3,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,128,-32,-3,-36,-37,-44,-46,-31,-47,-38,-39,-43,-40,]),'assign':([23,35,],[28,70,]),'number':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'string':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'true':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'false':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'if':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'while':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'let':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'case':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'new':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'isvoid':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'intnot':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'not':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'point':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,101,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,72,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,72,72,72,72,72,-51,72,72,72,72,-35,72,124,72,72,72,72,72,72,72,-62,-45,72,72,72,-36,72,72,-37,-44,72,72,72,-47,-38,72,-39,-43,72,-40,]),'arroba':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,73,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,73,73,73,73,73,-51,73,73,73,73,-35,73,73,73,73,73,73,73,73,-62,-45,73,73,73,-36,73,73,-37,-44,73,73,73,-47,-38,73,-39,-43,73,-40,]),'plus':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,74,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,74,74,74,74,74,-51,-52,-57,74,74,-35,74,-53,-54,-55,-56,74,74,74,-62,-45,74,74,74,-36,74,74,-37,-44,74,74,74,-47,-38,74,-39,-43,74,-40,]),'minus':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,75,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,75,75,75,75,75,-51,-52,-57,75,75,-35,75,-53,-54,-55,-56,75,75,75,-62,-45,75,75,75,-36,75,75,-37,-44,75,75,75,-47,-38,75,-39,-43,75,-40,]),'mult':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,76,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,76,76,76,76,76,-51,-52,-57,76,76,-35,76,76,76,-55,-56,76,76,76,-62,-45,76,76,76,-36,76,76,-37,-44,76,76,76,-47,-38,76,-39,-43,76,-40,]),'div':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,77,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,77,77,77,77,77,-51,-52,-57,77,77,-35,77,77,77,-55,-56,77,77,77,-62,-45,77,77,77,-36,77,77,-37,-44,77,77,77,-47,-38,77,-39,-43,77,-40,]),'less':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,78,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,78,78,78,78,78,-51,-52,-57,78,78,-35,78,-53,-54,-55,-56,None,None,None,-62,-45,78,78,78,-36,78,78,-37,-44,78,78,78,-47,-38,78,-39,-43,78,-40,]),'lesse':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,79,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,79,79,79,79,79,-51,-52,-57,79,79,-35,79,-53,-54,-55,-56,None,None,None,-62,-45,79,79,79,-36,79,79,-37,-44,79,79,79,-47,-38,79,-39,-43,79,-40,]),'equal':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,81,82,83,85,89,90,91,92,93,97,98,99,102,103,104,105,106,107,108,109,112,118,125,126,134,135,136,137,140,141,147,151,153,156,157,158,159,162,163,],[-67,80,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,80,80,80,80,80,-51,-52,-57,80,80,-35,80,-53,-54,-55,-56,None,None,None,-62,-45,80,80,80,-36,80,80,-37,-44,80,80,80,-47,-38,80,-39,-43,80,-40,]),'then':([35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,82,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,134,137,140,141,153,156,158,159,163,],[-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,110,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,-36,-37,-44,-46,-47,-38,-39,-43,-40,]),'loop':([35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,83,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,134,137,140,141,153,156,158,159,163,],[-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,111,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,-36,-37,-44,-46,-47,-38,-39,-43,-40,]),'of':([35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,89,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,134,137,140,141,153,156,158,159,163,],[-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,117,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,-36,-37,-44,-46,-47,-38,-39,-43,-40,]),'else':([35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,125,134,137,140,141,153,156,158,159,163,],[-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,139,-36,-37,-44,-46,-47,-38,-39,-43,-40,]),'pool':([35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,126,134,137,140,141,153,156,158,159,163,],[-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,140,-36,-37,-44,-46,-47,-38,-39,-43,-40,]),'fi':([35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,90,91,92,93,97,98,102,103,104,105,106,107,108,109,112,134,137,140,141,151,153,156,158,159,163,],[-67,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-63,-64,-65,-66,-51,-52,-57,-61,-68,-35,-53,-54,-55,-56,-58,-59,-60,-62,-45,-36,-37,-44,-46,159,-47,-38,-39,-43,-40,]),'esac':([130,143,144,145,152,164,],[-3,-3,153,-49,-48,-50,]),'implica':([154,],[160,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,4,]),'classdec':([0,2,],[2,2,]),'featurelist':([6,9,21,],[8,16,27,]),'feature':([6,9,21,],[9,9,9,]),'empty':([6,9,21,26,58,68,87,99,113,129,130,135,136,143,157,],[10,10,10,33,86,33,116,122,86,116,145,122,122,145,122,]),'attribute':([6,9,21,59,115,],[11,11,11,87,129,]),'methoddef':([6,9,21,],[12,12,12,]),'param':([20,32,],[26,68,]),'paramslistdef':([26,68,],[31,96,]),'expression':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[36,81,82,83,85,89,91,92,93,97,99,102,103,104,105,106,107,108,118,125,126,85,135,136,141,147,151,157,162,]),'constantexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'identifier':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'assignment':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'dispatch':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'conditional':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'loopexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'blockexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'letexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'caseexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'newexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'isvoidexp':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'aritmetica':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'comparison':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'parenexpression':([28,55,56,57,58,60,62,63,64,70,71,74,75,76,77,78,79,80,94,110,111,113,121,123,128,133,139,150,160,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'expressionlist':([58,113,],[84,127,]),'letattributelist':([87,129,],[114,142,]),'expressionparams':([99,135,136,157,],[120,148,149,161,]),'subcase':([117,130,143,],[130,143,143,]),'listcase':([130,143,],[144,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classdec program','program',2,'p_program','TigerandButiCompiler.py',314),
  ('program -> classdec','program',1,'p_program','TigerandButiCompiler.py',315),
  ('empty -> <empty>','empty',0,'p_empty','TigerandButiCompiler.py',327),
  ('classdec -> class type lbracket featurelist rbracket pcoma','classdec',6,'p_classdec','TigerandButiCompiler.py',331),
  ('classdec -> class type inherits type lbracket featurelist rbracket pcoma','classdec',8,'p_classdec','TigerandButiCompiler.py',332),
  ('featurelist -> feature featurelist','featurelist',2,'p_featurelist','TigerandButiCompiler.py',343),
  ('featurelist -> empty','featurelist',1,'p_featurelist','TigerandButiCompiler.py',344),
  ('feature -> attribute pcoma','feature',2,'p_feature','TigerandButiCompiler.py',353),
  ('feature -> methoddef pcoma','feature',2,'p_feature','TigerandButiCompiler.py',354),
  ('expression -> constantexp','expression',1,'p_expression','TigerandButiCompiler.py',359),
  ('expression -> identifier','expression',1,'p_expression','TigerandButiCompiler.py',360),
  ('expression -> assignment','expression',1,'p_expression','TigerandButiCompiler.py',361),
  ('expression -> dispatch','expression',1,'p_expression','TigerandButiCompiler.py',362),
  ('expression -> conditional','expression',1,'p_expression','TigerandButiCompiler.py',363),
  ('expression -> loopexp','expression',1,'p_expression','TigerandButiCompiler.py',364),
  ('expression -> blockexp','expression',1,'p_expression','TigerandButiCompiler.py',365),
  ('expression -> letexp','expression',1,'p_expression','TigerandButiCompiler.py',366),
  ('expression -> caseexp','expression',1,'p_expression','TigerandButiCompiler.py',367),
  ('expression -> newexp','expression',1,'p_expression','TigerandButiCompiler.py',368),
  ('expression -> isvoidexp','expression',1,'p_expression','TigerandButiCompiler.py',369),
  ('expression -> aritmetica','expression',1,'p_expression','TigerandButiCompiler.py',370),
  ('expression -> comparison','expression',1,'p_expression','TigerandButiCompiler.py',371),
  ('expression -> parenexpression','expression',1,'p_expression','TigerandButiCompiler.py',372),
  ('methoddef -> id lparen rparen dpoint type lbracket expression rbracket','methoddef',8,'p_methoddef','TigerandButiCompiler.py',377),
  ('methoddef -> id lparen param paramslistdef rparen dpoint type lbracket expression rbracket','methoddef',10,'p_methoddef','TigerandButiCompiler.py',378),
  ('expressionlist -> expression pcoma expressionlist','expressionlist',3,'p_expressionlist','TigerandButiCompiler.py',390),
  ('expressionlist -> empty','expressionlist',1,'p_expressionlist','TigerandButiCompiler.py',391),
  ('param -> id dpoint type','param',3,'p_param','TigerandButiCompiler.py',400),
  ('attribute -> id dpoint type','attribute',3,'p_attribute','TigerandButiCompiler.py',408),
  ('attribute -> id dpoint type assign expression','attribute',5,'p_attribute','TigerandButiCompiler.py',409),
  ('letattributelist -> coma attribute letattributelist','letattributelist',3,'p_letattributelist','TigerandButiCompiler.py',420),
  ('letattributelist -> empty','letattributelist',1,'p_letattributelist','TigerandButiCompiler.py',421),
  ('paramslistdef -> coma param paramslistdef','paramslistdef',3,'p_paramslistdef','TigerandButiCompiler.py',430),
  ('paramslistdef -> empty','paramslistdef',1,'p_paramslistdef','TigerandButiCompiler.py',431),
  ('dispatch -> id lparen rparen','dispatch',3,'p_dispatch','TigerandButiCompiler.py',440),
  ('dispatch -> id lparen expression expressionparams rparen','dispatch',5,'p_dispatch','TigerandButiCompiler.py',441),
  ('dispatch -> expression point id lparen rparen','dispatch',5,'p_dispatch','TigerandButiCompiler.py',442),
  ('dispatch -> expression point id lparen expression expressionparams rparen','dispatch',7,'p_dispatch','TigerandButiCompiler.py',443),
  ('dispatch -> expression arroba type point id lparen rparen','dispatch',7,'p_dispatch','TigerandButiCompiler.py',444),
  ('dispatch -> expression arroba type point id lparen expression expressionparams rparen','dispatch',9,'p_dispatch','TigerandButiCompiler.py',445),
  ('expressionparams -> coma expression expressionparams','expressionparams',3,'p_expressionparams','TigerandButiCompiler.py',480),
  ('expressionparams -> empty','expressionparams',1,'p_expressionparams','TigerandButiCompiler.py',481),
  ('conditional -> if expression then expression else expression fi','conditional',7,'p_conditional','TigerandButiCompiler.py',490),
  ('loopexp -> while expression loop expression pool','loopexp',5,'p_loopexp','TigerandButiCompiler.py',498),
  ('blockexp -> lbracket expressionlist rbracket','blockexp',3,'p_blockexp','TigerandButiCompiler.py',506),
  ('letexp -> let attribute letattributelist in expression','letexp',5,'p_letexp','TigerandButiCompiler.py',514),
  ('caseexp -> case expression of subcase listcase esac','caseexp',6,'p_caseexp','TigerandButiCompiler.py',523),
  ('listcase -> subcase listcase','listcase',2,'p_listcase','TigerandButiCompiler.py',532),
  ('listcase -> empty','listcase',1,'p_listcase','TigerandButiCompiler.py',533),
  ('subcase -> id dpoint type implica expression pcoma','subcase',6,'p_subcase','TigerandButiCompiler.py',543),
  ('newexp -> new type','newexp',2,'p_newexp','TigerandButiCompiler.py',551),
  ('isvoidexp -> isvoid expression','isvoidexp',2,'p_isvoidexp','TigerandButiCompiler.py',559),
  ('aritmetica -> expression plus expression','aritmetica',3,'p_aritmetica','TigerandButiCompiler.py',564),
  ('aritmetica -> expression minus expression','aritmetica',3,'p_aritmetica','TigerandButiCompiler.py',565),
  ('aritmetica -> expression mult expression','aritmetica',3,'p_aritmetica','TigerandButiCompiler.py',566),
  ('aritmetica -> expression div expression','aritmetica',3,'p_aritmetica','TigerandButiCompiler.py',567),
  ('aritmetica -> intnot expression','aritmetica',2,'p_aritmetica','TigerandButiCompiler.py',568),
  ('comparison -> expression less expression','comparison',3,'p_comparison','TigerandButiCompiler.py',591),
  ('comparison -> expression lesse expression','comparison',3,'p_comparison','TigerandButiCompiler.py',592),
  ('comparison -> expression equal expression','comparison',3,'p_comparison','TigerandButiCompiler.py',593),
  ('comparison -> not expression','comparison',2,'p_comparison','TigerandButiCompiler.py',594),
  ('parenexpression -> lparen expression rparen','parenexpression',3,'p_parenexpression','TigerandButiCompiler.py',616),
  ('constantexp -> number','constantexp',1,'p_constantexp','TigerandButiCompiler.py',622),
  ('constantexp -> string','constantexp',1,'p_constantexp','TigerandButiCompiler.py',623),
  ('constantexp -> true','constantexp',1,'p_constantexp','TigerandButiCompiler.py',624),
  ('constantexp -> false','constantexp',1,'p_constantexp','TigerandButiCompiler.py',625),
  ('identifier -> id','identifier',1,'p_identifier','TigerandButiCompiler.py',638),
  ('assignment -> id assign expression','assignment',3,'p_assignment','TigerandButiCompiler.py',646),
]
