
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTARROW ASSIGN AT CASE CLASS COMMA DIVIDE DOT ELSE EQ ESAC FALSE FI ID IF IN INHERITS INTEGER INT_COMP ISVOID LBRACE LET LOOP LPAREN LT LTEQ MINUS MULTIPLY NEW NOT OF PLUS POOL RBRACE RPAREN SEMICOLON STRING TDOTS THEN TRUE TYPE WHILEprogram : classSet\n    classSet : class SEMICOLON classSet\n            | class SEMICOLON\n    class : CLASS TYPE _inherits LBRACE ffeature RBRACE_inherits : INHERITS TYPE\n                    | emptyffeature : feature SEMICOLON ffeature\n                | emptyfeature : ID LPAREN formal RPAREN TDOTS TYPE LBRACE expr RBRACE\n                | ID LPAREN RPAREN TDOTS TYPE LBRACE expr RBRACE\n                | temp\n    \n    temp : idDots\n        | idDots ASSIGN expr\n    idDots : ID TDOTS TYPEformal : idDots COMMA formal\n                | idDotsexpression_list : expression_list expr SEMICOLON \n                        | expr SEMICOLON\n    expr : NOT exprexpr : expr PLUS expr    \n            | expr MINUS expr\n            | expr MULTIPLY expr\n            | expr DIVIDE expr\n    expr : LPAREN expr RPAREN\n            | ISVOID expr\n            | block\n            | conditional\n            | loop\n            | case\n            | dispatch\n            | INT_COMP expr\n    block : LBRACE expression_list RBRACEexpr : IDexpr : INTEGER expr : STRINGexpr : TRUE\n            | FALSEexpr : NEW TYPEexpr : let\n    dispatch : expr DOT ID LPAREN arguments_list_opt RPAREN\n            |  expr AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n            |  ID LPAREN arguments_list_opt RPAREN\n    \n    arguments_list : arguments_list COMMA expr\n                        | expr\n    \n    arguments_list_opt : arguments_list\n                        | empty\n    empty :let : LET declaration_list IN expr\n    declaration_list : temp COMMA declaration_list\n                    | temp\n    conditional : IF expr THEN expr ELSE expr FIloop : WHILE expr LOOP expr POOLcase : CASE expr OF add ESACadd : derivate SEMICOLON add\n            | derivate SEMICOLON\n    derivate : idDots ARROW exprexpr : expr LT expr\n            | expr LTEQ expr\n            | expr EQ exprexpr : ID ASSIGN expr'
    
_lr_action_items = {'CLASS':([0,5,],[4,4,]),'$end':([1,2,5,7,],[0,-1,-3,-2,]),'SEMICOLON':([3,14,17,18,19,29,30,34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,72,81,82,83,84,85,86,87,90,91,96,97,108,114,116,124,125,129,130,134,135,137,138,],[5,20,-11,-12,-4,-14,-13,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,98,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,110,-42,126,-48,-52,-53,-10,-40,-56,-9,-51,-41,]),'TYPE':([4,9,22,45,53,63,78,],[6,12,29,70,79,89,104,]),'INHERITS':([6,],[9,]),'LBRACE':([6,8,10,12,23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,79,98,99,100,102,104,105,106,109,110,118,123,127,131,],[-47,11,-6,-5,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,105,-18,47,47,47,118,47,47,47,-17,47,47,47,47,]),'ID':([11,20,21,23,31,32,33,39,47,48,49,50,51,54,55,56,57,58,59,60,61,62,68,69,71,98,99,100,101,102,103,105,106,107,109,110,118,123,126,127,131,],[16,16,25,40,40,40,40,40,40,40,40,40,25,25,40,40,40,40,40,40,40,88,40,40,40,-18,40,40,25,40,25,40,40,121,40,-17,40,40,25,40,40,]),'RBRACE':([11,13,15,20,24,34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,71,81,82,83,84,85,86,87,90,91,96,98,108,110,116,119,124,125,128,130,137,138,],[-47,19,-8,-47,-7,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,96,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-18,-42,-17,-48,129,-52,-53,135,-40,-51,-41,]),'LPAREN':([16,23,31,32,33,39,40,47,48,49,50,55,56,57,58,59,60,61,68,69,71,88,98,99,100,102,105,106,109,110,118,121,123,127,131,],[21,32,32,32,32,32,69,32,32,32,32,32,32,32,32,32,32,32,32,32,32,106,-18,32,32,32,32,32,32,-17,32,131,32,32,32,]),'TDOTS':([16,25,27,52,],[22,22,53,78,]),'COMMA':([18,28,29,30,34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,77,81,82,83,84,85,86,87,90,91,93,95,96,108,116,122,124,125,130,137,138,],[-12,54,-14,-13,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,103,-20,-21,-22,-23,-57,-58,-59,-24,-60,109,-44,-32,-42,-48,-43,-52,-53,-40,-51,-41,]),'IN':([18,29,30,34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,76,77,81,82,83,84,85,86,87,90,91,96,108,116,117,124,125,130,137,138,],[-12,-14,-13,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,102,-50,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,-48,-49,-52,-53,-40,-51,-41,]),'ASSIGN':([18,29,40,],[23,-14,68,]),'RPAREN':([21,26,28,29,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,69,70,80,81,82,83,84,85,86,87,90,91,92,93,94,95,96,106,108,116,120,122,124,125,130,131,136,137,138,],[27,52,-16,-14,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,90,-25,-31,-47,-38,-15,-20,-21,-22,-23,-57,-58,-59,-24,-60,108,-45,-46,-44,-32,-47,-42,-48,130,-43,-52,-53,-40,-47,138,-51,-41,]),'NOT':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-18,31,31,31,31,31,31,-17,31,31,31,31,]),'ISVOID':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-18,33,33,33,33,33,33,-17,33,33,33,33,]),'INT_COMP':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-18,39,39,39,39,39,39,-17,39,39,39,39,]),'INTEGER':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-18,41,41,41,41,41,41,-17,41,41,41,41,]),'STRING':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-18,42,42,42,42,42,42,-17,42,42,42,42,]),'TRUE':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-18,43,43,43,43,43,43,-17,43,43,43,43,]),'FALSE':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-18,44,44,44,44,44,44,-17,44,44,44,44,]),'NEW':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-18,45,45,45,45,45,45,-17,45,45,45,45,]),'IF':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-18,48,48,48,48,48,48,-17,48,48,48,48,]),'WHILE':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-18,49,49,49,49,49,49,-17,49,49,49,49,]),'CASE':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-18,50,50,50,50,50,50,-17,50,50,50,50,]),'LET':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,98,99,100,102,105,106,109,110,118,123,127,131,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-18,51,51,51,51,51,51,-17,51,51,51,51,]),'ARROW':([29,115,],[-14,127,]),'PLUS':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[55,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,55,55,-25,-31,-38,55,55,55,55,-20,-21,-22,-23,55,55,55,-24,55,55,-32,55,-42,55,55,55,55,55,-52,-53,55,-40,55,55,-51,-41,]),'MINUS':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[56,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,56,56,-25,-31,-38,56,56,56,56,-20,-21,-22,-23,56,56,56,-24,56,56,-32,56,-42,56,56,56,56,56,-52,-53,56,-40,56,56,-51,-41,]),'MULTIPLY':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[57,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,57,57,-25,-31,-38,57,57,57,57,57,57,-22,-23,57,57,57,-24,57,57,-32,57,-42,57,57,57,57,57,-52,-53,57,-40,57,57,-51,-41,]),'DIVIDE':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[58,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,58,58,-25,-31,-38,58,58,58,58,58,58,-22,-23,58,58,58,-24,58,58,-32,58,-42,58,58,58,58,58,-52,-53,58,-40,58,58,-51,-41,]),'LT':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[59,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,59,59,-25,-31,-38,59,59,59,59,-20,-21,-22,-23,None,None,None,-24,59,59,-32,59,-42,59,59,59,59,59,-52,-53,59,-40,59,59,-51,-41,]),'LTEQ':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[60,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,60,60,-25,-31,-38,60,60,60,60,-20,-21,-22,-23,None,None,None,-24,60,60,-32,60,-42,60,60,60,60,60,-52,-53,60,-40,60,60,-51,-41,]),'EQ':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[61,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,61,61,-25,-31,-38,61,61,61,61,-20,-21,-22,-23,None,None,None,-24,61,61,-32,61,-42,61,61,61,61,61,-52,-53,61,-40,61,61,-51,-41,]),'DOT':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,89,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[62,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,62,62,62,62,-38,62,62,62,62,62,62,62,62,62,62,62,107,-24,62,62,-32,62,-42,62,62,62,62,62,-52,-53,62,-40,62,62,-51,-41,]),'AT':([30,34,35,36,37,38,40,41,42,43,44,46,64,65,66,67,70,72,73,74,75,81,82,83,84,85,86,87,90,91,95,96,97,108,111,112,116,119,122,124,125,128,130,132,134,137,138,],[63,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,63,63,63,63,-38,63,63,63,63,63,63,63,63,63,63,63,-24,63,63,-32,63,-42,63,63,63,63,63,-52,-53,63,-40,63,63,-51,-41,]),'THEN':([34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,73,81,82,83,84,85,86,87,90,91,96,108,116,124,125,130,137,138,],[-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,99,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,-48,-52,-53,-40,-51,-41,]),'LOOP':([34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,74,81,82,83,84,85,86,87,90,91,96,108,116,124,125,130,137,138,],[-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,100,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,-48,-52,-53,-40,-51,-41,]),'OF':([34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,75,81,82,83,84,85,86,87,90,91,96,108,116,124,125,130,137,138,],[-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,101,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,-48,-52,-53,-40,-51,-41,]),'ELSE':([34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,81,82,83,84,85,86,87,90,91,96,108,111,116,124,125,130,137,138,],[-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,123,-48,-52,-53,-40,-51,-41,]),'POOL':([34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,81,82,83,84,85,86,87,90,91,96,108,112,116,124,125,130,137,138,],[-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,124,-48,-52,-53,-40,-51,-41,]),'FI':([34,35,36,37,38,40,41,42,43,44,46,64,66,67,70,81,82,83,84,85,86,87,90,91,96,108,116,124,125,130,132,137,138,],[-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-39,-19,-25,-31,-38,-20,-21,-22,-23,-57,-58,-59,-24,-60,-32,-42,-48,-52,-53,-40,137,-51,-41,]),'ESAC':([113,126,133,],[125,-55,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'classSet':([0,5,],[2,7,]),'class':([0,5,],[3,3,]),'_inherits':([6,],[8,]),'empty':([6,11,20,69,106,131,],[10,15,15,94,94,94,]),'ffeature':([11,20,],[13,24,]),'feature':([11,20,],[14,14,]),'temp':([11,20,51,103,],[17,17,77,77,]),'idDots':([11,20,21,51,54,101,103,126,],[18,18,28,18,28,115,18,115,]),'formal':([21,54,],[26,80,]),'expr':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[30,64,65,66,67,72,73,74,75,81,82,83,84,85,86,87,91,95,97,111,112,116,119,95,122,128,132,134,95,]),'block':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'conditional':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'loop':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'case':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'dispatch':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'let':([23,31,32,33,39,47,48,49,50,55,56,57,58,59,60,61,68,69,71,99,100,102,105,106,109,118,123,127,131,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'expression_list':([47,],[71,]),'declaration_list':([51,103,],[76,117,]),'arguments_list_opt':([69,106,131,],[92,120,136,]),'arguments_list':([69,106,131,],[93,93,93,]),'add':([101,126,],[113,133,]),'derivate':([101,126,],[114,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classSet','program',1,'p_program','parser_rules.py',36),
  ('classSet -> class SEMICOLON classSet','classSet',3,'p_classSet','parser_rules.py',42),
  ('classSet -> class SEMICOLON','classSet',2,'p_classSet','parser_rules.py',43),
  ('class -> CLASS TYPE _inherits LBRACE ffeature RBRACE','class',6,'p_class','parser_rules.py',50),
  ('_inherits -> INHERITS TYPE','_inherits',2,'p_inherits','parser_rules.py',57),
  ('_inherits -> empty','_inherits',1,'p_inherits','parser_rules.py',58),
  ('ffeature -> feature SEMICOLON ffeature','ffeature',3,'p_ffeature','parser_rules.py',64),
  ('ffeature -> empty','ffeature',1,'p_ffeature','parser_rules.py',65),
  ('feature -> ID LPAREN formal RPAREN TDOTS TYPE LBRACE expr RBRACE','feature',9,'p_feature','parser_rules.py',71),
  ('feature -> ID LPAREN RPAREN TDOTS TYPE LBRACE expr RBRACE','feature',8,'p_feature','parser_rules.py',72),
  ('feature -> temp','feature',1,'p_feature','parser_rules.py',73),
  ('temp -> idDots','temp',1,'p_temp','parser_rules.py',94),
  ('temp -> idDots ASSIGN expr','temp',3,'p_temp','parser_rules.py',95),
  ('idDots -> ID TDOTS TYPE','idDots',3,'p_idDots','parser_rules.py',106),
  ('formal -> idDots COMMA formal','formal',3,'p_formal','parser_rules.py',113),
  ('formal -> idDots','formal',1,'p_formal','parser_rules.py',114),
  ('expression_list -> expression_list expr SEMICOLON','expression_list',3,'p_expression_list','parser_rules.py',120),
  ('expression_list -> expr SEMICOLON','expression_list',2,'p_expression_list','parser_rules.py',121),
  ('expr -> NOT expr','expr',2,'p_expression_not','parser_rules.py',128),
  ('expr -> expr PLUS expr','expr',3,'p_expression_binop','parser_rules.py',135),
  ('expr -> expr MINUS expr','expr',3,'p_expression_binop','parser_rules.py',136),
  ('expr -> expr MULTIPLY expr','expr',3,'p_expression_binop','parser_rules.py',137),
  ('expr -> expr DIVIDE expr','expr',3,'p_expression_binop','parser_rules.py',138),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expression_g','parser_rules.py',153),
  ('expr -> ISVOID expr','expr',2,'p_expression_g','parser_rules.py',154),
  ('expr -> block','expr',1,'p_expression_g','parser_rules.py',155),
  ('expr -> conditional','expr',1,'p_expression_g','parser_rules.py',156),
  ('expr -> loop','expr',1,'p_expression_g','parser_rules.py',157),
  ('expr -> case','expr',1,'p_expression_g','parser_rules.py',158),
  ('expr -> dispatch','expr',1,'p_expression_g','parser_rules.py',159),
  ('expr -> INT_COMP expr','expr',2,'p_expression_g','parser_rules.py',160),
  ('block -> LBRACE expression_list RBRACE','block',3,'p_block','parser_rules.py',179),
  ('expr -> ID','expr',1,'p_expression_id','parser_rules.py',186),
  ('expr -> INTEGER','expr',1,'p_expression_int','parser_rules.py',193),
  ('expr -> STRING','expr',1,'p_expression_str','parser_rules.py',200),
  ('expr -> TRUE','expr',1,'p_expression_bool','parser_rules.py',207),
  ('expr -> FALSE','expr',1,'p_expression_bool','parser_rules.py',208),
  ('expr -> NEW TYPE','expr',2,'p_expression_newtype','parser_rules.py',215),
  ('expr -> let','expr',1,'p_expression_l','parser_rules.py',222),
  ('dispatch -> expr DOT ID LPAREN arguments_list_opt RPAREN','dispatch',6,'p_dispatch','parser_rules.py',228),
  ('dispatch -> expr AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','dispatch',8,'p_dispatch','parser_rules.py',229),
  ('dispatch -> ID LPAREN arguments_list_opt RPAREN','dispatch',4,'p_dispatch','parser_rules.py',230),
  ('arguments_list -> arguments_list COMMA expr','arguments_list',3,'p_arguments_list','parser_rules.py',251),
  ('arguments_list -> expr','arguments_list',1,'p_arguments_list','parser_rules.py',252),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser_rules.py',260),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser_rules.py',261),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',267),
  ('let -> LET declaration_list IN expr','let',4,'p_let_expression','parser_rules.py',271),
  ('declaration_list -> temp COMMA declaration_list','declaration_list',3,'p_declaration_list','parser_rules.py',279),
  ('declaration_list -> temp','declaration_list',1,'p_declaration_list','parser_rules.py',280),
  ('conditional -> IF expr THEN expr ELSE expr FI','conditional',7,'p_conditional','parser_rules.py',287),
  ('loop -> WHILE expr LOOP expr POOL','loop',5,'p_loop','parser_rules.py',294),
  ('case -> CASE expr OF add ESAC','case',5,'p_case','parser_rules.py',301),
  ('add -> derivate SEMICOLON add','add',3,'p_add','parser_rules.py',308),
  ('add -> derivate SEMICOLON','add',2,'p_add','parser_rules.py',309),
  ('derivate -> idDots ARROW expr','derivate',3,'p_derivate','parser_rules.py',316),
  ('expr -> expr LT expr','expr',3,'p_expression_cmp','parser_rules.py',324),
  ('expr -> expr LTEQ expr','expr',3,'p_expression_cmp','parser_rules.py',325),
  ('expr -> expr EQ expr','expr',3,'p_expression_cmp','parser_rules.py',326),
  ('expr -> ID ASSIGN expr','expr',3,'p_expression_assign','parser_rules.py',339),
]
