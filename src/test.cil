TYPES -->

	type Object {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type IO {
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type String {
		method length:String_length
		method concat:String_concat
		method substr:String_substr
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Int {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Bool {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type A {
		method message:A_message
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type B {
		method message:B_message
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Main {
		method main:Main_main
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

END <--

DATA -->

	data_0 "A\n"
	data_1 "B\n"

END <--

CODE -->

	function IO_out_string {
		PARAM self
		PARAM str
		PRINT str
		RETURN self
	}

	function IO_out_int {
		PARAM self
		PARAM int
		LOCAL local_0
		ALLOC local_0 String
		TOSTR local_0 int
		PRINT local_0
		RETURN self
	}

	function IO_in_string {
		PARAM self
		LOCAL local_1
		ALLOC local_1 String
		READ local_1
		RETURN local_1
	}

	function IO_in_int {
		PARAM self
		LOCAL local_2
		ALLOC local_2 Int
		RINT local_2
		RETURN local_2
	}

	function Object_type_name {
		PARAM self
		LOCAL local_3
		ALLOC local_3 String
		TYPE local_3 self
		RETURN local_3
	}

	function Object_copy {
		PARAM self
		LOCAL local_4
		COPY local_4 self
		RETURN local_4
	}

	function String_length {
		PARAM self
		LOCAL local_5
		ALLOC local_5 Int
		STRLEN local_5 self
		RETURN local_5
	}

	function String_concat {
		PARAM self
		PARAM str
		LOCAL local_6
		ALLOC local_6 String
		STRCAT local_6 self str
		RETURN local_6
	}

	function String_substr {
		PARAM self
		PARAM from
		PARAM to
		LOCAL local_7
		ALLOC local_7 String
		STRSUB local_7 self from to
		RETURN local_7
	}

	function Object_abort {
		PARAM self
		EXIT
	}

	function A_message {
		PARAM self
		LOCAL local_8
		ALLOC local_8 String
		LDATA local_8 data_0
		RETURN local_8
	}

	function B_message {
		PARAM self
		LOCAL local_9
		ALLOC local_9 String
		LDATA local_9 data_1
		RETURN local_9
	}

	function Main_main {
		PARAM self
		LOCAL local_10
		LOCAL local_11
		LOCAL local_12
		LOCAL local_13
		LOCAL local_14
		LOCAL local_15
		ALLOC local_10 IO
		ALLOC local_11 B
		ARG local_11
		ALLOC local_13 String
		TYPE local_13 local_11
		CALL local_12 local_13 message
		ARG self
		ARG local_12
		ALLOC local_15 String
		TYPE local_15 local_10
		CALL local_14 local_15 out_string
		RETURN local_14
	}

	function main {
		LOCAL local_16
		ALLOC local_16 Main
		ARG local_16
		ALLOC local_18 String
		SETSTR local_18 Main
		CALL local_17 local_18 main
	}

END <--