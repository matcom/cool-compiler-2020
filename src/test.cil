TYPES -->

	type Object {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type IO {
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type String {
		method length:String_length
		method concat:String_concat
		method substr:String_substr
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Int {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Bool {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Main {
		attribute out:Main
		attribute testee:Main
		attribute divisor:Main
		attribute stop:Main
		attribute m:Main
		method main:Main_main
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

END <--

DATA -->

	data_0 "2 is trivially prime.\n"
	data_1 " is prime.\n"
	data_2 "halt"
	data_3 "continue"
	data_4 "2"
	data_5 "500"
	data_6 "1"
	data_7 "2"
	data_8 "0"
	data_9 "1"
	data_10 "0"
	data_11 "0"

END <--

CODE -->

	function IO_out_string {
		PARAM self
		PARAM str
		PRINT str
		RETURN self
	}

	function IO_out_int {
		PARAM self
		PARAM int
		LOCAL local_0
		ALLOC local_0 String
		TOSTR local_0 int
		PRINT local_0
		RETURN self
	}

	function IO_in_string {
		PARAM self
		LOCAL local_1
		ALLOC local_1 String
		READ local_1
		RETURN local_1
	}

	function IO_in_int {
		PARAM self
		LOCAL local_2
		ALLOC local_2 Int
		RINT local_2
		RETURN local_2
	}

	function Object_type_name {
		PARAM self
		LOCAL local_3
		ALLOC local_3 String
		TYPE local_3 self
		RETURN local_3
	}

	function Object_copy {
		PARAM self
		LOCAL local_4
		COPY local_4 self
		RETURN local_4
	}

	function String_length {
		PARAM self
		LOCAL local_5
		ALLOC local_5 Int
		STRLEN local_5 self
		RETURN local_5
	}

	function String_concat {
		PARAM self
		PARAM str
		LOCAL local_6
		ALLOC local_6 String
		STRCAT local_6 self str
		RETURN local_6
	}

	function String_substr {
		PARAM self
		PARAM from
		PARAM to
		LOCAL local_7
		ALLOC local_7 String
		STRSUB local_7 self from to
		RETURN local_7
	}

	function Object_abort {
		PARAM self
		LOCAL local_8
		ALLOC local_8 String
		TYPE local_8 self
		EXIT
	}

	function Main_main {
		PARAM self
		LOCAL local_9
		ALLOC local_9 Int
		LDATAI local_9 data_11
		RETURN local_9
	}

	function main {
		LOCAL local_10
		ALLOC local_10 Main
		ALLOC local_13 IO
		ALLOC local_14 String
		LDATA local_14 data_0
		ARG self
		ARG local_14
		ALLOC local_16 String
		TYPE local_16 local_13
		CALL local_15 local_16 out_string
		ALLOC local_17 Int
		LDATAI local_17 data_7
		SATTR local_10 out local_17
		ALLOC local_19 Int
		GATTR local_19 local_10 out
		SATTR local_10 testee local_19
		ALLOC local_20 Int
		SATTR local_10 divisor local_20
		ALLOC local_22 Int
		LDATAI local_22 data_5
		SATTR local_10 stop local_22
		ALLOC local_62 void
		LABEL label_12
		ALLOC local_24 Bool
		MOV local_24 1
		IF local_24 GOTO label_13
		GOTO label_14
		LABEL label_13
		ALLOC local_25 Int
		GATTR local_25 local_10 testee
		ALLOC local_26 Int
		LDATAI local_26 data_9
		ADD local_25 local_25 local_26
		SATTR local_10 testee local_25
		SATTR local_10 divisor local_17
		ALLOC local_41 void
		LABEL label_5
		ALLOC local_30 Bool
		ALLOC local_27 Int
		GATTR local_27 local_10 testee
		ALLOC local_28 Int
		GATTR local_28 local_10 divisor
		ALLOC local_29 Int
		GATTR local_29 local_10 divisor
		Mul local_28 local_28 local_29
		L local_30 local_27 local_28
		IF local_30 GOTO label_3
		ALLOC local_37 Bool
		ALLOC local_32 Int
		GATTR local_32 local_10 testee
		ALLOC local_33 Int
		GATTR local_33 local_10 divisor
		ALLOC local_34 Int
		GATTR local_34 local_10 testee
		ALLOC local_35 Int
		GATTR local_35 local_10 divisor
		Div local_34 local_34 local_35
		Mul local_33 local_33 local_34
		SUB local_32 local_32 local_33
		ALLOC local_36 Int
		LDATAI local_36 data_11
		E local_37 local_32 local_36
		IF local_37 GOTO label_1
		ALLOC local_39 Bool
		MOV local_39 1
		MOV local_37 local_39
		GOTO label_2
		LABEL label_1
		ALLOC local_38 Bool
		MOV local_38 0
		MOV local_37 local_38
		LABEL label_2
		MOV local_30 local_37
		GOTO label_4
		LABEL label_3
		ALLOC local_31 Bool
		MOV local_31 0
		MOV local_30 local_31
		LABEL label_4
		IF local_30 GOTO label_6
		GOTO label_7
		LABEL label_6
		ALLOC local_40 Int
		GATTR local_40 local_10 divisor
		ADD local_40 local_40 local_26
		SATTR local_10 divisor local_40
		GOTO label_5
		LABEL label_7
		ALLOC local_45 Bool
		ALLOC local_42 Int
		GATTR local_42 local_10 testee
		ALLOC local_43 Int
		GATTR local_43 local_10 divisor
		ALLOC local_44 Int
		GATTR local_44 local_10 divisor
		Mul local_43 local_43 local_44
		L local_45 local_42 local_43
		IF local_45 GOTO label_8
		MOV local_45 local_36
		GOTO label_9
		LABEL label_8
		ALLOC local_46 Int
		GATTR local_46 local_10 testee
		SATTR local_10 out local_46
		ALLOC local_47 IO
		ALLOC local_48 Int
		GATTR local_48 local_10 out
		ARG self
		ARG local_48
		ALLOC local_50 String
		TYPE local_50 local_47
		CALL local_49 local_50 out_int
		ALLOC local_51 IO
		ALLOC local_52 String
		LDATA local_52 data_1
		ARG self
		ARG local_52
		ALLOC local_54 String
		TYPE local_54 local_51
		CALL local_53 local_54 out_string
		MOV local_45 local_53
		LABEL label_9
		ALLOC local_57 Bool
		ALLOC local_55 Int
		GATTR local_55 local_10 stop
		ALLOC local_56 Int
		GATTR local_56 local_10 testee
		LE local_57 local_55 local_56
		IF local_57 GOTO label_10
		ALLOC local_61 String
		LDATA local_61 data_3
		MOV local_57 local_61
		GOTO label_11
		LABEL label_10
		ALLOC local_58 String
		LDATA local_58 data_2
		ARG local_58
		ALLOC local_60 String
		TYPE local_60 local_58
		CALL local_59 local_60 abort
		MOV local_57 local_59
		LABEL label_11
		GOTO label_12
		LABEL label_14
		SATTR local_10 m local_62
		ARG local_10
		ALLOC local_63 String
		SETSTR local_63 Main
		CALL local_11 local_63 main
	}

END <--