TYPES -->

	type Object {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type IO {
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type String {
		method length:String_length
		method concat:String_concat
		method substr:String_substr
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Int {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Bool {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Main {
		method main:Main_main
		method fib:Main_fib
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

END <--

DATA -->

	data_0 "Enter n to find nth fibonacci number!\n"
	data_1 "\n"

END <--

CODE -->

	function IO_out_string {
		PARAM self
		PARAM str
		PRINT str
		RETURN self
	}

	function IO_out_int {
		PARAM self
		PARAM int
		LOCAL local_0
		ALLOC local_0 String
		TOSTR local_0 int
		PRINT local_0
		RETURN self
	}

	function IO_in_string {
		PARAM self
		LOCAL local_1
		ALLOC local_1 String
		READ local_1
		RETURN local_1
	}

	function IO_in_int {
		PARAM self
		LOCAL local_2
		ALLOC local_2 Int
		RINT local_2
		RETURN local_2
	}

	function Object_type_name {
		PARAM self
		LOCAL local_3
		ALLOC local_3 String
		TYPE local_3 self
		RETURN local_3
	}

	function Object_copy {
		PARAM self
		LOCAL local_4
		COPY local_4 self
		RETURN local_4
	}

	function String_length {
		PARAM self
		LOCAL local_5
		ALLOC local_5 Int
		STRLEN local_5 self
		RETURN local_5
	}

	function String_concat {
		PARAM self
		PARAM str
		LOCAL local_6
		ALLOC local_6 String
		STRCAT local_6 self str
		RETURN local_6
	}

	function String_substr {
		PARAM self
		PARAM from
		PARAM to
		LOCAL local_7
		ALLOC local_7 String
		STRSUB local_7 self from to
		RETURN local_7
	}

	function Object_abort {
		PARAM self
		EXIT
	}

	function Main_main {
		PARAM self
		LOCAL local_8
		LOCAL local_9
		LOCAL local_10
		LOCAL local_11
		LOCAL local_12
		LOCAL local_13
		LOCAL local_14
		LOCAL local_15
		LOCAL local_16
		LOCAL local_17
		LOCAL local_18
		LOCAL local_19
		LOCAL local_20
		LOCAL local_21
		LOCAL local_22
		LOCAL local_23
		LOCAL local_24
		ALLOC local_8 IO
		ALLOC local_9 String
		LDATA local_9 data_0
		ARG self
		ARG local_9
		ALLOC local_11 String
		TYPE local_11 local_8
		CALL local_10 local_11 out_string
		ALLOC local_12 IO
		ALLOC local_13 Main
		ALLOC local_14 IO
		ARG self
		ALLOC local_16 String
		TYPE local_16 local_14
		CALL local_15 local_16 in_int
		ARG self
		ARG local_15
		ALLOC local_18 String
		TYPE local_18 local_13
		CALL local_17 local_18 fib
		ARG self
		ARG local_17
		ALLOC local_20 String
		TYPE local_20 local_12
		CALL local_19 local_20 out_int
		ALLOC local_21 IO
		ALLOC local_22 String
		LDATA local_22 data_1
		ARG self
		ARG local_22
		ALLOC local_24 String
		TYPE local_24 local_21
		CALL local_23 local_24 out_string
		RETURN local_23
	}

	function Main_fib {
		PARAM self
		PARAM i
		LOCAL local_25
		LOCAL local_26
		LOCAL local_27
		LOCAL local_28
		LOCAL local_29
		LOCAL local_30
		LOCAL local_31
		LOCAL local_32
		LOCAL local_33
		LOCAL local_34
		LOCAL local_35
		LOCAL local_36
		LOCAL local_37
		ALLOC local_25 Int
		MOV local_25 1
		ALLOC local_26 Int
		MOV local_26 local_25
		ALLOC local_27 Int
		MOV local_27 0
		ALLOC local_28 Int
		MOV local_28 local_27
		ALLOC local_29 Int
		MOV local_29 0
		ALLOC local_30 Int
		MOV local_30 local_29
		ALLOC local_37 void
		LABEL label_1
		ALLOC local_33 Bool
		ALLOC local_32 Bool
		ALLOC local_31 Int
		MOV local_31 0
		E local_32 i local_31
		NOT local_33 local_32
		IF local_33 GOTO label_2
		GOTO label_3
		LABEL label_2
		ALLOC local_34 Int
		ADD local_34 local_26 local_28
		COPY local_30 local_34
		ALLOC local_35 Int
		MOV local_35 1
		ALLOC local_36 Int
		SUB local_36 i local_35
		COPY i local_36
		COPY local_28 local_26
		COPY local_26 local_30
		GOTO label_1
		LABEL label_3
		RETURN local_30
	}

	function main {
		LOCAL local_38
		ALLOC local_38 Main
		ARG local_38
		ALLOC local_40 String
		SETSTR local_40 Main
		CALL local_39 local_40 main
	}

END <--