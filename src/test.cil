TYPES -->

	type Object {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type IO {
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type String {
		method length:String_length
		method concat:String_concat
		method substr:String_substr
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Int {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Bool {
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type A {
		attribute io:A
		method out_a:A_out_a
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type B {
		attribute io:A
		method out_b:B_out_b
		method out_a:A_out_a
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type C {
		method out_c:C_out_c
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type D {
		method out_d:D_out_d
		method out_c:C_out_c
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

	type Main {
		method main:Main_main
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method abort:Object_abort
		method type_name:Object_type_name
		method copy:Object_copy
	}

END <--

DATA -->

	data_0 "A: Hello world\n"
	data_1 "B: Hello world\n"
	data_2 "C: Hello world\n"
	data_3 "D: Hello world\n"
	data_4 "Done.\n"

END <--

CODE -->

	function IO_out_string {
		PARAM self
		PARAM str
		PRINT str
		RETURN self
	}

	function IO_out_int {
		PARAM self
		PARAM int
		LOCAL local_0
		ALLOC local_0 String
		TOSTR local_0 int
		PRINT local_0
		RETURN self
	}

	function IO_in_string {
		PARAM self
		LOCAL local_1
		ALLOC local_1 String
		READ local_1
		RETURN local_1
	}

	function IO_in_int {
		PARAM self
		LOCAL local_2
		ALLOC local_2 Int
		RINT local_2
		RETURN local_2
	}

	function Object_type_name {
		PARAM self
		LOCAL local_3
		ALLOC local_3 String
		TYPE local_3 self
		RETURN local_3
	}

	function Object_copy {
		PARAM self
		LOCAL local_4
		COPY local_4 self
		RETURN local_4
	}

	function String_length {
		PARAM self
		LOCAL local_5
		ALLOC local_5 Int
		STRLEN local_5 self
		RETURN local_5
	}

	function String_concat {
		PARAM self
		PARAM str
		LOCAL local_6
		ALLOC local_6 String
		STRCAT local_6 self str
		RETURN local_6
	}

	function String_substr {
		PARAM self
		PARAM from
		PARAM to
		LOCAL local_7
		ALLOC local_7 String
		STRSUB local_7 self from to
		RETURN local_7
	}

	function Object_abort {
		PARAM self
		EXIT
	}

	function A_out_a {
		PARAM self
		LOCAL local_8
		LOCAL local_9
		LOCAL local_10
		LOCAL local_11
		ALLOC local_8 IO
		GATTR local_8 self io
		ALLOC local_9 String
		LDATA local_9 data_0
		ARG local_8
		ARG local_9
		ALLOC local_11 String
		TYPE local_11 local_8
		CALL local_10 local_11 out_string
		RETURN local_10
	}

	function B_out_b {
		PARAM self
		LOCAL local_12
		LOCAL local_13
		LOCAL local_14
		LOCAL local_15
		ALLOC local_12 IO
		GATTR local_12 self io
		ALLOC local_13 String
		LDATA local_13 data_1
		ARG local_12
		ARG local_13
		ALLOC local_15 String
		TYPE local_15 local_12
		CALL local_14 local_15 out_string
		RETURN local_14
	}

	function C_out_c {
		PARAM self
		LOCAL local_16
		LOCAL local_17
		LOCAL local_18
		LOCAL local_19
		ALLOC local_16 IO
		ALLOC local_17 String
		LDATA local_17 data_2
		ARG self
		ARG local_17
		ALLOC local_19 String
		TYPE local_19 local_16
		CALL local_18 local_19 out_string
		RETURN local_18
	}

	function D_out_d {
		PARAM self
		LOCAL local_20
		LOCAL local_21
		LOCAL local_22
		LOCAL local_23
		ALLOC local_20 IO
		ALLOC local_21 String
		LDATA local_21 data_3
		ARG self
		ARG local_21
		ALLOC local_23 String
		TYPE local_23 local_20
		CALL local_22 local_23 out_string
		RETURN local_22
	}

	function Main_main {
		PARAM self
		LOCAL local_24
		LOCAL local_25
		LOCAL local_26
		LOCAL local_27
		LOCAL local_28
		LOCAL local_29
		LOCAL local_30
		LOCAL local_31
		LOCAL local_32
		LOCAL local_33
		LOCAL local_34
		LOCAL local_35
		LOCAL local_36
		LOCAL local_37
		LOCAL local_38
		LOCAL local_39
		LOCAL local_40
		LOCAL local_41
		ALLOC local_24 A
		ALLOC local_25 IO
		SATTR local_24 io local_25
		ARG local_24
		ALLOC local_27 String
		TYPE local_27 local_24
		CALL local_26 local_27 out_a
		ALLOC local_28 B
		ALLOC local_29 IO
		SATTR local_28 io local_29
		ARG local_28
		ALLOC local_31 String
		TYPE local_31 local_28
		CALL local_30 local_31 out_b
		ALLOC local_32 C
		ARG local_32
		ALLOC local_34 String
		TYPE local_34 local_32
		CALL local_33 local_34 out_c
		ALLOC local_35 D
		ARG local_35
		ALLOC local_37 String
		TYPE local_37 local_35
		CALL local_36 local_37 out_d
		ALLOC local_38 IO
		ALLOC local_39 String
		LDATA local_39 data_4
		ARG self
		ARG local_39
		ALLOC local_41 String
		TYPE local_41 local_38
		CALL local_40 local_41 out_string
		RETURN local_40
	}

	function main {
		LOCAL local_42
		ALLOC local_42 Main
		ARG local_42
		ALLOC local_44 String
		SETSTR local_44 Main
		CALL local_43 local_44 main
	}

END <--